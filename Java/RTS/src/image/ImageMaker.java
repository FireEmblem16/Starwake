package image;

import grid.Location;
import image.container.ImageContainer;
import image.container.MappedBufferedImage;
import item.Item;
import item.Type;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Hashtable;
import xml.Parser;
import xml.Tag;

/**
 * Makes an image or set of images based on an xml specification.
 */
public class ImageMaker
{
	/**
	 * Constructs and initializes this image maker.
	 */
	public ImageMaker(Parser parser)
	{
		// We will store data here and then generate the images
		ImageContainer img = new ImageContainer();
		
		// Define this to avoid null pointers
		generated_images = new ArrayList<MappedBufferedImage>();
		
		// Add anything we find to the map
		while(parser.HasNextTag())
		{
			Tag tag = parser.GetNext();
			
			if(tag.GetName().equals("/image"))
				break;
			else if(tag.IsDescriptor())
			{
				if(tag.GetName().equals("name"))
					img.name = (String)tag.GetValue();
				else if(tag.GetName().equals("name-scheme"))
					img.namescheme = (String)tag.GetValue();
				else if(tag.GetName().equals("path"))
					img.path = (String)tag.GetValue();
				else if(tag.GetName().equals("width"))
					img.width = (Integer)tag.GetValue();
				else if(tag.GetName().equals("height"))
					img.height = (Integer)tag.GetValue();
				else if(tag.GetName().equals("u"))
					img.u = (Integer)tag.GetValue();
				else if(tag.GetName().equals("v"))
					img.v = (Integer)tag.GetValue();
				else if(tag.GetName().equals("padding-left"))
					img.leftpadding = (Integer)tag.GetValue();
				else if(tag.GetName().equals("padding-top"))
					img.toppadding = (Integer)tag.GetValue();
				else if(tag.GetName().equals("padding-right"))
					img.rightpadding = (Integer)tag.GetValue();
				else if(tag.GetName().equals("padding-bottom"))
					img.bottompadding = (Integer)tag.GetValue();
				else if(tag.GetName().equals("rotate"))
					img.rotate = (Integer)tag.GetValue();
				else if(tag.GetName().equals("flip"))
					img.flip = (String)tag.GetValue();
				else if(tag.GetName().equals("filter"))
					img.filter = (ArrayList<String>)tag.GetValue();
			}
		}
		
		generated_images = img.Generate();
		return;
	}
	
	/**
	 * Adds all images generated by this image maker to [images].
	 * Returns the next generic image name which may be the same as the value passed.
	 * If [nextgeneric] is null then it will be redefined to 1.
	 */
	public Integer AddImages(Hashtable<String,MappedBufferedImage> images, Integer nextgeneric)
	{
		if(nextgeneric == null)
			nextgeneric = new Integer(1);
		
		for(int i = 0;i < generated_images.size();i++)
			if(generated_images.get(i).GetName() == null || generated_images.get(i).GetName().equals(""))
			{
				generated_images.get(i).SetName(nextgeneric.toString());
				images.put(nextgeneric.toString(),generated_images.get(i));
				nextgeneric++;
			}
			else
				images.put(generated_images.get(i).GetName(),generated_images.get(i));
		
		return nextgeneric;
	}
	
	protected ArrayList<MappedBufferedImage> generated_images;
}
