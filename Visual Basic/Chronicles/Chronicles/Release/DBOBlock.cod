; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\Program Files\The Game Creators\Dark GDK\Include\DBO Format\DBOBlock.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?g_bWriteAsText@@3_NA				; g_bWriteAsText
PUBLIC	?g_pBlockEnd@@3PADA				; g_pBlockEnd
PUBLIC	?g_dwVersion@@3KA				; g_dwVersion
_BSS	SEGMENT
?g_bWriteAsText@@3_NA DB 01H DUP (?)			; g_bWriteAsText
	ALIGN	4

?g_pBlockEnd@@3PADA DD 01H DUP (?)			; g_pBlockEnd
?g_dwVersion@@3KA DD 01H DUP (?)			; g_dwVersion
_BSS	ENDS
PUBLIC	?WriteCR@@YA_NPAPADPAK@Z			; WriteCR
; Function compile flags: /Odtp /ZI
; File c:\program files\the game creators\dark gdk\include\dbo format\dboblock.cpp
;	COMDAT ?WriteCR@@YA_NPAPADPAK@Z
_TEXT	SEGMENT
_ppBlock$ = 8						; size = 4
_pdwSize$ = 12						; size = 4
?WriteCR@@YA_NPAPADPAK@Z PROC				; WriteCR, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 29   : 	if ( g_bWriteAsText )

  00009	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_bWriteAsText@@3_NA ; g_bWriteAsText
  00010	85 c0		 test	 eax, eax
  00012	74 3d		 je	 SHORT $LN2@WriteCR

; 30   : 	{
; 31   : 		if ( ppBlock )

  00014	83 7d 08 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00018	74 2a		 je	 SHORT $LN1@WriteCR

; 32   : 		{
; 33   : 			*(BYTE*)*ppBlock = 13;

  0001a	8b 45 08	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	c6 01 0d	 mov	 BYTE PTR [ecx], 13	; 0000000dH

; 34   : 			*ppBlock += 1;

  00022	8b 45 08	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	83 c1 01	 add	 ecx, 1
  0002a	8b 55 08	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0002d	89 0a		 mov	 DWORD PTR [edx], ecx

; 35   : 			*(BYTE*)*ppBlock = 10;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	c6 01 0a	 mov	 BYTE PTR [ecx], 10	; 0000000aH

; 36   : 			*ppBlock += 1;

  00037	8b 45 08	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	83 c1 01	 add	 ecx, 1
  0003f	8b 55 08	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00042	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteCR:

; 37   : 		}
; 38   : 		*pdwSize += 2;

  00044	8b 45 0c	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	83 c1 02	 add	 ecx, 2
  0004c	8b 55 0c	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  0004f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@WriteCR:

; 39   : 	}
; 40   : 	return true;

  00051	b0 01		 mov	 al, 1

; 41   : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?WriteCR@@YA_NPAPADPAK@Z ENDP				; WriteCR
_TEXT	ENDS
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
PUBLIC	?WriteComma@@YA_NPAPADPAK@Z			; WriteComma
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_strcpy:PROC
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?WriteComma@@YA_NPAPADPAK@Z
_TEXT	SEGMENT
_dwLen$ = -8						; size = 4
_pCommaStr$ = -4					; size = 2
_ppBlock$ = 8						; size = 4
_pdwSize$ = 12						; size = 4
?WriteComma@@YA_NPAPADPAK@Z PROC			; WriteComma, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 45   : 	char pCommaStr[2];
; 46   : 	strcpy(pCommaStr,",");

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_01IHBHIGKO@?0?$AA@
  0000e	8d 45 fc	 lea	 eax, DWORD PTR _pCommaStr$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 _strcpy
  00017	83 c4 08	 add	 esp, 8

; 47   : 	DWORD dwLen = strlen(pCommaStr);

  0001a	8d 45 fc	 lea	 eax, DWORD PTR _pCommaStr$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _strlen
  00023	83 c4 04	 add	 esp, 4
  00026	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 48   : 	if ( ppBlock )

  00029	83 7d 08 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0002d	74 23		 je	 SHORT $LN1@WriteComma

; 49   : 	{
; 50   : 		memcpy ( *ppBlock, pCommaStr, dwLen );

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  00032	50		 push	 eax
  00033	8d 4d fc	 lea	 ecx, DWORD PTR _pCommaStr$[ebp]
  00036	51		 push	 ecx
  00037	8b 55 08	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0003a	8b 02		 mov	 eax, DWORD PTR [edx]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _memcpy
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 		*ppBlock += dwLen;

  00045	8b 45 08	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  0004d	8b 55 08	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00050	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteComma:

; 52   : 	}
; 53   : 	*pdwSize += dwLen;

  00052	8b 45 0c	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  0005a	8b 55 0c	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  0005d	89 0a		 mov	 DWORD PTR [edx], ecx

; 54   : 	return true;

  0005f	b0 01		 mov	 al, 1

; 55   : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?WriteComma@@YA_NPAPADPAK@Z ENDP			; WriteComma
_TEXT	ENDS
PUBLIC	?WriteSpeechmark@@YA_NPAPADPAK@Z		; WriteSpeechmark
; Function compile flags: /Odtp /ZI
;	COMDAT ?WriteSpeechmark@@YA_NPAPADPAK@Z
_TEXT	SEGMENT
_dwLen$ = -8						; size = 4
_pMarkStr$ = -4						; size = 2
_ppBlock$ = 8						; size = 4
_pdwSize$ = 12						; size = 4
?WriteSpeechmark@@YA_NPAPADPAK@Z PROC			; WriteSpeechmark, COMDAT

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 59   : 	char pMarkStr[2];
; 60   : 	pMarkStr[0]='"';

  00009	c6 45 fc 22	 mov	 BYTE PTR _pMarkStr$[ebp], 34 ; 00000022H

; 61   : 	pMarkStr[1]=0;

  0000d	c6 45 fd 00	 mov	 BYTE PTR _pMarkStr$[ebp+1], 0

; 62   : 	DWORD dwLen = strlen(pMarkStr);

  00011	8d 45 fc	 lea	 eax, DWORD PTR _pMarkStr$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _strlen
  0001a	83 c4 04	 add	 esp, 4
  0001d	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 63   : 	if ( ppBlock )

  00020	83 7d 08 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00024	74 23		 je	 SHORT $LN1@WriteSpeec

; 64   : 	{
; 65   : 		memcpy ( *ppBlock, pMarkStr, dwLen );

  00026	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  00029	50		 push	 eax
  0002a	8d 4d fc	 lea	 ecx, DWORD PTR _pMarkStr$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 08	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00031	8b 02		 mov	 eax, DWORD PTR [edx]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _memcpy
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 66   : 		*ppBlock += dwLen;

  0003c	8b 45 08	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0003f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00041	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00044	8b 55 08	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00047	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteSpeec:

; 67   : 	}
; 68   : 	*pdwSize += dwLen;

  00049	8b 45 0c	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00051	8b 55 0c	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  00054	89 0a		 mov	 DWORD PTR [edx], ecx

; 69   : 	return true;

  00056	b0 01		 mov	 al, 1

; 70   : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?WriteSpeechmark@@YA_NPAPADPAK@Z ENDP			; WriteSpeechmark
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?WriteBYTE@@YA_NEPAPADPAK@Z			; WriteBYTE
EXTRN	__itoa:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?WriteBYTE@@YA_NEPAPADPAK@Z
_TEXT	SEGMENT
_pNumberStr$56818 = -264				; size = 256
_dwLen$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_bNumber$ = 8						; size = 1
_ppBlock$ = 12						; size = 4
_pdwSize$ = 16						; size = 4
?WriteBYTE@@YA_NEPAPADPAK@Z PROC			; WriteBYTE, COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 74   : 	DWORD dwLen = 1;

  00016	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _dwLen$[ebp], 1

; 75   : 	if ( g_bWriteAsText )

  0001d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_bWriteAsText@@3_NA ; g_bWriteAsText
  00024	85 c0		 test	 eax, eax
  00026	74 73		 je	 SHORT $LN4@WriteBYTE

; 76   : 	{
; 77   : 		// make text value
; 78   : 		char pNumberStr[256];
; 79   : 		_itoa(bNumber, pNumberStr, 10);

  00028	6a 0a		 push	 10			; 0000000aH
  0002a	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56818[ebp]
  00030	50		 push	 eax
  00031	0f b6 4d 08	 movzx	 ecx, BYTE PTR _bNumber$[ebp]
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 __itoa
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 80   : 		dwLen = strlen(pNumberStr);

  0003e	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56818[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _strlen
  0004a	83 c4 04	 add	 esp, 4
  0004d	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 81   : 		if ( ppBlock )

  00050	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00054	74 26		 je	 SHORT $LN3@WriteBYTE

; 82   : 		{
; 83   : 			memcpy ( *ppBlock, pNumberStr, dwLen );

  00056	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  00059	50		 push	 eax
  0005a	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _pNumberStr$56818[ebp]
  00060	51		 push	 ecx
  00061	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00064	8b 02		 mov	 eax, DWORD PTR [edx]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _memcpy
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 84   : 			*ppBlock += dwLen;

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00077	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0007a	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@WriteBYTE:

; 85   : 		}
; 86   : 		*pdwSize += dwLen;

  0007c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00084	8b 55 10	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  00087	89 0a		 mov	 DWORD PTR [edx], ecx

; 87   : 
; 88   : 		// make text comma
; 89   : 		WriteComma ( ppBlock, pdwSize );

  00089	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ?WriteComma@@YA_NPAPADPAK@Z ; WriteComma
  00096	83 c4 08	 add	 esp, 8

; 90   : 	}
; 91   : 	else

  00099	eb 2a		 jmp	 SHORT $LN2@WriteBYTE
$LN4@WriteBYTE:

; 92   : 	{
; 93   : 		if ( ppBlock )

  0009b	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0009f	74 17		 je	 SHORT $LN1@WriteBYTE

; 94   : 		{
; 95   : 			*(BYTE*)*ppBlock = bNumber;

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	8a 55 08	 mov	 dl, BYTE PTR _bNumber$[ebp]
  000a9	88 11		 mov	 BYTE PTR [ecx], dl

; 96   : 			*ppBlock += dwLen;

  000ab	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b0	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000b3	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000b6	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteBYTE:

; 97   : 		}
; 98   : 		*pdwSize += dwLen;

  000b8	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bd	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000c0	8b 55 10	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  000c3	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@WriteBYTE:

; 99   : 	}
; 100  : 	return true;

  000c5	b0 01		 mov	 al, 1

; 101  : }

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cd	33 cd		 xor	 ecx, ebp
  000cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
?WriteBYTE@@YA_NEPAPADPAK@Z ENDP			; WriteBYTE
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?WriteDWORD@@YA_NKPAPADPAK@Z			; WriteDWORD
; Function compile flags: /Odtp /ZI
;	COMDAT ?WriteDWORD@@YA_NKPAPADPAK@Z
_TEXT	SEGMENT
_pNumberStr$56830 = -264				; size = 256
_dwLen$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dwNumber$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
_pdwSize$ = 16						; size = 4
?WriteDWORD@@YA_NKPAPADPAK@Z PROC			; WriteDWORD, COMDAT

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 105  : 	DWORD dwLen = 4;

  00016	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _dwLen$[ebp], 4

; 106  : 	if ( g_bWriteAsText )

  0001d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_bWriteAsText@@3_NA ; g_bWriteAsText
  00024	85 c0		 test	 eax, eax
  00026	74 72		 je	 SHORT $LN4@WriteDWORD

; 107  : 	{
; 108  : 		// make text value
; 109  : 		char pNumberStr[256];
; 110  : 		_itoa(dwNumber, pNumberStr, 10);

  00028	6a 0a		 push	 10			; 0000000aH
  0002a	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56830[ebp]
  00030	50		 push	 eax
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _dwNumber$[ebp]
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 __itoa
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 111  : 		dwLen = strlen(pNumberStr);

  0003d	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56830[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _strlen
  00049	83 c4 04	 add	 esp, 4
  0004c	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 112  : 		if ( ppBlock )

  0004f	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00053	74 26		 je	 SHORT $LN3@WriteDWORD

; 113  : 		{
; 114  : 			memcpy ( *ppBlock, pNumberStr, dwLen );

  00055	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  00058	50		 push	 eax
  00059	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _pNumberStr$56830[ebp]
  0005f	51		 push	 ecx
  00060	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00063	8b 02		 mov	 eax, DWORD PTR [edx]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _memcpy
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 115  : 			*ppBlock += dwLen;

  0006e	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00076	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00079	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@WriteDWORD:

; 116  : 		}
; 117  : 		*pdwSize += dwLen;

  0007b	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00083	8b 55 10	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  00086	89 0a		 mov	 DWORD PTR [edx], ecx

; 118  : 
; 119  : 		// make text comma
; 120  : 		WriteComma ( ppBlock, pdwSize );

  00088	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ?WriteComma@@YA_NPAPADPAK@Z ; WriteComma
  00095	83 c4 08	 add	 esp, 8

; 121  : 	}
; 122  : 	else

  00098	eb 2a		 jmp	 SHORT $LN2@WriteDWORD
$LN4@WriteDWORD:

; 123  : 	{
; 124  : 		if ( ppBlock )

  0009a	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0009e	74 17		 je	 SHORT $LN1@WriteDWORD

; 125  : 		{
; 126  : 			*(DWORD*)*ppBlock = dwNumber;

  000a0	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a5	8b 55 08	 mov	 edx, DWORD PTR _dwNumber$[ebp]
  000a8	89 11		 mov	 DWORD PTR [ecx], edx

; 127  : 			*ppBlock += dwLen;

  000aa	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000b2	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000b5	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteDWORD:

; 128  : 		}
; 129  : 		*pdwSize += dwLen;

  000b7	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bc	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000bf	8b 55 10	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  000c2	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@WriteDWORD:

; 130  : 	}
; 131  : 	return true;

  000c4	b0 01		 mov	 al, 1

; 132  : }

  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cc	33 cd		 xor	 ecx, ebp
  000ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
?WriteDWORD@@YA_NKPAPADPAK@Z ENDP			; WriteDWORD
_TEXT	ENDS
PUBLIC	?Write2BYTE@@YA_NKEPAPADPAK@Z			; Write2BYTE
; Function compile flags: /Odtp /ZI
;	COMDAT ?Write2BYTE@@YA_NKEPAPADPAK@Z
_TEXT	SEGMENT
_dwNumber1$ = 8						; size = 4
_bNumber2$ = 12						; size = 1
_ppBlock$ = 16						; size = 4
_pdwSize$ = 20						; size = 4
?Write2BYTE@@YA_NKEPAPADPAK@Z PROC			; Write2BYTE, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 136  : 	WriteDWORD ( dwNumber1, ppBlock, pdwSize );

  00009	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR _dwNumber1$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 137  : 	WriteBYTE ( bNumber2, ppBlock, pdwSize );

  0001d	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00024	51		 push	 ecx
  00025	0f b6 55 0c	 movzx	 edx, BYTE PTR _bNumber2$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 138  : 	return true;

  00032	b0 01		 mov	 al, 1

; 139  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?Write2BYTE@@YA_NKEPAPADPAK@Z ENDP			; Write2BYTE
_TEXT	ENDS
PUBLIC	?Write2DWORD@@YA_NKKPAPADPAK@Z			; Write2DWORD
; Function compile flags: /Odtp /ZI
;	COMDAT ?Write2DWORD@@YA_NKKPAPADPAK@Z
_TEXT	SEGMENT
_dwNumber1$ = 8						; size = 4
_dwNumber2$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
_pdwSize$ = 20						; size = 4
?Write2DWORD@@YA_NKKPAPADPAK@Z PROC			; Write2DWORD, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 143  : 	WriteDWORD ( dwNumber1, ppBlock, pdwSize );

  00009	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR _dwNumber1$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 144  : 	WriteDWORD ( dwNumber2, ppBlock, pdwSize );

  0001d	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 0c	 mov	 edx, DWORD PTR _dwNumber2$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 145  : 	return true;

  00031	b0 01		 mov	 al, 1

; 146  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?Write2DWORD@@YA_NKKPAPADPAK@Z ENDP			; Write2DWORD
_TEXT	ENDS
PUBLIC	?WriteCODE@@YA_NKKPAPADPAK@Z			; WriteCODE
; Function compile flags: /Odtp /ZI
;	COMDAT ?WriteCODE@@YA_NKKPAPADPAK@Z
_TEXT	SEGMENT
_dwCode$ = 8						; size = 4
_dwCodeSize$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
_pdwSize$ = 20						; size = 4
?WriteCODE@@YA_NKKPAPADPAK@Z PROC			; WriteCODE, COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 150  : 	WriteDWORD ( dwCode, ppBlock, pdwSize );

  00009	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR _dwCode$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 151  : 	WriteDWORD ( dwCodeSize, ppBlock, pdwSize );

  0001d	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 0c	 mov	 edx, DWORD PTR _dwCodeSize$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 152  : 	return true;

  00031	b0 01		 mov	 al, 1

; 153  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?WriteCODE@@YA_NKKPAPADPAK@Z ENDP			; WriteCODE
_TEXT	ENDS
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?WriteVECTOR@@YA_NUD3DXVECTOR3@@PAPADPAK@Z	; WriteVECTOR
EXTRN	_sprintf:PROC
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?WriteVECTOR@@YA_NUD3DXVECTOR3@@PAPADPAK@Z
_TEXT	SEGMENT
_pNumberStr$56864 = -268				; size = 256
_x$56860 = -12						; size = 4
_dwLen$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_vecVector$ = 8						; size = 12
_ppBlock$ = 20						; size = 4
_pdwSize$ = 24						; size = 4
?WriteVECTOR@@YA_NUD3DXVECTOR3@@PAPADPAK@Z PROC		; WriteVECTOR, COMDAT

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 157  : 	DWORD dwLen = sizeof(vecVector);

  00016	c7 45 f8 0c 00
	00 00		 mov	 DWORD PTR _dwLen$[ebp], 12 ; 0000000cH

; 158  : 	if ( g_bWriteAsText )

  0001d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_bWriteAsText@@3_NA ; g_bWriteAsText
  00024	85 c0		 test	 eax, eax
  00026	0f 84 9f 00 00
	00		 je	 $LN7@WriteVECTO

; 159  : 	{
; 160  : 		for ( int x=0; x<3; x++)

  0002c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _x$56860[ebp], 0
  00033	eb 09		 jmp	 SHORT $LN6@WriteVECTO
$LN5@WriteVECTO:
  00035	8b 45 f4	 mov	 eax, DWORD PTR _x$56860[ebp]
  00038	83 c0 01	 add	 eax, 1
  0003b	89 45 f4	 mov	 DWORD PTR _x$56860[ebp], eax
$LN6@WriteVECTO:
  0003e	83 7d f4 03	 cmp	 DWORD PTR _x$56860[ebp], 3
  00042	0f 8d 81 00 00
	00		 jge	 $LN4@WriteVECTO

; 161  : 		{
; 162  : 			// get matrix element
; 163  : 			char pNumberStr[256];
; 164  : 			sprintf ( pNumberStr, "%f", *(((float*)&vecVector)+x) );

  00048	8b 45 f4	 mov	 eax, DWORD PTR _x$56860[ebp]
  0004b	d9 44 85 08	 fld	 DWORD PTR _vecVector$[ebp+eax*4]
  0004f	83 ec 08	 sub	 esp, 8
  00052	dd 1c 24	 fstp	 QWORD PTR [esp]
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
  0005a	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _pNumberStr$56864[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _sprintf
  00066	83 c4 10	 add	 esp, 16			; 00000010H

; 165  : 
; 166  : 			// make text value
; 167  : 			dwLen = strlen(pNumberStr);

  00069	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56864[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _strlen
  00075	83 c4 04	 add	 esp, 4
  00078	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 168  : 			if ( ppBlock )

  0007b	83 7d 14 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0007f	74 26		 je	 SHORT $LN3@WriteVECTO

; 169  : 			{
; 170  : 				memcpy ( *ppBlock, pNumberStr, dwLen );

  00081	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  00084	50		 push	 eax
  00085	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _pNumberStr$56864[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 14	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0008f	8b 02		 mov	 eax, DWORD PTR [edx]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _memcpy
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH

; 171  : 				*ppBlock += dwLen;

  0009a	8b 45 14	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000a2	8b 55 14	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000a5	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@WriteVECTO:

; 172  : 			}
; 173  : 			*pdwSize += dwLen;

  000a7	8b 45 18	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000aa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ac	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000af	8b 55 18	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  000b2	89 0a		 mov	 DWORD PTR [edx], ecx

; 174  : 
; 175  : 			// make text comma
; 176  : 			WriteComma ( ppBlock, pdwSize );

  000b4	8b 45 18	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d 14	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 ?WriteComma@@YA_NPAPADPAK@Z ; WriteComma
  000c1	83 c4 08	 add	 esp, 8

; 177  : 		}

  000c4	e9 6c ff ff ff	 jmp	 $LN5@WriteVECTO
$LN4@WriteVECTO:

; 178  : 	}
; 179  : 	else

  000c9	eb 36		 jmp	 SHORT $LN2@WriteVECTO
$LN7@WriteVECTO:

; 180  : 	{
; 181  : 		if ( ppBlock )

  000cb	83 7d 14 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  000cf	74 23		 je	 SHORT $LN1@WriteVECTO

; 182  : 		{
; 183  : 			memcpy ( *ppBlock, &vecVector, dwLen );

  000d1	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  000d4	50		 push	 eax
  000d5	8d 4d 08	 lea	 ecx, DWORD PTR _vecVector$[ebp]
  000d8	51		 push	 ecx
  000d9	8b 55 14	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000dc	8b 02		 mov	 eax, DWORD PTR [edx]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _memcpy
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 184  : 			*ppBlock += dwLen;

  000e7	8b 45 14	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000ea	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ec	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000ef	8b 55 14	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000f2	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteVECTO:

; 185  : 		}
; 186  : 		*pdwSize += dwLen;

  000f4	8b 45 18	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f9	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000fc	8b 55 18	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  000ff	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@WriteVECTO:

; 187  : 	}
; 188  : 	return true;

  00101	b0 01		 mov	 al, 1

; 189  : }

  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx
  00106	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00109	33 cd		 xor	 ecx, ebp
  0010b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
?WriteVECTOR@@YA_NUD3DXVECTOR3@@PAPADPAK@Z ENDP		; WriteVECTOR
_TEXT	ENDS
PUBLIC	??RD3DXMATRIX@@QAEAAMII@Z			; D3DXMATRIX::operator()
PUBLIC	__$ArrayPad$
PUBLIC	?WriteMATRIX@@YA_NUD3DXMATRIX@@PAPADPAK@Z	; WriteMATRIX
; Function compile flags: /Odtp /ZI
;	COMDAT ?WriteMATRIX@@YA_NUD3DXMATRIX@@PAPADPAK@Z
_TEXT	SEGMENT
_pNumberStr$56885 = -272				; size = 256
_x$56881 = -16						; size = 4
_y$56877 = -12						; size = 4
_dwLen$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_mMatrix$ = 8						; size = 64
_ppBlock$ = 72						; size = 4
_pdwSize$ = 76						; size = 4
?WriteMATRIX@@YA_NUD3DXMATRIX@@PAPADPAK@Z PROC		; WriteMATRIX, COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 193  : 	DWORD dwLen = sizeof(mMatrix);

  00016	c7 45 f8 40 00
	00 00		 mov	 DWORD PTR _dwLen$[ebp], 64 ; 00000040H

; 194  : 	if ( g_bWriteAsText )

  0001d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_bWriteAsText@@3_NA ; g_bWriteAsText
  00024	85 c0		 test	 eax, eax
  00026	0f 84 cb 00 00
	00		 je	 $LN10@WriteMATRI

; 195  : 	{
; 196  : 		for ( int y=0; y<4; y++)

  0002c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _y$56877[ebp], 0
  00033	eb 09		 jmp	 SHORT $LN9@WriteMATRI
$LN8@WriteMATRI:
  00035	8b 45 f4	 mov	 eax, DWORD PTR _y$56877[ebp]
  00038	83 c0 01	 add	 eax, 1
  0003b	89 45 f4	 mov	 DWORD PTR _y$56877[ebp], eax
$LN9@WriteMATRI:
  0003e	83 7d f4 04	 cmp	 DWORD PTR _y$56877[ebp], 4
  00042	0f 8d ad 00 00
	00		 jge	 $LN7@WriteMATRI

; 197  : 		{
; 198  : 			for ( int x=0; x<4; x++)

  00048	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _x$56881[ebp], 0
  0004f	eb 09		 jmp	 SHORT $LN6@WriteMATRI
$LN5@WriteMATRI:
  00051	8b 45 f0	 mov	 eax, DWORD PTR _x$56881[ebp]
  00054	83 c0 01	 add	 eax, 1
  00057	89 45 f0	 mov	 DWORD PTR _x$56881[ebp], eax
$LN6@WriteMATRI:
  0005a	83 7d f0 04	 cmp	 DWORD PTR _x$56881[ebp], 4
  0005e	0f 8d 8c 00 00
	00		 jge	 $LN4@WriteMATRI

; 199  : 			{
; 200  : 				// get matrix element
; 201  : 				char pNumberStr[256];
; 202  : 				sprintf ( pNumberStr, "%f", mMatrix(x,y) );

  00064	8b 45 f4	 mov	 eax, DWORD PTR _y$56877[ebp]
  00067	50		 push	 eax
  00068	8b 4d f0	 mov	 ecx, DWORD PTR _x$56881[ebp]
  0006b	51		 push	 ecx
  0006c	8d 4d 08	 lea	 ecx, DWORD PTR _mMatrix$[ebp]
  0006f	e8 00 00 00 00	 call	 ??RD3DXMATRIX@@QAEAAMII@Z ; D3DXMATRIX::operator()
  00074	d9 00		 fld	 DWORD PTR [eax]
  00076	83 ec 08	 sub	 esp, 8
  00079	dd 1c 24	 fstp	 QWORD PTR [esp]
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
  00081	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _pNumberStr$56885[ebp]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 _sprintf
  0008d	83 c4 10	 add	 esp, 16			; 00000010H

; 203  : 
; 204  : 				// make text value
; 205  : 				dwLen = strlen(pNumberStr);

  00090	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56885[ebp]
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _strlen
  0009c	83 c4 04	 add	 esp, 4
  0009f	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 206  : 				if ( ppBlock )

  000a2	83 7d 48 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  000a6	74 26		 je	 SHORT $LN3@WriteMATRI

; 207  : 				{
; 208  : 					memcpy ( *ppBlock, pNumberStr, dwLen );

  000a8	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  000ab	50		 push	 eax
  000ac	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _pNumberStr$56885[ebp]
  000b2	51		 push	 ecx
  000b3	8b 55 48	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000b6	8b 02		 mov	 eax, DWORD PTR [edx]
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _memcpy
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 209  : 					*ppBlock += dwLen;

  000c1	8b 45 48	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c6	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000c9	8b 55 48	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000cc	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@WriteMATRI:

; 210  : 				}
; 211  : 				*pdwSize += dwLen;

  000ce	8b 45 4c	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d3	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000d6	8b 55 4c	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  000d9	89 0a		 mov	 DWORD PTR [edx], ecx

; 212  : 
; 213  : 				// make text comma
; 214  : 				WriteComma ( ppBlock, pdwSize );

  000db	8b 45 4c	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000de	50		 push	 eax
  000df	8b 4d 48	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ?WriteComma@@YA_NPAPADPAK@Z ; WriteComma
  000e8	83 c4 08	 add	 esp, 8

; 215  : 			}

  000eb	e9 61 ff ff ff	 jmp	 $LN5@WriteMATRI
$LN4@WriteMATRI:

; 216  : 		}

  000f0	e9 40 ff ff ff	 jmp	 $LN8@WriteMATRI
$LN7@WriteMATRI:

; 217  : 	}
; 218  : 	else

  000f5	eb 36		 jmp	 SHORT $LN2@WriteMATRI
$LN10@WriteMATRI:

; 219  : 	{
; 220  : 		if ( ppBlock )

  000f7	83 7d 48 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  000fb	74 23		 je	 SHORT $LN1@WriteMATRI

; 221  : 		{
; 222  : 			memcpy ( *ppBlock, &mMatrix, dwLen );

  000fd	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  00100	50		 push	 eax
  00101	8d 4d 08	 lea	 ecx, DWORD PTR _mMatrix$[ebp]
  00104	51		 push	 ecx
  00105	8b 55 48	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00108	8b 02		 mov	 eax, DWORD PTR [edx]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 _memcpy
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH

; 223  : 			*ppBlock += dwLen;

  00113	8b 45 48	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00116	8b 08		 mov	 ecx, DWORD PTR [eax]
  00118	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  0011b	8b 55 48	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0011e	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteMATRI:

; 224  : 		}
; 225  : 		*pdwSize += dwLen;

  00120	8b 45 4c	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00123	8b 08		 mov	 ecx, DWORD PTR [eax]
  00125	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00128	8b 55 4c	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  0012b	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@WriteMATRI:

; 226  : 	}
; 227  : 	return true;

  0012d	b0 01		 mov	 al, 1

; 228  : }

  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx
  00132	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00135	33 cd		 xor	 ecx, ebp
  00137	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
?WriteMATRIX@@YA_NUD3DXMATRIX@@PAPADPAK@Z ENDP		; WriteMATRIX
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft directx sdk (august 2007)\include\d3dx9math.inl
_TEXT	ENDS
;	COMDAT ??RD3DXMATRIX@@QAEAAMII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iRow$ = 8						; size = 4
_iCol$ = 12						; size = 4
??RD3DXMATRIX@@QAEAAMII@Z PROC				; D3DXMATRIX::operator(), COMDAT
; _this$ = ecx

; 788  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 789  :     return m[iRow][iCol];

  0000c	8b 45 08	 mov	 eax, DWORD PTR _iRow$[ebp]
  0000f	c1 e0 04	 shl	 eax, 4
  00012	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _iCol$[ebp]
  00018	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 790  : }

  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi
  0001d	5b		 pop	 ebx
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
??RD3DXMATRIX@@QAEAAMII@Z ENDP				; D3DXMATRIX::operator()
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?WriteMATERIAL@@YA_NU_D3DMATERIAL9@@PAPADPAK@Z	; WriteMATERIAL
; Function compile flags: /Odtp /ZI
; File c:\program files\the game creators\dark gdk\include\dbo format\dboblock.cpp
;	COMDAT ?WriteMATERIAL@@YA_NU_D3DMATERIAL9@@PAPADPAK@Z
_TEXT	SEGMENT
_pNumberStr$56901 = -272				; size = 256
_i$56897 = -16						; size = 4
_dwBytes$56896 = -12					; size = 4
_dwLen$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_mMaterial$ = 8						; size = 68
_ppBlock$ = 76						; size = 4
_pdwSize$ = 80						; size = 4
?WriteMATERIAL@@YA_NU_D3DMATERIAL9@@PAPADPAK@Z PROC	; WriteMATERIAL, COMDAT

; 231  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 232  : 	DWORD dwLen = sizeof(mMaterial);

  00016	c7 45 f8 44 00
	00 00		 mov	 DWORD PTR _dwLen$[ebp], 68 ; 00000044H

; 233  : 	if ( g_bWriteAsText )

  0001d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_bWriteAsText@@3_NA ; g_bWriteAsText
  00024	85 c0		 test	 eax, eax
  00026	0f 84 9d 00 00
	00		 je	 $LN7@WriteMATER

; 234  : 	{
; 235  : 		DWORD dwBytes = sizeof(mMaterial);

  0002c	c7 45 f4 44 00
	00 00		 mov	 DWORD PTR _dwBytes$56896[ebp], 68 ; 00000044H

; 236  : 		for ( DWORD i=0; i<dwBytes; i++)

  00033	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$56897[ebp], 0
  0003a	eb 09		 jmp	 SHORT $LN6@WriteMATER
$LN5@WriteMATER:
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _i$56897[ebp]
  0003f	83 c0 01	 add	 eax, 1
  00042	89 45 f0	 mov	 DWORD PTR _i$56897[ebp], eax
$LN6@WriteMATER:
  00045	8b 45 f0	 mov	 eax, DWORD PTR _i$56897[ebp]
  00048	3b 45 f4	 cmp	 eax, DWORD PTR _dwBytes$56896[ebp]
  0004b	73 7a		 jae	 SHORT $LN4@WriteMATER

; 237  : 		{
; 238  : 			// byte from material
; 239  : 			char pNumberStr[256];
; 240  : 			_itoa ( *((BYTE*)&mMaterial+i) , pNumberStr, 10);

  0004d	6a 0a		 push	 10			; 0000000aH
  0004f	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56901[ebp]
  00055	50		 push	 eax
  00056	8b 4d f0	 mov	 ecx, DWORD PTR _i$56897[ebp]
  00059	0f b6 54 0d 08	 movzx	 edx, BYTE PTR _mMaterial$[ebp+ecx]
  0005e	52		 push	 edx
  0005f	e8 00 00 00 00	 call	 __itoa
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 241  : 
; 242  : 			// make text value
; 243  : 			dwLen = strlen(pNumberStr);

  00067	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56901[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _strlen
  00073	83 c4 04	 add	 esp, 4
  00076	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 244  : 			if ( ppBlock )

  00079	83 7d 4c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0007d	74 26		 je	 SHORT $LN3@WriteMATER

; 245  : 			{
; 246  : 				memcpy ( *ppBlock, pNumberStr, dwLen );

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  00082	50		 push	 eax
  00083	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _pNumberStr$56901[ebp]
  00089	51		 push	 ecx
  0008a	8b 55 4c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0008d	8b 02		 mov	 eax, DWORD PTR [edx]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _memcpy
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH

; 247  : 				*ppBlock += dwLen;

  00098	8b 45 4c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000a0	8b 55 4c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000a3	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@WriteMATER:

; 248  : 			}
; 249  : 			*pdwSize += dwLen;

  000a5	8b 45 50	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000ad	8b 55 50	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  000b0	89 0a		 mov	 DWORD PTR [edx], ecx

; 250  : 
; 251  : 			// make text comma
; 252  : 			WriteComma ( ppBlock, pdwSize );

  000b2	8b 45 50	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d 4c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 ?WriteComma@@YA_NPAPADPAK@Z ; WriteComma
  000bf	83 c4 08	 add	 esp, 8

; 253  : 		}

  000c2	e9 75 ff ff ff	 jmp	 $LN5@WriteMATER
$LN4@WriteMATER:

; 254  : 	}
; 255  : 	else

  000c7	eb 36		 jmp	 SHORT $LN2@WriteMATER
$LN7@WriteMATER:

; 256  : 	{
; 257  : 		if ( ppBlock )

  000c9	83 7d 4c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  000cd	74 23		 je	 SHORT $LN1@WriteMATER

; 258  : 		{
; 259  : 			memcpy ( *ppBlock, &mMaterial, dwLen );

  000cf	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  000d2	50		 push	 eax
  000d3	8d 4d 08	 lea	 ecx, DWORD PTR _mMaterial$[ebp]
  000d6	51		 push	 ecx
  000d7	8b 55 4c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000da	8b 02		 mov	 eax, DWORD PTR [edx]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _memcpy
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 260  : 			*ppBlock += dwLen;

  000e5	8b 45 4c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ea	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000ed	8b 55 4c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000f0	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteMATER:

; 261  : 		}
; 262  : 		*pdwSize += dwLen;

  000f2	8b 45 50	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f7	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000fa	8b 55 50	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  000fd	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@WriteMATER:

; 263  : 	}
; 264  : 	return true;

  000ff	b0 01		 mov	 al, 1

; 265  : }

  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00107	33 cd		 xor	 ecx, ebp
  00109	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
?WriteMATERIAL@@YA_NU_D3DMATERIAL9@@PAPADPAK@Z ENDP	; WriteMATERIAL
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?WriteMEMORY@@YA_NPAEKPAPADPAK@Z		; WriteMEMORY
; Function compile flags: /Odtp /ZI
;	COMDAT ?WriteMEMORY@@YA_NPAEKPAPADPAK@Z
_TEXT	SEGMENT
_dwLen$56918 = -268					; size = 4
_pNumberStr$56917 = -264				; size = 256
_i$56913 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pData$ = 8						; size = 4
_dwBytes$ = 12						; size = 4
_ppBlock$ = 16						; size = 4
_pdwSize$ = 20						; size = 4
?WriteMEMORY@@YA_NPAEKPAPADPAK@Z PROC			; WriteMEMORY, COMDAT

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 269  : 	if ( g_bWriteAsText )

  00016	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_bWriteAsText@@3_NA ; g_bWriteAsText
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 a7 00 00
	00		 je	 $LN7@WriteMEMOR

; 270  : 	{
; 271  : 		for ( DWORD i=0; i<dwBytes; i++)

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$56913[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN6@WriteMEMOR
$LN5@WriteMEMOR:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$56913[ebp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 45 f8	 mov	 DWORD PTR _i$56913[ebp], eax
$LN6@WriteMEMOR:
  00037	8b 45 f8	 mov	 eax, DWORD PTR _i$56913[ebp]
  0003a	3b 45 0c	 cmp	 eax, DWORD PTR _dwBytes$[ebp]
  0003d	0f 83 87 00 00
	00		 jae	 $LN4@WriteMEMOR

; 272  : 		{
; 273  : 			// byte from material
; 274  : 			char pNumberStr[256];
; 275  : 			_itoa ( *(pData+i) , pNumberStr, 10);

  00043	6a 0a		 push	 10			; 0000000aH
  00045	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56917[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _pData$[ebp]
  0004f	03 4d f8	 add	 ecx, DWORD PTR _i$56913[ebp]
  00052	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 __itoa
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 276  : 
; 277  : 			// make text value
; 278  : 			DWORD dwLen = strlen(pNumberStr);

  0005e	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56917[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _strlen
  0006a	83 c4 04	 add	 esp, 4
  0006d	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _dwLen$56918[ebp], eax

; 279  : 			if ( ppBlock )

  00073	83 7d 10 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00077	74 2c		 je	 SHORT $LN3@WriteMEMOR

; 280  : 			{
; 281  : 				memcpy ( *ppBlock, pNumberStr, dwLen );

  00079	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _dwLen$56918[ebp]
  0007f	50		 push	 eax
  00080	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _pNumberStr$56917[ebp]
  00086	51		 push	 ecx
  00087	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0008a	8b 02		 mov	 eax, DWORD PTR [edx]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _memcpy
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH

; 282  : 				*ppBlock += dwLen;

  00095	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00098	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009a	03 8d f4 fe ff
	ff		 add	 ecx, DWORD PTR _dwLen$56918[ebp]
  000a0	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000a3	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@WriteMEMOR:

; 283  : 			}
; 284  : 			*pdwSize += dwLen;

  000a5	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	03 8d f4 fe ff
	ff		 add	 ecx, DWORD PTR _dwLen$56918[ebp]
  000b0	8b 55 14	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  000b3	89 0a		 mov	 DWORD PTR [edx], ecx

; 285  : 
; 286  : 			// make text comma
; 287  : 			WriteComma ( ppBlock, pdwSize );

  000b5	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 ?WriteComma@@YA_NPAPADPAK@Z ; WriteComma
  000c2	83 c4 08	 add	 esp, 8

; 288  : 		}

  000c5	e9 64 ff ff ff	 jmp	 $LN5@WriteMEMOR
$LN4@WriteMEMOR:

; 289  : 	}
; 290  : 	else

  000ca	eb 36		 jmp	 SHORT $LN2@WriteMEMOR
$LN7@WriteMEMOR:

; 291  : 	{
; 292  : 		if ( ppBlock )

  000cc	83 7d 10 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  000d0	74 23		 je	 SHORT $LN1@WriteMEMOR

; 293  : 		{
; 294  : 			memcpy ( *ppBlock, pData, dwBytes );

  000d2	8b 45 0c	 mov	 eax, DWORD PTR _dwBytes$[ebp]
  000d5	50		 push	 eax
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _pData$[ebp]
  000d9	51		 push	 ecx
  000da	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000dd	8b 02		 mov	 eax, DWORD PTR [edx]
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 _memcpy
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 295  : 			*ppBlock += dwBytes;

  000e8	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ed	03 4d 0c	 add	 ecx, DWORD PTR _dwBytes$[ebp]
  000f0	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000f3	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteMEMOR:

; 296  : 		}
; 297  : 		*pdwSize += dwBytes;

  000f5	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	03 4d 0c	 add	 ecx, DWORD PTR _dwBytes$[ebp]
  000fd	8b 55 14	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  00100	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@WriteMEMOR:

; 298  : 	}
; 299  : 	return true;

  00102	b0 01		 mov	 al, 1

; 300  : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010a	33 cd		 xor	 ecx, ebp
  0010c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
?WriteMEMORY@@YA_NPAEKPAPADPAK@Z ENDP			; WriteMEMORY
_TEXT	ENDS
PUBLIC	?WriteString@@YA_NPADPAPADPAK@Z			; WriteString
; Function compile flags: /Odtp /ZI
;	COMDAT ?WriteString@@YA_NPADPAPADPAK@Z
_TEXT	SEGMENT
_dwLen$ = -4						; size = 4
_pString$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
_pdwSize$ = 16						; size = 4
?WriteString@@YA_NPADPAPADPAK@Z PROC			; WriteString, COMDAT

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 304  : 	DWORD dwLen = strlen(pString);

  00009	8b 45 08	 mov	 eax, DWORD PTR _pString$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	83 c4 04	 add	 esp, 4
  00015	89 45 fc	 mov	 DWORD PTR _dwLen$[ebp], eax

; 305  : 	if ( g_bWriteAsText )

  00018	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_bWriteAsText@@3_NA ; g_bWriteAsText
  0001f	85 c0		 test	 eax, eax
  00021	74 68		 je	 SHORT $LN4@WriteStrin

; 306  : 	{
; 307  : 		// make text speechmark
; 308  : 		WriteSpeechmark ( ppBlock, pdwSize );

  00023	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ?WriteSpeechmark@@YA_NPAPADPAK@Z ; WriteSpeechmark
  00030	83 c4 08	 add	 esp, 8

; 309  : 
; 310  : 		// make text
; 311  : 		if ( ppBlock )

  00033	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00037	74 23		 je	 SHORT $LN3@WriteStrin

; 312  : 		{
; 313  : 			memcpy ( *ppBlock, pString, dwLen );

  00039	8b 45 fc	 mov	 eax, DWORD PTR _dwLen$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _pString$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00044	8b 02		 mov	 eax, DWORD PTR [edx]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _memcpy
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 314  : 			*ppBlock += dwLen;

  0004f	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	03 4d fc	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00057	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0005a	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@WriteStrin:

; 315  : 		}
; 316  : 		*pdwSize += dwLen;

  0005c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	03 4d fc	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00064	8b 55 10	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  00067	89 0a		 mov	 DWORD PTR [edx], ecx

; 317  : 
; 318  : 		// make text speechmark
; 319  : 		WriteSpeechmark ( ppBlock, pdwSize );

  00069	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?WriteSpeechmark@@YA_NPAPADPAK@Z ; WriteSpeechmark
  00076	83 c4 08	 add	 esp, 8

; 320  : 		WriteComma ( ppBlock, pdwSize );

  00079	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?WriteComma@@YA_NPAPADPAK@Z ; WriteComma
  00086	83 c4 08	 add	 esp, 8

; 321  : 	}
; 322  : 	else

  00089	eb 51		 jmp	 SHORT $LN2@WriteStrin
$LN4@WriteStrin:

; 323  : 	{
; 324  : 		if ( ppBlock )

  0008b	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0008f	74 3a		 je	 SHORT $LN1@WriteStrin

; 325  : 		{
; 326  : 			// string size
; 327  : 			*(DWORD*)*ppBlock = dwLen;

  00091	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	8b 55 fc	 mov	 edx, DWORD PTR _dwLen$[ebp]
  00099	89 11		 mov	 DWORD PTR [ecx], edx

; 328  : 			*ppBlock += 4;

  0009b	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	83 c1 04	 add	 ecx, 4
  000a3	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000a6	89 0a		 mov	 DWORD PTR [edx], ecx

; 329  : 
; 330  : 			// string data
; 331  : 			memcpy ( *ppBlock, pString, dwLen );

  000a8	8b 45 fc	 mov	 eax, DWORD PTR _dwLen$[ebp]
  000ab	50		 push	 eax
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _pString$[ebp]
  000af	51		 push	 ecx
  000b0	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000b3	8b 02		 mov	 eax, DWORD PTR [edx]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 332  : 			*ppBlock += dwLen;

  000be	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	03 4d fc	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000c6	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000c9	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteStrin:

; 333  : 		}
; 334  : 		*pdwSize += 4 + dwLen;

  000cb	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	8b 55 fc	 mov	 edx, DWORD PTR _dwLen$[ebp]
  000d3	8d 44 0a 04	 lea	 eax, DWORD PTR [edx+ecx+4]
  000d7	8b 4d 10	 mov	 ecx, DWORD PTR _pdwSize$[ebp]
  000da	89 01		 mov	 DWORD PTR [ecx], eax
$LN2@WriteStrin:

; 335  : 	}
; 336  : 	return true;

  000dc	b0 01		 mov	 al, 1

; 337  : }

  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
?WriteString@@YA_NPADPAPADPAK@Z ENDP			; WriteString
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?WriteVertexData@@YA_NPAEKKPAPADPAK@Z		; WriteVertexData
; Function compile flags: /Odtp /ZI
;	COMDAT ?WriteVertexData@@YA_NPAEKKPAPADPAK@Z
_TEXT	SEGMENT
_pNumberStr$56948 = -272				; size = 256
_i$56944 = -16						; size = 4
_dwBytes$56943 = -12					; size = 4
_dwLen$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pVertexData$ = 8					; size = 4
_dwFVFSize$ = 12					; size = 4
_dwVertexCount$ = 16					; size = 4
_ppBlock$ = 20						; size = 4
_pdwSize$ = 24						; size = 4
?WriteVertexData@@YA_NPAEKKPAPADPAK@Z PROC		; WriteVertexData, COMDAT

; 340  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 341  : 	// No vertex data
; 342  : 	if ( pVertexData==NULL )

  00016	83 7d 08 00	 cmp	 DWORD PTR _pVertexData$[ebp], 0
  0001a	75 19		 jne	 SHORT $LN8@WriteVerte

; 343  : 	{
; 344  : 		WriteDWORD ( 0, ppBlock, pdwSize );

  0001c	8b 45 18	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 14	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00023	51		 push	 ecx
  00024	6a 00		 push	 0
  00026	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 345  : 		return true;

  0002e	b0 01		 mov	 al, 1
  00030	e9 f2 00 00 00	 jmp	 $LN9@WriteVerte
$LN8@WriteVerte:

; 346  : 	}
; 347  : 
; 348  : 	DWORD dwLen = dwFVFSize * dwVertexCount;

  00035	8b 45 0c	 mov	 eax, DWORD PTR _dwFVFSize$[ebp]
  00038	0f af 45 10	 imul	 eax, DWORD PTR _dwVertexCount$[ebp]
  0003c	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 349  : 	if ( g_bWriteAsText )

  0003f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_bWriteAsText@@3_NA ; g_bWriteAsText
  00046	85 c0		 test	 eax, eax
  00048	0f 84 a1 00 00
	00		 je	 $LN7@WriteVerte

; 350  : 	{
; 351  : 		DWORD dwBytes = dwVertexCount*dwFVFSize;

  0004e	8b 45 10	 mov	 eax, DWORD PTR _dwVertexCount$[ebp]
  00051	0f af 45 0c	 imul	 eax, DWORD PTR _dwFVFSize$[ebp]
  00055	89 45 f4	 mov	 DWORD PTR _dwBytes$56943[ebp], eax

; 352  : 		for ( DWORD i=0; i<dwBytes; i++)

  00058	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$56944[ebp], 0
  0005f	eb 09		 jmp	 SHORT $LN6@WriteVerte
$LN5@WriteVerte:
  00061	8b 45 f0	 mov	 eax, DWORD PTR _i$56944[ebp]
  00064	83 c0 01	 add	 eax, 1
  00067	89 45 f0	 mov	 DWORD PTR _i$56944[ebp], eax
$LN6@WriteVerte:
  0006a	8b 45 f0	 mov	 eax, DWORD PTR _i$56944[ebp]
  0006d	3b 45 f4	 cmp	 eax, DWORD PTR _dwBytes$56943[ebp]
  00070	73 7b		 jae	 SHORT $LN4@WriteVerte

; 353  : 		{
; 354  : 			// byte from data
; 355  : 			char pNumberStr[256];
; 356  : 			_itoa ( *(pVertexData+i) , pNumberStr, 10);

  00072	6a 0a		 push	 10			; 0000000aH
  00074	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56948[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _pVertexData$[ebp]
  0007e	03 4d f0	 add	 ecx, DWORD PTR _i$56944[ebp]
  00081	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 __itoa
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 357  : 
; 358  : 			// make text value
; 359  : 			dwLen = strlen(pNumberStr);

  0008d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56948[ebp]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _strlen
  00099	83 c4 04	 add	 esp, 4
  0009c	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 360  : 			if ( ppBlock )

  0009f	83 7d 14 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  000a3	74 26		 je	 SHORT $LN3@WriteVerte

; 361  : 			{
; 362  : 				memcpy ( *ppBlock, pNumberStr, dwLen );

  000a5	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  000a8	50		 push	 eax
  000a9	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _pNumberStr$56948[ebp]
  000af	51		 push	 ecx
  000b0	8b 55 14	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000b3	8b 02		 mov	 eax, DWORD PTR [edx]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _memcpy
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 363  : 				*ppBlock += dwLen;

  000be	8b 45 14	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000c6	8b 55 14	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000c9	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@WriteVerte:

; 364  : 			}
; 365  : 			*pdwSize += dwLen;

  000cb	8b 45 18	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d0	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000d3	8b 55 18	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  000d6	89 0a		 mov	 DWORD PTR [edx], ecx

; 366  : 
; 367  : 			// make text comma
; 368  : 			WriteComma ( ppBlock, pdwSize );

  000d8	8b 45 18	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000db	50		 push	 eax
  000dc	8b 4d 14	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 ?WriteComma@@YA_NPAPADPAK@Z ; WriteComma
  000e5	83 c4 08	 add	 esp, 8

; 369  : 		}

  000e8	e9 74 ff ff ff	 jmp	 $LN5@WriteVerte
$LN4@WriteVerte:

; 370  : 	}
; 371  : 	else

  000ed	eb 36		 jmp	 SHORT $LN2@WriteVerte
$LN7@WriteVerte:

; 372  : 	{
; 373  : 		if ( ppBlock )

  000ef	83 7d 14 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  000f3	74 23		 je	 SHORT $LN1@WriteVerte

; 374  : 		{
; 375  : 			memcpy ( *ppBlock, pVertexData, dwLen );

  000f5	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  000f8	50		 push	 eax
  000f9	8b 4d 08	 mov	 ecx, DWORD PTR _pVertexData$[ebp]
  000fc	51		 push	 ecx
  000fd	8b 55 14	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00100	8b 02		 mov	 eax, DWORD PTR [edx]
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 _memcpy
  00108	83 c4 0c	 add	 esp, 12			; 0000000cH

; 376  : 			*ppBlock += dwLen;

  0010b	8b 45 14	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0010e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00110	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00113	8b 55 14	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00116	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteVerte:

; 377  : 		}
; 378  : 		*pdwSize += dwLen;

  00118	8b 45 18	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0011b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011d	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00120	8b 55 18	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  00123	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@WriteVerte:

; 379  : 	}
; 380  : 
; 381  : 	// okay
; 382  : 	return true;

  00125	b0 01		 mov	 al, 1
$LN9@WriteVerte:

; 383  : }

  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c3		 ret	 0
?WriteVertexData@@YA_NPAEKKPAPADPAK@Z ENDP		; WriteVertexData
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?WriteIndices@@YA_NPAGKPAPADPAK@Z		; WriteIndices
; Function compile flags: /Odtp /ZI
;	COMDAT ?WriteIndices@@YA_NPAGKPAPADPAK@Z
_TEXT	SEGMENT
_pNumberStr$56966 = -268				; size = 256
_i$56962 = -12						; size = 4
_dwLen$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIndices$ = 8						; size = 4
_dwIndexCount$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
_pdwSize$ = 20						; size = 4
?WriteIndices@@YA_NPAGKPAPADPAK@Z PROC			; WriteIndices, COMDAT

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 387  : 	// No indices
; 388  : 	if ( pIndices==NULL )

  00016	83 7d 08 00	 cmp	 DWORD PTR _pIndices$[ebp], 0
  0001a	75 19		 jne	 SHORT $LN8@WriteIndic

; 389  : 	{
; 390  : 		WriteDWORD ( 0, ppBlock, pdwSize );

  0001c	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00023	51		 push	 ecx
  00024	6a 00		 push	 0
  00026	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 391  : 		return true;

  0002e	b0 01		 mov	 al, 1
  00030	e9 e7 00 00 00	 jmp	 $LN9@WriteIndic
$LN8@WriteIndic:

; 392  : 	}
; 393  : 	
; 394  : 	DWORD dwLen = dwIndexCount * sizeof(WORD);

  00035	8b 45 0c	 mov	 eax, DWORD PTR _dwIndexCount$[ebp]
  00038	d1 e0		 shl	 eax, 1
  0003a	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 395  : 	if ( g_bWriteAsText )

  0003d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_bWriteAsText@@3_NA ; g_bWriteAsText
  00044	85 c0		 test	 eax, eax
  00046	0f 84 98 00 00
	00		 je	 $LN7@WriteIndic

; 396  : 	{
; 397  : 		for ( DWORD i=0; i<dwIndexCount; i++)

  0004c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$56962[ebp], 0
  00053	eb 09		 jmp	 SHORT $LN6@WriteIndic
$LN5@WriteIndic:
  00055	8b 45 f4	 mov	 eax, DWORD PTR _i$56962[ebp]
  00058	83 c0 01	 add	 eax, 1
  0005b	89 45 f4	 mov	 DWORD PTR _i$56962[ebp], eax
$LN6@WriteIndic:
  0005e	8b 45 f4	 mov	 eax, DWORD PTR _i$56962[ebp]
  00061	3b 45 0c	 cmp	 eax, DWORD PTR _dwIndexCount$[ebp]
  00064	73 7c		 jae	 SHORT $LN4@WriteIndic

; 398  : 		{
; 399  : 			// byte from data
; 400  : 			char pNumberStr[256];
; 401  : 			_itoa ( *((WORD*)pIndices+i) , pNumberStr, 10);

  00066	6a 0a		 push	 10			; 0000000aH
  00068	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56966[ebp]
  0006e	50		 push	 eax
  0006f	8b 4d f4	 mov	 ecx, DWORD PTR _i$56962[ebp]
  00072	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00075	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 __itoa
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 402  : 
; 403  : 			// make text value
; 404  : 			dwLen = strlen(pNumberStr);

  00082	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56966[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 _strlen
  0008e	83 c4 04	 add	 esp, 4
  00091	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 405  : 			if ( ppBlock )

  00094	83 7d 10 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00098	74 26		 je	 SHORT $LN3@WriteIndic

; 406  : 			{
; 407  : 				memcpy ( *ppBlock, pNumberStr, dwLen );

  0009a	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  0009d	50		 push	 eax
  0009e	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _pNumberStr$56966[ebp]
  000a4	51		 push	 ecx
  000a5	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000a8	8b 02		 mov	 eax, DWORD PTR [edx]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _memcpy
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 408  : 				*ppBlock += dwLen;

  000b3	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b8	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000bb	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000be	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@WriteIndic:

; 409  : 			}
; 410  : 			*pdwSize += dwLen;

  000c0	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c5	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000c8	8b 55 14	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  000cb	89 0a		 mov	 DWORD PTR [edx], ecx

; 411  : 
; 412  : 			// make text comma
; 413  : 			WriteComma ( ppBlock, pdwSize );

  000cd	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000d0	50		 push	 eax
  000d1	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ?WriteComma@@YA_NPAPADPAK@Z ; WriteComma
  000da	83 c4 08	 add	 esp, 8

; 414  : 		}

  000dd	e9 73 ff ff ff	 jmp	 $LN5@WriteIndic
$LN4@WriteIndic:

; 415  : 	}
; 416  : 	else

  000e2	eb 36		 jmp	 SHORT $LN2@WriteIndic
$LN7@WriteIndic:

; 417  : 	{
; 418  : 		if ( ppBlock )

  000e4	83 7d 10 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  000e8	74 23		 je	 SHORT $LN1@WriteIndic

; 419  : 		{
; 420  : 			memcpy ( *ppBlock, pIndices, dwLen );

  000ea	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  000ed	50		 push	 eax
  000ee	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  000f1	51		 push	 ecx
  000f2	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000f5	8b 02		 mov	 eax, DWORD PTR [edx]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 _memcpy
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 421  : 			*ppBlock += dwLen;

  00100	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00103	8b 08		 mov	 ecx, DWORD PTR [eax]
  00105	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00108	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0010b	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteIndic:

; 422  : 		}
; 423  : 		*pdwSize += dwLen;

  0010d	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00110	8b 08		 mov	 ecx, DWORD PTR [eax]
  00112	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00115	8b 55 14	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  00118	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@WriteIndic:

; 424  : 	}
; 425  : 
; 426  : 	// okay
; 427  : 	return true;

  0011a	b0 01		 mov	 al, 1
$LN9@WriteIndic:

; 428  : }

  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00122	33 cd		 xor	 ecx, ebp
  00124	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c3		 ret	 0
?WriteIndices@@YA_NPAGKPAPADPAK@Z ENDP			; WriteIndices
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?WriteOffsetList@@YA_NPAHKPAPADPAK@Z		; WriteOffsetList
; Function compile flags: /Odtp /ZI
;	COMDAT ?WriteOffsetList@@YA_NPAHKPAPADPAK@Z
_TEXT	SEGMENT
_pNumberStr$56985 = -268				; size = 256
_i$56981 = -12						; size = 4
_dwLen$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pIndices$ = 8						; size = 4
_dwIndexCount$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
_pdwSize$ = 20						; size = 4
?WriteOffsetList@@YA_NPAHKPAPADPAK@Z PROC		; WriteOffsetList, COMDAT

; 431  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi

; 432  : 	// No indices
; 433  : 	if ( pIndices==NULL )

  00016	83 7d 08 00	 cmp	 DWORD PTR _pIndices$[ebp], 0
  0001a	75 19		 jne	 SHORT $LN8@WriteOffse

; 434  : 	{
; 435  : 		WriteDWORD ( 0, ppBlock, pdwSize );

  0001c	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00023	51		 push	 ecx
  00024	6a 00		 push	 0
  00026	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 436  : 		return true;

  0002e	b0 01		 mov	 al, 1
  00030	e9 e8 00 00 00	 jmp	 $LN9@WriteOffse
$LN8@WriteOffse:

; 437  : 	}
; 438  : 	
; 439  : 	DWORD dwLen = dwIndexCount * sizeof(int);

  00035	8b 45 0c	 mov	 eax, DWORD PTR _dwIndexCount$[ebp]
  00038	c1 e0 02	 shl	 eax, 2
  0003b	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 440  : 	if ( g_bWriteAsText )

  0003e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_bWriteAsText@@3_NA ; g_bWriteAsText
  00045	85 c0		 test	 eax, eax
  00047	0f 84 98 00 00
	00		 je	 $LN7@WriteOffse

; 441  : 	{
; 442  : 		for ( DWORD i=0; i<dwIndexCount; i++)

  0004d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$56981[ebp], 0
  00054	eb 09		 jmp	 SHORT $LN6@WriteOffse
$LN5@WriteOffse:
  00056	8b 45 f4	 mov	 eax, DWORD PTR _i$56981[ebp]
  00059	83 c0 01	 add	 eax, 1
  0005c	89 45 f4	 mov	 DWORD PTR _i$56981[ebp], eax
$LN6@WriteOffse:
  0005f	8b 45 f4	 mov	 eax, DWORD PTR _i$56981[ebp]
  00062	3b 45 0c	 cmp	 eax, DWORD PTR _dwIndexCount$[ebp]
  00065	73 7c		 jae	 SHORT $LN4@WriteOffse

; 443  : 		{
; 444  : 			// byte from data
; 445  : 			char pNumberStr[256];
; 446  : 			_itoa ( *((WORD*)pIndices+i) , pNumberStr, 10);

  00067	6a 0a		 push	 10			; 0000000aH
  00069	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56985[ebp]
  0006f	50		 push	 eax
  00070	8b 4d f4	 mov	 ecx, DWORD PTR _i$56981[ebp]
  00073	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00076	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 __itoa
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH

; 447  : 
; 448  : 			// make text value
; 449  : 			dwLen = strlen(pNumberStr);

  00083	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _pNumberStr$56985[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _strlen
  0008f	83 c4 04	 add	 esp, 4
  00092	89 45 f8	 mov	 DWORD PTR _dwLen$[ebp], eax

; 450  : 			if ( ppBlock )

  00095	83 7d 10 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00099	74 26		 je	 SHORT $LN3@WriteOffse

; 451  : 			{
; 452  : 				memcpy ( *ppBlock, pNumberStr, dwLen );

  0009b	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  0009e	50		 push	 eax
  0009f	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _pNumberStr$56985[ebp]
  000a5	51		 push	 ecx
  000a6	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000a9	8b 02		 mov	 eax, DWORD PTR [edx]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _memcpy
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 453  : 				*ppBlock += dwLen;

  000b4	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000bc	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000bf	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@WriteOffse:

; 454  : 			}
; 455  : 			*pdwSize += dwLen;

  000c1	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c6	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  000c9	8b 55 14	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  000cc	89 0a		 mov	 DWORD PTR [edx], ecx

; 456  : 
; 457  : 			// make text comma
; 458  : 			WriteComma ( ppBlock, pdwSize );

  000ce	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 ?WriteComma@@YA_NPAPADPAK@Z ; WriteComma
  000db	83 c4 08	 add	 esp, 8

; 459  : 		}

  000de	e9 73 ff ff ff	 jmp	 $LN5@WriteOffse
$LN4@WriteOffse:

; 460  : 	}
; 461  : 	else

  000e3	eb 36		 jmp	 SHORT $LN2@WriteOffse
$LN7@WriteOffse:

; 462  : 	{
; 463  : 		if ( ppBlock )

  000e5	83 7d 10 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  000e9	74 23		 je	 SHORT $LN1@WriteOffse

; 464  : 		{
; 465  : 			memcpy ( *ppBlock, pIndices, dwLen );

  000eb	8b 45 f8	 mov	 eax, DWORD PTR _dwLen$[ebp]
  000ee	50		 push	 eax
  000ef	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  000f2	51		 push	 ecx
  000f3	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  000f6	8b 02		 mov	 eax, DWORD PTR [edx]
  000f8	50		 push	 eax
  000f9	e8 00 00 00 00	 call	 _memcpy
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 466  : 			*ppBlock += dwLen;

  00101	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00104	8b 08		 mov	 ecx, DWORD PTR [eax]
  00106	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00109	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0010c	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteOffse:

; 467  : 		}
; 468  : 		*pdwSize += dwLen;

  0010e	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00111	8b 08		 mov	 ecx, DWORD PTR [eax]
  00113	03 4d f8	 add	 ecx, DWORD PTR _dwLen$[ebp]
  00116	8b 55 14	 mov	 edx, DWORD PTR _pdwSize$[ebp]
  00119	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@WriteOffse:

; 469  : 	}
; 470  : 
; 471  : 	// okay
; 472  : 	return true;

  0011b	b0 01		 mov	 al, 1
$LN9@WriteOffse:

; 473  : }

  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00123	33 cd		 xor	 ecx, ebp
  00125	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
?WriteOffsetList@@YA_NPAHKPAPADPAK@Z ENDP		; WriteOffsetList
_TEXT	ENDS
PUBLIC	?ReadBOOL@@YA_NPA_NPAPAD@Z			; ReadBOOL
; Function compile flags: /Odtp /ZI
;	COMDAT ?ReadBOOL@@YA_NPA_NPAPAD@Z
_TEXT	SEGMENT
_ppDest$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
?ReadBOOL@@YA_NPA_NPAPAD@Z PROC				; ReadBOOL, COMDAT

; 481  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 482  : 	// length of string
; 483  : 	if ( *(BYTE*)*ppBlock==0 )

  00009	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00011	85 d2		 test	 edx, edx
  00013	75 08		 jne	 SHORT $LN2@ReadBOOL

; 484  : 		*(ppDest) = false;

  00015	8b 45 08	 mov	 eax, DWORD PTR _ppDest$[ebp]
  00018	c6 00 00	 mov	 BYTE PTR [eax], 0

; 485  : 	else

  0001b	eb 06		 jmp	 SHORT $LN1@ReadBOOL
$LN2@ReadBOOL:

; 486  : 		*(ppDest) = true;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _ppDest$[ebp]
  00020	c6 00 01	 mov	 BYTE PTR [eax], 1
$LN1@ReadBOOL:

; 487  : 
; 488  : 	*ppBlock += 1;

  00023	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	83 c1 01	 add	 ecx, 1
  0002b	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0002e	89 0a		 mov	 DWORD PTR [edx], ecx

; 489  : 
; 490  : 	// okay
; 491  : 	return true;

  00030	b0 01		 mov	 al, 1

; 492  : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?ReadBOOL@@YA_NPA_NPAPAD@Z ENDP				; ReadBOOL
_TEXT	ENDS
PUBLIC	?ReadDWORD@@YA_NPAKPAPAD@Z			; ReadDWORD
; Function compile flags: /Odtp /ZI
;	COMDAT ?ReadDWORD@@YA_NPAKPAPAD@Z
_TEXT	SEGMENT
_ppDest$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
?ReadDWORD@@YA_NPAKPAPAD@Z PROC				; ReadDWORD, COMDAT

; 495  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 496  : 	// length of string
; 497  : 	*(ppDest) = *(DWORD*)*ppBlock;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _ppDest$[ebp]
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	89 02		 mov	 DWORD PTR [edx], eax

; 498  : 	*ppBlock += 4;

  00015	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	83 c1 04	 add	 ecx, 4
  0001d	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00020	89 0a		 mov	 DWORD PTR [edx], ecx

; 499  : 
; 500  : 	// okay
; 501  : 	return true;

  00022	b0 01		 mov	 al, 1

; 502  : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?ReadDWORD@@YA_NPAKPAPAD@Z ENDP				; ReadDWORD
_TEXT	ENDS
PUBLIC	?ReadCODE@@YA_NPAK0PAPAD@Z			; ReadCODE
; Function compile flags: /Odtp /ZI
;	COMDAT ?ReadCODE@@YA_NPAK0PAPAD@Z
_TEXT	SEGMENT
_pdwCode$ = 8						; size = 4
_pdwCodeSize$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
?ReadCODE@@YA_NPAK0PAPAD@Z PROC				; ReadCODE, COMDAT

; 505  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 506  : 	// code and codesize
; 507  : 	*(pdwCode) = *(DWORD*)*ppBlock;

  00009	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR _pdwCode$[ebp]
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	89 02		 mov	 DWORD PTR [edx], eax

; 508  : 	*ppBlock += 4;

  00015	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	83 c1 04	 add	 ecx, 4
  0001d	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00020	89 0a		 mov	 DWORD PTR [edx], ecx

; 509  : 	*(pdwCodeSize) = *(DWORD*)*ppBlock;

  00022	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 0c	 mov	 edx, DWORD PTR _pdwCodeSize$[ebp]
  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	89 02		 mov	 DWORD PTR [edx], eax

; 510  : 	*ppBlock += 4;

  0002e	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	83 c1 04	 add	 ecx, 4
  00036	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00039	89 0a		 mov	 DWORD PTR [edx], ecx

; 511  : 
; 512  : 	// okay
; 513  : 	return true;

  0003b	b0 01		 mov	 al, 1

; 514  : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?ReadCODE@@YA_NPAK0PAPAD@Z ENDP				; ReadCODE
_TEXT	ENDS
PUBLIC	?ReadVector@@YA_NPAUD3DXVECTOR3@@PAPAD@Z	; ReadVector
; Function compile flags: /Odtp /ZI
;	COMDAT ?ReadVector@@YA_NPAUD3DXVECTOR3@@PAPAD@Z
_TEXT	SEGMENT
_dwLength$ = -4						; size = 4
_pVector$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
?ReadVector@@YA_NPAUD3DXVECTOR3@@PAPAD@Z PROC		; ReadVector, COMDAT

; 517  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 518  : 	DWORD dwLength = sizeof(D3DXVECTOR3);

  00009	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _dwLength$[ebp], 12 ; 0000000cH

; 519  : 	memcpy ( pVector, *ppBlock, dwLength );

  00010	8b 45 fc	 mov	 eax, DWORD PTR _dwLength$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	52		 push	 edx
  0001a	8b 45 08	 mov	 eax, DWORD PTR _pVector$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _memcpy
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 520  : 	*ppBlock += dwLength;

  00026	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	03 4d fc	 add	 ecx, DWORD PTR _dwLength$[ebp]
  0002e	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00031	89 0a		 mov	 DWORD PTR [edx], ecx

; 521  : 	return true;

  00033	b0 01		 mov	 al, 1

; 522  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?ReadVector@@YA_NPAUD3DXVECTOR3@@PAPAD@Z ENDP		; ReadVector
_TEXT	ENDS
PUBLIC	?ReadMatrix@@YA_NPAUD3DXMATRIX@@PAPAD@Z		; ReadMatrix
; Function compile flags: /Odtp /ZI
;	COMDAT ?ReadMatrix@@YA_NPAUD3DXMATRIX@@PAPAD@Z
_TEXT	SEGMENT
_dwLength$ = -4						; size = 4
_pMatrix$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
?ReadMatrix@@YA_NPAUD3DXMATRIX@@PAPAD@Z PROC		; ReadMatrix, COMDAT

; 525  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 526  : 	DWORD dwLength = sizeof(D3DXMATRIX);

  00009	c7 45 fc 40 00
	00 00		 mov	 DWORD PTR _dwLength$[ebp], 64 ; 00000040H

; 527  : 	memcpy ( pMatrix, *ppBlock, dwLength );

  00010	8b 45 fc	 mov	 eax, DWORD PTR _dwLength$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	52		 push	 edx
  0001a	8b 45 08	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _memcpy
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 528  : 	*ppBlock += dwLength;

  00026	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	03 4d fc	 add	 ecx, DWORD PTR _dwLength$[ebp]
  0002e	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00031	89 0a		 mov	 DWORD PTR [edx], ecx

; 529  : 	return true;

  00033	b0 01		 mov	 al, 1

; 530  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?ReadMatrix@@YA_NPAUD3DXMATRIX@@PAPAD@Z ENDP		; ReadMatrix
_TEXT	ENDS
PUBLIC	?ReadMaterial@@YA_NPAU_D3DMATERIAL9@@PAPAD@Z	; ReadMaterial
; Function compile flags: /Odtp /ZI
;	COMDAT ?ReadMaterial@@YA_NPAU_D3DMATERIAL9@@PAPAD@Z
_TEXT	SEGMENT
_dwLength$ = -4						; size = 4
_pMaterial$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
?ReadMaterial@@YA_NPAU_D3DMATERIAL9@@PAPAD@Z PROC	; ReadMaterial, COMDAT

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 534  : 	DWORD dwLength = sizeof(D3DMATERIAL9);

  00009	c7 45 fc 44 00
	00 00		 mov	 DWORD PTR _dwLength$[ebp], 68 ; 00000044H

; 535  : 	memcpy ( pMaterial, *ppBlock, dwLength );

  00010	8b 45 fc	 mov	 eax, DWORD PTR _dwLength$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	52		 push	 edx
  0001a	8b 45 08	 mov	 eax, DWORD PTR _pMaterial$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _memcpy
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 536  : 	*ppBlock += dwLength;

  00026	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	03 4d fc	 add	 ecx, DWORD PTR _dwLength$[ebp]
  0002e	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00031	89 0a		 mov	 DWORD PTR [edx], ecx

; 537  : 	return true;

  00033	b0 01		 mov	 al, 1

; 538  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?ReadMaterial@@YA_NPAU_D3DMATERIAL9@@PAPAD@Z ENDP	; ReadMaterial
_TEXT	ENDS
PUBLIC	?ReadMemory@@YA_NPAPAEKPAPAD@Z			; ReadMemory
EXTRN	??2@YAPAXI@Z:PROC				; operator new
; Function compile flags: /Odtp /ZI
;	COMDAT ?ReadMemory@@YA_NPAPAEKPAPAD@Z
_TEXT	SEGMENT
$T57993 = -68						; size = 4
_ppData$ = 8						; size = 4
_dwBytes$ = 12						; size = 4
_ppBlock$ = 16						; size = 4
?ReadMemory@@YA_NPAPAEKPAPAD@Z PROC			; ReadMemory, COMDAT

; 541  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 542  : 	if ( (*ppData)==NULL ) (*ppData) = (BYTE*)new char [ dwBytes ];

  00009	8b 45 08	 mov	 eax, DWORD PTR _ppData$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	75 17		 jne	 SHORT $LN1@ReadMemory
  00011	8b 45 0c	 mov	 eax, DWORD PTR _dwBytes$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001a	83 c4 04	 add	 esp, 4
  0001d	89 45 bc	 mov	 DWORD PTR $T57993[ebp], eax
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _ppData$[ebp]
  00023	8b 55 bc	 mov	 edx, DWORD PTR $T57993[ebp]
  00026	89 11		 mov	 DWORD PTR [ecx], edx
$LN1@ReadMemory:

; 543  : 	memcpy ( (*ppData), *ppBlock, dwBytes );

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dwBytes$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0002f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00031	52		 push	 edx
  00032	8b 45 08	 mov	 eax, DWORD PTR _ppData$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 _memcpy
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 544  : 	*ppBlock += dwBytes;

  00040	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00043	8b 08		 mov	 ecx, DWORD PTR [eax]
  00045	03 4d 0c	 add	 ecx, DWORD PTR _dwBytes$[ebp]
  00048	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0004b	89 0a		 mov	 DWORD PTR [edx], ecx

; 545  : 	return true;

  0004d	b0 01		 mov	 al, 1

; 546  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?ReadMemory@@YA_NPAPAEKPAPAD@Z ENDP			; ReadMemory
_TEXT	ENDS
PUBLIC	?ReadIntoMemory@@YA_NPAEKPAPAD@Z		; ReadIntoMemory
; Function compile flags: /Odtp /ZI
;	COMDAT ?ReadIntoMemory@@YA_NPAEKPAPAD@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_dwBytes$ = 12						; size = 4
_ppBlock$ = 16						; size = 4
?ReadIntoMemory@@YA_NPAEKPAPAD@Z PROC			; ReadIntoMemory, COMDAT

; 549  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 550  : 	memcpy ( pData, *ppBlock, dwBytes );

  00009	8b 45 0c	 mov	 eax, DWORD PTR _dwBytes$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _pData$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 _memcpy
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 551  : 	*ppBlock += dwBytes;

  0001f	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	03 4d 0c	 add	 ecx, DWORD PTR _dwBytes$[ebp]
  00027	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0002a	89 0a		 mov	 DWORD PTR [edx], ecx

; 552  : 	return true;

  0002c	b0 01		 mov	 al, 1

; 553  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?ReadIntoMemory@@YA_NPAEKPAPAD@Z ENDP			; ReadIntoMemory
_TEXT	ENDS
PUBLIC	?ReadString@@YA_NPADPAPAD@Z			; ReadString
; Function compile flags: /Odtp /ZI
;	COMDAT ?ReadString@@YA_NPADPAPAD@Z
_TEXT	SEGMENT
$T57998 = -76						; size = 4
_dwLength$ = -8						; size = 4
_dwFullLength$ = -4					; size = 4
_pString$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
?ReadString@@YA_NPADPAPAD@Z PROC			; ReadString, COMDAT

; 556  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 557  : 	// length of string
; 558  : 	DWORD dwFullLength = *(DWORD*)*ppBlock;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	89 55 fc	 mov	 DWORD PTR _dwFullLength$[ebp], edx

; 559  : 	*ppBlock += 4;

  00013	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	83 c1 04	 add	 ecx, 4
  0001b	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0001e	89 0a		 mov	 DWORD PTR [edx], ecx

; 560  : 
; 561  : 	// limit string size
; 562  : 	DWORD dwLength = dwFullLength;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _dwFullLength$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR _dwLength$[ebp], eax

; 563  : 	if ( dwLength > 255 ) dwLength=255;

  00026	81 7d f8 ff 00
	00 00		 cmp	 DWORD PTR _dwLength$[ebp], 255 ; 000000ffH
  0002d	76 07		 jbe	 SHORT $LN3@ReadString
  0002f	c7 45 f8 ff 00
	00 00		 mov	 DWORD PTR _dwLength$[ebp], 255 ; 000000ffH
$LN3@ReadString:

; 564  : 	if ( dwLength > 0 )

  00036	83 7d f8 00	 cmp	 DWORD PTR _dwLength$[ebp], 0
  0003a	76 4a		 jbe	 SHORT $LN2@ReadString

; 565  : 	{
; 566  : 		// create if not present
; 567  : 		if ( pString==NULL ) pString = new char[dwLength+1];

  0003c	83 7d 08 00	 cmp	 DWORD PTR _pString$[ebp], 0
  00040	75 18		 jne	 SHORT $LN1@ReadString
  00042	8b 45 f8	 mov	 eax, DWORD PTR _dwLength$[ebp]
  00045	83 c0 01	 add	 eax, 1
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004e	83 c4 04	 add	 esp, 4
  00051	89 45 b4	 mov	 DWORD PTR $T57998[ebp], eax
  00054	8b 4d b4	 mov	 ecx, DWORD PTR $T57998[ebp]
  00057	89 4d 08	 mov	 DWORD PTR _pString$[ebp], ecx
$LN1@ReadString:

; 568  : 
; 569  : 		// copy string
; 570  : 		memcpy ( pString, *ppBlock, dwLength );

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _dwLength$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00061	8b 11		 mov	 edx, DWORD PTR [ecx]
  00063	52		 push	 edx
  00064	8b 45 08	 mov	 eax, DWORD PTR _pString$[ebp]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _memcpy
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 571  : 		pString [ dwLength ] = 0;

  00070	8b 45 08	 mov	 eax, DWORD PTR _pString$[ebp]
  00073	03 45 f8	 add	 eax, DWORD PTR _dwLength$[ebp]
  00076	c6 00 00	 mov	 BYTE PTR [eax], 0

; 572  : 		*ppBlock += dwFullLength;

  00079	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0007c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007e	03 4d fc	 add	 ecx, DWORD PTR _dwFullLength$[ebp]
  00081	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00084	89 0a		 mov	 DWORD PTR [edx], ecx
$LN2@ReadString:

; 573  : 	}
; 574  : 
; 575  : 	// okay
; 576  : 	return true;

  00086	b0 01		 mov	 al, 1

; 577  : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
?ReadString@@YA_NPADPAPAD@Z ENDP			; ReadString
_TEXT	ENDS
PUBLIC	?ReadVertexData@@YA_NPAPAEKKPAPAD@Z		; ReadVertexData
; Function compile flags: /Odtp /ZI
;	COMDAT ?ReadVertexData@@YA_NPAPAEKKPAPAD@Z
_TEXT	SEGMENT
$T58001 = -72						; size = 4
_dwLength$ = -4						; size = 4
_pbVertexData$ = 8					; size = 4
_dwFVFSize$ = 12					; size = 4
_dwVertexCount$ = 16					; size = 4
_ppBlock$ = 20						; size = 4
?ReadVertexData@@YA_NPAPAEKKPAPAD@Z PROC		; ReadVertexData, COMDAT

; 580  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 581  : 	DWORD dwLength = dwFVFSize * dwVertexCount;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _dwFVFSize$[ebp]
  0000c	0f af 45 10	 imul	 eax, DWORD PTR _dwVertexCount$[ebp]
  00010	89 45 fc	 mov	 DWORD PTR _dwLength$[ebp], eax

; 582  : 	if ( dwLength > 0 )

  00013	83 7d fc 00	 cmp	 DWORD PTR _dwLength$[ebp], 0
  00017	76 3c		 jbe	 SHORT $LN1@ReadVertex

; 583  : 	{
; 584  : 		(*pbVertexData) = (BYTE*)new char [ dwLength ];

  00019	8b 45 fc	 mov	 eax, DWORD PTR _dwLength$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00022	83 c4 04	 add	 esp, 4
  00025	89 45 b8	 mov	 DWORD PTR $T58001[ebp], eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR _pbVertexData$[ebp]
  0002b	8b 55 b8	 mov	 edx, DWORD PTR $T58001[ebp]
  0002e	89 11		 mov	 DWORD PTR [ecx], edx

; 585  : 		memcpy ( (*pbVertexData), *ppBlock, dwLength );

  00030	8b 45 fc	 mov	 eax, DWORD PTR _dwLength$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 14	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	52		 push	 edx
  0003a	8b 45 08	 mov	 eax, DWORD PTR _pbVertexData$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 _memcpy
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 586  : 		*ppBlock += dwLength;

  00048	8b 45 14	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0004b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004d	03 4d fc	 add	 ecx, DWORD PTR _dwLength$[ebp]
  00050	8b 55 14	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00053	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@ReadVertex:

; 587  : 	}
; 588  : 	return true;

  00055	b0 01		 mov	 al, 1

; 589  : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?ReadVertexData@@YA_NPAPAEKKPAPAD@Z ENDP		; ReadVertexData
_TEXT	ENDS
PUBLIC	?ReadIndexData@@YA_NPAPAGKPAPAD@Z		; ReadIndexData
; Function compile flags: /Odtp /ZI
;	COMDAT ?ReadIndexData@@YA_NPAPAGKPAPAD@Z
_TEXT	SEGMENT
$T58004 = -72						; size = 4
_dwLength$ = -4						; size = 4
_pwIndexData$ = 8					; size = 4
_dwIndexCount$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
?ReadIndexData@@YA_NPAPAGKPAPAD@Z PROC			; ReadIndexData, COMDAT

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 593  : 	DWORD dwLength = sizeof(WORD) * dwIndexCount;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _dwIndexCount$[ebp]
  0000c	d1 e0		 shl	 eax, 1
  0000e	89 45 fc	 mov	 DWORD PTR _dwLength$[ebp], eax

; 594  : 	if ( dwLength > 0 )

  00011	74 3c		 je	 SHORT $LN1@ReadIndexD

; 595  : 	{
; 596  : 		(*pwIndexData) = (WORD*)new char [ dwLength ];

  00013	8b 45 fc	 mov	 eax, DWORD PTR _dwLength$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001c	83 c4 04	 add	 esp, 4
  0001f	89 45 b8	 mov	 DWORD PTR $T58004[ebp], eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _pwIndexData$[ebp]
  00025	8b 55 b8	 mov	 edx, DWORD PTR $T58004[ebp]
  00028	89 11		 mov	 DWORD PTR [ecx], edx

; 597  : 		memcpy ( (*pwIndexData), *ppBlock, dwLength );

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _dwLength$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00031	8b 11		 mov	 edx, DWORD PTR [ecx]
  00033	52		 push	 edx
  00034	8b 45 08	 mov	 eax, DWORD PTR _pwIndexData$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _memcpy
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 598  : 		*ppBlock += dwLength;

  00042	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	03 4d fc	 add	 ecx, DWORD PTR _dwLength$[ebp]
  0004a	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0004d	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@ReadIndexD:

; 599  : 	}
; 600  : 	return true;

  0004f	b0 01		 mov	 al, 1

; 601  : }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?ReadIndexData@@YA_NPAPAGKPAPAD@Z ENDP			; ReadIndexData
_TEXT	ENDS
PUBLIC	?ReadOffsetListData@@YA_NPAPAHKPAPAD@Z		; ReadOffsetListData
; Function compile flags: /Odtp /ZI
;	COMDAT ?ReadOffsetListData@@YA_NPAPAHKPAPAD@Z
_TEXT	SEGMENT
$T58007 = -72						; size = 4
_dwLength$ = -4						; size = 4
_pwIndexData$ = 8					; size = 4
_dwIndexCount$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
?ReadOffsetListData@@YA_NPAPAHKPAPAD@Z PROC		; ReadOffsetListData, COMDAT

; 604  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 605  : 	DWORD dwLength = sizeof(int) * dwIndexCount;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _dwIndexCount$[ebp]
  0000c	c1 e0 02	 shl	 eax, 2
  0000f	89 45 fc	 mov	 DWORD PTR _dwLength$[ebp], eax

; 606  : 	if ( dwLength > 0 )

  00012	83 7d fc 00	 cmp	 DWORD PTR _dwLength$[ebp], 0
  00016	76 3c		 jbe	 SHORT $LN1@ReadOffset

; 607  : 	{
; 608  : 		(*pwIndexData) = (int*)new char [ dwLength ];

  00018	8b 45 fc	 mov	 eax, DWORD PTR _dwLength$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 45 b8	 mov	 DWORD PTR $T58007[ebp], eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _pwIndexData$[ebp]
  0002a	8b 55 b8	 mov	 edx, DWORD PTR $T58007[ebp]
  0002d	89 11		 mov	 DWORD PTR [ecx], edx

; 609  : 		memcpy ( (*pwIndexData), *ppBlock, dwLength );

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _dwLength$[ebp]
  00032	50		 push	 eax
  00033	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR _pwIndexData$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 _memcpy
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 610  : 		*ppBlock += dwLength;

  00047	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	03 4d fc	 add	 ecx, DWORD PTR _dwLength$[ebp]
  0004f	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00052	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@ReadOffset:

; 611  : 	}
; 612  : 	return true;

  00054	b0 01		 mov	 al, 1

; 613  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?ReadOffsetListData@@YA_NPAPAHKPAPAD@Z ENDP		; ReadOffsetListData
_TEXT	ENDS
PUBLIC	?ScanBones@@YA_NPAUsBone@@KPAPADPAK@Z		; ScanBones
; Function compile flags: /Odtp /ZI
;	COMDAT ?ScanBones@@YA_NPAUsBone@@KPAPADPAK@Z
_TEXT	SEGMENT
_dwMemorySize$57102 = -16				; size = 4
_pCodeSizePtr$57098 = -12				; size = 4
_pBone$57097 = -8					; size = 4
_bi$57093 = -4						; size = 4
_pBoneArray$ = 8					; size = 4
_dwBoneCount$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
_pdwSize$ = 20						; size = 4
?ScanBones@@YA_NPAUsBone@@KPAPADPAK@Z PROC		; ScanBones, COMDAT

; 621  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 622  : 	// No bones
; 623  : 	if ( pBoneArray )

  00009	83 7d 08 00	 cmp	 DWORD PTR _pBoneArray$[ebp], 0
  0000d	0f 84 22 02 00
	00		 je	 $LN10@ScanBones

; 624  : 	{
; 625  : 		// for each texture in the array
; 626  : 		for ( DWORD bi=0; bi<dwBoneCount; bi++ )

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bi$57093[ebp], 0
  0001a	eb 09		 jmp	 SHORT $LN9@ScanBones
$LN8@ScanBones:
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _bi$57093[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 fc	 mov	 DWORD PTR _bi$57093[ebp], eax
$LN9@ScanBones:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _bi$57093[ebp]
  00028	3b 45 0c	 cmp	 eax, DWORD PTR _dwBoneCount$[ebp]
  0002b	0f 83 04 02 00
	00		 jae	 $LN10@ScanBones

; 627  : 		{
; 628  : 			// bone in question
; 629  : 			sBone* pBone = &(pBoneArray [ bi ]);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _bi$57093[ebp]
  00034	69 c0 58 01 00
	00		 imul	 eax, 344		; 00000158H
  0003a	03 45 08	 add	 eax, DWORD PTR _pBoneArray$[ebp]
  0003d	89 45 f8	 mov	 DWORD PTR _pBone$57097[ebp], eax

; 630  : 
; 631  : 			// bone name
; 632  : 			LPSTR pCodeSizePtr = NULL;

  00040	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57098[ebp], 0

; 633  : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  00047	83 7d 10 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0004b	74 0b		 je	 SHORT $LN6@ScanBones
  0004d	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	83 c1 04	 add	 ecx, 4
  00055	89 4d f4	 mov	 DWORD PTR _pCodeSizePtr$57098[ebp], ecx
$LN6@ScanBones:

; 634  : 			WriteCODE ( DBOBLOCK_BONES_NAME, 0, ppBlock, pdwSize );

  00058	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0005b	50		 push	 eax
  0005c	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0005f	51		 push	 ecx
  00060	6a 00		 push	 0
  00062	68 2d 01 00 00	 push	 301			; 0000012dH
  00067	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0006c	83 c4 10	 add	 esp, 16			; 00000010H

; 635  : 			WriteString ( pBone->szName, ppBlock, pdwSize );

  0006f	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f8	 mov	 edx, DWORD PTR _pBone$57097[ebp]
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?WriteString@@YA_NPADPAPADPAK@Z ; WriteString
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH

; 636  : 			WriteCR ( ppBlock, pdwSize );

  00083	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00086	50		 push	 eax
  00087	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00090	83 c4 08	 add	 esp, 8

; 637  : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00093	83 7d f4 00	 cmp	 DWORD PTR _pCodeSizePtr$57098[ebp], 0
  00097	74 10		 je	 SHORT $LN5@ScanBones
  00099	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	83 e9 04	 sub	 ecx, 4
  000a1	2b 4d f4	 sub	 ecx, DWORD PTR _pCodeSizePtr$57098[ebp]
  000a4	8b 55 f4	 mov	 edx, DWORD PTR _pCodeSizePtr$57098[ebp]
  000a7	89 0a		 mov	 DWORD PTR [edx], ecx
$LN5@ScanBones:

; 638  : 
; 639  : 			// bone num influences
; 640  : 			WriteCODE ( DBOBLOCK_BONES_NUMINFLUENCES, 4, ppBlock, pdwSize );

  000a9	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000ac	50		 push	 eax
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000b0	51		 push	 ecx
  000b1	6a 04		 push	 4
  000b3	68 2e 01 00 00	 push	 302			; 0000012eH
  000b8	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  000bd	83 c4 10	 add	 esp, 16			; 00000010H

; 641  : 			WriteDWORD ( pBone->dwNumInfluences, ppBlock, pdwSize );

  000c0	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000c3	50		 push	 eax
  000c4	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000c7	51		 push	 ecx
  000c8	8b 55 f8	 mov	 edx, DWORD PTR _pBone$57097[ebp]
  000cb	8b 82 00 01 00
	00		 mov	 eax, DWORD PTR [edx+256]
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 642  : 			WriteCR ( ppBlock, pdwSize );

  000da	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000dd	50		 push	 eax
  000de	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  000e7	83 c4 08	 add	 esp, 8

; 643  : 
; 644  : 			// bone vertices
; 645  : 			DWORD dwMemorySize = sizeof(DWORD) * pBone->dwNumInfluences;

  000ea	8b 45 f8	 mov	 eax, DWORD PTR _pBone$57097[ebp]
  000ed	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [eax+256]
  000f3	c1 e1 02	 shl	 ecx, 2
  000f6	89 4d f0	 mov	 DWORD PTR _dwMemorySize$57102[ebp], ecx

; 646  : 			if ( dwMemorySize > 0 )

  000f9	83 7d f0 00	 cmp	 DWORD PTR _dwMemorySize$57102[ebp], 0
  000fd	76 37		 jbe	 SHORT $LN4@ScanBones

; 647  : 			{
; 648  : 				WriteCODE	( DBOBLOCK_BONES_VERTICES, dwMemorySize, ppBlock, pdwSize );

  000ff	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00102	50		 push	 eax
  00103	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00106	51		 push	 ecx
  00107	8b 55 f0	 mov	 edx, DWORD PTR _dwMemorySize$57102[ebp]
  0010a	52		 push	 edx
  0010b	68 2f 01 00 00	 push	 303			; 0000012fH
  00110	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00115	83 c4 10	 add	 esp, 16			; 00000010H

; 649  : 				WriteMEMORY ( (BYTE*)pBone->pVertices, dwMemorySize, ppBlock, pdwSize );

  00118	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0011f	51		 push	 ecx
  00120	8b 55 f0	 mov	 edx, DWORD PTR _dwMemorySize$57102[ebp]
  00123	52		 push	 edx
  00124	8b 45 f8	 mov	 eax, DWORD PTR _pBone$57097[ebp]
  00127	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 ?WriteMEMORY@@YA_NPAEKPAPADPAK@Z ; WriteMEMORY
  00133	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@ScanBones:

; 650  : 			}
; 651  : 			WriteCR ( ppBlock, pdwSize );

  00136	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00139	50		 push	 eax
  0013a	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0013d	51		 push	 ecx
  0013e	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00143	83 c4 08	 add	 esp, 8

; 652  : 
; 653  : 			// bone weights
; 654  : 			dwMemorySize = sizeof(float) * pBone->dwNumInfluences;

  00146	8b 45 f8	 mov	 eax, DWORD PTR _pBone$57097[ebp]
  00149	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [eax+256]
  0014f	c1 e1 02	 shl	 ecx, 2
  00152	89 4d f0	 mov	 DWORD PTR _dwMemorySize$57102[ebp], ecx

; 655  : 			if ( dwMemorySize > 0 )

  00155	83 7d f0 00	 cmp	 DWORD PTR _dwMemorySize$57102[ebp], 0
  00159	76 37		 jbe	 SHORT $LN3@ScanBones

; 656  : 			{
; 657  : 				WriteCODE	( DBOBLOCK_BONES_WEIGHTS, dwMemorySize, ppBlock, pdwSize );

  0015b	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0015e	50		 push	 eax
  0015f	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00162	51		 push	 ecx
  00163	8b 55 f0	 mov	 edx, DWORD PTR _dwMemorySize$57102[ebp]
  00166	52		 push	 edx
  00167	68 30 01 00 00	 push	 304			; 00000130H
  0016c	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00171	83 c4 10	 add	 esp, 16			; 00000010H

; 658  : 				WriteMEMORY ( (BYTE*)pBone->pWeights, dwMemorySize, ppBlock, pdwSize );

  00174	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00177	50		 push	 eax
  00178	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0017b	51		 push	 ecx
  0017c	8b 55 f0	 mov	 edx, DWORD PTR _dwMemorySize$57102[ebp]
  0017f	52		 push	 edx
  00180	8b 45 f8	 mov	 eax, DWORD PTR _pBone$57097[ebp]
  00183	8b 88 08 01 00
	00		 mov	 ecx, DWORD PTR [eax+264]
  00189	51		 push	 ecx
  0018a	e8 00 00 00 00	 call	 ?WriteMEMORY@@YA_NPAEKPAPADPAK@Z ; WriteMEMORY
  0018f	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@ScanBones:

; 659  : 			}
; 660  : 			WriteCR ( ppBlock, pdwSize );

  00192	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00195	50		 push	 eax
  00196	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00199	51		 push	 ecx
  0019a	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0019f	83 c4 08	 add	 esp, 8

; 661  : 
; 662  : 			// bone matrix translation
; 663  : 			pCodeSizePtr = NULL;

  001a2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57098[ebp], 0

; 664  : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  001a9	83 7d 10 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  001ad	74 0b		 je	 SHORT $LN2@ScanBones
  001af	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b4	83 c1 04	 add	 ecx, 4
  001b7	89 4d f4	 mov	 DWORD PTR _pCodeSizePtr$57098[ebp], ecx
$LN2@ScanBones:

; 665  : 			WriteCODE ( DBOBLOCK_BONES_TRANSLATIONMATRIX, 0, ppBlock, pdwSize );

  001ba	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001bd	50		 push	 eax
  001be	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001c1	51		 push	 ecx
  001c2	6a 00		 push	 0
  001c4	68 31 01 00 00	 push	 305			; 00000131H
  001c9	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  001ce	83 c4 10	 add	 esp, 16			; 00000010H

; 666  : 			WriteMATRIX ( pBone->matTranslation, ppBlock, pdwSize );

  001d1	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001d4	50		 push	 eax
  001d5	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001d8	51		 push	 ecx
  001d9	8b 75 f8	 mov	 esi, DWORD PTR _pBone$57097[ebp]
  001dc	81 c6 0c 01 00
	00		 add	 esi, 268		; 0000010cH
  001e2	83 ec 40	 sub	 esp, 64			; 00000040H
  001e5	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001ea	8b fc		 mov	 edi, esp
  001ec	f3 a5		 rep movsd
  001ee	e8 00 00 00 00	 call	 ?WriteMATRIX@@YA_NUD3DXMATRIX@@PAPADPAK@Z ; WriteMATRIX
  001f3	83 c4 48	 add	 esp, 72			; 00000048H

; 667  : 			WriteCR ( ppBlock, pdwSize );

  001f6	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001f9	50		 push	 eax
  001fa	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001fd	51		 push	 ecx
  001fe	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00203	83 c4 08	 add	 esp, 8

; 668  : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00206	83 7d f4 00	 cmp	 DWORD PTR _pCodeSizePtr$57098[ebp], 0
  0020a	74 10		 je	 SHORT $LN1@ScanBones
  0020c	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0020f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00211	83 e9 04	 sub	 ecx, 4
  00214	2b 4d f4	 sub	 ecx, DWORD PTR _pCodeSizePtr$57098[ebp]
  00217	8b 55 f4	 mov	 edx, DWORD PTR _pCodeSizePtr$57098[ebp]
  0021a	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@ScanBones:

; 669  : 
; 670  : 			// end of this bone
; 671  : 			WriteCODE ( 0, 0, ppBlock, pdwSize );

  0021c	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0021f	50		 push	 eax
  00220	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00223	51		 push	 ecx
  00224	6a 00		 push	 0
  00226	6a 00		 push	 0
  00228	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0022d	83 c4 10	 add	 esp, 16			; 00000010H

; 672  : 		}

  00230	e9 e7 fd ff ff	 jmp	 $LN8@ScanBones
$LN10@ScanBones:

; 673  : 	}
; 674  : 
; 675  : 	// zero code
; 676  : 	WriteCODE ( 0, 0, ppBlock, pdwSize );

  00235	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00238	50		 push	 eax
  00239	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0023c	51		 push	 ecx
  0023d	6a 00		 push	 0
  0023f	6a 00		 push	 0
  00241	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00246	83 c4 10	 add	 esp, 16			; 00000010H

; 677  : 
; 678  : 	// okay
; 679  : 	return true;

  00249	b0 01		 mov	 al, 1

; 680  : }

  0024b	5f		 pop	 edi
  0024c	5e		 pop	 esi
  0024d	5b		 pop	 ebx
  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c3		 ret	 0
?ScanBones@@YA_NPAUsBone@@KPAPADPAK@Z ENDP		; ScanBones
_TEXT	ENDS
PUBLIC	?ScanTextures@@YA_NPAUsTexture@@KPAPADPAK@Z	; ScanTextures
; Function compile flags: /Odtp /ZI
;	COMDAT ?ScanTextures@@YA_NPAUsTexture@@KPAPADPAK@Z
_TEXT	SEGMENT
_pCodeSizePtr$57124 = -12				; size = 4
_pTexture$57123 = -8					; size = 4
_ti$57119 = -4						; size = 4
_pTextureArray$ = 8					; size = 4
_dwTextureCount$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
_pdwSize$ = 20						; size = 4
?ScanTextures@@YA_NPAUsTexture@@KPAPADPAK@Z PROC	; ScanTextures, COMDAT

; 683  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 684  : 	// No textures
; 685  : 	if ( pTextureArray )

  00009	83 7d 08 00	 cmp	 DWORD PTR _pTextureArray$[ebp], 0
  0000d	0f 84 bb 03 00
	00		 je	 $LN6@ScanTextur

; 686  : 	{
; 687  : 		// for each texture in the array
; 688  : 		for ( DWORD ti=0; ti<dwTextureCount; ti++ )

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ti$57119[ebp], 0
  0001a	eb 09		 jmp	 SHORT $LN5@ScanTextur
$LN4@ScanTextur:
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ti$57119[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 fc	 mov	 DWORD PTR _ti$57119[ebp], eax
$LN5@ScanTextur:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _ti$57119[ebp]
  00028	3b 45 0c	 cmp	 eax, DWORD PTR _dwTextureCount$[ebp]
  0002b	0f 83 9d 03 00
	00		 jae	 $LN6@ScanTextur

; 689  : 		{
; 690  : 			// texture in question
; 691  : 			sTexture* pTexture = &(pTextureArray [ ti ]);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _ti$57119[ebp]
  00034	69 c0 48 01 00
	00		 imul	 eax, 328		; 00000148H
  0003a	03 45 08	 add	 eax, DWORD PTR _pTextureArray$[ebp]
  0003d	89 45 f8	 mov	 DWORD PTR _pTexture$57123[ebp], eax

; 692  : 
; 693  : 			// texture name
; 694  : 			LPSTR pCodeSizePtr = NULL;

  00040	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57124[ebp], 0

; 695  : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  00047	83 7d 10 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0004b	74 0b		 je	 SHORT $LN2@ScanTextur
  0004d	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	83 c1 04	 add	 ecx, 4
  00055	89 4d f4	 mov	 DWORD PTR _pCodeSizePtr$57124[ebp], ecx
$LN2@ScanTextur:

; 696  : 			WriteCODE ( DBOBLOCK_TEXTURE_NAME, 0, ppBlock, pdwSize );

  00058	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0005b	50		 push	 eax
  0005c	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0005f	51		 push	 ecx
  00060	6a 00		 push	 0
  00062	68 8d 00 00 00	 push	 141			; 0000008dH
  00067	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0006c	83 c4 10	 add	 esp, 16			; 00000010H

; 697  : 			WriteString ( pTexture->pName, ppBlock, pdwSize );

  0006f	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?WriteString@@YA_NPADPAPADPAK@Z ; WriteString
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH

; 698  : 			WriteCR ( ppBlock, pdwSize );

  00083	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00086	50		 push	 eax
  00087	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00090	83 c4 08	 add	 esp, 8

; 699  : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00093	83 7d f4 00	 cmp	 DWORD PTR _pCodeSizePtr$57124[ebp], 0
  00097	74 10		 je	 SHORT $LN1@ScanTextur
  00099	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	83 e9 04	 sub	 ecx, 4
  000a1	2b 4d f4	 sub	 ecx, DWORD PTR _pCodeSizePtr$57124[ebp]
  000a4	8b 55 f4	 mov	 edx, DWORD PTR _pCodeSizePtr$57124[ebp]
  000a7	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@ScanTextur:

; 700  : 
; 701  : 			// texture settings
; 702  : 			WriteCODE ( DBOBLOCK_TEXTURE_STAGE, 4, ppBlock, pdwSize );

  000a9	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000ac	50		 push	 eax
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000b0	51		 push	 ecx
  000b1	6a 04		 push	 4
  000b3	68 8e 00 00 00	 push	 142			; 0000008eH
  000b8	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  000bd	83 c4 10	 add	 esp, 16			; 00000010H

; 703  : 			WriteDWORD ( pTexture->dwStage, ppBlock, pdwSize );

  000c0	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000c3	50		 push	 eax
  000c4	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000c7	51		 push	 ecx
  000c8	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  000cb	8b 82 0c 01 00
	00		 mov	 eax, DWORD PTR [edx+268]
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 704  : 			WriteCR ( ppBlock, pdwSize );

  000da	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000dd	50		 push	 eax
  000de	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  000e7	83 c4 08	 add	 esp, 8

; 705  : 
; 706  : 			WriteCODE ( DBOBLOCK_TEXTURE_BMODE, 4, ppBlock, pdwSize );

  000ea	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000ed	50		 push	 eax
  000ee	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000f1	51		 push	 ecx
  000f2	6a 04		 push	 4
  000f4	68 8f 00 00 00	 push	 143			; 0000008fH
  000f9	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  000fe	83 c4 10	 add	 esp, 16			; 00000010H

; 707  : 			WriteDWORD ( pTexture->dwBlendMode, ppBlock, pdwSize );

  00101	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00104	50		 push	 eax
  00105	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00108	51		 push	 ecx
  00109	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  0010c	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00118	83 c4 0c	 add	 esp, 12			; 0000000cH

; 708  : 			WriteCR ( ppBlock, pdwSize );

  0011b	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0011e	50		 push	 eax
  0011f	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00122	51		 push	 ecx
  00123	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00128	83 c4 08	 add	 esp, 8

; 709  : 
; 710  : 			WriteCODE ( DBOBLOCK_TEXTURE_BARG1, 4, ppBlock, pdwSize );

  0012b	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0012e	50		 push	 eax
  0012f	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00132	51		 push	 ecx
  00133	6a 04		 push	 4
  00135	68 90 00 00 00	 push	 144			; 00000090H
  0013a	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0013f	83 c4 10	 add	 esp, 16			; 00000010H

; 711  : 			WriteDWORD ( pTexture->dwBlendArg1, ppBlock, pdwSize );

  00142	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00145	50		 push	 eax
  00146	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00149	51		 push	 ecx
  0014a	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  0014d	8b 82 14 01 00
	00		 mov	 eax, DWORD PTR [edx+276]
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00159	83 c4 0c	 add	 esp, 12			; 0000000cH

; 712  : 			WriteCR ( ppBlock, pdwSize );

  0015c	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0015f	50		 push	 eax
  00160	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00163	51		 push	 ecx
  00164	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00169	83 c4 08	 add	 esp, 8

; 713  : 
; 714  : 			WriteCODE ( DBOBLOCK_TEXTURE_BARG2, 4, ppBlock, pdwSize );

  0016c	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0016f	50		 push	 eax
  00170	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00173	51		 push	 ecx
  00174	6a 04		 push	 4
  00176	68 91 00 00 00	 push	 145			; 00000091H
  0017b	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00180	83 c4 10	 add	 esp, 16			; 00000010H

; 715  : 			WriteDWORD ( pTexture->dwBlendArg2, ppBlock, pdwSize );

  00183	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00186	50		 push	 eax
  00187	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0018a	51		 push	 ecx
  0018b	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  0018e	8b 82 18 01 00
	00		 mov	 eax, DWORD PTR [edx+280]
  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0019a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 716  : 			WriteCR ( ppBlock, pdwSize );

  0019d	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001a0	50		 push	 eax
  001a1	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001a4	51		 push	 ecx
  001a5	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  001aa	83 c4 08	 add	 esp, 8

; 717  : 
; 718  : 			WriteCODE ( DBOBLOCK_TEXTURE_ADDRU, 4, ppBlock, pdwSize );

  001ad	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001b0	50		 push	 eax
  001b1	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001b4	51		 push	 ecx
  001b5	6a 04		 push	 4
  001b7	68 92 00 00 00	 push	 146			; 00000092H
  001bc	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  001c1	83 c4 10	 add	 esp, 16			; 00000010H

; 719  : 			WriteDWORD ( pTexture->dwAddressU, ppBlock, pdwSize );

  001c4	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001c7	50		 push	 eax
  001c8	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001cb	51		 push	 ecx
  001cc	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  001cf	8b 82 1c 01 00
	00		 mov	 eax, DWORD PTR [edx+284]
  001d5	50		 push	 eax
  001d6	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  001db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 720  : 			WriteCR ( ppBlock, pdwSize );

  001de	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001e1	50		 push	 eax
  001e2	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001e5	51		 push	 ecx
  001e6	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  001eb	83 c4 08	 add	 esp, 8

; 721  : 
; 722  : 			WriteCODE ( DBOBLOCK_TEXTURE_ADDRV, 4, ppBlock, pdwSize );

  001ee	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001f1	50		 push	 eax
  001f2	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001f5	51		 push	 ecx
  001f6	6a 04		 push	 4
  001f8	68 93 00 00 00	 push	 147			; 00000093H
  001fd	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00202	83 c4 10	 add	 esp, 16			; 00000010H

; 723  : 			WriteDWORD ( pTexture->dwAddressV, ppBlock, pdwSize );

  00205	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00208	50		 push	 eax
  00209	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0020c	51		 push	 ecx
  0020d	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  00210	8b 82 20 01 00
	00		 mov	 eax, DWORD PTR [edx+288]
  00216	50		 push	 eax
  00217	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0021c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 724  : 			WriteCR ( ppBlock, pdwSize );

  0021f	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00222	50		 push	 eax
  00223	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00226	51		 push	 ecx
  00227	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0022c	83 c4 08	 add	 esp, 8

; 725  : 
; 726  : 			WriteCODE ( DBOBLOCK_TEXTURE_MAG, 4, ppBlock, pdwSize );

  0022f	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00232	50		 push	 eax
  00233	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00236	51		 push	 ecx
  00237	6a 04		 push	 4
  00239	68 94 00 00 00	 push	 148			; 00000094H
  0023e	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00243	83 c4 10	 add	 esp, 16			; 00000010H

; 727  : 			WriteDWORD ( pTexture->dwMagState, ppBlock, pdwSize );

  00246	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00249	50		 push	 eax
  0024a	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0024d	51		 push	 ecx
  0024e	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  00251	8b 82 24 01 00
	00		 mov	 eax, DWORD PTR [edx+292]
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0025d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 728  : 			WriteCR ( ppBlock, pdwSize );

  00260	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00263	50		 push	 eax
  00264	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00267	51		 push	 ecx
  00268	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0026d	83 c4 08	 add	 esp, 8

; 729  : 
; 730  : 			WriteCODE ( DBOBLOCK_TEXTURE_MIN, 4, ppBlock, pdwSize );

  00270	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00273	50		 push	 eax
  00274	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00277	51		 push	 ecx
  00278	6a 04		 push	 4
  0027a	68 95 00 00 00	 push	 149			; 00000095H
  0027f	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00284	83 c4 10	 add	 esp, 16			; 00000010H

; 731  : 			WriteDWORD ( pTexture->dwMinState, ppBlock, pdwSize );

  00287	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0028a	50		 push	 eax
  0028b	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0028e	51		 push	 ecx
  0028f	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  00292	8b 82 28 01 00
	00		 mov	 eax, DWORD PTR [edx+296]
  00298	50		 push	 eax
  00299	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0029e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 732  : 			WriteCR ( ppBlock, pdwSize );

  002a1	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002a4	50		 push	 eax
  002a5	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002a8	51		 push	 ecx
  002a9	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  002ae	83 c4 08	 add	 esp, 8

; 733  : 
; 734  : 			WriteCODE ( DBOBLOCK_TEXTURE_MIP, 4, ppBlock, pdwSize );

  002b1	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002b4	50		 push	 eax
  002b5	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002b8	51		 push	 ecx
  002b9	6a 04		 push	 4
  002bb	68 96 00 00 00	 push	 150			; 00000096H
  002c0	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  002c5	83 c4 10	 add	 esp, 16			; 00000010H

; 735  : 			WriteDWORD ( pTexture->dwMipState, ppBlock, pdwSize );

  002c8	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002cb	50		 push	 eax
  002cc	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002cf	51		 push	 ecx
  002d0	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  002d3	8b 82 2c 01 00
	00		 mov	 eax, DWORD PTR [edx+300]
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  002df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 736  : 			WriteCR ( ppBlock, pdwSize );

  002e2	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002e5	50		 push	 eax
  002e6	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002e9	51		 push	 ecx
  002ea	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  002ef	83 c4 08	 add	 esp, 8

; 737  : 
; 738  : 			WriteCODE ( DBOBLOCK_TEXTURE_TCMODE, 4, ppBlock, pdwSize );

  002f2	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002f5	50		 push	 eax
  002f6	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002f9	51		 push	 ecx
  002fa	6a 04		 push	 4
  002fc	68 97 00 00 00	 push	 151			; 00000097H
  00301	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00306	83 c4 10	 add	 esp, 16			; 00000010H

; 739  : 			WriteDWORD ( pTexture->dwTexCoordMode, ppBlock, pdwSize );

  00309	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0030c	50		 push	 eax
  0030d	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00310	51		 push	 ecx
  00311	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  00314	8b 82 30 01 00
	00		 mov	 eax, DWORD PTR [edx+304]
  0031a	50		 push	 eax
  0031b	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00320	83 c4 0c	 add	 esp, 12			; 0000000cH

; 740  : 			WriteCR ( ppBlock, pdwSize );

  00323	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00326	50		 push	 eax
  00327	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0032a	51		 push	 ecx
  0032b	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00330	83 c4 08	 add	 esp, 8

; 741  : 
; 742  : 			WriteCODE ( DBOBLOCK_TEXTURE_PRIMST, 4, ppBlock, pdwSize );

  00333	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00336	50		 push	 eax
  00337	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0033a	51		 push	 ecx
  0033b	6a 04		 push	 4
  0033d	68 98 00 00 00	 push	 152			; 00000098H
  00342	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00347	83 c4 10	 add	 esp, 16			; 00000010H

; 743  : 			WriteDWORD ( (DWORD) pTexture->iStartIndex, ppBlock, pdwSize );

  0034a	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0034d	50		 push	 eax
  0034e	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00351	51		 push	 ecx
  00352	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  00355	8b 82 34 01 00
	00		 mov	 eax, DWORD PTR [edx+308]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00361	83 c4 0c	 add	 esp, 12			; 0000000cH

; 744  : 			WriteCR ( ppBlock, pdwSize );

  00364	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00367	50		 push	 eax
  00368	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0036b	51		 push	 ecx
  0036c	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00371	83 c4 08	 add	 esp, 8

; 745  : 
; 746  : 			WriteCODE ( DBOBLOCK_TEXTURE_PRIMCN, 4, ppBlock, pdwSize );

  00374	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00377	50		 push	 eax
  00378	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0037b	51		 push	 ecx
  0037c	6a 04		 push	 4
  0037e	68 99 00 00 00	 push	 153			; 00000099H
  00383	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00388	83 c4 10	 add	 esp, 16			; 00000010H

; 747  : 			WriteDWORD ( (DWORD) pTexture->iPrimitiveCount, ppBlock, pdwSize );

  0038b	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0038e	50		 push	 eax
  0038f	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00392	51		 push	 ecx
  00393	8b 55 f8	 mov	 edx, DWORD PTR _pTexture$57123[ebp]
  00396	8b 82 38 01 00
	00		 mov	 eax, DWORD PTR [edx+312]
  0039c	50		 push	 eax
  0039d	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  003a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 748  : 			WriteCR ( ppBlock, pdwSize );

  003a5	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  003a8	50		 push	 eax
  003a9	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  003ac	51		 push	 ecx
  003ad	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  003b2	83 c4 08	 add	 esp, 8

; 749  : 
; 750  : 			// end of this texture
; 751  : 			WriteCODE ( 0, 0, ppBlock, pdwSize );

  003b5	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  003b8	50		 push	 eax
  003b9	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  003bc	51		 push	 ecx
  003bd	6a 00		 push	 0
  003bf	6a 00		 push	 0
  003c1	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  003c6	83 c4 10	 add	 esp, 16			; 00000010H

; 752  : 		}

  003c9	e9 4e fc ff ff	 jmp	 $LN4@ScanTextur
$LN6@ScanTextur:

; 753  : 	}
; 754  : 
; 755  : 	// zero code
; 756  : 	WriteCODE ( 0, 0, ppBlock, pdwSize );

  003ce	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  003d1	50		 push	 eax
  003d2	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  003d5	51		 push	 ecx
  003d6	6a 00		 push	 0
  003d8	6a 00		 push	 0
  003da	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  003df	83 c4 10	 add	 esp, 16			; 00000010H

; 757  : 
; 758  : 	// okay
; 759  : 	return true;

  003e2	b0 01		 mov	 al, 1

; 760  : }

  003e4	5f		 pop	 edi
  003e5	5e		 pop	 esi
  003e6	5b		 pop	 ebx
  003e7	8b e5		 mov	 esp, ebp
  003e9	5d		 pop	 ebp
  003ea	c3		 ret	 0
?ScanTextures@@YA_NPAUsTexture@@KPAPADPAK@Z ENDP	; ScanTextures
_TEXT	ENDS
PUBLIC	?ScanMultiMaterial@@YA_NPAUsMultiMaterial@@KPAPADPAK@Z ; ScanMultiMaterial
; Function compile flags: /Odtp /ZI
;	COMDAT ?ScanMultiMaterial@@YA_NPAUsMultiMaterial@@KPAPADPAK@Z
_TEXT	SEGMENT
_pCodeSizePtr$57142 = -12				; size = 4
_pMultiMat$57141 = -8					; size = 4
_ti$57137 = -4						; size = 4
_pMultiMaterialArray$ = 8				; size = 4
_dwMultiMatCount$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
_pdwSize$ = 20						; size = 4
?ScanMultiMaterial@@YA_NPAUsMultiMaterial@@KPAPADPAK@Z PROC ; ScanMultiMaterial, COMDAT

; 763  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 764  : 	// No multimaterial array
; 765  : 	if ( pMultiMaterialArray )

  00009	83 7d 08 00	 cmp	 DWORD PTR _pMultiMaterialArray$[ebp], 0
  0000d	0f 84 be 01 00
	00		 je	 $LN6@ScanMultiM

; 766  : 	{
; 767  : 		// for each in the array
; 768  : 		for ( DWORD ti=0; ti<dwMultiMatCount; ti++ )

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ti$57137[ebp], 0
  0001a	eb 09		 jmp	 SHORT $LN5@ScanMultiM
$LN4@ScanMultiM:
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _ti$57137[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 fc	 mov	 DWORD PTR _ti$57137[ebp], eax
$LN5@ScanMultiM:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _ti$57137[ebp]
  00028	3b 45 0c	 cmp	 eax, DWORD PTR _dwMultiMatCount$[ebp]
  0002b	0f 83 a0 01 00
	00		 jae	 $LN6@ScanMultiM

; 769  : 		{
; 770  : 			// multimaterial in question
; 771  : 			sMultiMaterial* pMultiMat = &(pMultiMaterialArray [ ti ]);

  00031	8b 45 fc	 mov	 eax, DWORD PTR _ti$57137[ebp]
  00034	69 c0 54 01 00
	00		 imul	 eax, 340		; 00000154H
  0003a	03 45 08	 add	 eax, DWORD PTR _pMultiMaterialArray$[ebp]
  0003d	89 45 f8	 mov	 DWORD PTR _pMultiMat$57141[ebp], eax

; 772  : 
; 773  : 			// write multimaterial name
; 774  : 			LPSTR pCodeSizePtr = NULL;

  00040	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57142[ebp], 0

; 775  : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  00047	83 7d 10 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0004b	74 0b		 je	 SHORT $LN2@ScanMultiM
  0004d	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00050	8b 08		 mov	 ecx, DWORD PTR [eax]
  00052	83 c1 04	 add	 ecx, 4
  00055	89 4d f4	 mov	 DWORD PTR _pCodeSizePtr$57142[ebp], ecx
$LN2@ScanMultiM:

; 776  : 			WriteCODE ( DBOBLOCK_MULTIMAT_NAME, 0, ppBlock, pdwSize );

  00058	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0005b	50		 push	 eax
  0005c	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0005f	51		 push	 ecx
  00060	6a 00		 push	 0
  00062	68 a1 00 00 00	 push	 161			; 000000a1H
  00067	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0006c	83 c4 10	 add	 esp, 16			; 00000010H

; 777  : 			WriteString ( pMultiMat->pName, ppBlock, pdwSize );

  0006f	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f8	 mov	 edx, DWORD PTR _pMultiMat$57141[ebp]
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?WriteString@@YA_NPADPAPADPAK@Z ; WriteString
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH

; 778  : 			WriteCR ( ppBlock, pdwSize );

  00083	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00086	50		 push	 eax
  00087	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00090	83 c4 08	 add	 esp, 8

; 779  : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00093	83 7d f4 00	 cmp	 DWORD PTR _pCodeSizePtr$57142[ebp], 0
  00097	74 10		 je	 SHORT $LN1@ScanMultiM
  00099	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	83 e9 04	 sub	 ecx, 4
  000a1	2b 4d f4	 sub	 ecx, DWORD PTR _pCodeSizePtr$57142[ebp]
  000a4	8b 55 f4	 mov	 edx, DWORD PTR _pCodeSizePtr$57142[ebp]
  000a7	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@ScanMultiM:

; 780  : 
; 781  : 			// write multimaterial material information
; 782  : 			WriteCODE	( DBOBLOCK_MULTIMAT_MATERIAL, sizeof(pMultiMat->mMaterial), ppBlock, pdwSize );

  000a9	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000ac	50		 push	 eax
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000b0	51		 push	 ecx
  000b1	6a 44		 push	 68			; 00000044H
  000b3	68 a2 00 00 00	 push	 162			; 000000a2H
  000b8	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  000bd	83 c4 10	 add	 esp, 16			; 00000010H

; 783  : 			WriteMATERIAL ( pMultiMat->mMaterial,			ppBlock, pdwSize );

  000c0	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000c3	50		 push	 eax
  000c4	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000c7	51		 push	 ecx
  000c8	8b 75 f8	 mov	 esi, DWORD PTR _pMultiMat$57141[ebp]
  000cb	81 c6 04 01 00
	00		 add	 esi, 260		; 00000104H
  000d1	83 ec 44	 sub	 esp, 68			; 00000044H
  000d4	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  000d9	8b fc		 mov	 edi, esp
  000db	f3 a5		 rep movsd
  000dd	e8 00 00 00 00	 call	 ?WriteMATERIAL@@YA_NU_D3DMATERIAL9@@PAPADPAK@Z ; WriteMATERIAL
  000e2	83 c4 4c	 add	 esp, 76			; 0000004cH

; 784  : 			WriteCR ( ppBlock, pdwSize );

  000e5	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000e8	50		 push	 eax
  000e9	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  000f2	83 c4 08	 add	 esp, 8

; 785  : 
; 786  : 			// write multimaterial start
; 787  : 			WriteCODE ( DBOBLOCK_MULTIMAT_START, 4, ppBlock, pdwSize );

  000f5	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000f8	50		 push	 eax
  000f9	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000fc	51		 push	 ecx
  000fd	6a 04		 push	 4
  000ff	68 a3 00 00 00	 push	 163			; 000000a3H
  00104	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00109	83 c4 10	 add	 esp, 16			; 00000010H

; 788  : 			WriteDWORD ( pMultiMat->dwIndexStart, ppBlock, pdwSize );

  0010c	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0010f	50		 push	 eax
  00110	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00113	51		 push	 ecx
  00114	8b 55 f8	 mov	 edx, DWORD PTR _pMultiMat$57141[ebp]
  00117	8b 82 48 01 00
	00		 mov	 eax, DWORD PTR [edx+328]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH

; 789  : 			WriteCR ( ppBlock, pdwSize );

  00126	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00129	50		 push	 eax
  0012a	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00133	83 c4 08	 add	 esp, 8

; 790  : 
; 791  : 			// write multimaterial end
; 792  : 			WriteCODE ( DBOBLOCK_MULTIMAT_COUNT, 4, ppBlock, pdwSize );

  00136	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00139	50		 push	 eax
  0013a	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0013d	51		 push	 ecx
  0013e	6a 04		 push	 4
  00140	68 a4 00 00 00	 push	 164			; 000000a4H
  00145	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0014a	83 c4 10	 add	 esp, 16			; 00000010H

; 793  : 			WriteDWORD ( pMultiMat->dwIndexCount, ppBlock, pdwSize );

  0014d	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00150	50		 push	 eax
  00151	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00154	51		 push	 ecx
  00155	8b 55 f8	 mov	 edx, DWORD PTR _pMultiMat$57141[ebp]
  00158	8b 82 4c 01 00
	00		 mov	 eax, DWORD PTR [edx+332]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH

; 794  : 			WriteCR ( ppBlock, pdwSize );

  00167	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0016a	50		 push	 eax
  0016b	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0016e	51		 push	 ecx
  0016f	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00174	83 c4 08	 add	 esp, 8

; 795  : 
; 796  : 			// write multimaterial poly
; 797  : 			WriteCODE ( DBOBLOCK_MULTIMAT_POLY, 4, ppBlock, pdwSize );

  00177	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0017a	50		 push	 eax
  0017b	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0017e	51		 push	 ecx
  0017f	6a 04		 push	 4
  00181	68 a5 00 00 00	 push	 165			; 000000a5H
  00186	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0018b	83 c4 10	 add	 esp, 16			; 00000010H

; 798  : 			WriteDWORD ( pMultiMat->dwPolyCount, ppBlock, pdwSize );

  0018e	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00191	50		 push	 eax
  00192	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00195	51		 push	 ecx
  00196	8b 55 f8	 mov	 edx, DWORD PTR _pMultiMat$57141[ebp]
  00199	8b 82 50 01 00
	00		 mov	 eax, DWORD PTR [edx+336]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  001a5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 799  : 			WriteCR ( ppBlock, pdwSize );

  001a8	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001ab	50		 push	 eax
  001ac	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001af	51		 push	 ecx
  001b0	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  001b5	83 c4 08	 add	 esp, 8

; 800  : 
; 801  : 			// end of this
; 802  : 			WriteCODE ( 0, 0, ppBlock, pdwSize );

  001b8	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001bb	50		 push	 eax
  001bc	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001bf	51		 push	 ecx
  001c0	6a 00		 push	 0
  001c2	6a 00		 push	 0
  001c4	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  001c9	83 c4 10	 add	 esp, 16			; 00000010H

; 803  : 		}

  001cc	e9 4b fe ff ff	 jmp	 $LN4@ScanMultiM
$LN6@ScanMultiM:

; 804  : 	}
; 805  : 
; 806  : 	// zero code
; 807  : 	WriteCODE ( 0, 0, ppBlock, pdwSize );

  001d1	8b 45 14	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001d4	50		 push	 eax
  001d5	8b 4d 10	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001d8	51		 push	 ecx
  001d9	6a 00		 push	 0
  001db	6a 00		 push	 0
  001dd	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  001e2	83 c4 10	 add	 esp, 16			; 00000010H

; 808  : 
; 809  : 	// okay
; 810  : 	return true;

  001e5	b0 01		 mov	 al, 1

; 811  : }

  001e7	5f		 pop	 edi
  001e8	5e		 pop	 esi
  001e9	5b		 pop	 ebx
  001ea	8b e5		 mov	 esp, ebp
  001ec	5d		 pop	 ebp
  001ed	c3		 ret	 0
?ScanMultiMaterial@@YA_NPAUsMultiMaterial@@KPAPADPAK@Z ENDP ; ScanMultiMaterial
_TEXT	ENDS
PUBLIC	?ScanFrame@@YA_NPAUsFrame@@PAPADPAK@Z		; ScanFrame
PUBLIC	?ScanMesh@@YA_NPAUsMesh@@PAPADPAK@Z		; ScanMesh
; Function compile flags: /Odtp /ZI
;	COMDAT ?ScanMesh@@YA_NPAUsMesh@@PAPADPAK@Z
_TEXT	SEGMENT
_dwDWORD$57176 = -16					; size = 4
_pCodeSizePtr$57172 = -12				; size = 4
_pCodeSizePtr$57161 = -8				; size = 4
_dwSubMesh$57154 = -4					; size = 4
_pMesh$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
_pdwSize$ = 16						; size = 4
?ScanMesh@@YA_NPAUsMesh@@PAPADPAK@Z PROC		; ScanMesh, COMDAT

; 814  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 815  : 	// No mesh
; 816  : 	if ( pMesh )

  00009	83 7d 08 00	 cmp	 DWORD PTR _pMesh$[ebp], 0
  0000d	0f 84 1f 0b 00
	00		 je	 $LN15@ScanMesh

; 817  : 	{
; 818  : 		// Write vertex information
; 819  : 		WriteCODE ( DBOBLOCK_MESH_FVF, 4, ppBlock, pdwSize );

  00013	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0001a	51		 push	 ecx
  0001b	6a 04		 push	 4
  0001d	6a 6f		 push	 111			; 0000006fH
  0001f	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 820  : 		WriteDWORD ( pMesh->dwFVF, ppBlock, pdwSize );

  00027	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00032	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 821  : 		WriteCR ( ppBlock, pdwSize );

  0003e	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00041	50		 push	 eax
  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0004b	83 c4 08	 add	 esp, 8

; 822  : 
; 823  : 		WriteCODE ( DBOBLOCK_MESH_FVFSIZE, 4, ppBlock, pdwSize );

  0004e	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00051	50		 push	 eax
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00055	51		 push	 ecx
  00056	6a 04		 push	 4
  00058	6a 70		 push	 112			; 00000070H
  0005a	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0005f	83 c4 10	 add	 esp, 16			; 00000010H

; 824  : 		WriteDWORD ( pMesh->dwFVFSize, ppBlock, pdwSize );

  00062	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00065	50		 push	 eax
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00069	51		 push	 ecx
  0006a	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  0006d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 825  : 		WriteCR ( ppBlock, pdwSize );

  00079	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00086	83 c4 08	 add	 esp, 8

; 826  : 
; 827  : 		WriteCODE ( DBOBLOCK_MESH_VERTEXCOUNT, 4, ppBlock, pdwSize );

  00089	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00090	51		 push	 ecx
  00091	6a 04		 push	 4
  00093	6a 71		 push	 113			; 00000071H
  00095	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0009a	83 c4 10	 add	 esp, 16			; 00000010H

; 828  : 		WriteDWORD ( pMesh->dwVertexCount, ppBlock, pdwSize );

  0009d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000a0	50		 push	 eax
  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000a4	51		 push	 ecx
  000a5	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  000a8	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 829  : 		WriteCR ( ppBlock, pdwSize );

  000b4	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  000c1	83 c4 08	 add	 esp, 8

; 830  : 
; 831  : 		WriteCODE ( DBOBLOCK_MESH_INDEXCOUNT, 4, ppBlock, pdwSize );

  000c4	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000c7	50		 push	 eax
  000c8	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000cb	51		 push	 ecx
  000cc	6a 04		 push	 4
  000ce	6a 72		 push	 114			; 00000072H
  000d0	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  000d5	83 c4 10	 add	 esp, 16			; 00000010H

; 832  : 		WriteDWORD ( pMesh->dwIndexCount, ppBlock, pdwSize );

  000d8	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000db	50		 push	 eax
  000dc	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000df	51		 push	 ecx
  000e0	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  000e3	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH

; 833  : 		WriteCR ( ppBlock, pdwSize );

  000ef	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000f2	50		 push	 eax
  000f3	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000f6	51		 push	 ecx
  000f7	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  000fc	83 c4 08	 add	 esp, 8

; 834  : 
; 835  : 		// If non-standard vertex declaration, write it
; 836  : 		if ( pMesh->dwFVF==0 )

  000ff	8b 45 08	 mov	 eax, DWORD PTR _pMesh$[ebp]
  00102	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00106	75 40		 jne	 SHORT $LN14@ScanMesh

; 837  : 		{
; 838  : 			WriteCODE ( DBOBLOCK_MESH_VERTEXDEC, 4, ppBlock, pdwSize );

  00108	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0010b	50		 push	 eax
  0010c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0010f	51		 push	 ecx
  00110	6a 04		 push	 4
  00112	6a 78		 push	 120			; 00000078H
  00114	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00119	83 c4 10	 add	 esp, 16			; 00000010H

; 839  : 			WriteMEMORY ( (BYTE*)pMesh->pVertexDeclaration, sizeof(pMesh->pVertexDeclaration), ppBlock, pdwSize );

  0011c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0011f	50		 push	 eax
  00120	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00123	51		 push	 ecx
  00124	68 08 02 00 00	 push	 520			; 00000208H
  00129	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  0012c	83 c2 44	 add	 edx, 68			; 00000044H
  0012f	52		 push	 edx
  00130	e8 00 00 00 00	 call	 ?WriteMEMORY@@YA_NPAEKPAPADPAK@Z ; WriteMEMORY
  00135	83 c4 10	 add	 esp, 16			; 00000010H

; 840  : 			WriteCR ( ppBlock, pdwSize );

  00138	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0013b	50		 push	 eax
  0013c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0013f	51		 push	 ecx
  00140	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00145	83 c4 08	 add	 esp, 8
$LN14@ScanMesh:

; 841  : 		}
; 842  : 
; 843  : 		// MIKE 130503 - changed the way in which sub frames were saved
; 844  : 		WriteCODE ( DBOBLOCK_MESH_SUBFRAMES, 4, ppBlock, pdwSize );

  00148	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0014b	50		 push	 eax
  0014c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0014f	51		 push	 ecx
  00150	6a 04		 push	 4
  00152	68 8a 00 00 00	 push	 138			; 0000008aH
  00157	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0015c	83 c4 10	 add	 esp, 16			; 00000010H

; 845  : 		WriteDWORD ( pMesh->dwSubMeshListCount, ppBlock, pdwSize );

  0015f	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00162	50		 push	 eax
  00163	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00166	51		 push	 ecx
  00167	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  0016a	8b 82 50 04 00
	00		 mov	 eax, DWORD PTR [edx+1104]
  00170	50		 push	 eax
  00171	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH

; 846  : 		WriteCR ( ppBlock, pdwSize );

  00179	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0017c	50		 push	 eax
  0017d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00180	51		 push	 ecx
  00181	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00186	83 c4 08	 add	 esp, 8

; 847  : 		for ( DWORD dwSubMesh = 0; dwSubMesh < pMesh->dwSubMeshListCount; dwSubMesh++ )

  00189	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwSubMesh$57154[ebp], 0
  00190	eb 09		 jmp	 SHORT $LN13@ScanMesh
$LN12@ScanMesh:
  00192	8b 45 fc	 mov	 eax, DWORD PTR _dwSubMesh$57154[ebp]
  00195	83 c0 01	 add	 eax, 1
  00198	89 45 fc	 mov	 DWORD PTR _dwSubMesh$57154[ebp], eax
$LN13@ScanMesh:
  0019b	8b 45 08	 mov	 eax, DWORD PTR _pMesh$[ebp]
  0019e	8b 4d fc	 mov	 ecx, DWORD PTR _dwSubMesh$57154[ebp]
  001a1	3b 88 50 04 00
	00		 cmp	 ecx, DWORD PTR [eax+1104]
  001a7	73 35		 jae	 SHORT $LN11@ScanMesh

; 848  : 		{
; 849  : 			ScanFrame ( &pMesh->pSubFrameList [ dwSubMesh ], ppBlock, pdwSize );

  001a9	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001ac	50		 push	 eax
  001ad	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001b0	51		 push	 ecx
  001b1	8b 55 fc	 mov	 edx, DWORD PTR _dwSubMesh$57154[ebp]
  001b4	69 d2 24 03 00
	00		 imul	 edx, 804		; 00000324H
  001ba	8b 45 08	 mov	 eax, DWORD PTR _pMesh$[ebp]
  001bd	03 90 4c 04 00
	00		 add	 edx, DWORD PTR [eax+1100]
  001c3	52		 push	 edx
  001c4	e8 00 00 00 00	 call	 ?ScanFrame@@YA_NPAUsFrame@@PAPADPAK@Z ; ScanFrame
  001c9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 850  : 			WriteCR ( ppBlock, pdwSize );

  001cc	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001cf	50		 push	 eax
  001d0	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001d3	51		 push	 ecx
  001d4	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  001d9	83 c4 08	 add	 esp, 8

; 851  : 		}

  001dc	eb b4		 jmp	 SHORT $LN12@ScanMesh
$LN11@ScanMesh:

; 852  : 		
; 853  : 		// Write vertex data
; 854  : 		WriteCODE	( DBOBLOCK_MESH_VERTEXDATA,	pMesh->dwFVFSize*pMesh->dwVertexCount, ppBlock, pdwSize );

  001de	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001e1	50		 push	 eax
  001e2	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001e5	51		 push	 ecx
  001e6	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  001e9	8b 45 08	 mov	 eax, DWORD PTR _pMesh$[ebp]
  001ec	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  001ef	0f af 48 1c	 imul	 ecx, DWORD PTR [eax+28]
  001f3	51		 push	 ecx
  001f4	6a 73		 push	 115			; 00000073H
  001f6	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  001fb	83 c4 10	 add	 esp, 16			; 00000010H

; 855  : 		WriteVertexData ( pMesh->pVertexData, pMesh->dwFVFSize, pMesh->dwVertexCount, ppBlock, pdwSize );

  001fe	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00201	50		 push	 eax
  00202	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00205	51		 push	 ecx
  00206	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00209	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0020c	50		 push	 eax
  0020d	8b 4d 08	 mov	 ecx, DWORD PTR _pMesh$[ebp]
  00210	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00213	52		 push	 edx
  00214	8b 45 08	 mov	 eax, DWORD PTR _pMesh$[ebp]
  00217	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0021a	51		 push	 ecx
  0021b	e8 00 00 00 00	 call	 ?WriteVertexData@@YA_NPAEKKPAPADPAK@Z ; WriteVertexData
  00220	83 c4 14	 add	 esp, 20			; 00000014H

; 856  : 		WriteCR ( ppBlock, pdwSize );

  00223	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00226	50		 push	 eax
  00227	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0022a	51		 push	 ecx
  0022b	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00230	83 c4 08	 add	 esp, 8

; 857  : 
; 858  : 		// Write index data
; 859  : 		if ( pMesh->dwIndexCount )

  00233	8b 45 08	 mov	 eax, DWORD PTR _pMesh$[ebp]
  00236	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0023a	74 49		 je	 SHORT $LN10@ScanMesh

; 860  : 		{
; 861  : 			WriteCODE	( DBOBLOCK_MESH_INDEXDATA, pMesh->dwIndexCount*sizeof(WORD), ppBlock, pdwSize );

  0023c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0023f	50		 push	 eax
  00240	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00243	51		 push	 ecx
  00244	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00247	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0024a	d1 e0		 shl	 eax, 1
  0024c	50		 push	 eax
  0024d	6a 74		 push	 116			; 00000074H
  0024f	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00254	83 c4 10	 add	 esp, 16			; 00000010H

; 862  : 			WriteIndices ( pMesh->pIndices, pMesh->dwIndexCount, ppBlock, pdwSize );

  00257	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0025a	50		 push	 eax
  0025b	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0025e	51		 push	 ecx
  0025f	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00262	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00265	50		 push	 eax
  00266	8b 4d 08	 mov	 ecx, DWORD PTR _pMesh$[ebp]
  00269	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0026c	52		 push	 edx
  0026d	e8 00 00 00 00	 call	 ?WriteIndices@@YA_NPAGKPAPADPAK@Z ; WriteIndices
  00272	83 c4 10	 add	 esp, 16			; 00000010H

; 863  : 			WriteCR ( ppBlock, pdwSize );

  00275	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00278	50		 push	 eax
  00279	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0027c	51		 push	 ecx
  0027d	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00282	83 c4 08	 add	 esp, 8
$LN10@ScanMesh:

; 864  : 		}
; 865  : 
; 866  : 		// Write primitive type
; 867  : // leefix - 060306 - huge size specified, when only 4 bytes are written
; 868  : //		WriteCODE	( DBOBLOCK_MESH_PRIMTYPE, pMesh->dwIndexCount*sizeof(WORD), ppBlock, pdwSize );
; 869  : 		WriteCODE	( DBOBLOCK_MESH_PRIMTYPE, 4, ppBlock, pdwSize );

  00285	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00288	50		 push	 eax
  00289	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0028c	51		 push	 ecx
  0028d	6a 04		 push	 4
  0028f	6a 75		 push	 117			; 00000075H
  00291	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00296	83 c4 10	 add	 esp, 16			; 00000010H

; 870  : 		WriteDWORD ( (DWORD)pMesh->iPrimitiveType, ppBlock, pdwSize );

  00299	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0029c	50		 push	 eax
  0029d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002a0	51		 push	 ecx
  002a1	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  002a4	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  002a7	50		 push	 eax
  002a8	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  002ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 871  : 		WriteCR ( ppBlock, pdwSize );

  002b0	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002b3	50		 push	 eax
  002b4	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002b7	51		 push	 ecx
  002b8	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  002bd	83 c4 08	 add	 esp, 8

; 872  : 		
; 873  : 		// Write draw vertex count
; 874  : // leefix - 060306 - huge size specified, when only 4 bytes are written
; 875  : //		WriteCODE	( DBOBLOCK_MESH_DRAWVERTCOUNT, pMesh->dwIndexCount*sizeof(WORD), ppBlock, pdwSize );
; 876  : 		WriteCODE	( DBOBLOCK_MESH_DRAWVERTCOUNT, 4, ppBlock, pdwSize );

  002c0	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002c3	50		 push	 eax
  002c4	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002c7	51		 push	 ecx
  002c8	6a 04		 push	 4
  002ca	6a 76		 push	 118			; 00000076H
  002cc	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  002d1	83 c4 10	 add	 esp, 16			; 00000010H

; 877  : 		WriteDWORD ( pMesh->iDrawVertexCount, ppBlock, pdwSize );

  002d4	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002d7	50		 push	 eax
  002d8	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002db	51		 push	 ecx
  002dc	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  002df	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  002e2	50		 push	 eax
  002e3	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  002e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 878  : 		WriteCR ( ppBlock, pdwSize );

  002eb	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002ee	50		 push	 eax
  002ef	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002f2	51		 push	 ecx
  002f3	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  002f8	83 c4 08	 add	 esp, 8

; 879  : 
; 880  : 		// Write draw primitive count
; 881  : // leefix - 060306 - huge size specified, when only 4 bytes are written
; 882  : //		WriteCODE	( DBOBLOCK_MESH_DRAWPRIMCOUNT, pMesh->dwIndexCount*sizeof(WORD), ppBlock, pdwSize );
; 883  : 		WriteCODE	( DBOBLOCK_MESH_DRAWPRIMCOUNT, 4, ppBlock, pdwSize );

  002fb	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002fe	50		 push	 eax
  002ff	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00302	51		 push	 ecx
  00303	6a 04		 push	 4
  00305	6a 77		 push	 119			; 00000077H
  00307	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0030c	83 c4 10	 add	 esp, 16			; 00000010H

; 884  : 		WriteDWORD ( pMesh->iDrawPrimitives, ppBlock, pdwSize );

  0030f	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00312	50		 push	 eax
  00313	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00316	51		 push	 ecx
  00317	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  0031a	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0031d	50		 push	 eax
  0031e	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00323	83 c4 0c	 add	 esp, 12			; 0000000cH

; 885  : 		WriteCR ( ppBlock, pdwSize );

  00326	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00329	50		 push	 eax
  0032a	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0032d	51		 push	 ecx
  0032e	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00333	83 c4 08	 add	 esp, 8

; 886  : 
; 887  : 		// Write bone information
; 888  : 		WriteCODE	( DBOBLOCK_MESH_BONECOUNT,	4,	ppBlock, pdwSize );

  00336	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00339	50		 push	 eax
  0033a	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0033d	51		 push	 ecx
  0033e	6a 04		 push	 4
  00340	6a 79		 push	 121			; 00000079H
  00342	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00347	83 c4 10	 add	 esp, 16			; 00000010H

; 889  : 		WriteDWORD	( pMesh->dwBoneCount,			ppBlock, pdwSize );

  0034a	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0034d	50		 push	 eax
  0034e	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00351	51		 push	 ecx
  00352	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00355	8b 82 6c 03 00
	00		 mov	 eax, DWORD PTR [edx+876]
  0035b	50		 push	 eax
  0035c	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00361	83 c4 0c	 add	 esp, 12			; 0000000cH

; 890  : 		WriteCR ( ppBlock, pdwSize );

  00364	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00367	50		 push	 eax
  00368	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0036b	51		 push	 ecx
  0036c	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00371	83 c4 08	 add	 esp, 8

; 891  : 
; 892  : 		LPSTR pCodeSizePtr = NULL;

  00374	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57161[ebp], 0

; 893  : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  0037b	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0037f	74 0b		 je	 SHORT $LN9@ScanMesh
  00381	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00384	8b 08		 mov	 ecx, DWORD PTR [eax]
  00386	83 c1 04	 add	 ecx, 4
  00389	89 4d f8	 mov	 DWORD PTR _pCodeSizePtr$57161[ebp], ecx
$LN9@ScanMesh:

; 894  : 		WriteCODE	( DBOBLOCK_MESH_BONESDATA,	0,	ppBlock, pdwSize );

  0038c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0038f	50		 push	 eax
  00390	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00393	51		 push	 ecx
  00394	6a 00		 push	 0
  00396	6a 7a		 push	 122			; 0000007aH
  00398	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0039d	83 c4 10	 add	 esp, 16			; 00000010H

; 895  : 		WriteCR ( ppBlock, pdwSize );

  003a0	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  003a3	50		 push	 eax
  003a4	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  003a7	51		 push	 ecx
  003a8	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  003ad	83 c4 08	 add	 esp, 8

; 896  : 		ScanBones	( pMesh->pBones, pMesh->dwBoneCount, ppBlock, pdwSize );

  003b0	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  003b3	50		 push	 eax
  003b4	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  003b7	51		 push	 ecx
  003b8	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  003bb	8b 82 6c 03 00
	00		 mov	 eax, DWORD PTR [edx+876]
  003c1	50		 push	 eax
  003c2	8b 4d 08	 mov	 ecx, DWORD PTR _pMesh$[ebp]
  003c5	8b 91 68 03 00
	00		 mov	 edx, DWORD PTR [ecx+872]
  003cb	52		 push	 edx
  003cc	e8 00 00 00 00	 call	 ?ScanBones@@YA_NPAUsBone@@KPAPADPAK@Z ; ScanBones
  003d1	83 c4 10	 add	 esp, 16			; 00000010H

; 897  : 		WriteCR ( ppBlock, pdwSize );

  003d4	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  003d7	50		 push	 eax
  003d8	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  003db	51		 push	 ecx
  003dc	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  003e1	83 c4 08	 add	 esp, 8

; 898  : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  003e4	83 7d f8 00	 cmp	 DWORD PTR _pCodeSizePtr$57161[ebp], 0
  003e8	74 10		 je	 SHORT $LN8@ScanMesh
  003ea	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  003ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ef	83 e9 04	 sub	 ecx, 4
  003f2	2b 4d f8	 sub	 ecx, DWORD PTR _pCodeSizePtr$57161[ebp]
  003f5	8b 55 f8	 mov	 edx, DWORD PTR _pCodeSizePtr$57161[ebp]
  003f8	89 0a		 mov	 DWORD PTR [edx], ecx
$LN8@ScanMesh:

; 899  : 
; 900  : 		// Write material information
; 901  : 		WriteCODE	( DBOBLOCK_MESH_USEMATERIAL, 1,	ppBlock, pdwSize );

  003fa	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  003fd	50		 push	 eax
  003fe	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00401	51		 push	 ecx
  00402	6a 01		 push	 1
  00404	6a 7d		 push	 125			; 0000007dH
  00406	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0040b	83 c4 10	 add	 esp, 16			; 00000010H

; 902  : 		WriteBYTE	( pMesh->bUsesMaterial, ppBlock, pdwSize );

  0040e	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00411	50		 push	 eax
  00412	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00415	51		 push	 ecx
  00416	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00419	0f b6 82 78 03
	00 00		 movzx	 eax, BYTE PTR [edx+888]
  00420	50		 push	 eax
  00421	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  00426	83 c4 0c	 add	 esp, 12			; 0000000cH

; 903  : 		WriteCR ( ppBlock, pdwSize );

  00429	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0042c	50		 push	 eax
  0042d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00430	51		 push	 ecx
  00431	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00436	83 c4 08	 add	 esp, 8

; 904  : 		WriteCODE	( DBOBLOCK_MESH_MATERIAL, sizeof(pMesh->mMaterial), ppBlock, pdwSize );

  00439	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0043c	50		 push	 eax
  0043d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00440	51		 push	 ecx
  00441	6a 44		 push	 68			; 00000044H
  00443	6a 7e		 push	 126			; 0000007eH
  00445	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0044a	83 c4 10	 add	 esp, 16			; 00000010H

; 905  : 		WriteMATERIAL ( pMesh->mMaterial,			ppBlock, pdwSize );

  0044d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00450	50		 push	 eax
  00451	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00454	51		 push	 ecx
  00455	8b 75 08	 mov	 esi, DWORD PTR _pMesh$[ebp]
  00458	81 c6 94 03 00
	00		 add	 esi, 916		; 00000394H
  0045e	83 ec 44	 sub	 esp, 68			; 00000044H
  00461	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00466	8b fc		 mov	 edi, esp
  00468	f3 a5		 rep movsd
  0046a	e8 00 00 00 00	 call	 ?WriteMATERIAL@@YA_NU_D3DMATERIAL9@@PAPADPAK@Z ; WriteMATERIAL
  0046f	83 c4 4c	 add	 esp, 76			; 0000004cH

; 906  : 		WriteCR ( ppBlock, pdwSize );

  00472	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00475	50		 push	 eax
  00476	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00479	51		 push	 ecx
  0047a	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0047f	83 c4 08	 add	 esp, 8

; 907  : 
; 908  : 		// Write texture information
; 909  : 		WriteCODE	( DBOBLOCK_MESH_TEXTURECOUNT, 4,ppBlock, pdwSize );

  00482	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00485	50		 push	 eax
  00486	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00489	51		 push	 ecx
  0048a	6a 04		 push	 4
  0048c	6a 7f		 push	 127			; 0000007fH
  0048e	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00493	83 c4 10	 add	 esp, 16			; 00000010H

; 910  : 		WriteDWORD	( pMesh->dwTextureCount,		ppBlock, pdwSize );

  00496	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00499	50		 push	 eax
  0049a	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0049d	51		 push	 ecx
  0049e	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  004a1	8b 82 7c 03 00
	00		 mov	 eax, DWORD PTR [edx+892]
  004a7	50		 push	 eax
  004a8	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  004ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 911  : 		WriteCR ( ppBlock, pdwSize );

  004b0	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  004b3	50		 push	 eax
  004b4	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  004b7	51		 push	 ecx
  004b8	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  004bd	83 c4 08	 add	 esp, 8

; 912  : 
; 913  : 		pCodeSizePtr = NULL;

  004c0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57161[ebp], 0

; 914  : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  004c7	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  004cb	74 0b		 je	 SHORT $LN7@ScanMesh
  004cd	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  004d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d2	83 c1 04	 add	 ecx, 4
  004d5	89 4d f8	 mov	 DWORD PTR _pCodeSizePtr$57161[ebp], ecx
$LN7@ScanMesh:

; 915  : 		WriteCODE	( DBOBLOCK_MESH_TEXTURES, 0,	ppBlock, pdwSize );

  004d8	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  004db	50		 push	 eax
  004dc	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  004df	51		 push	 ecx
  004e0	6a 00		 push	 0
  004e2	68 80 00 00 00	 push	 128			; 00000080H
  004e7	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  004ec	83 c4 10	 add	 esp, 16			; 00000010H

; 916  : 		WriteCR ( ppBlock, pdwSize );

  004ef	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  004f2	50		 push	 eax
  004f3	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  004f6	51		 push	 ecx
  004f7	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  004fc	83 c4 08	 add	 esp, 8

; 917  : 		ScanTextures ( pMesh->pTextures, pMesh->dwTextureCount, ppBlock, pdwSize );

  004ff	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00502	50		 push	 eax
  00503	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00506	51		 push	 ecx
  00507	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  0050a	8b 82 7c 03 00
	00		 mov	 eax, DWORD PTR [edx+892]
  00510	50		 push	 eax
  00511	8b 4d 08	 mov	 ecx, DWORD PTR _pMesh$[ebp]
  00514	8b 91 88 03 00
	00		 mov	 edx, DWORD PTR [ecx+904]
  0051a	52		 push	 edx
  0051b	e8 00 00 00 00	 call	 ?ScanTextures@@YA_NPAUsTexture@@KPAPADPAK@Z ; ScanTextures
  00520	83 c4 10	 add	 esp, 16			; 00000010H

; 918  : 		WriteCR ( ppBlock, pdwSize );

  00523	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00526	50		 push	 eax
  00527	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0052a	51		 push	 ecx
  0052b	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00530	83 c4 08	 add	 esp, 8

; 919  : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00533	83 7d f8 00	 cmp	 DWORD PTR _pCodeSizePtr$57161[ebp], 0
  00537	74 10		 je	 SHORT $LN6@ScanMesh
  00539	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0053c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0053e	83 e9 04	 sub	 ecx, 4
  00541	2b 4d f8	 sub	 ecx, DWORD PTR _pCodeSizePtr$57161[ebp]
  00544	8b 55 f8	 mov	 edx, DWORD PTR _pCodeSizePtr$57161[ebp]
  00547	89 0a		 mov	 DWORD PTR [edx], ecx
$LN6@ScanMesh:

; 920  : 
; 921  : 		// Write multi material information
; 922  : 		WriteCODE	( DBOBLOCK_MESH_USEMULTIMAT, 1,		ppBlock, pdwSize );

  00549	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0054c	50		 push	 eax
  0054d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00550	51		 push	 ecx
  00551	6a 01		 push	 1
  00553	6a 7b		 push	 123			; 0000007bH
  00555	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0055a	83 c4 10	 add	 esp, 16			; 00000010H

; 923  : 		WriteBYTE	( pMesh->bUseMultiMaterial,			ppBlock, pdwSize );

  0055d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00560	50		 push	 eax
  00561	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00564	51		 push	 ecx
  00565	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00568	0f b6 82 7a 03
	00 00		 movzx	 eax, BYTE PTR [edx+890]
  0056f	50		 push	 eax
  00570	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  00575	83 c4 0c	 add	 esp, 12			; 0000000cH

; 924  : 		WriteCR ( ppBlock, pdwSize );

  00578	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0057b	50		 push	 eax
  0057c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0057f	51		 push	 ecx
  00580	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00585	83 c4 08	 add	 esp, 8

; 925  : 		WriteCODE	( DBOBLOCK_MESH_MULTIMATCOUNT, 4,	ppBlock, pdwSize );

  00588	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0058b	50		 push	 eax
  0058c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0058f	51		 push	 ecx
  00590	6a 04		 push	 4
  00592	6a 7c		 push	 124			; 0000007cH
  00594	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00599	83 c4 10	 add	 esp, 16			; 00000010H

; 926  : 		WriteDWORD	( pMesh->dwMultiMaterialCount,		ppBlock, pdwSize );

  0059c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0059f	50		 push	 eax
  005a0	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  005a3	51		 push	 ecx
  005a4	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  005a7	8b 82 80 03 00
	00		 mov	 eax, DWORD PTR [edx+896]
  005ad	50		 push	 eax
  005ae	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  005b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 927  : 		WriteCR ( ppBlock, pdwSize );

  005b6	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  005b9	50		 push	 eax
  005ba	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  005bd	51		 push	 ecx
  005be	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  005c3	83 c4 08	 add	 esp, 8

; 928  : 		pCodeSizePtr = NULL;

  005c6	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57161[ebp], 0

; 929  : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  005cd	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  005d1	74 0b		 je	 SHORT $LN5@ScanMesh
  005d3	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  005d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  005d8	83 c1 04	 add	 ecx, 4
  005db	89 4d f8	 mov	 DWORD PTR _pCodeSizePtr$57161[ebp], ecx
$LN5@ScanMesh:

; 930  : 		WriteCODE	( DBOBLOCK_MESH_MULTIMAT, 0,		ppBlock, pdwSize );

  005de	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  005e1	50		 push	 eax
  005e2	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  005e5	51		 push	 ecx
  005e6	6a 00		 push	 0
  005e8	68 8b 00 00 00	 push	 139			; 0000008bH
  005ed	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  005f2	83 c4 10	 add	 esp, 16			; 00000010H

; 931  : 		WriteCR ( ppBlock, pdwSize );

  005f5	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  005f8	50		 push	 eax
  005f9	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  005fc	51		 push	 ecx
  005fd	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00602	83 c4 08	 add	 esp, 8

; 932  : 		ScanMultiMaterial ( pMesh->pMultiMaterial, pMesh->dwMultiMaterialCount, ppBlock, pdwSize );

  00605	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00608	50		 push	 eax
  00609	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0060c	51		 push	 ecx
  0060d	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00610	8b 82 80 03 00
	00		 mov	 eax, DWORD PTR [edx+896]
  00616	50		 push	 eax
  00617	8b 4d 08	 mov	 ecx, DWORD PTR _pMesh$[ebp]
  0061a	8b 91 8c 03 00
	00		 mov	 edx, DWORD PTR [ecx+908]
  00620	52		 push	 edx
  00621	e8 00 00 00 00	 call	 ?ScanMultiMaterial@@YA_NPAUsMultiMaterial@@KPAPADPAK@Z ; ScanMultiMaterial
  00626	83 c4 10	 add	 esp, 16			; 00000010H

; 933  : 		WriteCR ( ppBlock, pdwSize );

  00629	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0062c	50		 push	 eax
  0062d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00630	51		 push	 ecx
  00631	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00636	83 c4 08	 add	 esp, 8

; 934  : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00639	83 7d f8 00	 cmp	 DWORD PTR _pCodeSizePtr$57161[ebp], 0
  0063d	74 10		 je	 SHORT $LN4@ScanMesh
  0063f	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00642	8b 08		 mov	 ecx, DWORD PTR [eax]
  00644	83 e9 04	 sub	 ecx, 4
  00647	2b 4d f8	 sub	 ecx, DWORD PTR _pCodeSizePtr$57161[ebp]
  0064a	8b 55 f8	 mov	 edx, DWORD PTR _pCodeSizePtr$57161[ebp]
  0064d	89 0a		 mov	 DWORD PTR [edx], ecx
$LN4@ScanMesh:

; 935  : 
; 936  : 		// Write render states
; 937  : 		WriteCODE	( DBOBLOCK_MESH_WIREFRAME,	1,	ppBlock, pdwSize );

  0064f	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00652	50		 push	 eax
  00653	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00656	51		 push	 ecx
  00657	6a 01		 push	 1
  00659	68 81 00 00 00	 push	 129			; 00000081H
  0065e	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00663	83 c4 10	 add	 esp, 16			; 00000010H

; 938  : 		WriteBYTE	( pMesh->bWireframe,			ppBlock, pdwSize );

  00666	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00669	50		 push	 eax
  0066a	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0066d	51		 push	 ecx
  0066e	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00671	0f b6 82 0c 04
	00 00		 movzx	 eax, BYTE PTR [edx+1036]
  00678	50		 push	 eax
  00679	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  0067e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 939  : 		WriteCR	( ppBlock, pdwSize );

  00681	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00684	50		 push	 eax
  00685	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00688	51		 push	 ecx
  00689	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0068e	83 c4 08	 add	 esp, 8

; 940  : 		WriteCODE	( DBOBLOCK_MESH_LIGHT,		1,	ppBlock, pdwSize );

  00691	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00694	50		 push	 eax
  00695	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00698	51		 push	 ecx
  00699	6a 01		 push	 1
  0069b	68 82 00 00 00	 push	 130			; 00000082H
  006a0	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  006a5	83 c4 10	 add	 esp, 16			; 00000010H

; 941  : 		WriteBYTE	( pMesh->bLight,				ppBlock, pdwSize );

  006a8	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  006ab	50		 push	 eax
  006ac	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  006af	51		 push	 ecx
  006b0	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  006b3	0f b6 82 0d 04
	00 00		 movzx	 eax, BYTE PTR [edx+1037]
  006ba	50		 push	 eax
  006bb	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  006c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 942  : 		WriteCR	( ppBlock, pdwSize );

  006c3	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  006c6	50		 push	 eax
  006c7	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  006ca	51		 push	 ecx
  006cb	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  006d0	83 c4 08	 add	 esp, 8

; 943  : 		WriteCODE	( DBOBLOCK_MESH_CULL,		1,	ppBlock, pdwSize );

  006d3	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  006d6	50		 push	 eax
  006d7	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  006da	51		 push	 ecx
  006db	6a 01		 push	 1
  006dd	68 83 00 00 00	 push	 131			; 00000083H
  006e2	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  006e7	83 c4 10	 add	 esp, 16			; 00000010H

; 944  : 		WriteBYTE	( pMesh->bCull,					ppBlock, pdwSize );

  006ea	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  006ed	50		 push	 eax
  006ee	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  006f1	51		 push	 ecx
  006f2	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  006f5	0f b6 82 0e 04
	00 00		 movzx	 eax, BYTE PTR [edx+1038]
  006fc	50		 push	 eax
  006fd	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  00702	83 c4 0c	 add	 esp, 12			; 0000000cH

; 945  : 		WriteCR	( ppBlock, pdwSize );

  00705	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00708	50		 push	 eax
  00709	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0070c	51		 push	 ecx
  0070d	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00712	83 c4 08	 add	 esp, 8

; 946  : 		WriteCODE	( DBOBLOCK_MESH_FOG,		1,	ppBlock, pdwSize );

  00715	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00718	50		 push	 eax
  00719	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0071c	51		 push	 ecx
  0071d	6a 01		 push	 1
  0071f	68 84 00 00 00	 push	 132			; 00000084H
  00724	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00729	83 c4 10	 add	 esp, 16			; 00000010H

; 947  : 		WriteBYTE	( pMesh->bFog,					ppBlock, pdwSize );

  0072c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0072f	50		 push	 eax
  00730	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00733	51		 push	 ecx
  00734	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00737	0f b6 82 0f 04
	00 00		 movzx	 eax, BYTE PTR [edx+1039]
  0073e	50		 push	 eax
  0073f	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  00744	83 c4 0c	 add	 esp, 12			; 0000000cH

; 948  : 		WriteCR	( ppBlock, pdwSize );

  00747	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0074a	50		 push	 eax
  0074b	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0074e	51		 push	 ecx
  0074f	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00754	83 c4 08	 add	 esp, 8

; 949  : 		WriteCODE	( DBOBLOCK_MESH_AMBIENT,	1,	ppBlock, pdwSize );

  00757	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0075a	50		 push	 eax
  0075b	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0075e	51		 push	 ecx
  0075f	6a 01		 push	 1
  00761	68 85 00 00 00	 push	 133			; 00000085H
  00766	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0076b	83 c4 10	 add	 esp, 16			; 00000010H

; 950  : 		WriteBYTE	( pMesh->bAmbient,				ppBlock, pdwSize );

  0076e	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00771	50		 push	 eax
  00772	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00775	51		 push	 ecx
  00776	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00779	0f b6 82 10 04
	00 00		 movzx	 eax, BYTE PTR [edx+1040]
  00780	50		 push	 eax
  00781	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  00786	83 c4 0c	 add	 esp, 12			; 0000000cH

; 951  : 		WriteCR	( ppBlock, pdwSize );

  00789	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0078c	50		 push	 eax
  0078d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00790	51		 push	 ecx
  00791	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00796	83 c4 08	 add	 esp, 8

; 952  : 		WriteCODE	( DBOBLOCK_MESH_TRANSPARENCY,1,	ppBlock, pdwSize );

  00799	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0079c	50		 push	 eax
  0079d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  007a0	51		 push	 ecx
  007a1	6a 01		 push	 1
  007a3	68 86 00 00 00	 push	 134			; 00000086H
  007a8	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  007ad	83 c4 10	 add	 esp, 16			; 00000010H

; 953  : 		WriteBYTE	( pMesh->bTransparency,			ppBlock, pdwSize );

  007b0	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  007b3	50		 push	 eax
  007b4	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  007b7	51		 push	 ecx
  007b8	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  007bb	0f b6 82 11 04
	00 00		 movzx	 eax, BYTE PTR [edx+1041]
  007c2	50		 push	 eax
  007c3	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  007c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 954  : 		WriteCR	( ppBlock, pdwSize );

  007cb	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  007ce	50		 push	 eax
  007cf	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  007d2	51		 push	 ecx
  007d3	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  007d8	83 c4 08	 add	 esp, 8

; 955  : 		WriteCODE	( DBOBLOCK_MESH_GHOST,		1,	ppBlock, pdwSize );

  007db	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  007de	50		 push	 eax
  007df	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  007e2	51		 push	 ecx
  007e3	6a 01		 push	 1
  007e5	68 87 00 00 00	 push	 135			; 00000087H
  007ea	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  007ef	83 c4 10	 add	 esp, 16			; 00000010H

; 956  : 		WriteBYTE	( pMesh->bGhost,				ppBlock, pdwSize );

  007f2	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  007f5	50		 push	 eax
  007f6	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  007f9	51		 push	 ecx
  007fa	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  007fd	0f b6 82 18 04
	00 00		 movzx	 eax, BYTE PTR [edx+1048]
  00804	50		 push	 eax
  00805	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  0080a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 957  : 		WriteCR	( ppBlock, pdwSize );

  0080d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00810	50		 push	 eax
  00811	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00814	51		 push	 ecx
  00815	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0081a	83 c4 08	 add	 esp, 8

; 958  : 		WriteCODE	( DBOBLOCK_MESH_GHOSTMODE,	4,	ppBlock, pdwSize );

  0081d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00820	50		 push	 eax
  00821	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00824	51		 push	 ecx
  00825	6a 04		 push	 4
  00827	68 88 00 00 00	 push	 136			; 00000088H
  0082c	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00831	83 c4 10	 add	 esp, 16			; 00000010H

; 959  : 		WriteDWORD	( pMesh->iGhostMode,			ppBlock, pdwSize );

  00834	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00837	50		 push	 eax
  00838	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0083b	51		 push	 ecx
  0083c	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  0083f	8b 82 1c 04 00
	00		 mov	 eax, DWORD PTR [edx+1052]
  00845	50		 push	 eax
  00846	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0084b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 960  : 		WriteCR	( ppBlock, pdwSize );

  0084e	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00851	50		 push	 eax
  00852	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00855	51		 push	 ecx
  00856	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0085b	83 c4 08	 add	 esp, 8

; 961  : 		WriteCODE	( DBOBLOCK_MESH_VISIBLE,	1,	ppBlock, pdwSize );

  0085e	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00861	50		 push	 eax
  00862	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00865	51		 push	 ecx
  00866	6a 01		 push	 1
  00868	68 8c 00 00 00	 push	 140			; 0000008cH
  0086d	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00872	83 c4 10	 add	 esp, 16			; 00000010H

; 962  : 		WriteBYTE	( pMesh->bVisible,				ppBlock, pdwSize );

  00875	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00878	50		 push	 eax
  00879	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0087c	51		 push	 ecx
  0087d	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00880	0f b6 82 19 04
	00 00		 movzx	 eax, BYTE PTR [edx+1049]
  00887	50		 push	 eax
  00888	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  0088d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 963  : 		WriteCR	( ppBlock, pdwSize );

  00890	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00893	50		 push	 eax
  00894	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00897	51		 push	 ecx
  00898	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0089d	83 c4 08	 add	 esp, 8

; 964  : 		WriteCODE	( DBOBLOCK_MESH_LINKED,		1,	ppBlock, pdwSize );

  008a0	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  008a3	50		 push	 eax
  008a4	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  008a7	51		 push	 ecx
  008a8	6a 01		 push	 1
  008aa	68 89 00 00 00	 push	 137			; 00000089H
  008af	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  008b4	83 c4 10	 add	 esp, 16			; 00000010H

; 965  : 		WriteBYTE	( pMesh->bLinked,				ppBlock, pdwSize );

  008b7	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  008ba	50		 push	 eax
  008bb	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  008be	51		 push	 ecx
  008bf	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  008c2	0f b6 82 70 04
	00 00		 movzx	 eax, BYTE PTR [edx+1136]
  008c9	50		 push	 eax
  008ca	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  008cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 966  : 		WriteCR	( ppBlock, pdwSize );

  008d2	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  008d5	50		 push	 eax
  008d6	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  008d9	51		 push	 ecx
  008da	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  008df	83 c4 08	 add	 esp, 8

; 967  : 
; 968  : 		// 250704 - Write FX effect file name (if any)
; 969  : 		if ( pMesh->bUseVertexShader )

  008e2	8b 45 08	 mov	 eax, DWORD PTR _pMesh$[ebp]
  008e5	0f b6 48 40	 movzx	 ecx, BYTE PTR [eax+64]
  008e9	85 c9		 test	 ecx, ecx
  008eb	74 6f		 je	 SHORT $LN3@ScanMesh

; 970  : 		{
; 971  : 			LPSTR pCodeSizePtr = NULL;

  008ed	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57172[ebp], 0

; 972  : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  008f4	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  008f8	74 0b		 je	 SHORT $LN2@ScanMesh
  008fa	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  008fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  008ff	83 c1 04	 add	 ecx, 4
  00902	89 4d f4	 mov	 DWORD PTR _pCodeSizePtr$57172[ebp], ecx
$LN2@ScanMesh:

; 973  : 			WriteCODE ( DBOBLOCK_MESH_FXEFFECTNAME, 0, ppBlock, pdwSize );

  00905	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00908	50		 push	 eax
  00909	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0090c	51		 push	 ecx
  0090d	6a 00		 push	 0
  0090f	68 9a 00 00 00	 push	 154			; 0000009aH
  00914	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00919	83 c4 10	 add	 esp, 16			; 00000010H

; 974  : 			WriteString ( pMesh->pEffectName, ppBlock, pdwSize );

  0091c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0091f	50		 push	 eax
  00920	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00923	51		 push	 ecx
  00924	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00927	81 c2 5c 02 00
	00		 add	 edx, 604		; 0000025cH
  0092d	52		 push	 edx
  0092e	e8 00 00 00 00	 call	 ?WriteString@@YA_NPADPAPADPAK@Z ; WriteString
  00933	83 c4 0c	 add	 esp, 12			; 0000000cH

; 975  : 			WriteCR ( ppBlock, pdwSize );

  00936	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00939	50		 push	 eax
  0093a	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0093d	51		 push	 ecx
  0093e	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00943	83 c4 08	 add	 esp, 8

; 976  : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00946	83 7d f4 00	 cmp	 DWORD PTR _pCodeSizePtr$57172[ebp], 0
  0094a	74 10		 je	 SHORT $LN3@ScanMesh
  0094c	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0094f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00951	83 e9 04	 sub	 ecx, 4
  00954	2b 4d f4	 sub	 ecx, DWORD PTR _pCodeSizePtr$57172[ebp]
  00957	8b 55 f4	 mov	 edx, DWORD PTR _pCodeSizePtr$57172[ebp]
  0095a	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@ScanMesh:

; 977  : 		}
; 978  : 
; 979  : 		// 190804 - Write dwArbitaryValue to meshdata
; 980  : 		WriteCODE	( DBOBLOCK_MESH_ARBITARYVALUE, 4,	ppBlock, pdwSize );

  0095c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0095f	50		 push	 eax
  00960	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00963	51		 push	 ecx
  00964	6a 04		 push	 4
  00966	68 9b 00 00 00	 push	 155			; 0000009bH
  0096b	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00970	83 c4 10	 add	 esp, 16			; 00000010H

; 981  : 		WriteDWORD	( pMesh->Collision.dwArbitaryValue,	ppBlock, pdwSize );

  00973	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00976	50		 push	 eax
  00977	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0097a	51		 push	 ecx
  0097b	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  0097e	8b 82 d8 04 00
	00		 mov	 eax, DWORD PTR [edx+1240]
  00984	50		 push	 eax
  00985	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0098a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 982  : 		WriteCR		( ppBlock, pdwSize );

  0098d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00990	50		 push	 eax
  00991	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00994	51		 push	 ecx
  00995	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0099a	83 c4 08	 add	 esp, 8

; 983  : 
; 984  : 		// 230904 - Write ZBIAS info
; 985  : 		WriteCODE	( DBOBLOCK_MESH_ZBIASFLAG,	1,	ppBlock, pdwSize );

  0099d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  009a0	50		 push	 eax
  009a1	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  009a4	51		 push	 ecx
  009a5	6a 01		 push	 1
  009a7	68 9c 00 00 00	 push	 156			; 0000009cH
  009ac	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  009b1	83 c4 10	 add	 esp, 16			; 00000010H

; 986  : 		WriteBYTE	( pMesh->bZBiasActive,				ppBlock, pdwSize );

  009b4	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  009b7	50		 push	 eax
  009b8	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  009bb	51		 push	 ecx
  009bc	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  009bf	0f b6 82 20 04
	00 00		 movzx	 eax, BYTE PTR [edx+1056]
  009c6	50		 push	 eax
  009c7	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  009cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 987  : 		WriteCR	( ppBlock, pdwSize );

  009cf	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  009d2	50		 push	 eax
  009d3	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  009d6	51		 push	 ecx
  009d7	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  009dc	83 c4 08	 add	 esp, 8

; 988  : 		DWORD dwDWORD = *(DWORD*)&pMesh->fZBiasSlopeScale;

  009df	8b 45 08	 mov	 eax, DWORD PTR _pMesh$[ebp]
  009e2	8b 88 24 04 00
	00		 mov	 ecx, DWORD PTR [eax+1060]
  009e8	89 4d f0	 mov	 DWORD PTR _dwDWORD$57176[ebp], ecx

; 989  : 		WriteCODE	( DBOBLOCK_MESH_ZBIASSLOPE, 4,	ppBlock, pdwSize );

  009eb	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  009ee	50		 push	 eax
  009ef	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  009f2	51		 push	 ecx
  009f3	6a 04		 push	 4
  009f5	68 9d 00 00 00	 push	 157			; 0000009dH
  009fa	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  009ff	83 c4 10	 add	 esp, 16			; 00000010H

; 990  : 		WriteDWORD	( dwDWORD,	ppBlock, pdwSize );

  00a02	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00a05	50		 push	 eax
  00a06	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00a09	51		 push	 ecx
  00a0a	8b 55 f0	 mov	 edx, DWORD PTR _dwDWORD$57176[ebp]
  00a0d	52		 push	 edx
  00a0e	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00a13	83 c4 0c	 add	 esp, 12			; 0000000cH

; 991  : 		WriteCR		( ppBlock, pdwSize );

  00a16	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00a19	50		 push	 eax
  00a1a	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00a1d	51		 push	 ecx
  00a1e	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00a23	83 c4 08	 add	 esp, 8

; 992  : 		dwDWORD = *(DWORD*)&pMesh->fZBiasDepth;

  00a26	8b 45 08	 mov	 eax, DWORD PTR _pMesh$[ebp]
  00a29	8b 88 28 04 00
	00		 mov	 ecx, DWORD PTR [eax+1064]
  00a2f	89 4d f0	 mov	 DWORD PTR _dwDWORD$57176[ebp], ecx

; 993  : 		WriteCODE	( DBOBLOCK_MESH_ZBIASDEPTH, 4,	ppBlock, pdwSize );

  00a32	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00a35	50		 push	 eax
  00a36	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00a39	51		 push	 ecx
  00a3a	6a 04		 push	 4
  00a3c	68 9e 00 00 00	 push	 158			; 0000009eH
  00a41	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00a46	83 c4 10	 add	 esp, 16			; 00000010H

; 994  : 		WriteDWORD	( dwDWORD,	ppBlock, pdwSize );

  00a49	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00a4c	50		 push	 eax
  00a4d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00a50	51		 push	 ecx
  00a51	8b 55 f0	 mov	 edx, DWORD PTR _dwDWORD$57176[ebp]
  00a54	52		 push	 edx
  00a55	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00a5a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 995  : 		WriteCR		( ppBlock, pdwSize );

  00a5d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00a60	50		 push	 eax
  00a61	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00a64	51		 push	 ecx
  00a65	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00a6a	83 c4 08	 add	 esp, 8

; 996  : 		WriteCODE	( DBOBLOCK_MESH_ZREAD,	1,	ppBlock, pdwSize );

  00a6d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00a70	50		 push	 eax
  00a71	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00a74	51		 push	 ecx
  00a75	6a 01		 push	 1
  00a77	68 9f 00 00 00	 push	 159			; 0000009fH
  00a7c	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00a81	83 c4 10	 add	 esp, 16			; 00000010H

; 997  : 		WriteBYTE	( pMesh->bZRead,				ppBlock, pdwSize );

  00a84	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00a87	50		 push	 eax
  00a88	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00a8b	51		 push	 ecx
  00a8c	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00a8f	0f b6 82 1a 04
	00 00		 movzx	 eax, BYTE PTR [edx+1050]
  00a96	50		 push	 eax
  00a97	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  00a9c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 998  : 		WriteCR	( ppBlock, pdwSize );

  00a9f	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00aa2	50		 push	 eax
  00aa3	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00aa6	51		 push	 ecx
  00aa7	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00aac	83 c4 08	 add	 esp, 8

; 999  : 		WriteCODE	( DBOBLOCK_MESH_ZWRITE,	1,	ppBlock, pdwSize );

  00aaf	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00ab2	50		 push	 eax
  00ab3	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00ab6	51		 push	 ecx
  00ab7	6a 01		 push	 1
  00ab9	68 a0 00 00 00	 push	 160			; 000000a0H
  00abe	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00ac3	83 c4 10	 add	 esp, 16			; 00000010H

; 1000 : 		WriteBYTE	( pMesh->bZWrite,				ppBlock, pdwSize );

  00ac6	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00ac9	50		 push	 eax
  00aca	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00acd	51		 push	 ecx
  00ace	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00ad1	0f b6 82 1b 04
	00 00		 movzx	 eax, BYTE PTR [edx+1051]
  00ad8	50		 push	 eax
  00ad9	e8 00 00 00 00	 call	 ?WriteBYTE@@YA_NEPAPADPAK@Z ; WriteBYTE
  00ade	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1001 : 		WriteCR	( ppBlock, pdwSize );

  00ae1	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00ae4	50		 push	 eax
  00ae5	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00ae8	51		 push	 ecx
  00ae9	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00aee	83 c4 08	 add	 esp, 8

; 1002 : 
; 1003 : 		// 061204 - Needed to retain alpha-test-depth-draw-system(universe)
; 1004 : 		WriteCODE	( DBOBLOCK_MESH_ALPHATESTVALUE, 4,	ppBlock, pdwSize );

  00af1	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00af4	50		 push	 eax
  00af5	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00af8	51		 push	 ecx
  00af9	6a 04		 push	 4
  00afb	68 a6 00 00 00	 push	 166			; 000000a6H
  00b00	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00b05	83 c4 10	 add	 esp, 16			; 00000010H

; 1005 : 		WriteDWORD	( pMesh->dwAlphaTestValue,	ppBlock, pdwSize );

  00b08	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00b0b	50		 push	 eax
  00b0c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00b0f	51		 push	 ecx
  00b10	8b 55 08	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00b13	8b 82 14 04 00
	00		 mov	 eax, DWORD PTR [edx+1044]
  00b19	50		 push	 eax
  00b1a	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00b1f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1006 : 		WriteCR		( ppBlock, pdwSize );

  00b22	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00b25	50		 push	 eax
  00b26	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00b29	51		 push	 ecx
  00b2a	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00b2f	83 c4 08	 add	 esp, 8
$LN15@ScanMesh:

; 1007 : 	}
; 1008 : 
; 1009 : 	// No more mesh codes
; 1010 : 	WriteCODE ( 0, 0, ppBlock, pdwSize );

  00b32	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00b35	50		 push	 eax
  00b36	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00b39	51		 push	 ecx
  00b3a	6a 00		 push	 0
  00b3c	6a 00		 push	 0
  00b3e	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00b43	83 c4 10	 add	 esp, 16			; 00000010H

; 1011 : 
; 1012 : 	// okay
; 1013 : 	return true;

  00b46	b0 01		 mov	 al, 1

; 1014 : }

  00b48	5f		 pop	 edi
  00b49	5e		 pop	 esi
  00b4a	5b		 pop	 ebx
  00b4b	8b e5		 mov	 esp, ebp
  00b4d	5d		 pop	 ebp
  00b4e	c3		 ret	 0
?ScanMesh@@YA_NPAUsMesh@@PAPADPAK@Z ENDP		; ScanMesh
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?ScanFrame@@YA_NPAUsFrame@@PAPADPAK@Z
_TEXT	SEGMENT
_pCodeSizePtr$57185 = -4				; size = 4
_pFrame$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
_pdwSize$ = 16						; size = 4
?ScanFrame@@YA_NPAUsFrame@@PAPADPAK@Z PROC		; ScanFrame, COMDAT

; 1017 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1018 : 	// No frame
; 1019 : 	if ( pFrame )

  00009	83 7d 08 00	 cmp	 DWORD PTR _pFrame$[ebp], 0
  0000d	0f 84 d1 03 00
	00		 je	 $LN17@ScanFrame

; 1020 : 	{
; 1021 : 		// Write name
; 1022 : 		LPSTR pCodeSizePtr = NULL;

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], 0

; 1023 : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  0001a	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0001e	74 0b		 je	 SHORT $LN16@ScanFrame
  00020	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	83 c1 04	 add	 ecx, 4
  00028	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], ecx
$LN16@ScanFrame:

; 1024 : 		WriteCODE ( DBOBLOCK_FRAME_NAME, 0, ppBlock, pdwSize );

  0002b	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00032	51		 push	 ecx
  00033	6a 00		 push	 0
  00035	6a 65		 push	 101			; 00000065H
  00037	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0003c	83 c4 10	 add	 esp, 16			; 00000010H

; 1025 : 		WriteString ( pFrame->szName, ppBlock, pdwSize );

  0003f	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00042	50		 push	 eax
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00046	51		 push	 ecx
  00047	8b 55 08	 mov	 edx, DWORD PTR _pFrame$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ?WriteString@@YA_NPADPAPADPAK@Z ; WriteString
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1026 : 		WriteCR ( ppBlock, pdwSize );

  00053	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00056	50		 push	 eax
  00057	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00060	83 c4 08	 add	 esp, 8

; 1027 : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00063	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57185[ebp], 0
  00067	74 10		 je	 SHORT $LN15@ScanFrame
  00069	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	83 e9 04	 sub	 ecx, 4
  00071	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57185[ebp]
  00074	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57185[ebp]
  00077	89 0a		 mov	 DWORD PTR [edx], ecx
$LN15@ScanFrame:

; 1028 : 	
; 1029 : 		// Write original matrix
; 1030 : 		pCodeSizePtr = NULL;

  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], 0

; 1031 : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  00080	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00084	74 0b		 je	 SHORT $LN14@ScanFrame
  00086	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00089	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008b	83 c1 04	 add	 ecx, 4
  0008e	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], ecx
$LN14@ScanFrame:

; 1032 : 		WriteCODE ( DBOBLOCK_FRAME_MATRIX, 0, ppBlock, pdwSize );

  00091	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00094	50		 push	 eax
  00095	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00098	51		 push	 ecx
  00099	6a 00		 push	 0
  0009b	6a 66		 push	 102			; 00000066H
  0009d	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  000a2	83 c4 10	 add	 esp, 16			; 00000010H

; 1033 : 		WriteMATRIX ( pFrame->matOriginal, ppBlock, pdwSize );

  000a5	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000ac	51		 push	 ecx
  000ad	8b 75 08	 mov	 esi, DWORD PTR _pFrame$[ebp]
  000b0	81 c6 10 01 00
	00		 add	 esi, 272		; 00000110H
  000b6	83 ec 40	 sub	 esp, 64			; 00000040H
  000b9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000be	8b fc		 mov	 edi, esp
  000c0	f3 a5		 rep movsd
  000c2	e8 00 00 00 00	 call	 ?WriteMATRIX@@YA_NUD3DXMATRIX@@PAPADPAK@Z ; WriteMATRIX
  000c7	83 c4 48	 add	 esp, 72			; 00000048H

; 1034 : 		WriteCR ( ppBlock, pdwSize );

  000ca	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  000d7	83 c4 08	 add	 esp, 8

; 1035 : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  000da	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57185[ebp], 0
  000de	74 10		 je	 SHORT $LN13@ScanFrame
  000e0	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e5	83 e9 04	 sub	 ecx, 4
  000e8	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57185[ebp]
  000eb	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57185[ebp]
  000ee	89 0a		 mov	 DWORD PTR [edx], ecx
$LN13@ScanFrame:

; 1036 : 
; 1037 : 		// Write mesh
; 1038 : 		pCodeSizePtr = NULL;

  000f0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], 0

; 1039 : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  000f7	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  000fb	74 0b		 je	 SHORT $LN12@ScanFrame
  000fd	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00100	8b 08		 mov	 ecx, DWORD PTR [eax]
  00102	83 c1 04	 add	 ecx, 4
  00105	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], ecx
$LN12@ScanFrame:

; 1040 : 		WriteCODE ( DBOBLOCK_FRAME_MESH, 0, ppBlock, pdwSize );

  00108	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0010b	50		 push	 eax
  0010c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0010f	51		 push	 ecx
  00110	6a 00		 push	 0
  00112	6a 67		 push	 103			; 00000067H
  00114	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00119	83 c4 10	 add	 esp, 16			; 00000010H

; 1041 : 		WriteCR ( ppBlock, pdwSize );

  0011c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0011f	50		 push	 eax
  00120	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00129	83 c4 08	 add	 esp, 8

; 1042 : 		ScanMesh ( pFrame->pMesh, ppBlock, pdwSize );

  0012c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0012f	50		 push	 eax
  00130	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00133	51		 push	 ecx
  00134	8b 55 08	 mov	 edx, DWORD PTR _pFrame$[ebp]
  00137	8b 82 f8 02 00
	00		 mov	 eax, DWORD PTR [edx+760]
  0013d	50		 push	 eax
  0013e	e8 00 00 00 00	 call	 ?ScanMesh@@YA_NPAUsMesh@@PAPADPAK@Z ; ScanMesh
  00143	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1043 : 		WriteCR ( ppBlock, pdwSize );

  00146	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00149	50		 push	 eax
  0014a	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0014d	51		 push	 ecx
  0014e	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00153	83 c4 08	 add	 esp, 8

; 1044 : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00156	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57185[ebp], 0
  0015a	74 10		 je	 SHORT $LN11@ScanFrame
  0015c	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0015f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00161	83 e9 04	 sub	 ecx, 4
  00164	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57185[ebp]
  00167	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57185[ebp]
  0016a	89 0a		 mov	 DWORD PTR [edx], ecx
$LN11@ScanFrame:

; 1045 : 
; 1046 : 		// Write child
; 1047 : 		pCodeSizePtr = NULL;

  0016c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], 0

; 1048 : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  00173	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00177	74 0b		 je	 SHORT $LN10@ScanFrame
  00179	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0017c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017e	83 c1 04	 add	 ecx, 4
  00181	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], ecx
$LN10@ScanFrame:

; 1049 : 		WriteCODE ( DBOBLOCK_FRAME_CHILD, 0, ppBlock, pdwSize );

  00184	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00187	50		 push	 eax
  00188	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0018b	51		 push	 ecx
  0018c	6a 00		 push	 0
  0018e	6a 68		 push	 104			; 00000068H
  00190	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00195	83 c4 10	 add	 esp, 16			; 00000010H

; 1050 : 		WriteCR ( ppBlock, pdwSize );

  00198	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0019b	50		 push	 eax
  0019c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0019f	51		 push	 ecx
  001a0	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  001a5	83 c4 08	 add	 esp, 8

; 1051 : 		ScanFrame ( pFrame->pChild, ppBlock, pdwSize );

  001a8	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001ab	50		 push	 eax
  001ac	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001af	51		 push	 ecx
  001b0	8b 55 08	 mov	 edx, DWORD PTR _pFrame$[ebp]
  001b3	8b 82 08 01 00
	00		 mov	 eax, DWORD PTR [edx+264]
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 ?ScanFrame@@YA_NPAUsFrame@@PAPADPAK@Z ; ScanFrame
  001bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1052 : 		WriteCR ( ppBlock, pdwSize );

  001c2	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001c5	50		 push	 eax
  001c6	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001c9	51		 push	 ecx
  001ca	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  001cf	83 c4 08	 add	 esp, 8

; 1053 : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  001d2	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57185[ebp], 0
  001d6	74 10		 je	 SHORT $LN9@ScanFrame
  001d8	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001db	8b 08		 mov	 ecx, DWORD PTR [eax]
  001dd	83 e9 04	 sub	 ecx, 4
  001e0	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57185[ebp]
  001e3	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57185[ebp]
  001e6	89 0a		 mov	 DWORD PTR [edx], ecx
$LN9@ScanFrame:

; 1054 : 
; 1055 : 		// Write sibling
; 1056 : 		pCodeSizePtr = NULL;

  001e8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], 0

; 1057 : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  001ef	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  001f3	74 0b		 je	 SHORT $LN8@ScanFrame
  001f5	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001fa	83 c1 04	 add	 ecx, 4
  001fd	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], ecx
$LN8@ScanFrame:

; 1058 : 		WriteCODE ( DBOBLOCK_FRAME_SIBLING, 0, ppBlock, pdwSize );

  00200	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00203	50		 push	 eax
  00204	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00207	51		 push	 ecx
  00208	6a 00		 push	 0
  0020a	6a 69		 push	 105			; 00000069H
  0020c	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00211	83 c4 10	 add	 esp, 16			; 00000010H

; 1059 : 		WriteCR ( ppBlock, pdwSize );

  00214	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00217	50		 push	 eax
  00218	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0021b	51		 push	 ecx
  0021c	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00221	83 c4 08	 add	 esp, 8

; 1060 : 		ScanFrame ( pFrame->pSibling, ppBlock, pdwSize );

  00224	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00227	50		 push	 eax
  00228	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0022b	51		 push	 ecx
  0022c	8b 55 08	 mov	 edx, DWORD PTR _pFrame$[ebp]
  0022f	8b 82 0c 01 00
	00		 mov	 eax, DWORD PTR [edx+268]
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 ?ScanFrame@@YA_NPAUsFrame@@PAPADPAK@Z ; ScanFrame
  0023b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1061 : 		WriteCR ( ppBlock, pdwSize );

  0023e	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00241	50		 push	 eax
  00242	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00245	51		 push	 ecx
  00246	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0024b	83 c4 08	 add	 esp, 8

; 1062 : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  0024e	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57185[ebp], 0
  00252	74 10		 je	 SHORT $LN7@ScanFrame
  00254	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00257	8b 08		 mov	 ecx, DWORD PTR [eax]
  00259	83 e9 04	 sub	 ecx, 4
  0025c	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57185[ebp]
  0025f	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57185[ebp]
  00262	89 0a		 mov	 DWORD PTR [edx], ecx
$LN7@ScanFrame:

; 1063 : 
; 1064 : 		// Write vector offset
; 1065 : 		pCodeSizePtr = NULL;

  00264	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], 0

; 1066 : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  0026b	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0026f	74 0b		 je	 SHORT $LN6@ScanFrame
  00271	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00274	8b 08		 mov	 ecx, DWORD PTR [eax]
  00276	83 c1 04	 add	 ecx, 4
  00279	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], ecx
$LN6@ScanFrame:

; 1067 : 		WriteCODE ( DBOBLOCK_FRAME_OFFSET, 0, ppBlock, pdwSize );

  0027c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0027f	50		 push	 eax
  00280	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00283	51		 push	 ecx
  00284	6a 00		 push	 0
  00286	6a 6a		 push	 106			; 0000006aH
  00288	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0028d	83 c4 10	 add	 esp, 16			; 00000010H

; 1068 : 		WriteVECTOR ( pFrame->vecOffset, ppBlock, pdwSize );

  00290	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00293	50		 push	 eax
  00294	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00297	51		 push	 ecx
  00298	8b 55 08	 mov	 edx, DWORD PTR _pFrame$[ebp]
  0029b	81 c2 a0 02 00
	00		 add	 edx, 672		; 000002a0H
  002a1	83 ec 0c	 sub	 esp, 12			; 0000000cH
  002a4	8b c4		 mov	 eax, esp
  002a6	8b 0a		 mov	 ecx, DWORD PTR [edx]
  002a8	89 08		 mov	 DWORD PTR [eax], ecx
  002aa	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  002ad	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  002b0	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  002b3	89 50 08	 mov	 DWORD PTR [eax+8], edx
  002b6	e8 00 00 00 00	 call	 ?WriteVECTOR@@YA_NUD3DXVECTOR3@@PAPADPAK@Z ; WriteVECTOR
  002bb	83 c4 14	 add	 esp, 20			; 00000014H

; 1069 : 		WriteCR ( ppBlock, pdwSize );

  002be	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002c1	50		 push	 eax
  002c2	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002c5	51		 push	 ecx
  002c6	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  002cb	83 c4 08	 add	 esp, 8

; 1070 : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  002ce	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57185[ebp], 0
  002d2	74 10		 je	 SHORT $LN5@ScanFrame
  002d4	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  002d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d9	83 e9 04	 sub	 ecx, 4
  002dc	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57185[ebp]
  002df	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57185[ebp]
  002e2	89 0a		 mov	 DWORD PTR [edx], ecx
$LN5@ScanFrame:

; 1071 : 
; 1072 : 		// Write vector rotation
; 1073 : 		pCodeSizePtr = NULL;

  002e4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], 0

; 1074 : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  002eb	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  002ef	74 0b		 je	 SHORT $LN4@ScanFrame
  002f1	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  002f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f6	83 c1 04	 add	 ecx, 4
  002f9	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], ecx
$LN4@ScanFrame:

; 1075 : 		WriteCODE ( DBOBLOCK_FRAME_ROTATION, 0, ppBlock, pdwSize );

  002fc	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002ff	50		 push	 eax
  00300	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00303	51		 push	 ecx
  00304	6a 00		 push	 0
  00306	6a 6b		 push	 107			; 0000006bH
  00308	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0030d	83 c4 10	 add	 esp, 16			; 00000010H

; 1076 : 		WriteVECTOR ( pFrame->vecRotation, ppBlock, pdwSize );

  00310	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00313	50		 push	 eax
  00314	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00317	51		 push	 ecx
  00318	8b 55 08	 mov	 edx, DWORD PTR _pFrame$[ebp]
  0031b	81 c2 b8 02 00
	00		 add	 edx, 696		; 000002b8H
  00321	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00324	8b c4		 mov	 eax, esp
  00326	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00328	89 08		 mov	 DWORD PTR [eax], ecx
  0032a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0032d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00330	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00333	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00336	e8 00 00 00 00	 call	 ?WriteVECTOR@@YA_NUD3DXVECTOR3@@PAPADPAK@Z ; WriteVECTOR
  0033b	83 c4 14	 add	 esp, 20			; 00000014H

; 1077 : 		WriteCR ( ppBlock, pdwSize );

  0033e	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00341	50		 push	 eax
  00342	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00345	51		 push	 ecx
  00346	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0034b	83 c4 08	 add	 esp, 8

; 1078 : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  0034e	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57185[ebp], 0
  00352	74 10		 je	 SHORT $LN3@ScanFrame
  00354	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00357	8b 08		 mov	 ecx, DWORD PTR [eax]
  00359	83 e9 04	 sub	 ecx, 4
  0035c	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57185[ebp]
  0035f	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57185[ebp]
  00362	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@ScanFrame:

; 1079 : 
; 1080 : 		// Write vector scale
; 1081 : 		pCodeSizePtr = NULL;

  00364	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], 0

; 1082 : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  0036b	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0036f	74 0b		 je	 SHORT $LN2@ScanFrame
  00371	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00374	8b 08		 mov	 ecx, DWORD PTR [eax]
  00376	83 c1 04	 add	 ecx, 4
  00379	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57185[ebp], ecx
$LN2@ScanFrame:

; 1083 : 		WriteCODE ( DBOBLOCK_FRAME_SCALE, 0, ppBlock, pdwSize );

  0037c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0037f	50		 push	 eax
  00380	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00383	51		 push	 ecx
  00384	6a 00		 push	 0
  00386	6a 6c		 push	 108			; 0000006cH
  00388	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0038d	83 c4 10	 add	 esp, 16			; 00000010H

; 1084 : 		WriteVECTOR ( pFrame->vecScale, ppBlock, pdwSize );

  00390	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00393	50		 push	 eax
  00394	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00397	51		 push	 ecx
  00398	8b 55 08	 mov	 edx, DWORD PTR _pFrame$[ebp]
  0039b	81 c2 ac 02 00
	00		 add	 edx, 684		; 000002acH
  003a1	83 ec 0c	 sub	 esp, 12			; 0000000cH
  003a4	8b c4		 mov	 eax, esp
  003a6	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003a8	89 08		 mov	 DWORD PTR [eax], ecx
  003aa	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  003ad	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  003b0	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  003b3	89 50 08	 mov	 DWORD PTR [eax+8], edx
  003b6	e8 00 00 00 00	 call	 ?WriteVECTOR@@YA_NUD3DXVECTOR3@@PAPADPAK@Z ; WriteVECTOR
  003bb	83 c4 14	 add	 esp, 20			; 00000014H

; 1085 : 		WriteCR ( ppBlock, pdwSize );

  003be	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  003c1	50		 push	 eax
  003c2	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  003c5	51		 push	 ecx
  003c6	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  003cb	83 c4 08	 add	 esp, 8

; 1086 : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  003ce	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57185[ebp], 0
  003d2	74 10		 je	 SHORT $LN17@ScanFrame
  003d4	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  003d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d9	83 e9 04	 sub	 ecx, 4
  003dc	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57185[ebp]
  003df	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57185[ebp]
  003e2	89 0a		 mov	 DWORD PTR [edx], ecx
$LN17@ScanFrame:

; 1087 : 	}
; 1088 : 
; 1089 : 	// No more frame codes
; 1090 : 	WriteCODE ( 0, 0, ppBlock, pdwSize );

  003e4	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  003e7	50		 push	 eax
  003e8	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  003eb	51		 push	 ecx
  003ec	6a 00		 push	 0
  003ee	6a 00		 push	 0
  003f0	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  003f5	83 c4 10	 add	 esp, 16			; 00000010H

; 1091 : 
; 1092 : 	// okay
; 1093 : 	return true;

  003f8	b0 01		 mov	 al, 1

; 1094 : }

  003fa	5f		 pop	 edi
  003fb	5e		 pop	 esi
  003fc	5b		 pop	 ebx
  003fd	8b e5		 mov	 esp, ebp
  003ff	5d		 pop	 ebp
  00400	c3		 ret	 0
?ScanFrame@@YA_NPAUsFrame@@PAPADPAK@Z ENDP		; ScanFrame
_TEXT	ENDS
PUBLIC	?WriteBoneMatrices@@YA_NPAUsAnimation@@PAPADPAK@Z ; WriteBoneMatrices
; Function compile flags: /Odtp /ZI
;	COMDAT ?WriteBoneMatrices@@YA_NPAUsAnimation@@PAPADPAK@Z
_TEXT	SEGMENT
_iB$57221 = -12						; size = 4
_iA$57217 = -8						; size = 4
_pCodeSizePtr$ = -4					; size = 4
_pAnim$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
_pdwSize$ = 16						; size = 4
?WriteBoneMatrices@@YA_NPAUsAnimation@@PAPADPAK@Z PROC	; WriteBoneMatrices, COMDAT

; 1097 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1098 : 	LPSTR pCodeSizePtr = NULL;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$[ebp], 0

; 1099 : 	if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  00010	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00014	74 0b		 je	 SHORT $LN8@WriteBoneM
  00016	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	83 c1 04	 add	 ecx, 4
  0001e	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$[ebp], ecx
$LN8@WriteBoneM:

; 1100 : 
; 1101 : 	for ( int iA = 0; iA < pAnim->iBoneFrameA; iA++ )

  00021	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iA$57217[ebp], 0
  00028	eb 09		 jmp	 SHORT $LN7@WriteBoneM
$LN6@WriteBoneM:
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _iA$57217[ebp]
  0002d	83 c0 01	 add	 eax, 1
  00030	89 45 f8	 mov	 DWORD PTR _iA$57217[ebp], eax
$LN7@WriteBoneM:
  00033	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _iA$57217[ebp]
  00039	3b 88 4c 01 00
	00		 cmp	 ecx, DWORD PTR [eax+332]
  0003f	7d 57		 jge	 SHORT $LN5@WriteBoneM

; 1102 : 	{
; 1103 : 		for ( int iB = 0; iB < pAnim->iBoneFrameB; iB++ )

  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iB$57221[ebp], 0
  00048	eb 09		 jmp	 SHORT $LN4@WriteBoneM
$LN3@WriteBoneM:
  0004a	8b 45 f4	 mov	 eax, DWORD PTR _iB$57221[ebp]
  0004d	83 c0 01	 add	 eax, 1
  00050	89 45 f4	 mov	 DWORD PTR _iB$57221[ebp], eax
$LN4@WriteBoneM:
  00053	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  00056	8b 4d f4	 mov	 ecx, DWORD PTR _iB$57221[ebp]
  00059	3b 88 50 01 00
	00		 cmp	 ecx, DWORD PTR [eax+336]
  0005f	7d 35		 jge	 SHORT $LN2@WriteBoneM

; 1104 : 		{
; 1105 : 			WriteMATRIX ( pAnim->ppBoneFrames [ iA ] [ iB ], ppBlock, pdwSize );

  00061	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00064	50		 push	 eax
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00068	51		 push	 ecx
  00069	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  0006c	8b 82 48 01 00
	00		 mov	 eax, DWORD PTR [edx+328]
  00072	8b 4d f4	 mov	 ecx, DWORD PTR _iB$57221[ebp]
  00075	c1 e1 06	 shl	 ecx, 6
  00078	8b 55 f8	 mov	 edx, DWORD PTR _iA$57217[ebp]
  0007b	8b 34 90	 mov	 esi, DWORD PTR [eax+edx*4]
  0007e	03 f1		 add	 esi, ecx
  00080	83 ec 40	 sub	 esp, 64			; 00000040H
  00083	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00088	8b fc		 mov	 edi, esp
  0008a	f3 a5		 rep movsd
  0008c	e8 00 00 00 00	 call	 ?WriteMATRIX@@YA_NUD3DXMATRIX@@PAPADPAK@Z ; WriteMATRIX
  00091	83 c4 48	 add	 esp, 72			; 00000048H

; 1106 : 			
; 1107 : 		}

  00094	eb b4		 jmp	 SHORT $LN3@WriteBoneM
$LN2@WriteBoneM:

; 1108 : 	}

  00096	eb 92		 jmp	 SHORT $LN6@WriteBoneM
$LN5@WriteBoneM:

; 1109 : 
; 1110 : 	WriteCR ( ppBlock, pdwSize );

  00098	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0009b	50		 push	 eax
  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  000a5	83 c4 08	 add	 esp, 8

; 1111 : 	if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  000a8	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$[ebp], 0
  000ac	74 10		 je	 SHORT $LN1@WriteBoneM
  000ae	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b3	83 e9 04	 sub	 ecx, 4
  000b6	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$[ebp]
  000b9	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$[ebp]
  000bc	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@WriteBoneM:

; 1112 : 	
; 1113 : 	return true;

  000be	b0 01		 mov	 al, 1

; 1114 : }

  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
?WriteBoneMatrices@@YA_NPAUsAnimation@@PAPADPAK@Z ENDP	; WriteBoneMatrices
_TEXT	ENDS
PUBLIC	??BD3DXMATRIX@@QAEPAMXZ				; D3DXMATRIX::operator float *
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z ; ReadBoneMatrices
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z$0
__ehfuncinfo$?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z
_TEXT	SEGMENT
tv82 = -108						; size = 4
$T58022 = -104						; size = 4
$T58023 = -100						; size = 4
$T58024 = -96						; size = 4
_iB$57251 = -28						; size = 4
_iA$57246 = -24						; size = 4
_iFrame$57235 = -20					; size = 4
_dwLength$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_ppMatrix$ = 8						; size = 4
_dwA$ = 12						; size = 4
_dwB$ = 16						; size = 4
_ppBlock$ = 20						; size = 4
?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z PROC	; ReadBoneMatrices, COMDAT

; 1117 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1118 : 	DWORD dwLength = sizeof ( D3DXMATRIX );

  00028	c7 45 f0 40 00
	00 00		 mov	 DWORD PTR _dwLength$[ebp], 64 ; 00000040H

; 1119 : 
; 1120 : 	for ( int iFrame = 0; iFrame < (int)dwA; iFrame++ )

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _iFrame$57235[ebp], 0
  00036	eb 09		 jmp	 SHORT $LN9@ReadBoneMa
$LN8@ReadBoneMa:
  00038	8b 45 ec	 mov	 eax, DWORD PTR _iFrame$57235[ebp]
  0003b	83 c0 01	 add	 eax, 1
  0003e	89 45 ec	 mov	 DWORD PTR _iFrame$57235[ebp], eax
$LN9@ReadBoneMa:
  00041	8b 45 ec	 mov	 eax, DWORD PTR _iFrame$57235[ebp]
  00044	3b 45 0c	 cmp	 eax, DWORD PTR _dwA$[ebp]
  00047	7d 73		 jge	 SHORT $LN7@ReadBoneMa

; 1121 : 	{
; 1122 : 		ppMatrix [ iFrame ] = new D3DXMATRIX [ dwB ];

  00049	8b 45 10	 mov	 eax, DWORD PTR _dwB$[ebp]
  0004c	89 45 98	 mov	 DWORD PTR $T58022[ebp], eax
  0004f	33 c9		 xor	 ecx, ecx
  00051	8b 45 98	 mov	 eax, DWORD PTR $T58022[ebp]
  00054	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00059	f7 e2		 mul	 edx
  0005b	0f 90 c1	 seto	 cl
  0005e	f7 d9		 neg	 ecx
  00060	0b c8		 or	 ecx, eax
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00068	83 c4 04	 add	 esp, 4
  0006b	89 45 a0	 mov	 DWORD PTR $T58024[ebp], eax
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00075	83 7d a0 00	 cmp	 DWORD PTR $T58024[ebp], 0
  00079	74 1c		 je	 SHORT $LN12@ReadBoneMa
  0007b	68 00 00 00 00	 push	 OFFSET ??0D3DXMATRIX@@QAE@XZ ; D3DXMATRIX::D3DXMATRIX
  00080	8b 45 98	 mov	 eax, DWORD PTR $T58022[ebp]
  00083	50		 push	 eax
  00084	6a 40		 push	 64			; 00000040H
  00086	8b 4d a0	 mov	 ecx, DWORD PTR $T58024[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z
  0008f	8b 55 a0	 mov	 edx, DWORD PTR $T58024[ebp]
  00092	89 55 94	 mov	 DWORD PTR tv82[ebp], edx
  00095	eb 07		 jmp	 SHORT $LN13@ReadBoneMa
$LN12@ReadBoneMa:
  00097	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN13@ReadBoneMa:
  0009e	8b 45 94	 mov	 eax, DWORD PTR tv82[ebp]
  000a1	89 45 9c	 mov	 DWORD PTR $T58023[ebp], eax
  000a4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ab	8b 4d ec	 mov	 ecx, DWORD PTR _iFrame$57235[ebp]
  000ae	8b 55 08	 mov	 edx, DWORD PTR _ppMatrix$[ebp]
  000b1	8b 45 9c	 mov	 eax, DWORD PTR $T58023[ebp]
  000b4	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 1123 : 	}

  000b7	e9 7c ff ff ff	 jmp	 $LN8@ReadBoneMa
$LN7@ReadBoneMa:

; 1124 : 
; 1125 : 	for ( int iA = 0; iA < (int)dwA; iA++ )

  000bc	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iA$57246[ebp], 0
  000c3	eb 09		 jmp	 SHORT $LN6@ReadBoneMa
$LN5@ReadBoneMa:
  000c5	8b 45 e8	 mov	 eax, DWORD PTR _iA$57246[ebp]
  000c8	83 c0 01	 add	 eax, 1
  000cb	89 45 e8	 mov	 DWORD PTR _iA$57246[ebp], eax
$LN6@ReadBoneMa:
  000ce	8b 45 e8	 mov	 eax, DWORD PTR _iA$57246[ebp]
  000d1	3b 45 0c	 cmp	 eax, DWORD PTR _dwA$[ebp]
  000d4	7d 52		 jge	 SHORT $LN4@ReadBoneMa

; 1126 : 	{
; 1127 : 		for ( int iB = 0; iB < (int)dwB; iB++ )

  000d6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iB$57251[ebp], 0
  000dd	eb 09		 jmp	 SHORT $LN3@ReadBoneMa
$LN2@ReadBoneMa:
  000df	8b 45 e4	 mov	 eax, DWORD PTR _iB$57251[ebp]
  000e2	83 c0 01	 add	 eax, 1
  000e5	89 45 e4	 mov	 DWORD PTR _iB$57251[ebp], eax
$LN3@ReadBoneMa:
  000e8	8b 45 e4	 mov	 eax, DWORD PTR _iB$57251[ebp]
  000eb	3b 45 10	 cmp	 eax, DWORD PTR _dwB$[ebp]
  000ee	7d 36		 jge	 SHORT $LN1@ReadBoneMa

; 1128 : 		{
; 1129 : 			memcpy ( ppMatrix [ iA ] [ iB ], *ppBlock, dwLength );

  000f0	8b 45 f0	 mov	 eax, DWORD PTR _dwLength$[ebp]
  000f3	50		 push	 eax
  000f4	8b 4d 14	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000f7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f9	52		 push	 edx
  000fa	8b 4d e4	 mov	 ecx, DWORD PTR _iB$57251[ebp]
  000fd	c1 e1 06	 shl	 ecx, 6
  00100	8b 45 e8	 mov	 eax, DWORD PTR _iA$57246[ebp]
  00103	8b 55 08	 mov	 edx, DWORD PTR _ppMatrix$[ebp]
  00106	03 0c 82	 add	 ecx, DWORD PTR [edx+eax*4]
  00109	e8 00 00 00 00	 call	 ??BD3DXMATRIX@@QAEPAMXZ	; D3DXMATRIX::operator float *
  0010e	50		 push	 eax
  0010f	e8 00 00 00 00	 call	 _memcpy
  00114	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1130 : 			*ppBlock += dwLength;		

  00117	8b 45 14	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0011a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011c	03 4d f0	 add	 ecx, DWORD PTR _dwLength$[ebp]
  0011f	8b 55 14	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00122	89 0a		 mov	 DWORD PTR [edx], ecx

; 1131 : 		}

  00124	eb b9		 jmp	 SHORT $LN2@ReadBoneMa
$LN1@ReadBoneMa:

; 1132 : 	}

  00126	eb 9d		 jmp	 SHORT $LN5@ReadBoneMa
$LN4@ReadBoneMa:

; 1133 : 
; 1134 : 	return true;

  00128	b0 01		 mov	 al, 1

; 1135 : }

  0012a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00134	59		 pop	 ecx
  00135	5f		 pop	 edi
  00136	5e		 pop	 esi
  00137	5b		 pop	 ebx
  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z$0:
  00000	8b 45 a0	 mov	 eax, DWORD PTR $T58024[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z ENDP	; ReadBoneMatrices
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft directx sdk (august 2007)\include\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft directx sdk (august 2007)\include\d3dx9math.inl
_TEXT	ENDS
;	COMDAT ??BD3DXMATRIX@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BD3DXMATRIX@@QAEPAMXZ PROC				; D3DXMATRIX::operator float *, COMDAT
; _this$ = ecx

; 802  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 803  :     return (FLOAT *) &_11;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 804  : }

  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??BD3DXMATRIX@@QAEPAMXZ ENDP				; D3DXMATRIX::operator float *
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
$LN2@vector:
  00009	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000c	83 e8 01	 sub	 eax, 1
  0000f	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00012	78 11		 js	 SHORT $LN3@vector
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  0001d	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00020	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00023	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?ScanAnimation@@YA_NPAUsAnimation@@PAPADPAK@Z	; ScanAnimation
; Function compile flags: /Odtp /ZI
; File c:\program files\the game creators\dark gdk\include\dbo format\dboblock.cpp
;	COMDAT ?ScanAnimation@@YA_NPAUsAnimation@@PAPADPAK@Z
_TEXT	SEGMENT
_dwMemorySize$57277 = -8				; size = 4
_pCodeSizePtr$57273 = -4				; size = 4
_pAnim$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
_pdwSize$ = 16						; size = 4
?ScanAnimation@@YA_NPAUsAnimation@@PAPADPAK@Z PROC	; ScanAnimation, COMDAT

; 1138 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1139 : 	// No animation
; 1140 : 	if ( pAnim )

  00009	83 7d 08 00	 cmp	 DWORD PTR _pAnim$[ebp], 0
  0000d	0f 84 74 06 00
	00		 je	 $LN24@ScanAnimat

; 1141 : 	{
; 1142 : 		// Write name
; 1143 : 		LPSTR pCodeSizePtr = NULL;

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], 0

; 1144 : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  0001a	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0001e	74 0b		 je	 SHORT $LN23@ScanAnimat
  00020	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	83 c1 04	 add	 ecx, 4
  00028	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], ecx
$LN23@ScanAnimat:

; 1145 : 		WriteCODE ( DBOBLOCK_ANIM_NAME, 0, ppBlock, pdwSize );

  0002b	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00032	51		 push	 ecx
  00033	6a 00		 push	 0
  00035	68 d3 00 00 00	 push	 211			; 000000d3H
  0003a	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0003f	83 c4 10	 add	 esp, 16			; 00000010H

; 1146 : 		WriteString ( pAnim->szName, ppBlock, pdwSize );

  00042	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00045	50		 push	 eax
  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00049	51		 push	 ecx
  0004a	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 ?WriteString@@YA_NPADPAPADPAK@Z ; WriteString
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1147 : 		WriteCR ( ppBlock, pdwSize );

  00056	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00063	83 c4 08	 add	 esp, 8

; 1148 : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00066	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57273[ebp], 0
  0006a	74 10		 je	 SHORT $LN22@ScanAnimat
  0006c	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0006f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00071	83 e9 04	 sub	 ecx, 4
  00074	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57273[ebp]
  00077	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57273[ebp]
  0007a	89 0a		 mov	 DWORD PTR [edx], ecx
$LN22@ScanAnimat:

; 1149 : 
; 1150 : 		// Write num pos keys
; 1151 : 		WriteCODE	( DBOBLOCK_ANIM_NUMPOSKEYS, 4, ppBlock, pdwSize );

  0007c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00083	51		 push	 ecx
  00084	6a 04		 push	 4
  00086	68 d4 00 00 00	 push	 212			; 000000d4H
  0008b	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00090	83 c4 10	 add	 esp, 16			; 00000010H

; 1152 : 		WriteDWORD ( pAnim->dwNumPositionKeys, ppBlock, pdwSize );

  00093	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00096	50		 push	 eax
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  0009e	8b 82 0c 01 00
	00		 mov	 eax, DWORD PTR [edx+268]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1153 : 		WriteCR ( ppBlock, pdwSize );

  000ad	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000b0	50		 push	 eax
  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  000ba	83 c4 08	 add	 esp, 8

; 1154 : 
; 1155 : 		// Write pos data
; 1156 : 		DWORD dwMemorySize = sizeof(sPositionKey) * pAnim->dwNumPositionKeys;

  000bd	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  000c0	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  000c6	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  000c9	89 4d f8	 mov	 DWORD PTR _dwMemorySize$57277[ebp], ecx

; 1157 : 		if ( dwMemorySize > 0 )

  000cc	83 7d f8 00	 cmp	 DWORD PTR _dwMemorySize$57277[ebp], 0
  000d0	76 37		 jbe	 SHORT $LN21@ScanAnimat

; 1158 : 		{
; 1159 : 			WriteCODE	( DBOBLOCK_ANIM_POSDATA, dwMemorySize, ppBlock, pdwSize );

  000d2	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000d5	50		 push	 eax
  000d6	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000d9	51		 push	 ecx
  000da	8b 55 f8	 mov	 edx, DWORD PTR _dwMemorySize$57277[ebp]
  000dd	52		 push	 edx
  000de	68 d5 00 00 00	 push	 213			; 000000d5H
  000e3	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  000e8	83 c4 10	 add	 esp, 16			; 00000010H

; 1160 : 			WriteMEMORY ( (BYTE*)pAnim->pPositionKeys, dwMemorySize, ppBlock, pdwSize );

  000eb	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000ee	50		 push	 eax
  000ef	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000f2	51		 push	 ecx
  000f3	8b 55 f8	 mov	 edx, DWORD PTR _dwMemorySize$57277[ebp]
  000f6	52		 push	 edx
  000f7	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  000fa	8b 88 1c 01 00
	00		 mov	 ecx, DWORD PTR [eax+284]
  00100	51		 push	 ecx
  00101	e8 00 00 00 00	 call	 ?WriteMEMORY@@YA_NPAEKPAPADPAK@Z ; WriteMEMORY
  00106	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@ScanAnimat:

; 1161 : 		}
; 1162 : 		WriteCR ( ppBlock, pdwSize );

  00109	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0010c	50		 push	 eax
  0010d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00110	51		 push	 ecx
  00111	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00116	83 c4 08	 add	 esp, 8

; 1163 : 
; 1164 : 		// Write num rot keys
; 1165 : 		WriteCODE	( DBOBLOCK_ANIM_NUMROTKEYS, 4, ppBlock, pdwSize );

  00119	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00120	51		 push	 ecx
  00121	6a 04		 push	 4
  00123	68 d6 00 00 00	 push	 214			; 000000d6H
  00128	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0012d	83 c4 10	 add	 esp, 16			; 00000010H

; 1166 : 		WriteDWORD ( pAnim->dwNumRotateKeys, ppBlock, pdwSize );

  00130	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00133	50		 push	 eax
  00134	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00137	51		 push	 ecx
  00138	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  0013b	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00147	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1167 : 		WriteCR ( ppBlock, pdwSize );

  0014a	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0014d	50		 push	 eax
  0014e	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00151	51		 push	 ecx
  00152	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00157	83 c4 08	 add	 esp, 8

; 1168 : 
; 1169 : 		// Write rot data
; 1170 : 		dwMemorySize = sizeof(sRotateKey) * pAnim->dwNumRotateKeys;

  0015a	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  0015d	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  00163	6b c9 14	 imul	 ecx, 20			; 00000014H
  00166	89 4d f8	 mov	 DWORD PTR _dwMemorySize$57277[ebp], ecx

; 1171 : 		if ( dwMemorySize > 0 )

  00169	83 7d f8 00	 cmp	 DWORD PTR _dwMemorySize$57277[ebp], 0
  0016d	76 37		 jbe	 SHORT $LN20@ScanAnimat

; 1172 : 		{
; 1173 : 			WriteCODE	( DBOBLOCK_ANIM_ROTDATA, dwMemorySize, ppBlock, pdwSize );

  0016f	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00172	50		 push	 eax
  00173	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00176	51		 push	 ecx
  00177	8b 55 f8	 mov	 edx, DWORD PTR _dwMemorySize$57277[ebp]
  0017a	52		 push	 edx
  0017b	68 d7 00 00 00	 push	 215			; 000000d7H
  00180	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00185	83 c4 10	 add	 esp, 16			; 00000010H

; 1174 : 			WriteMEMORY ( (BYTE*)pAnim->pRotateKeys, dwMemorySize, ppBlock, pdwSize );

  00188	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0018b	50		 push	 eax
  0018c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0018f	51		 push	 ecx
  00190	8b 55 f8	 mov	 edx, DWORD PTR _dwMemorySize$57277[ebp]
  00193	52		 push	 edx
  00194	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  00197	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  0019d	51		 push	 ecx
  0019e	e8 00 00 00 00	 call	 ?WriteMEMORY@@YA_NPAEKPAPADPAK@Z ; WriteMEMORY
  001a3	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@ScanAnimat:

; 1175 : 		}
; 1176 : 		WriteCR ( ppBlock, pdwSize );

  001a6	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001a9	50		 push	 eax
  001aa	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  001b3	83 c4 08	 add	 esp, 8

; 1177 : 
; 1178 : 		// Write num scale keys
; 1179 : 		WriteCODE	( DBOBLOCK_ANIM_NUMSCALEKEYS, 4, ppBlock, pdwSize );

  001b6	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001b9	50		 push	 eax
  001ba	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001bd	51		 push	 ecx
  001be	6a 04		 push	 4
  001c0	68 d8 00 00 00	 push	 216			; 000000d8H
  001c5	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  001ca	83 c4 10	 add	 esp, 16			; 00000010H

; 1180 : 		WriteDWORD ( pAnim->dwNumScaleKeys, ppBlock, pdwSize );

  001cd	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001d0	50		 push	 eax
  001d1	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001d4	51		 push	 ecx
  001d5	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  001d8	8b 82 14 01 00
	00		 mov	 eax, DWORD PTR [edx+276]
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  001e4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1181 : 		WriteCR ( ppBlock, pdwSize );

  001e7	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001ea	50		 push	 eax
  001eb	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001ee	51		 push	 ecx
  001ef	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  001f4	83 c4 08	 add	 esp, 8

; 1182 : 
; 1183 : 		// Write scale data
; 1184 : 		dwMemorySize = sizeof(sScaleKey) * pAnim->dwNumScaleKeys;

  001f7	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  001fa	8b 88 14 01 00
	00		 mov	 ecx, DWORD PTR [eax+276]
  00200	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00203	89 4d f8	 mov	 DWORD PTR _dwMemorySize$57277[ebp], ecx

; 1185 : 		if ( dwMemorySize > 0 )

  00206	83 7d f8 00	 cmp	 DWORD PTR _dwMemorySize$57277[ebp], 0
  0020a	76 37		 jbe	 SHORT $LN19@ScanAnimat

; 1186 : 		{
; 1187 : 			WriteCODE	( DBOBLOCK_ANIM_SCALEDATA, dwMemorySize, ppBlock, pdwSize );

  0020c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0020f	50		 push	 eax
  00210	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00213	51		 push	 ecx
  00214	8b 55 f8	 mov	 edx, DWORD PTR _dwMemorySize$57277[ebp]
  00217	52		 push	 edx
  00218	68 d9 00 00 00	 push	 217			; 000000d9H
  0021d	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00222	83 c4 10	 add	 esp, 16			; 00000010H

; 1188 : 			WriteMEMORY ( (BYTE*)pAnim->pScaleKeys, dwMemorySize, ppBlock, pdwSize );

  00225	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00228	50		 push	 eax
  00229	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0022c	51		 push	 ecx
  0022d	8b 55 f8	 mov	 edx, DWORD PTR _dwMemorySize$57277[ebp]
  00230	52		 push	 edx
  00231	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  00234	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  0023a	51		 push	 ecx
  0023b	e8 00 00 00 00	 call	 ?WriteMEMORY@@YA_NPAEKPAPADPAK@Z ; WriteMEMORY
  00240	83 c4 10	 add	 esp, 16			; 00000010H
$LN19@ScanAnimat:

; 1189 : 		}
; 1190 : 		WriteCR ( ppBlock, pdwSize );

  00243	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00246	50		 push	 eax
  00247	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0024a	51		 push	 ecx
  0024b	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00250	83 c4 08	 add	 esp, 8

; 1191 : 
; 1192 : 		// Write num matrix keys
; 1193 : 		WriteCODE	( DBOBLOCK_ANIM_NUMMATRIXKEYS, 4, ppBlock, pdwSize );

  00253	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00256	50		 push	 eax
  00257	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0025a	51		 push	 ecx
  0025b	6a 04		 push	 4
  0025d	68 da 00 00 00	 push	 218			; 000000daH
  00262	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00267	83 c4 10	 add	 esp, 16			; 00000010H

; 1194 : 		WriteDWORD ( pAnim->dwNumMatrixKeys, ppBlock, pdwSize );

  0026a	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0026d	50		 push	 eax
  0026e	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00271	51		 push	 ecx
  00272	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  00275	8b 82 18 01 00
	00		 mov	 eax, DWORD PTR [edx+280]
  0027b	50		 push	 eax
  0027c	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00281	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1195 : 		WriteCR ( ppBlock, pdwSize );

  00284	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00287	50		 push	 eax
  00288	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0028b	51		 push	 ecx
  0028c	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00291	83 c4 08	 add	 esp, 8

; 1196 : 
; 1197 : 		// Write matrix data
; 1198 : 		dwMemorySize = sizeof(sMatrixKey) * pAnim->dwNumMatrixKeys;

  00294	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  00297	8b 88 18 01 00
	00		 mov	 ecx, DWORD PTR [eax+280]
  0029d	69 c9 84 00 00
	00		 imul	 ecx, 132		; 00000084H
  002a3	89 4d f8	 mov	 DWORD PTR _dwMemorySize$57277[ebp], ecx

; 1199 : 		if ( dwMemorySize > 0 )

  002a6	83 7d f8 00	 cmp	 DWORD PTR _dwMemorySize$57277[ebp], 0
  002aa	76 37		 jbe	 SHORT $LN18@ScanAnimat

; 1200 : 		{
; 1201 : 			WriteCODE	( DBOBLOCK_ANIM_MATRIXDATA, dwMemorySize, ppBlock, pdwSize );

  002ac	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002af	50		 push	 eax
  002b0	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002b3	51		 push	 ecx
  002b4	8b 55 f8	 mov	 edx, DWORD PTR _dwMemorySize$57277[ebp]
  002b7	52		 push	 edx
  002b8	68 db 00 00 00	 push	 219			; 000000dbH
  002bd	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  002c2	83 c4 10	 add	 esp, 16			; 00000010H

; 1202 : 			WriteMEMORY ( (BYTE*)pAnim->pMatrixKeys, dwMemorySize, ppBlock, pdwSize );

  002c5	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002c8	50		 push	 eax
  002c9	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002cc	51		 push	 ecx
  002cd	8b 55 f8	 mov	 edx, DWORD PTR _dwMemorySize$57277[ebp]
  002d0	52		 push	 edx
  002d1	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  002d4	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  002da	51		 push	 ecx
  002db	e8 00 00 00 00	 call	 ?WriteMEMORY@@YA_NPAEKPAPADPAK@Z ; WriteMEMORY
  002e0	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@ScanAnimat:

; 1203 : 		}
; 1204 : 		WriteCR ( ppBlock, pdwSize );

  002e3	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  002e6	50		 push	 eax
  002e7	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  002ea	51		 push	 ecx
  002eb	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  002f0	83 c4 08	 add	 esp, 8

; 1205 : 
; 1206 : 		if ( !pAnim->bBoneType )

  002f3	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  002f6	83 b8 3c 01 00
	00 00		 cmp	 DWORD PTR [eax+316], 0
  002fd	0f 85 e9 02 00
	00		 jne	 $LN17@ScanAnimat

; 1207 : 		{
; 1208 : 			pCodeSizePtr = NULL;

  00303	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], 0

; 1209 : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  0030a	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0030e	74 0b		 je	 SHORT $LN16@ScanAnimat
  00310	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00313	8b 08		 mov	 ecx, DWORD PTR [eax]
  00315	83 c1 04	 add	 ecx, 4
  00318	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], ecx
$LN16@ScanAnimat:

; 1210 : 			WriteCODE ( DBOBLOCK_FRAME_BONETYPE, 0, ppBlock, pdwSize );

  0031b	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0031e	50		 push	 eax
  0031f	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00322	51		 push	 ecx
  00323	6a 00		 push	 0
  00325	68 90 01 00 00	 push	 400			; 00000190H
  0032a	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0032f	83 c4 10	 add	 esp, 16			; 00000010H

; 1211 : 			WriteDWORD ( pAnim->bBoneType, ppBlock, pdwSize );

  00332	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00335	50		 push	 eax
  00336	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00339	51		 push	 ecx
  0033a	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  0033d	8b 82 3c 01 00
	00		 mov	 eax, DWORD PTR [edx+316]
  00343	50		 push	 eax
  00344	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00349	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1212 : 			WriteCR ( ppBlock, pdwSize );

  0034c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0034f	50		 push	 eax
  00350	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00353	51		 push	 ecx
  00354	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00359	83 c4 08	 add	 esp, 8

; 1213 : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  0035c	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57273[ebp], 0
  00360	74 10		 je	 SHORT $LN15@ScanAnimat
  00362	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00365	8b 08		 mov	 ecx, DWORD PTR [eax]
  00367	83 e9 04	 sub	 ecx, 4
  0036a	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57273[ebp]
  0036d	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57273[ebp]
  00370	89 0a		 mov	 DWORD PTR [edx], ecx
$LN15@ScanAnimat:

; 1214 : 
; 1215 : 			pCodeSizePtr = NULL;

  00372	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], 0

; 1216 : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  00379	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0037d	74 0b		 je	 SHORT $LN14@ScanAnimat
  0037f	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00382	8b 08		 mov	 ecx, DWORD PTR [eax]
  00384	83 c1 04	 add	 ecx, 4
  00387	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], ecx
$LN14@ScanAnimat:

; 1217 : 			WriteCODE ( DBOBLOCK_FRAME_BONEOFFSETLISTSIZE, 4, ppBlock, pdwSize );

  0038a	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0038d	50		 push	 eax
  0038e	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00391	51		 push	 ecx
  00392	6a 04		 push	 4
  00394	68 92 01 00 00	 push	 402			; 00000192H
  00399	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0039e	83 c4 10	 add	 esp, 16			; 00000010H

; 1218 : 			WriteDWORD ( pAnim->iBoneOffsetListCount, ppBlock, pdwSize );

  003a1	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  003a4	50		 push	 eax
  003a5	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  003a8	51		 push	 ecx
  003a9	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  003ac	8b 82 44 01 00
	00		 mov	 eax, DWORD PTR [edx+324]
  003b2	50		 push	 eax
  003b3	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  003b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1219 : 			WriteCR ( ppBlock, pdwSize );

  003bb	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  003be	50		 push	 eax
  003bf	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  003c2	51		 push	 ecx
  003c3	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  003c8	83 c4 08	 add	 esp, 8

; 1220 : 			WriteCR ( ppBlock, pdwSize );

  003cb	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  003ce	50		 push	 eax
  003cf	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  003d2	51		 push	 ecx
  003d3	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  003d8	83 c4 08	 add	 esp, 8

; 1221 : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  003db	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57273[ebp], 0
  003df	74 10		 je	 SHORT $LN13@ScanAnimat
  003e1	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  003e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e6	83 e9 04	 sub	 ecx, 4
  003e9	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57273[ebp]
  003ec	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57273[ebp]
  003ef	89 0a		 mov	 DWORD PTR [edx], ecx
$LN13@ScanAnimat:

; 1222 : 			
; 1223 : 			pCodeSizePtr = NULL;

  003f1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], 0

; 1224 : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  003f8	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  003fc	74 0b		 je	 SHORT $LN12@ScanAnimat
  003fe	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00401	8b 08		 mov	 ecx, DWORD PTR [eax]
  00403	83 c1 04	 add	 ecx, 4
  00406	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], ecx
$LN12@ScanAnimat:

; 1225 : 			WriteCODE	( DBOBLOCK_FRAME_BONEOFFSETLIST, pAnim->iBoneOffsetListCount * sizeof ( int ), ppBlock, pdwSize );

  00409	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0040c	50		 push	 eax
  0040d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00410	51		 push	 ecx
  00411	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  00414	8b 82 44 01 00
	00		 mov	 eax, DWORD PTR [edx+324]
  0041a	c1 e0 02	 shl	 eax, 2
  0041d	50		 push	 eax
  0041e	68 91 01 00 00	 push	 401			; 00000191H
  00423	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00428	83 c4 10	 add	 esp, 16			; 00000010H

; 1226 : 			WriteOffsetList ( pAnim->piBoneOffsetList, pAnim->iBoneOffsetListCount, ppBlock, pdwSize );

  0042b	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0042e	50		 push	 eax
  0042f	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00432	51		 push	 ecx
  00433	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  00436	8b 82 44 01 00
	00		 mov	 eax, DWORD PTR [edx+324]
  0043c	50		 push	 eax
  0043d	8b 4d 08	 mov	 ecx, DWORD PTR _pAnim$[ebp]
  00440	8b 91 40 01 00
	00		 mov	 edx, DWORD PTR [ecx+320]
  00446	52		 push	 edx
  00447	e8 00 00 00 00	 call	 ?WriteOffsetList@@YA_NPAHKPAPADPAK@Z ; WriteOffsetList
  0044c	83 c4 10	 add	 esp, 16			; 00000010H

; 1227 : 			WriteCR ( ppBlock, pdwSize );

  0044f	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00452	50		 push	 eax
  00453	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00456	51		 push	 ecx
  00457	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0045c	83 c4 08	 add	 esp, 8

; 1228 : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  0045f	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57273[ebp], 0
  00463	74 10		 je	 SHORT $LN11@ScanAnimat
  00465	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00468	8b 08		 mov	 ecx, DWORD PTR [eax]
  0046a	83 e9 04	 sub	 ecx, 4
  0046d	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57273[ebp]
  00470	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57273[ebp]
  00473	89 0a		 mov	 DWORD PTR [edx], ecx
$LN11@ScanAnimat:

; 1229 : 
; 1230 : 			pCodeSizePtr = NULL;

  00475	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], 0

; 1231 : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  0047c	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00480	74 0b		 je	 SHORT $LN10@ScanAnimat
  00482	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00485	8b 08		 mov	 ecx, DWORD PTR [eax]
  00487	83 c1 04	 add	 ecx, 4
  0048a	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], ecx
$LN10@ScanAnimat:

; 1232 : 			WriteCODE ( DBOBLOCK_FRAME_BONEMATRIXSIZEA, 4, ppBlock, pdwSize );

  0048d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00490	50		 push	 eax
  00491	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00494	51		 push	 ecx
  00495	6a 04		 push	 4
  00497	68 93 01 00 00	 push	 403			; 00000193H
  0049c	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  004a1	83 c4 10	 add	 esp, 16			; 00000010H

; 1233 : 			WriteDWORD ( pAnim->iBoneFrameA, ppBlock, pdwSize );

  004a4	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  004a7	50		 push	 eax
  004a8	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  004ab	51		 push	 ecx
  004ac	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  004af	8b 82 4c 01 00
	00		 mov	 eax, DWORD PTR [edx+332]
  004b5	50		 push	 eax
  004b6	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  004bb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1234 : 			WriteCR ( ppBlock, pdwSize );

  004be	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  004c1	50		 push	 eax
  004c2	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  004c5	51		 push	 ecx
  004c6	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  004cb	83 c4 08	 add	 esp, 8

; 1235 : 			WriteCR ( ppBlock, pdwSize );

  004ce	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  004d1	50		 push	 eax
  004d2	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  004d5	51		 push	 ecx
  004d6	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  004db	83 c4 08	 add	 esp, 8

; 1236 : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  004de	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57273[ebp], 0
  004e2	74 10		 je	 SHORT $LN9@ScanAnimat
  004e4	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  004e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  004e9	83 e9 04	 sub	 ecx, 4
  004ec	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57273[ebp]
  004ef	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57273[ebp]
  004f2	89 0a		 mov	 DWORD PTR [edx], ecx
$LN9@ScanAnimat:

; 1237 : 
; 1238 : 			pCodeSizePtr = NULL;

  004f4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], 0

; 1239 : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  004fb	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  004ff	74 0b		 je	 SHORT $LN8@ScanAnimat
  00501	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00504	8b 08		 mov	 ecx, DWORD PTR [eax]
  00506	83 c1 04	 add	 ecx, 4
  00509	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], ecx
$LN8@ScanAnimat:

; 1240 : 			WriteCODE ( DBOBLOCK_FRAME_BONEMATRIXSIZEB, 4, ppBlock, pdwSize );

  0050c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0050f	50		 push	 eax
  00510	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00513	51		 push	 ecx
  00514	6a 04		 push	 4
  00516	68 94 01 00 00	 push	 404			; 00000194H
  0051b	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00520	83 c4 10	 add	 esp, 16			; 00000010H

; 1241 : 			WriteDWORD ( pAnim->iBoneFrameB, ppBlock, pdwSize );

  00523	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00526	50		 push	 eax
  00527	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0052a	51		 push	 ecx
  0052b	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  0052e	8b 82 50 01 00
	00		 mov	 eax, DWORD PTR [edx+336]
  00534	50		 push	 eax
  00535	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  0053a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1242 : 			WriteCR ( ppBlock, pdwSize );

  0053d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00540	50		 push	 eax
  00541	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00544	51		 push	 ecx
  00545	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0054a	83 c4 08	 add	 esp, 8

; 1243 : 			WriteCR ( ppBlock, pdwSize );

  0054d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00550	50		 push	 eax
  00551	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00554	51		 push	 ecx
  00555	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0055a	83 c4 08	 add	 esp, 8

; 1244 : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  0055d	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57273[ebp], 0
  00561	74 10		 je	 SHORT $LN7@ScanAnimat
  00563	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00566	8b 08		 mov	 ecx, DWORD PTR [eax]
  00568	83 e9 04	 sub	 ecx, 4
  0056b	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57273[ebp]
  0056e	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57273[ebp]
  00571	89 0a		 mov	 DWORD PTR [edx], ecx
$LN7@ScanAnimat:

; 1245 : 
; 1246 : 			pCodeSizePtr = NULL;

  00573	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], 0

; 1247 : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  0057a	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0057e	74 0b		 je	 SHORT $LN6@ScanAnimat
  00580	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00583	8b 08		 mov	 ecx, DWORD PTR [eax]
  00585	83 c1 04	 add	 ecx, 4
  00588	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], ecx
$LN6@ScanAnimat:

; 1248 : 			WriteCODE	( DBOBLOCK_FRAME_BONEMATRIXLIST, 0, ppBlock, pdwSize );

  0058b	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0058e	50		 push	 eax
  0058f	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00592	51		 push	 ecx
  00593	6a 00		 push	 0
  00595	68 95 01 00 00	 push	 405			; 00000195H
  0059a	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0059f	83 c4 10	 add	 esp, 16			; 00000010H

; 1249 : 			WriteCR ( ppBlock, pdwSize );

  005a2	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  005a5	50		 push	 eax
  005a6	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  005a9	51		 push	 ecx
  005aa	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  005af	83 c4 08	 add	 esp, 8

; 1250 : 			WriteBoneMatrices ( pAnim, ppBlock, pdwSize );

  005b2	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  005b5	50		 push	 eax
  005b6	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  005b9	51		 push	 ecx
  005ba	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  005bd	52		 push	 edx
  005be	e8 00 00 00 00	 call	 ?WriteBoneMatrices@@YA_NPAUsAnimation@@PAPADPAK@Z ; WriteBoneMatrices
  005c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1251 : 			WriteCR ( ppBlock, pdwSize );

  005c6	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  005c9	50		 push	 eax
  005ca	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  005cd	51		 push	 ecx
  005ce	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  005d3	83 c4 08	 add	 esp, 8

; 1252 : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  005d6	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57273[ebp], 0
  005da	74 10		 je	 SHORT $LN17@ScanAnimat
  005dc	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  005df	8b 08		 mov	 ecx, DWORD PTR [eax]
  005e1	83 e9 04	 sub	 ecx, 4
  005e4	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57273[ebp]
  005e7	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57273[ebp]
  005ea	89 0a		 mov	 DWORD PTR [edx], ecx
$LN17@ScanAnimat:

; 1253 : 		}
; 1254 : 		
; 1255 : 		// Write NEXT animdata (if present)
; 1256 : 		if ( pAnim->pNext )

  005ec	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  005ef	83 b8 58 01 00
	00 00		 cmp	 DWORD PTR [eax+344], 0
  005f6	0f 84 8b 00 00
	00		 je	 $LN24@ScanAnimat

; 1257 : 		{
; 1258 : 			pCodeSizePtr = NULL;

  005fc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], 0

; 1259 : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  00603	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00607	74 0b		 je	 SHORT $LN3@ScanAnimat
  00609	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0060c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0060e	83 c1 04	 add	 ecx, 4
  00611	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57273[ebp], ecx
$LN3@ScanAnimat:

; 1260 : 			WriteCODE	( DBOBLOCK_ANIM_NEXT, 0, ppBlock, pdwSize );

  00614	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00617	50		 push	 eax
  00618	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0061b	51		 push	 ecx
  0061c	6a 00		 push	 0
  0061e	68 dc 00 00 00	 push	 220			; 000000dcH
  00623	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00628	83 c4 10	 add	 esp, 16			; 00000010H

; 1261 : 			WriteCR ( ppBlock, pdwSize );

  0062b	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0062e	50		 push	 eax
  0062f	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00632	51		 push	 ecx
  00633	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00638	83 c4 08	 add	 esp, 8

; 1262 : 			if ( pAnim->pNext ) ScanAnimation ( pAnim->pNext, ppBlock, pdwSize );

  0063b	8b 45 08	 mov	 eax, DWORD PTR _pAnim$[ebp]
  0063e	83 b8 58 01 00
	00 00		 cmp	 DWORD PTR [eax+344], 0
  00645	74 1a		 je	 SHORT $LN2@ScanAnimat
  00647	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0064a	50		 push	 eax
  0064b	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0064e	51		 push	 ecx
  0064f	8b 55 08	 mov	 edx, DWORD PTR _pAnim$[ebp]
  00652	8b 82 58 01 00
	00		 mov	 eax, DWORD PTR [edx+344]
  00658	50		 push	 eax
  00659	e8 00 00 00 00	 call	 ?ScanAnimation@@YA_NPAUsAnimation@@PAPADPAK@Z ; ScanAnimation
  0065e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ScanAnimat:

; 1263 : 			WriteCR ( ppBlock, pdwSize );

  00661	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00664	50		 push	 eax
  00665	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00668	51		 push	 ecx
  00669	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0066e	83 c4 08	 add	 esp, 8

; 1264 : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00671	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57273[ebp], 0
  00675	74 10		 je	 SHORT $LN24@ScanAnimat
  00677	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0067a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0067c	83 e9 04	 sub	 ecx, 4
  0067f	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57273[ebp]
  00682	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57273[ebp]
  00685	89 0a		 mov	 DWORD PTR [edx], ecx
$LN24@ScanAnimat:

; 1265 : 		}
; 1266 : 	}
; 1267 : 
; 1268 : 	// No more anim codes
; 1269 : 	WriteCODE ( 0, 0, ppBlock, pdwSize );

  00687	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0068a	50		 push	 eax
  0068b	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0068e	51		 push	 ecx
  0068f	6a 00		 push	 0
  00691	6a 00		 push	 0
  00693	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00698	83 c4 10	 add	 esp, 16			; 00000010H

; 1270 : 
; 1271 : 	// okay
; 1272 : 	return true;

  0069b	b0 01		 mov	 al, 1

; 1273 : }

  0069d	5f		 pop	 edi
  0069e	5e		 pop	 esi
  0069f	5b		 pop	 ebx
  006a0	8b e5		 mov	 esp, ebp
  006a2	5d		 pop	 ebp
  006a3	c3		 ret	 0
?ScanAnimation@@YA_NPAUsAnimation@@PAPADPAK@Z ENDP	; ScanAnimation
_TEXT	ENDS
PUBLIC	?ScanAnimationSet@@YA_NPAUsAnimationSet@@PAPADPAK@Z ; ScanAnimationSet
; Function compile flags: /Odtp /ZI
;	COMDAT ?ScanAnimationSet@@YA_NPAUsAnimationSet@@PAPADPAK@Z
_TEXT	SEGMENT
_pCodeSizePtr$57321 = -4				; size = 4
_pAnimSet$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
_pdwSize$ = 16						; size = 4
?ScanAnimationSet@@YA_NPAUsAnimationSet@@PAPADPAK@Z PROC ; ScanAnimationSet, COMDAT

; 1276 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1277 : 	// No animation set
; 1278 : 	if ( pAnimSet )

  00009	83 7d 08 00	 cmp	 DWORD PTR _pAnimSet$[ebp], 0
  0000d	0f 84 35 01 00
	00		 je	 $LN6@ScanAnimat@2

; 1279 : 	{
; 1280 : 		// Write name
; 1281 : 		LPSTR pCodeSizePtr = NULL;

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57321[ebp], 0

; 1282 : 		if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  0001a	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  0001e	74 0b		 je	 SHORT $LN5@ScanAnimat@2
  00020	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	83 c1 04	 add	 ecx, 4
  00028	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57321[ebp], ecx
$LN5@ScanAnimat@2:

; 1283 : 		WriteCODE ( DBOBLOCK_ANIMSET_NAME, 0, ppBlock, pdwSize );

  0002b	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00032	51		 push	 ecx
  00033	6a 00		 push	 0
  00035	68 c9 00 00 00	 push	 201			; 000000c9H
  0003a	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  0003f	83 c4 10	 add	 esp, 16			; 00000010H

; 1284 : 		WriteString ( pAnimSet->szName, ppBlock, pdwSize );

  00042	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00045	50		 push	 eax
  00046	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00049	51		 push	 ecx
  0004a	8b 55 08	 mov	 edx, DWORD PTR _pAnimSet$[ebp]
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 ?WriteString@@YA_NPADPAPADPAK@Z ; WriteString
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1285 : 		WriteCR ( ppBlock, pdwSize );

  00056	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00063	83 c4 08	 add	 esp, 8

; 1286 : 		if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00066	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57321[ebp], 0
  0006a	74 10		 je	 SHORT $LN4@ScanAnimat@2
  0006c	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0006f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00071	83 e9 04	 sub	 ecx, 4
  00074	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57321[ebp]
  00077	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57321[ebp]
  0007a	89 0a		 mov	 DWORD PTR [edx], ecx
$LN4@ScanAnimat@2:

; 1287 : 
; 1288 : 		// Write length
; 1289 : 		WriteCODE	( DBOBLOCK_ANIMSET_LENGTH, 4, ppBlock, pdwSize );

  0007c	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00083	51		 push	 ecx
  00084	6a 04		 push	 4
  00086	68 ca 00 00 00	 push	 202			; 000000caH
  0008b	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00090	83 c4 10	 add	 esp, 16			; 00000010H

; 1290 : 		WriteDWORD ( (DWORD)pAnimSet->ulLength, ppBlock, pdwSize );

  00093	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00096	50		 push	 eax
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0009a	51		 push	 ecx
  0009b	8b 55 08	 mov	 edx, DWORD PTR _pAnimSet$[ebp]
  0009e	8b 82 04 01 00
	00		 mov	 eax, DWORD PTR [edx+260]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1291 : 		WriteCR ( ppBlock, pdwSize );

  000ad	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000b0	50		 push	 eax
  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  000ba	83 c4 08	 add	 esp, 8

; 1292 : 
; 1293 : 		// Write animation data
; 1294 : 		if ( pAnimSet->pAnimation )

  000bd	8b 45 08	 mov	 eax, DWORD PTR _pAnimSet$[ebp]
  000c0	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR [eax+256], 0
  000c7	74 7f		 je	 SHORT $LN6@ScanAnimat@2

; 1295 : 		{
; 1296 : 			pCodeSizePtr = NULL;

  000c9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$57321[ebp], 0

; 1297 : 			if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  000d0	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  000d4	74 0b		 je	 SHORT $LN2@ScanAnimat@2
  000d6	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000db	83 c1 04	 add	 ecx, 4
  000de	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$57321[ebp], ecx
$LN2@ScanAnimat@2:

; 1298 : 			WriteCODE ( DBOBLOCK_ANIMSET_DATA, 0, ppBlock, pdwSize );

  000e1	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000e8	51		 push	 ecx
  000e9	6a 00		 push	 0
  000eb	68 cb 00 00 00	 push	 203			; 000000cbH
  000f0	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  000f5	83 c4 10	 add	 esp, 16			; 00000010H

; 1299 : 			WriteCR ( ppBlock, pdwSize );

  000f8	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000fb	50		 push	 eax
  000fc	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00105	83 c4 08	 add	 esp, 8

; 1300 : 			ScanAnimation ( pAnimSet->pAnimation, ppBlock, pdwSize );

  00108	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0010b	50		 push	 eax
  0010c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0010f	51		 push	 ecx
  00110	8b 55 08	 mov	 edx, DWORD PTR _pAnimSet$[ebp]
  00113	8b 82 00 01 00
	00		 mov	 eax, DWORD PTR [edx+256]
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 ?ScanAnimation@@YA_NPAUsAnimation@@PAPADPAK@Z ; ScanAnimation
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1301 : 			WriteCR ( ppBlock, pdwSize );

  00122	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00125	50		 push	 eax
  00126	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00129	51		 push	 ecx
  0012a	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0012f	83 c4 08	 add	 esp, 8

; 1302 : 			if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00132	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$57321[ebp], 0
  00136	74 10		 je	 SHORT $LN6@ScanAnimat@2
  00138	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0013b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013d	83 e9 04	 sub	 ecx, 4
  00140	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$57321[ebp]
  00143	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$57321[ebp]
  00146	89 0a		 mov	 DWORD PTR [edx], ecx
$LN6@ScanAnimat@2:

; 1303 : 		}
; 1304 : 	}
; 1305 : 
; 1306 : 	// No more animationset codes
; 1307 : 	WriteCODE ( 0, 0, ppBlock, pdwSize );

  00148	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0014b	50		 push	 eax
  0014c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0014f	51		 push	 ecx
  00150	6a 00		 push	 0
  00152	6a 00		 push	 0
  00154	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00159	83 c4 10	 add	 esp, 16			; 00000010H

; 1308 : 
; 1309 : 	// okay
; 1310 : 	return true;

  0015c	b0 01		 mov	 al, 1

; 1311 : }

  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi
  00160	5b		 pop	 ebx
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
?ScanAnimationSet@@YA_NPAUsAnimationSet@@PAPADPAK@Z ENDP ; ScanAnimationSet
_TEXT	ENDS
PUBLIC	??_C@_08HFDNDKLG@MAGICDBO?$AA@			; `string'
PUBLIC	?ScanObject@@YA_NPAUsObject@@PAPADPAK@Z		; ScanObject
;	COMDAT ??_C@_08HFDNDKLG@MAGICDBO?$AA@
CONST	SEGMENT
??_C@_08HFDNDKLG@MAGICDBO?$AA@ DB 'MAGICDBO', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?ScanObject@@YA_NPAUsObject@@PAPADPAK@Z
_TEXT	SEGMENT
_pCodeSizePtr$ = -4					; size = 4
_pObject$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
_pdwSize$ = 16						; size = 4
?ScanObject@@YA_NPAUsObject@@PAPADPAK@Z PROC		; ScanObject, COMDAT

; 1314 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1315 : 	// write header [magic, version, res, res]
; 1316 : 	WriteString	( "MAGICDBO", ppBlock, pdwSize );

  00009	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00010	51		 push	 ecx
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_08HFDNDKLG@MAGICDBO?$AA@
  00016	e8 00 00 00 00	 call	 ?WriteString@@YA_NPADPAPADPAK@Z ; WriteString
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1317 : 	WriteDWORD	(  DBO_VERSION_NUMBER, ppBlock, pdwSize );

  0001e	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00025	51		 push	 ecx
  00026	68 26 04 00 00	 push	 1062			; 00000426H
  0002b	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1318 : 	WriteDWORD	(  0, ppBlock, pdwSize );

  00033	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0003a	51		 push	 ecx
  0003b	6a 00		 push	 0
  0003d	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1319 : 	WriteDWORD	(  0, ppBlock, pdwSize );

  00045	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00048	50		 push	 eax
  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0004c	51		 push	 ecx
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1320 : 	WriteCR ( ppBlock, pdwSize );

  00057	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00064	83 c4 08	 add	 esp, 8

; 1321 : 
; 1322 : 	// scan frame data
; 1323 : 	LPSTR pCodeSizePtr = NULL;

  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$[ebp], 0

; 1324 : 	if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  0006e	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00072	74 0b		 je	 SHORT $LN8@ScanObject
  00074	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00077	8b 08		 mov	 ecx, DWORD PTR [eax]
  00079	83 c1 04	 add	 ecx, 4
  0007c	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$[ebp], ecx
$LN8@ScanObject:

; 1325 : 	WriteCODE ( DBOBLOCK_ROOT_FRAME, 0, ppBlock, pdwSize );

  0007f	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00082	50		 push	 eax
  00083	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00086	51		 push	 ecx
  00087	6a 00		 push	 0
  00089	6a 01		 push	 1
  0008b	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00090	83 c4 10	 add	 esp, 16			; 00000010H

; 1326 : 	WriteCR ( ppBlock, pdwSize );

  00093	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00096	50		 push	 eax
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  000a0	83 c4 08	 add	 esp, 8

; 1327 : 	if ( !ScanFrame ( pObject->pFrame, ppBlock, pdwSize ) ) return false;

  000a3	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000a6	50		 push	 eax
  000a7	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000aa	51		 push	 ecx
  000ab	8b 55 08	 mov	 edx, DWORD PTR _pObject$[ebp]
  000ae	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?ScanFrame@@YA_NPAUsFrame@@PAPADPAK@Z ; ScanFrame
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ba	0f b6 c8	 movzx	 ecx, al
  000bd	85 c9		 test	 ecx, ecx
  000bf	75 07		 jne	 SHORT $LN7@ScanObject
  000c1	32 c0		 xor	 al, al
  000c3	e9 76 01 00 00	 jmp	 $LN9@ScanObject
$LN7@ScanObject:

; 1328 : 	WriteCR ( ppBlock, pdwSize );

  000c8	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  000cb	50		 push	 eax
  000cc	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  000d5	83 c4 08	 add	 esp, 8

; 1329 : 	if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  000d8	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$[ebp], 0
  000dc	74 10		 je	 SHORT $LN6@ScanObject
  000de	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e3	83 e9 04	 sub	 ecx, 4
  000e6	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$[ebp]
  000e9	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$[ebp]
  000ec	89 0a		 mov	 DWORD PTR [edx], ecx
$LN6@ScanObject:

; 1330 : 
; 1331 : 	// scan animation data
; 1332 : 	pCodeSizePtr = NULL;

  000ee	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$[ebp], 0

; 1333 : 	if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  000f5	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  000f9	74 0b		 je	 SHORT $LN5@ScanObject
  000fb	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000fe	8b 08		 mov	 ecx, DWORD PTR [eax]
  00100	83 c1 04	 add	 ecx, 4
  00103	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$[ebp], ecx
$LN5@ScanObject:

; 1334 : 	WriteCODE ( DBOBLOCK_ROOT_ANIMATIONSET, 0, ppBlock, pdwSize );

  00106	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00109	50		 push	 eax
  0010a	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0010d	51		 push	 ecx
  0010e	6a 00		 push	 0
  00110	6a 02		 push	 2
  00112	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00117	83 c4 10	 add	 esp, 16			; 00000010H

; 1335 : 	WriteCR ( ppBlock, pdwSize );

  0011a	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0011d	50		 push	 eax
  0011e	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00121	51		 push	 ecx
  00122	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  00127	83 c4 08	 add	 esp, 8

; 1336 : 	if ( !ScanAnimationSet ( pObject->pAnimationSet, ppBlock, pdwSize ) ) return false;

  0012a	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0012d	50		 push	 eax
  0012e	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00131	51		 push	 ecx
  00132	8b 55 08	 mov	 edx, DWORD PTR _pObject$[ebp]
  00135	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 ?ScanAnimationSet@@YA_NPAUsAnimationSet@@PAPADPAK@Z ; ScanAnimationSet
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00141	0f b6 c8	 movzx	 ecx, al
  00144	85 c9		 test	 ecx, ecx
  00146	75 07		 jne	 SHORT $LN4@ScanObject
  00148	32 c0		 xor	 al, al
  0014a	e9 ef 00 00 00	 jmp	 $LN9@ScanObject
$LN4@ScanObject:

; 1337 : 	WriteCR ( ppBlock, pdwSize );

  0014f	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00152	50		 push	 eax
  00153	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00156	51		 push	 ecx
  00157	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0015c	83 c4 08	 add	 esp, 8

; 1338 : 	if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  0015f	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$[ebp], 0
  00163	74 10		 je	 SHORT $LN3@ScanObject
  00165	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00168	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016a	83 e9 04	 sub	 ecx, 4
  0016d	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$[ebp]
  00170	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$[ebp]
  00173	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@ScanObject:

; 1339 : 
; 1340 : 	// 280305 - used when objects want to store custom data for example when they save and want to save out this data
; 1341 : 	pCodeSizePtr = NULL;

  00175	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pCodeSizePtr$[ebp], 0

; 1342 : 	if ( ppBlock ) pCodeSizePtr = *ppBlock+4;

  0017c	83 7d 0c 00	 cmp	 DWORD PTR _ppBlock$[ebp], 0
  00180	74 0b		 je	 SHORT $LN2@ScanObject
  00182	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00185	8b 08		 mov	 ecx, DWORD PTR [eax]
  00187	83 c1 04	 add	 ecx, 4
  0018a	89 4d fc	 mov	 DWORD PTR _pCodeSizePtr$[ebp], ecx
$LN2@ScanObject:

; 1343 : 	WriteCODE ( DBOBLOCK_OBJECT_CUSTOMDATA, 0, ppBlock, pdwSize );

  0018d	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00190	50		 push	 eax
  00191	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00194	51		 push	 ecx
  00195	6a 00		 push	 0
  00197	68 96 01 00 00	 push	 406			; 00000196H
  0019c	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  001a1	83 c4 10	 add	 esp, 16			; 00000010H

; 1344 : 	WriteCR ( ppBlock, pdwSize );

  001a4	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001a7	50		 push	 eax
  001a8	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001ab	51		 push	 ecx
  001ac	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  001b1	83 c4 08	 add	 esp, 8

; 1345 : 	WriteDWORD ( pObject->dwCustomSize, ppBlock, pdwSize );

  001b4	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001b7	50		 push	 eax
  001b8	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001bb	51		 push	 ecx
  001bc	8b 55 08	 mov	 edx, DWORD PTR _pObject$[ebp]
  001bf	8b 82 24 05 00
	00		 mov	 eax, DWORD PTR [edx+1316]
  001c5	50		 push	 eax
  001c6	e8 00 00 00 00	 call	 ?WriteDWORD@@YA_NKPAPADPAK@Z ; WriteDWORD
  001cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1346 : 	WriteCR ( ppBlock, pdwSize );

  001ce	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001d1	50		 push	 eax
  001d2	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001d5	51		 push	 ecx
  001d6	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  001db	83 c4 08	 add	 esp, 8

; 1347 : 	WriteMEMORY ( (BYTE*)pObject->pCustomData, pObject->dwCustomSize, ppBlock, pdwSize );

  001de	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  001e1	50		 push	 eax
  001e2	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  001e5	51		 push	 ecx
  001e6	8b 55 08	 mov	 edx, DWORD PTR _pObject$[ebp]
  001e9	8b 82 24 05 00
	00		 mov	 eax, DWORD PTR [edx+1316]
  001ef	50		 push	 eax
  001f0	8b 4d 08	 mov	 ecx, DWORD PTR _pObject$[ebp]
  001f3	8b 91 28 05 00
	00		 mov	 edx, DWORD PTR [ecx+1320]
  001f9	52		 push	 edx
  001fa	e8 00 00 00 00	 call	 ?WriteMEMORY@@YA_NPAEKPAPADPAK@Z ; WriteMEMORY
  001ff	83 c4 10	 add	 esp, 16			; 00000010H

; 1348 : 	WriteCR ( ppBlock, pdwSize );

  00202	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00205	50		 push	 eax
  00206	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  00209	51		 push	 ecx
  0020a	e8 00 00 00 00	 call	 ?WriteCR@@YA_NPAPADPAK@Z ; WriteCR
  0020f	83 c4 08	 add	 esp, 8

; 1349 : 	if ( pCodeSizePtr ) *(DWORD*)pCodeSizePtr=(*ppBlock-4)-pCodeSizePtr;

  00212	83 7d fc 00	 cmp	 DWORD PTR _pCodeSizePtr$[ebp], 0
  00216	74 10		 je	 SHORT $LN1@ScanObject
  00218	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0021b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0021d	83 e9 04	 sub	 ecx, 4
  00220	2b 4d fc	 sub	 ecx, DWORD PTR _pCodeSizePtr$[ebp]
  00223	8b 55 fc	 mov	 edx, DWORD PTR _pCodeSizePtr$[ebp]
  00226	89 0a		 mov	 DWORD PTR [edx], ecx
$LN1@ScanObject:

; 1350 : 
; 1351 : 	// leefix - 070405 - No more tokens to parse (scan functions do this at end!)
; 1352 : 	WriteCODE ( 0, 0, ppBlock, pdwSize );

  00228	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  0022b	50		 push	 eax
  0022c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppBlock$[ebp]
  0022f	51		 push	 ecx
  00230	6a 00		 push	 0
  00232	6a 00		 push	 0
  00234	e8 00 00 00 00	 call	 ?WriteCODE@@YA_NKKPAPADPAK@Z ; WriteCODE
  00239	83 c4 10	 add	 esp, 16			; 00000010H

; 1353 : 
; 1354 : 	// okay
; 1355 : 	return true;

  0023c	b0 01		 mov	 al, 1
$LN9@ScanObject:

; 1356 : }

  0023e	5f		 pop	 edi
  0023f	5e		 pop	 esi
  00240	5b		 pop	 ebx
  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c3		 ret	 0
?ScanObject@@YA_NPAUsObject@@PAPADPAK@Z ENDP		; ScanObject
_TEXT	ENDS
PUBLIC	?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z	; ConstructBones
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??0sBone@@QAE@XZ:PROC				; sBone::sBone
EXTRN	??1sBone@@QAE@XZ:PROC				; sBone::~sBone
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z$0
__ehfuncinfo$?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z
_TEXT	SEGMENT
tv95 = -108						; size = 4
tv90 = -108						; size = 4
$T58051 = -104						; size = 4
$T58052 = -100						; size = 4
$T58053 = -96						; size = 4
_pBone$57368 = -28					; size = 4
_bi$57364 = -24						; size = 4
_dwCodeSize$ = -20					; size = 4
_dwCode$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ppBone$ = 8						; size = 4
_dwBoneCount$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z PROC		; ConstructBones, COMDAT

; 1363 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1364 : 	// get code
; 1365 : 	DWORD dwCode = 0;

  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwCode$[ebp], 0

; 1366 : 	DWORD dwCodeSize = 0;

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwCodeSize$[ebp], 0

; 1367 : 	ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00036	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00039	50		 push	 eax
  0003a	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0003d	51		 push	 ecx
  0003e	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1368 : 	if ( dwCode > 0 )

  0004a	83 7d f0 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  0004e	0f 86 8c 00 00
	00		 jbe	 $LN14@ConstructB

; 1369 : 	{
; 1370 : 		// create bone
; 1371 : 		(*ppBone) = new sBone [ dwBoneCount ];

  00054	8b 45 0c	 mov	 eax, DWORD PTR _dwBoneCount$[ebp]
  00057	89 45 98	 mov	 DWORD PTR $T58051[ebp], eax
  0005a	33 c9		 xor	 ecx, ecx
  0005c	8b 45 98	 mov	 eax, DWORD PTR $T58051[ebp]
  0005f	ba 58 01 00 00	 mov	 edx, 344		; 00000158H
  00064	f7 e2		 mul	 edx
  00066	0f 90 c1	 seto	 cl
  00069	f7 d9		 neg	 ecx
  0006b	0b c8		 or	 ecx, eax
  0006d	33 c0		 xor	 eax, eax
  0006f	83 c1 04	 add	 ecx, 4
  00072	0f 92 c0	 setb	 al
  00075	f7 d8		 neg	 eax
  00077	0b c1		 or	 eax, ecx
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007f	83 c4 04	 add	 esp, 4
  00082	89 45 a0	 mov	 DWORD PTR $T58053[ebp], eax
  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008c	83 7d a0 00	 cmp	 DWORD PTR $T58053[ebp], 0
  00090	74 32		 je	 SHORT $LN17@ConstructB
  00092	8b 4d a0	 mov	 ecx, DWORD PTR $T58053[ebp]
  00095	8b 55 98	 mov	 edx, DWORD PTR $T58051[ebp]
  00098	89 11		 mov	 DWORD PTR [ecx], edx
  0009a	68 00 00 00 00	 push	 OFFSET ??1sBone@@QAE@XZ	; sBone::~sBone
  0009f	68 00 00 00 00	 push	 OFFSET ??0sBone@@QAE@XZ	; sBone::sBone
  000a4	8b 45 98	 mov	 eax, DWORD PTR $T58051[ebp]
  000a7	50		 push	 eax
  000a8	68 58 01 00 00	 push	 344			; 00000158H
  000ad	8b 4d a0	 mov	 ecx, DWORD PTR $T58053[ebp]
  000b0	83 c1 04	 add	 ecx, 4
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  000b9	8b 55 a0	 mov	 edx, DWORD PTR $T58053[ebp]
  000bc	83 c2 04	 add	 edx, 4
  000bf	89 55 94	 mov	 DWORD PTR tv90[ebp], edx
  000c2	eb 07		 jmp	 SHORT $LN18@ConstructB
$LN17@ConstructB:
  000c4	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN18@ConstructB:
  000cb	8b 45 94	 mov	 eax, DWORD PTR tv90[ebp]
  000ce	89 45 9c	 mov	 DWORD PTR $T58052[ebp], eax
  000d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _ppBone$[ebp]
  000db	8b 55 9c	 mov	 edx, DWORD PTR $T58052[ebp]
  000de	89 11		 mov	 DWORD PTR [ecx], edx
$LN14@ConstructB:

; 1372 : 	}
; 1373 : 
; 1374 : 	// V110 BETA6 - 100608 - why was this so, it scews up models with no bones!!
; 1375 : 	// dwBoneCount=dwBoneCount-1;
; 1376 : 
; 1377 : 	for ( DWORD bi=0; bi<dwBoneCount; bi++ )

  000e0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bi$57364[ebp], 0
  000e7	eb 09		 jmp	 SHORT $LN13@ConstructB
$LN12@ConstructB:
  000e9	8b 45 e8	 mov	 eax, DWORD PTR _bi$57364[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	89 45 e8	 mov	 DWORD PTR _bi$57364[ebp], eax
$LN13@ConstructB:
  000f2	8b 45 e8	 mov	 eax, DWORD PTR _bi$57364[ebp]
  000f5	3b 45 0c	 cmp	 eax, DWORD PTR _dwBoneCount$[ebp]
  000f8	0f 83 0d 01 00
	00		 jae	 $LN11@ConstructB

; 1378 : 	{
; 1379 : 		// bone in question
; 1380 : 		sBone* pBone = &((*ppBone) [ bi ]);

  000fe	8b 45 e8	 mov	 eax, DWORD PTR _bi$57364[ebp]
  00101	69 c0 58 01 00
	00		 imul	 eax, 344		; 00000158H
  00107	8b 4d 08	 mov	 ecx, DWORD PTR _ppBone$[ebp]
  0010a	03 01		 add	 eax, DWORD PTR [ecx]
  0010c	89 45 e4	 mov	 DWORD PTR _pBone$57368[ebp], eax
$LN10@ConstructB:

; 1381 : 
; 1382 : 		while ( dwCode > 0 )

  0010f	83 7d f0 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  00113	0f 86 d9 00 00
	00		 jbe	 $LN9@ConstructB

; 1383 : 		{
; 1384 : 			switch ( dwCode )

  00119	8b 45 f0	 mov	 eax, DWORD PTR _dwCode$[ebp]
  0011c	89 45 94	 mov	 DWORD PTR tv95[ebp], eax
  0011f	8b 4d 94	 mov	 ecx, DWORD PTR tv95[ebp]
  00122	81 e9 2d 01 00
	00		 sub	 ecx, 301		; 0000012dH
  00128	89 4d 94	 mov	 DWORD PTR tv95[ebp], ecx
  0012b	83 7d 94 04	 cmp	 DWORD PTR tv95[ebp], 4
  0012f	0f 87 97 00 00
	00		 ja	 $LN1@ConstructB
  00135	8b 55 94	 mov	 edx, DWORD PTR tv95[ebp]
  00138	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN21@ConstructB[edx*4]
$LN6@ConstructB:

; 1385 : 			{
; 1386 : 				case DBOBLOCK_BONES_NAME :				ReadString ( (*pBone).szName,				ppBlock );	break;

  0013f	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00142	50		 push	 eax
  00143	8b 4d e4	 mov	 ecx, DWORD PTR _pBone$57368[ebp]
  00146	51		 push	 ecx
  00147	e8 00 00 00 00	 call	 ?ReadString@@YA_NPADPAPAD@Z ; ReadString
  0014c	83 c4 08	 add	 esp, 8
  0014f	e9 85 00 00 00	 jmp	 $LN7@ConstructB
$LN5@ConstructB:

; 1387 : 				case DBOBLOCK_BONES_NUMINFLUENCES :		ReadDWORD ( &(*pBone).dwNumInfluences,		ppBlock ); break;

  00154	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00157	50		 push	 eax
  00158	8b 4d e4	 mov	 ecx, DWORD PTR _pBone$57368[ebp]
  0015b	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00161	51		 push	 ecx
  00162	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00167	83 c4 08	 add	 esp, 8
  0016a	eb 6d		 jmp	 SHORT $LN7@ConstructB
$LN4@ConstructB:

; 1388 : 				case DBOBLOCK_BONES_VERTICES :			ReadMemory ( (BYTE**)&(*pBone).pVertices,	sizeof(DWORD) * (*pBone).dwNumInfluences,	ppBlock );	break;

  0016c	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0016f	50		 push	 eax
  00170	8b 4d e4	 mov	 ecx, DWORD PTR _pBone$57368[ebp]
  00173	8b 91 00 01 00
	00		 mov	 edx, DWORD PTR [ecx+256]
  00179	c1 e2 02	 shl	 edx, 2
  0017c	52		 push	 edx
  0017d	8b 45 e4	 mov	 eax, DWORD PTR _pBone$57368[ebp]
  00180	05 04 01 00 00	 add	 eax, 260		; 00000104H
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 ?ReadMemory@@YA_NPAPAEKPAPAD@Z ; ReadMemory
  0018b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018e	eb 49		 jmp	 SHORT $LN7@ConstructB
$LN3@ConstructB:

; 1389 : 				case DBOBLOCK_BONES_WEIGHTS :			ReadMemory ( (BYTE**)&(*pBone).pWeights,	sizeof(float) * (*pBone).dwNumInfluences,	ppBlock );	break;

  00190	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00193	50		 push	 eax
  00194	8b 4d e4	 mov	 ecx, DWORD PTR _pBone$57368[ebp]
  00197	8b 91 00 01 00
	00		 mov	 edx, DWORD PTR [ecx+256]
  0019d	c1 e2 02	 shl	 edx, 2
  001a0	52		 push	 edx
  001a1	8b 45 e4	 mov	 eax, DWORD PTR _pBone$57368[ebp]
  001a4	05 08 01 00 00	 add	 eax, 264		; 00000108H
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 ?ReadMemory@@YA_NPAPAEKPAPAD@Z ; ReadMemory
  001af	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b2	eb 25		 jmp	 SHORT $LN7@ConstructB
$LN2@ConstructB:

; 1390 : 				case DBOBLOCK_BONES_TRANSLATIONMATRIX :	ReadMatrix ( &(*pBone).matTranslation,		ppBlock ); break;

  001b4	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001b7	50		 push	 eax
  001b8	8b 4d e4	 mov	 ecx, DWORD PTR _pBone$57368[ebp]
  001bb	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  001c1	51		 push	 ecx
  001c2	e8 00 00 00 00	 call	 ?ReadMatrix@@YA_NPAUD3DXMATRIX@@PAPAD@Z ; ReadMatrix
  001c7	83 c4 08	 add	 esp, 8
  001ca	eb 0d		 jmp	 SHORT $LN7@ConstructB
$LN1@ConstructB:

; 1391 : 
; 1392 : 				default : 
; 1393 : 					*ppBlock += dwCodeSize;

  001cc	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d1	03 4d ec	 add	 ecx, DWORD PTR _dwCodeSize$[ebp]
  001d4	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  001d7	89 0a		 mov	 DWORD PTR [edx], ecx
$LN7@ConstructB:

; 1394 : 					break;
; 1395 : 			}
; 1396 : 
; 1397 : 			// get next code
; 1398 : 			ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  001d9	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001dc	50		 push	 eax
  001dd	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  001e0	51		 push	 ecx
  001e1	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  001e4	52		 push	 edx
  001e5	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  001ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1399 : 		}

  001ed	e9 1d ff ff ff	 jmp	 $LN10@ConstructB
$LN9@ConstructB:

; 1400 : 
; 1401 : 		// get next code
; 1402 : 		ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  001f2	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001f5	50		 push	 eax
  001f6	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  001f9	51		 push	 ecx
  001fa	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  001fd	52		 push	 edx
  001fe	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00203	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1403 : 	}

  00206	e9 de fe ff ff	 jmp	 $LN12@ConstructB
$LN11@ConstructB:

; 1404 : 
; 1405 : 	// okay
; 1406 : 	return true;

  0020b	b0 01		 mov	 al, 1

; 1407 : }

  0020d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00210	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00217	59		 pop	 ecx
  00218	5f		 pop	 edi
  00219	5e		 pop	 esi
  0021a	5b		 pop	 ebx
  0021b	8b e5		 mov	 esp, ebp
  0021d	5d		 pop	 ebp
  0021e	c3		 ret	 0
  0021f	90		 npad	 1
$LN21@ConstructB:
  00220	00 00 00 00	 DD	 $LN6@ConstructB
  00224	00 00 00 00	 DD	 $LN5@ConstructB
  00228	00 00 00 00	 DD	 $LN4@ConstructB
  0022c	00 00 00 00	 DD	 $LN3@ConstructB
  00230	00 00 00 00	 DD	 $LN2@ConstructB
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z$0:
  00000	8b 45 a0	 mov	 eax, DWORD PTR $T58053[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z ENDP		; ConstructBones
PUBLIC	??_EsBone@@QAEPAXI@Z				; sBone::`vector deleting destructor'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EsBone@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EsBone@@QAEPAXI@Z PROC				; sBone::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000f	83 e0 02	 and	 eax, 2
  00012	74 39		 je	 SHORT $LN3@vector@2
  00014	68 00 00 00 00	 push	 OFFSET ??1sBone@@QAE@XZ	; sBone::~sBone
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001f	51		 push	 ecx
  00020	68 58 01 00 00	 push	 344			; 00000158H
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 0f		 je	 SHORT $LN2@vector@2
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 e8 04	 sub	 eax, 4
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
$LN2@vector@2:
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 e8 04	 sub	 eax, 4
  0004b	eb 1f		 jmp	 SHORT $LN4@vector@2
$LN3@vector@2:
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??1sBone@@QAE@XZ	; sBone::~sBone
  00055	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00058	83 e0 01	 and	 eax, 1
  0005b	74 0c		 je	 SHORT $LN1@vector@2
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00066	83 c4 04	 add	 esp, 4
$LN1@vector@2:
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
??_EsBone@@QAEPAXI@Z ENDP				; sBone::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z	; ConstructTexture
EXTRN	??0sTexture@@QAE@XZ:PROC			; sTexture::sTexture
EXTRN	??1sTexture@@QAE@XZ:PROC			; sTexture::~sTexture
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z$0
__ehfuncinfo$?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z
_TEXT	SEGMENT
tv95 = -108						; size = 4
tv90 = -108						; size = 4
$T58068 = -104						; size = 4
$T58069 = -100						; size = 4
$T58070 = -96						; size = 4
_pTexture$57412 = -28					; size = 4
_ti$57408 = -24						; size = 4
_dwCodeSize$ = -20					; size = 4
_dwCode$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ppTexture$ = 8						; size = 4
_dwTextureCount$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z PROC	; ConstructTexture, COMDAT

; 1410 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1411 : 	// get code
; 1412 : 	DWORD dwCode = 0;

  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwCode$[ebp], 0

; 1413 : 	DWORD dwCodeSize = 0;

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwCodeSize$[ebp], 0

; 1414 : 	ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00036	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00039	50		 push	 eax
  0003a	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0003d	51		 push	 ecx
  0003e	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1415 : 	if ( dwCode > 0 )

  0004a	83 7d f0 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  0004e	0f 86 8c 00 00
	00		 jbe	 $LN22@ConstructT

; 1416 : 	{
; 1417 : 		// create texture
; 1418 : 		(*ppTexture) = new sTexture [ dwTextureCount ];

  00054	8b 45 0c	 mov	 eax, DWORD PTR _dwTextureCount$[ebp]
  00057	89 45 98	 mov	 DWORD PTR $T58068[ebp], eax
  0005a	33 c9		 xor	 ecx, ecx
  0005c	8b 45 98	 mov	 eax, DWORD PTR $T58068[ebp]
  0005f	ba 48 01 00 00	 mov	 edx, 328		; 00000148H
  00064	f7 e2		 mul	 edx
  00066	0f 90 c1	 seto	 cl
  00069	f7 d9		 neg	 ecx
  0006b	0b c8		 or	 ecx, eax
  0006d	33 c0		 xor	 eax, eax
  0006f	83 c1 04	 add	 ecx, 4
  00072	0f 92 c0	 setb	 al
  00075	f7 d8		 neg	 eax
  00077	0b c1		 or	 eax, ecx
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007f	83 c4 04	 add	 esp, 4
  00082	89 45 a0	 mov	 DWORD PTR $T58070[ebp], eax
  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008c	83 7d a0 00	 cmp	 DWORD PTR $T58070[ebp], 0
  00090	74 32		 je	 SHORT $LN25@ConstructT
  00092	8b 4d a0	 mov	 ecx, DWORD PTR $T58070[ebp]
  00095	8b 55 98	 mov	 edx, DWORD PTR $T58068[ebp]
  00098	89 11		 mov	 DWORD PTR [ecx], edx
  0009a	68 00 00 00 00	 push	 OFFSET ??1sTexture@@QAE@XZ ; sTexture::~sTexture
  0009f	68 00 00 00 00	 push	 OFFSET ??0sTexture@@QAE@XZ ; sTexture::sTexture
  000a4	8b 45 98	 mov	 eax, DWORD PTR $T58068[ebp]
  000a7	50		 push	 eax
  000a8	68 48 01 00 00	 push	 328			; 00000148H
  000ad	8b 4d a0	 mov	 ecx, DWORD PTR $T58070[ebp]
  000b0	83 c1 04	 add	 ecx, 4
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  000b9	8b 55 a0	 mov	 edx, DWORD PTR $T58070[ebp]
  000bc	83 c2 04	 add	 edx, 4
  000bf	89 55 94	 mov	 DWORD PTR tv90[ebp], edx
  000c2	eb 07		 jmp	 SHORT $LN26@ConstructT
$LN25@ConstructT:
  000c4	c7 45 94 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN26@ConstructT:
  000cb	8b 45 94	 mov	 eax, DWORD PTR tv90[ebp]
  000ce	89 45 9c	 mov	 DWORD PTR $T58069[ebp], eax
  000d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _ppTexture$[ebp]
  000db	8b 55 9c	 mov	 edx, DWORD PTR $T58069[ebp]
  000de	89 11		 mov	 DWORD PTR [ecx], edx
$LN22@ConstructT:

; 1419 : 	}
; 1420 : 	for ( DWORD ti=0; ti<dwTextureCount; ti++ )

  000e0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _ti$57408[ebp], 0
  000e7	eb 09		 jmp	 SHORT $LN21@ConstructT
$LN20@ConstructT:
  000e9	8b 45 e8	 mov	 eax, DWORD PTR _ti$57408[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	89 45 e8	 mov	 DWORD PTR _ti$57408[ebp], eax
$LN21@ConstructT:
  000f2	8b 45 e8	 mov	 eax, DWORD PTR _ti$57408[ebp]
  000f5	3b 45 0c	 cmp	 eax, DWORD PTR _dwTextureCount$[ebp]
  000f8	0f 83 ca 01 00
	00		 jae	 $LN19@ConstructT

; 1421 : 	{
; 1422 : 		// texture in question
; 1423 : 		sTexture* pTexture = &((*ppTexture) [ ti ]);

  000fe	8b 45 e8	 mov	 eax, DWORD PTR _ti$57408[ebp]
  00101	69 c0 48 01 00
	00		 imul	 eax, 328		; 00000148H
  00107	8b 4d 08	 mov	 ecx, DWORD PTR _ppTexture$[ebp]
  0010a	03 01		 add	 eax, DWORD PTR [ecx]
  0010c	89 45 e4	 mov	 DWORD PTR _pTexture$57412[ebp], eax
$LN18@ConstructT:

; 1424 : 
; 1425 : 		while ( dwCode > 0 )

  0010f	83 7d f0 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  00113	0f 86 96 01 00
	00		 jbe	 $LN17@ConstructT

; 1426 : 		{
; 1427 : 			switch ( dwCode )

  00119	8b 45 f0	 mov	 eax, DWORD PTR _dwCode$[ebp]
  0011c	89 45 94	 mov	 DWORD PTR tv95[ebp], eax
  0011f	8b 4d 94	 mov	 ecx, DWORD PTR tv95[ebp]
  00122	81 e9 8d 00 00
	00		 sub	 ecx, 141		; 0000008dH
  00128	89 4d 94	 mov	 DWORD PTR tv95[ebp], ecx
  0012b	83 7d 94 0c	 cmp	 DWORD PTR tv95[ebp], 12	; 0000000cH
  0012f	0f 87 54 01 00
	00		 ja	 $LN1@ConstructT
  00135	8b 55 94	 mov	 edx, DWORD PTR tv95[ebp]
  00138	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN29@ConstructT[edx*4]
$LN14@ConstructT:

; 1428 : 			{
; 1429 : 				case DBOBLOCK_TEXTURE_NAME :	ReadString ( (pTexture)->pName,						ppBlock ); break;

  0013f	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00142	50		 push	 eax
  00143	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  00146	51		 push	 ecx
  00147	e8 00 00 00 00	 call	 ?ReadString@@YA_NPADPAPAD@Z ; ReadString
  0014c	83 c4 08	 add	 esp, 8
  0014f	e9 42 01 00 00	 jmp	 $LN15@ConstructT
$LN13@ConstructT:

; 1430 : 				case DBOBLOCK_TEXTURE_STAGE :	ReadDWORD  ( &(pTexture)->dwStage,					ppBlock ); break;

  00154	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00157	50		 push	 eax
  00158	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  0015b	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  00161	51		 push	 ecx
  00162	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00167	83 c4 08	 add	 esp, 8
  0016a	e9 27 01 00 00	 jmp	 $LN15@ConstructT
$LN12@ConstructT:

; 1431 : 				case DBOBLOCK_TEXTURE_BMODE :	ReadDWORD  ( &(pTexture)->dwBlendMode,				ppBlock ); break;

  0016f	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00172	50		 push	 eax
  00173	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  00176	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  0017c	51		 push	 ecx
  0017d	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00182	83 c4 08	 add	 esp, 8
  00185	e9 0c 01 00 00	 jmp	 $LN15@ConstructT
$LN11@ConstructT:

; 1432 : 				case DBOBLOCK_TEXTURE_BARG1 :	ReadDWORD  ( &(pTexture)->dwBlendArg1,				ppBlock ); break;

  0018a	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0018d	50		 push	 eax
  0018e	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  00191	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  00197	51		 push	 ecx
  00198	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  0019d	83 c4 08	 add	 esp, 8
  001a0	e9 f1 00 00 00	 jmp	 $LN15@ConstructT
$LN10@ConstructT:

; 1433 : 				case DBOBLOCK_TEXTURE_BARG2 :	ReadDWORD  ( &(pTexture)->dwBlendArg2,				ppBlock ); break;

  001a5	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001a8	50		 push	 eax
  001a9	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  001ac	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  001b2	51		 push	 ecx
  001b3	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  001b8	83 c4 08	 add	 esp, 8
  001bb	e9 d6 00 00 00	 jmp	 $LN15@ConstructT
$LN9@ConstructT:

; 1434 : 				case DBOBLOCK_TEXTURE_ADDRU :	ReadDWORD  ( &(pTexture)->dwAddressU,				ppBlock ); break;

  001c0	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001c3	50		 push	 eax
  001c4	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  001c7	81 c1 1c 01 00
	00		 add	 ecx, 284		; 0000011cH
  001cd	51		 push	 ecx
  001ce	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  001d3	83 c4 08	 add	 esp, 8
  001d6	e9 bb 00 00 00	 jmp	 $LN15@ConstructT
$LN8@ConstructT:

; 1435 : 				case DBOBLOCK_TEXTURE_ADDRV :	ReadDWORD  ( &(pTexture)->dwAddressV,				ppBlock ); break;

  001db	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001de	50		 push	 eax
  001df	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  001e2	81 c1 20 01 00
	00		 add	 ecx, 288		; 00000120H
  001e8	51		 push	 ecx
  001e9	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  001ee	83 c4 08	 add	 esp, 8
  001f1	e9 a0 00 00 00	 jmp	 $LN15@ConstructT
$LN7@ConstructT:

; 1436 : 				case DBOBLOCK_TEXTURE_MAG :		ReadDWORD  ( &(pTexture)->dwMagState,				ppBlock ); break;

  001f6	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001f9	50		 push	 eax
  001fa	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  001fd	81 c1 24 01 00
	00		 add	 ecx, 292		; 00000124H
  00203	51		 push	 ecx
  00204	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00209	83 c4 08	 add	 esp, 8
  0020c	e9 85 00 00 00	 jmp	 $LN15@ConstructT
$LN6@ConstructT:

; 1437 : 				case DBOBLOCK_TEXTURE_MIN :		ReadDWORD  ( &(pTexture)->dwMinState,				ppBlock ); break;

  00211	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00214	50		 push	 eax
  00215	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  00218	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  0021e	51		 push	 ecx
  0021f	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00224	83 c4 08	 add	 esp, 8
  00227	eb 6d		 jmp	 SHORT $LN15@ConstructT
$LN5@ConstructT:

; 1438 : 				case DBOBLOCK_TEXTURE_MIP :		ReadDWORD  ( &(pTexture)->dwMipState,				ppBlock ); break;

  00229	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0022c	50		 push	 eax
  0022d	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  00230	81 c1 2c 01 00
	00		 add	 ecx, 300		; 0000012cH
  00236	51		 push	 ecx
  00237	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  0023c	83 c4 08	 add	 esp, 8
  0023f	eb 55		 jmp	 SHORT $LN15@ConstructT
$LN4@ConstructT:

; 1439 : 				case DBOBLOCK_TEXTURE_TCMODE :	ReadDWORD  ( &(pTexture)->dwTexCoordMode,			ppBlock ); break;

  00241	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00244	50		 push	 eax
  00245	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  00248	81 c1 30 01 00
	00		 add	 ecx, 304		; 00000130H
  0024e	51		 push	 ecx
  0024f	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00254	83 c4 08	 add	 esp, 8
  00257	eb 3d		 jmp	 SHORT $LN15@ConstructT
$LN3@ConstructT:

; 1440 : 				case DBOBLOCK_TEXTURE_PRIMST :	ReadDWORD  ( (DWORD*)&(pTexture)->iStartIndex,		ppBlock ); break;

  00259	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0025c	50		 push	 eax
  0025d	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  00260	81 c1 34 01 00
	00		 add	 ecx, 308		; 00000134H
  00266	51		 push	 ecx
  00267	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  0026c	83 c4 08	 add	 esp, 8
  0026f	eb 25		 jmp	 SHORT $LN15@ConstructT
$LN2@ConstructT:

; 1441 : 				case DBOBLOCK_TEXTURE_PRIMCN :	ReadDWORD  ( (DWORD*)&(pTexture)->iPrimitiveCount,	ppBlock ); break;

  00271	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00274	50		 push	 eax
  00275	8b 4d e4	 mov	 ecx, DWORD PTR _pTexture$57412[ebp]
  00278	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  0027e	51		 push	 ecx
  0027f	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00284	83 c4 08	 add	 esp, 8
  00287	eb 0d		 jmp	 SHORT $LN15@ConstructT
$LN1@ConstructT:

; 1442 : 
; 1443 : 				default : 
; 1444 : 					*ppBlock += dwCodeSize;

  00289	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0028c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0028e	03 4d ec	 add	 ecx, DWORD PTR _dwCodeSize$[ebp]
  00291	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00294	89 0a		 mov	 DWORD PTR [edx], ecx
$LN15@ConstructT:

; 1445 : 					break;
; 1446 : 			}
; 1447 : 
; 1448 : 			// get next code
; 1449 : 			ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00296	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00299	50		 push	 eax
  0029a	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0029d	51		 push	 ecx
  0029e	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  002a1	52		 push	 edx
  002a2	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  002a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1450 : 		}

  002aa	e9 60 fe ff ff	 jmp	 $LN18@ConstructT
$LN17@ConstructT:

; 1451 : 
; 1452 : 		// get next code
; 1453 : 		ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  002af	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  002b2	50		 push	 eax
  002b3	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  002b6	51		 push	 ecx
  002b7	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  002ba	52		 push	 edx
  002bb	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  002c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1454 : 	}

  002c3	e9 21 fe ff ff	 jmp	 $LN20@ConstructT
$LN19@ConstructT:

; 1455 : 
; 1456 : 	// okay
; 1457 : 	return true;

  002c8	b0 01		 mov	 al, 1

; 1458 : }

  002ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002d4	59		 pop	 ecx
  002d5	5f		 pop	 edi
  002d6	5e		 pop	 esi
  002d7	5b		 pop	 ebx
  002d8	8b e5		 mov	 esp, ebp
  002da	5d		 pop	 ebp
  002db	c3		 ret	 0
$LN29@ConstructT:
  002dc	00 00 00 00	 DD	 $LN14@ConstructT
  002e0	00 00 00 00	 DD	 $LN13@ConstructT
  002e4	00 00 00 00	 DD	 $LN12@ConstructT
  002e8	00 00 00 00	 DD	 $LN11@ConstructT
  002ec	00 00 00 00	 DD	 $LN10@ConstructT
  002f0	00 00 00 00	 DD	 $LN9@ConstructT
  002f4	00 00 00 00	 DD	 $LN8@ConstructT
  002f8	00 00 00 00	 DD	 $LN7@ConstructT
  002fc	00 00 00 00	 DD	 $LN6@ConstructT
  00300	00 00 00 00	 DD	 $LN5@ConstructT
  00304	00 00 00 00	 DD	 $LN4@ConstructT
  00308	00 00 00 00	 DD	 $LN3@ConstructT
  0030c	00 00 00 00	 DD	 $LN2@ConstructT
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z$0:
  00000	8b 45 a0	 mov	 eax, DWORD PTR $T58070[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z ENDP	; ConstructTexture
PUBLIC	??_EsTexture@@QAEPAXI@Z				; sTexture::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EsTexture@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EsTexture@@QAEPAXI@Z PROC				; sTexture::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000f	83 e0 02	 and	 eax, 2
  00012	74 39		 je	 SHORT $LN3@vector@3
  00014	68 00 00 00 00	 push	 OFFSET ??1sTexture@@QAE@XZ ; sTexture::~sTexture
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001f	51		 push	 ecx
  00020	68 48 01 00 00	 push	 328			; 00000148H
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 0f		 je	 SHORT $LN2@vector@3
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 e8 04	 sub	 eax, 4
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
$LN2@vector@3:
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 e8 04	 sub	 eax, 4
  0004b	eb 1f		 jmp	 SHORT $LN4@vector@3
$LN3@vector@3:
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??1sTexture@@QAE@XZ	; sTexture::~sTexture
  00055	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00058	83 e0 01	 and	 eax, 1
  0005b	74 0c		 je	 SHORT $LN1@vector@3
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00066	83 c4 04	 add	 esp, 4
$LN1@vector@3:
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
??_EsTexture@@QAEPAXI@Z ENDP				; sTexture::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?ConstructMultiMaterial@@YA_NPAPAUsMultiMaterial@@KPAPAD@Z ; ConstructMultiMaterial
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?ConstructMultiMaterial@@YA_NPAPAUsMultiMaterial@@KPAPAD@Z
_TEXT	SEGMENT
tv84 = -88						; size = 4
$T58085 = -84						; size = 4
_pMultiMat$57458 = -16					; size = 4
_ti$57454 = -12						; size = 4
_dwCodeSize$ = -8					; size = 4
_dwCode$ = -4						; size = 4
_ppMultiMaterial$ = 8					; size = 4
_dwMultiMatCount$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
?ConstructMultiMaterial@@YA_NPAPAUsMultiMaterial@@KPAPAD@Z PROC ; ConstructMultiMaterial, COMDAT

; 1461 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1462 : 	// get code
; 1463 : 	DWORD dwCode = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwCode$[ebp], 0

; 1464 : 	DWORD dwCodeSize = 0;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwCodeSize$[ebp], 0

; 1465 : 	ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00017	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0001a	50		 push	 eax
  0001b	8d 4d f8	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0001e	51		 push	 ecx
  0001f	8d 55 fc	 lea	 edx, DWORD PTR _dwCode$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1466 : 	if ( dwCode > 0 )

  0002b	83 7d fc 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  0002f	76 41		 jbe	 SHORT $LN14@ConstructM

; 1467 : 	{
; 1468 : 		// create multi material
; 1469 : 		(*ppMultiMaterial) = new sMultiMaterial [ dwMultiMatCount ];

  00031	33 c9		 xor	 ecx, ecx
  00033	8b 45 0c	 mov	 eax, DWORD PTR _dwMultiMatCount$[ebp]
  00036	ba 54 01 00 00	 mov	 edx, 340		; 00000154H
  0003b	f7 e2		 mul	 edx
  0003d	0f 90 c1	 seto	 cl
  00040	f7 d9		 neg	 ecx
  00042	0b c8		 or	 ecx, eax
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004a	83 c4 04	 add	 esp, 4
  0004d	89 45 ac	 mov	 DWORD PTR $T58085[ebp], eax
  00050	8b 45 08	 mov	 eax, DWORD PTR _ppMultiMaterial$[ebp]
  00053	8b 4d ac	 mov	 ecx, DWORD PTR $T58085[ebp]
  00056	89 08		 mov	 DWORD PTR [eax], ecx

; 1470 : 
; 1471 : 		// clear multi material data array
; 1472 : 		memset ( (*ppMultiMaterial), 0, sizeof(sMultiMaterial) * dwMultiMatCount );

  00058	8b 45 0c	 mov	 eax, DWORD PTR _dwMultiMatCount$[ebp]
  0005b	69 c0 54 01 00
	00		 imul	 eax, 340		; 00000154H
  00061	50		 push	 eax
  00062	6a 00		 push	 0
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _ppMultiMaterial$[ebp]
  00067	8b 11		 mov	 edx, DWORD PTR [ecx]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 _memset
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@ConstructM:

; 1473 : 	}
; 1474 : 	for ( DWORD ti=0; ti<dwMultiMatCount; ti++ )

  00072	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ti$57454[ebp], 0
  00079	eb 09		 jmp	 SHORT $LN13@ConstructM
$LN12@ConstructM:
  0007b	8b 45 f4	 mov	 eax, DWORD PTR _ti$57454[ebp]
  0007e	83 c0 01	 add	 eax, 1
  00081	89 45 f4	 mov	 DWORD PTR _ti$57454[ebp], eax
$LN13@ConstructM:
  00084	8b 45 f4	 mov	 eax, DWORD PTR _ti$57454[ebp]
  00087	3b 45 0c	 cmp	 eax, DWORD PTR _dwMultiMatCount$[ebp]
  0008a	0f 83 ee 00 00
	00		 jae	 $LN11@ConstructM

; 1475 : 	{
; 1476 : 		// multi material in question
; 1477 : 		sMultiMaterial* pMultiMat = &((*ppMultiMaterial) [ ti ]);

  00090	8b 45 f4	 mov	 eax, DWORD PTR _ti$57454[ebp]
  00093	69 c0 54 01 00
	00		 imul	 eax, 340		; 00000154H
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _ppMultiMaterial$[ebp]
  0009c	03 01		 add	 eax, DWORD PTR [ecx]
  0009e	89 45 f0	 mov	 DWORD PTR _pMultiMat$57458[ebp], eax
$LN10@ConstructM:

; 1478 : 
; 1479 : 		while ( dwCode > 0 )

  000a1	83 7d fc 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  000a5	0f 86 ba 00 00
	00		 jbe	 $LN9@ConstructM

; 1480 : 		{
; 1481 : 			switch ( dwCode )

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _dwCode$[ebp]
  000ae	89 45 a8	 mov	 DWORD PTR tv84[ebp], eax
  000b1	8b 4d a8	 mov	 ecx, DWORD PTR tv84[ebp]
  000b4	81 e9 a1 00 00
	00		 sub	 ecx, 161		; 000000a1H
  000ba	89 4d a8	 mov	 DWORD PTR tv84[ebp], ecx
  000bd	83 7d a8 04	 cmp	 DWORD PTR tv84[ebp], 4
  000c1	77 7c		 ja	 SHORT $LN1@ConstructM
  000c3	8b 55 a8	 mov	 edx, DWORD PTR tv84[ebp]
  000c6	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN17@ConstructM[edx*4]
$LN6@ConstructM:

; 1482 : 			{
; 1483 : 				case DBOBLOCK_MULTIMAT_NAME :		ReadString   ( (pMultiMat)->pName,			ppBlock ); break;

  000cd	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000d0	50		 push	 eax
  000d1	8b 4d f0	 mov	 ecx, DWORD PTR _pMultiMat$57458[ebp]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ?ReadString@@YA_NPADPAPAD@Z ; ReadString
  000da	83 c4 08	 add	 esp, 8
  000dd	eb 6d		 jmp	 SHORT $LN7@ConstructM
$LN5@ConstructM:

; 1484 : 				case DBOBLOCK_MULTIMAT_MATERIAL :	ReadMaterial ( &(pMultiMat)->mMaterial,		ppBlock ); break;

  000df	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000e2	50		 push	 eax
  000e3	8b 4d f0	 mov	 ecx, DWORD PTR _pMultiMat$57458[ebp]
  000e6	81 c1 04 01 00
	00		 add	 ecx, 260		; 00000104H
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 ?ReadMaterial@@YA_NPAU_D3DMATERIAL9@@PAPAD@Z ; ReadMaterial
  000f2	83 c4 08	 add	 esp, 8
  000f5	eb 55		 jmp	 SHORT $LN7@ConstructM
$LN4@ConstructM:

; 1485 : 				case DBOBLOCK_MULTIMAT_START :		ReadDWORD    ( &(pMultiMat)->dwIndexStart,	ppBlock ); break;

  000f7	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000fa	50		 push	 eax
  000fb	8b 4d f0	 mov	 ecx, DWORD PTR _pMultiMat$57458[ebp]
  000fe	81 c1 48 01 00
	00		 add	 ecx, 328		; 00000148H
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  0010a	83 c4 08	 add	 esp, 8
  0010d	eb 3d		 jmp	 SHORT $LN7@ConstructM
$LN3@ConstructM:

; 1486 : 				case DBOBLOCK_MULTIMAT_COUNT :		ReadDWORD    ( &(pMultiMat)->dwIndexCount,	ppBlock ); break;

  0010f	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00112	50		 push	 eax
  00113	8b 4d f0	 mov	 ecx, DWORD PTR _pMultiMat$57458[ebp]
  00116	81 c1 4c 01 00
	00		 add	 ecx, 332		; 0000014cH
  0011c	51		 push	 ecx
  0011d	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00122	83 c4 08	 add	 esp, 8
  00125	eb 25		 jmp	 SHORT $LN7@ConstructM
$LN2@ConstructM:

; 1487 : 				case DBOBLOCK_MULTIMAT_POLY :		ReadDWORD    ( &(pMultiMat)->dwPolyCount,	ppBlock ); break;

  00127	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0012a	50		 push	 eax
  0012b	8b 4d f0	 mov	 ecx, DWORD PTR _pMultiMat$57458[ebp]
  0012e	81 c1 50 01 00
	00		 add	 ecx, 336		; 00000150H
  00134	51		 push	 ecx
  00135	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  0013a	83 c4 08	 add	 esp, 8
  0013d	eb 0d		 jmp	 SHORT $LN7@ConstructM
$LN1@ConstructM:

; 1488 : 
; 1489 : 				default : 
; 1490 : 					*ppBlock += dwCodeSize;

  0013f	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00142	8b 08		 mov	 ecx, DWORD PTR [eax]
  00144	03 4d f8	 add	 ecx, DWORD PTR _dwCodeSize$[ebp]
  00147	8b 55 10	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0014a	89 0a		 mov	 DWORD PTR [edx], ecx
$LN7@ConstructM:

; 1491 : 					break;
; 1492 : 			}
; 1493 : 
; 1494 : 			// get next code
; 1495 : 			ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  0014c	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0014f	50		 push	 eax
  00150	8d 4d f8	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  00153	51		 push	 ecx
  00154	8d 55 fc	 lea	 edx, DWORD PTR _dwCode$[ebp]
  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1496 : 		}

  00160	e9 3c ff ff ff	 jmp	 $LN10@ConstructM
$LN9@ConstructM:

; 1497 : 
; 1498 : 		// get next code
; 1499 : 		ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00165	8b 45 10	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00168	50		 push	 eax
  00169	8d 4d f8	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0016c	51		 push	 ecx
  0016d	8d 55 fc	 lea	 edx, DWORD PTR _dwCode$[ebp]
  00170	52		 push	 edx
  00171	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1500 : 	}

  00179	e9 fd fe ff ff	 jmp	 $LN12@ConstructM
$LN11@ConstructM:

; 1501 : 
; 1502 : 	// okay
; 1503 : 	return true;

  0017e	b0 01		 mov	 al, 1

; 1504 : }

  00180	5f		 pop	 edi
  00181	5e		 pop	 esi
  00182	5b		 pop	 ebx
  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c3		 ret	 0
  00187	90		 npad	 1
$LN17@ConstructM:
  00188	00 00 00 00	 DD	 $LN6@ConstructM
  0018c	00 00 00 00	 DD	 $LN5@ConstructM
  00190	00 00 00 00	 DD	 $LN4@ConstructM
  00194	00 00 00 00	 DD	 $LN3@ConstructM
  00198	00 00 00 00	 DD	 $LN2@ConstructM
?ConstructMultiMaterial@@YA_NPAPAUsMultiMaterial@@KPAPAD@Z ENDP ; ConstructMultiMaterial
_TEXT	ENDS
PUBLIC	?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z	; ConstructFrame
PUBLIC	?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z		; ConstructMesh
EXTRN	??0sFrame@@QAE@XZ:PROC				; sFrame::sFrame
EXTRN	??1sFrame@@QAE@XZ:PROC				; sFrame::~sFrame
EXTRN	??0sMesh@@QAE@XZ:PROC				; sMesh::sMesh
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z$2
__ehfuncinfo$?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z
_TEXT	SEGMENT
tv204 = -124						; size = 4
tv190 = -124						; size = 4
tv76 = -124						; size = 4
tv75 = -124						; size = 4
$T58089 = -120						; size = 4
$T58090 = -116						; size = 4
$T58093 = -112						; size = 4
$T58094 = -108						; size = 4
$T58095 = -104						; size = 4
$T58098 = -100						; size = 4
$T58099 = -96						; size = 4
_pFrames$57510 = -28					; size = 4
_dwSubMesh$57506 = -24					; size = 4
_dwCodeSize$ = -20					; size = 4
_dwCode$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ppMesh$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z PROC		; ConstructMesh, COMDAT

; 1507 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 70	 sub	 esp, 112		; 00000070H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1508 : 	// get code
; 1509 : 	DWORD dwCode = 0;

  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwCode$[ebp], 0

; 1510 : 	DWORD dwCodeSize = 0;

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwCodeSize$[ebp], 0

; 1511 : 	ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00036	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00039	50		 push	 eax
  0003a	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0003d	51		 push	 ecx
  0003e	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1512 : 	if ( dwCode > 0 )

  0004a	83 7d f0 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  0004e	76 46		 jbe	 SHORT $LN48@ConstructM@2

; 1513 : 	{
; 1514 : 		// create mesh
; 1515 : 		(*ppMesh) = new sMesh;

  00050	68 f8 04 00 00	 push	 1272			; 000004f8H
  00055	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005a	83 c4 04	 add	 esp, 4
  0005d	89 45 8c	 mov	 DWORD PTR $T58090[ebp], eax
  00060	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00067	83 7d 8c 00	 cmp	 DWORD PTR $T58090[ebp], 0
  0006b	74 0d		 je	 SHORT $LN52@ConstructM@2
  0006d	8b 4d 8c	 mov	 ecx, DWORD PTR $T58090[ebp]
  00070	e8 00 00 00 00	 call	 ??0sMesh@@QAE@XZ	; sMesh::sMesh
  00075	89 45 84	 mov	 DWORD PTR tv75[ebp], eax
  00078	eb 07		 jmp	 SHORT $LN53@ConstructM@2
$LN52@ConstructM@2:
  0007a	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN53@ConstructM@2:
  00081	8b 45 84	 mov	 eax, DWORD PTR tv75[ebp]
  00084	89 45 88	 mov	 DWORD PTR $T58089[ebp], eax
  00087	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00091	8b 55 88	 mov	 edx, DWORD PTR $T58089[ebp]
  00094	89 11		 mov	 DWORD PTR [ecx], edx
$LN48@ConstructM@2:

; 1516 : 	}
; 1517 : 	while ( dwCode > 0 )

  00096	83 7d f0 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  0009a	0f 86 1d 06 00
	00		 jbe	 $LN47@ConstructM@2

; 1518 : 	{
; 1519 : 		switch ( dwCode )

  000a0	8b 45 f0	 mov	 eax, DWORD PTR _dwCode$[ebp]
  000a3	89 45 84	 mov	 DWORD PTR tv76[ebp], eax
  000a6	8b 4d 84	 mov	 ecx, DWORD PTR tv76[ebp]
  000a9	83 e9 6f	 sub	 ecx, 111		; 0000006fH
  000ac	89 4d 84	 mov	 DWORD PTR tv76[ebp], ecx
  000af	83 7d 84 37	 cmp	 DWORD PTR tv76[ebp], 55	; 00000037H
  000b3	0f 87 de 05 00
	00		 ja	 $LN1@ConstructM@2
  000b9	8b 55 84	 mov	 edx, DWORD PTR tv76[ebp]
  000bc	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN61@ConstructM@2[edx]
  000c3	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN63@ConstructM@2[eax*4]
$LN44@ConstructM@2:

; 1520 : 		{
; 1521 : 			// Read vertex information
; 1522 : 			case DBOBLOCK_MESH_FVF :			ReadDWORD      ( &(*ppMesh)->dwFVF,				ppBlock );													break;

  000ca	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  000d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d3	83 c2 04	 add	 edx, 4
  000d6	52		 push	 edx
  000d7	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  000dc	83 c4 08	 add	 esp, 8
  000df	e9 c0 05 00 00	 jmp	 $LN45@ConstructM@2
$LN43@ConstructM@2:

; 1523 : 			case DBOBLOCK_MESH_FVFSIZE :		ReadDWORD      ( &(*ppMesh)->dwFVFSize,			ppBlock );													break;

  000e4	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  000eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ed	83 c2 08	 add	 edx, 8
  000f0	52		 push	 edx
  000f1	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  000f6	83 c4 08	 add	 esp, 8
  000f9	e9 a6 05 00 00	 jmp	 $LN45@ConstructM@2
$LN42@ConstructM@2:

; 1524 : 			case DBOBLOCK_MESH_VERTEXCOUNT :	ReadDWORD      ( &(*ppMesh)->dwVertexCount,		ppBlock );													break;

  000fe	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00101	50		 push	 eax
  00102	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00105	8b 11		 mov	 edx, DWORD PTR [ecx]
  00107	83 c2 1c	 add	 edx, 28			; 0000001cH
  0010a	52		 push	 edx
  0010b	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00110	83 c4 08	 add	 esp, 8
  00113	e9 8c 05 00 00	 jmp	 $LN45@ConstructM@2
$LN41@ConstructM@2:

; 1525 : 			case DBOBLOCK_MESH_INDEXCOUNT :		ReadDWORD      ( &(*ppMesh)->dwIndexCount,		ppBlock );													break;

  00118	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0011b	50		 push	 eax
  0011c	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0011f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00121	83 c2 20	 add	 edx, 32			; 00000020H
  00124	52		 push	 edx
  00125	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  0012a	83 c4 08	 add	 esp, 8
  0012d	e9 72 05 00 00	 jmp	 $LN45@ConstructM@2
$LN40@ConstructM@2:

; 1526 : 			case DBOBLOCK_MESH_VERTEXDEC :		ReadIntoMemory ( (BYTE*)(*ppMesh)->pVertexDeclaration, sizeof((*ppMesh)->pVertexDeclaration), ppBlock );	break;

  00132	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00135	50		 push	 eax
  00136	68 08 02 00 00	 push	 520			; 00000208H
  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0013e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00140	83 c2 44	 add	 edx, 68			; 00000044H
  00143	52		 push	 edx
  00144	e8 00 00 00 00	 call	 ?ReadIntoMemory@@YA_NPAEKPAPAD@Z ; ReadIntoMemory
  00149	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014c	e9 53 05 00 00	 jmp	 $LN45@ConstructM@2
$LN39@ConstructM@2:

; 1527 : 
; 1528 : 			case DBOBLOCK_MESH_SUBFRAMES :
; 1529 : 			{
; 1530 : 				ReadDWORD ( (DWORD*)&(*ppMesh)->dwSubMeshListCount,	ppBlock );

  00151	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00154	50		 push	 eax
  00155	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00158	8b 11		 mov	 edx, DWORD PTR [ecx]
  0015a	81 c2 50 04 00
	00		 add	 edx, 1104		; 00000450H
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00166	83 c4 08	 add	 esp, 8

; 1531 : 
; 1532 : 				if ( ( *ppMesh )->dwSubMeshListCount > 0 )

  00169	8b 45 08	 mov	 eax, DWORD PTR _ppMesh$[ebp]
  0016c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016e	83 b9 50 04 00
	00 00		 cmp	 DWORD PTR [ecx+1104], 0
  00175	0f 86 35 01 00
	00		 jbe	 $LN38@ConstructM@2

; 1533 : 				{
; 1534 : 					( *ppMesh )->pSubFrameList = new sFrame [ ( *ppMesh )->dwSubMeshListCount ];

  0017b	8b 45 08	 mov	 eax, DWORD PTR _ppMesh$[ebp]
  0017e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00180	8b 91 50 04 00
	00		 mov	 edx, DWORD PTR [ecx+1104]
  00186	89 55 90	 mov	 DWORD PTR $T58093[ebp], edx
  00189	33 c9		 xor	 ecx, ecx
  0018b	8b 45 90	 mov	 eax, DWORD PTR $T58093[ebp]
  0018e	ba 24 03 00 00	 mov	 edx, 804		; 00000324H
  00193	f7 e2		 mul	 edx
  00195	0f 90 c1	 seto	 cl
  00198	f7 d9		 neg	 ecx
  0019a	0b c8		 or	 ecx, eax
  0019c	33 c0		 xor	 eax, eax
  0019e	83 c1 04	 add	 ecx, 4
  001a1	0f 92 c0	 setb	 al
  001a4	f7 d8		 neg	 eax
  001a6	0b c1		 or	 eax, ecx
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001ae	83 c4 04	 add	 esp, 4
  001b1	89 45 98	 mov	 DWORD PTR $T58095[ebp], eax
  001b4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  001bb	83 7d 98 00	 cmp	 DWORD PTR $T58095[ebp], 0
  001bf	74 32		 je	 SHORT $LN54@ConstructM@2
  001c1	8b 4d 98	 mov	 ecx, DWORD PTR $T58095[ebp]
  001c4	8b 55 90	 mov	 edx, DWORD PTR $T58093[ebp]
  001c7	89 11		 mov	 DWORD PTR [ecx], edx
  001c9	68 00 00 00 00	 push	 OFFSET ??1sFrame@@QAE@XZ ; sFrame::~sFrame
  001ce	68 00 00 00 00	 push	 OFFSET ??0sFrame@@QAE@XZ ; sFrame::sFrame
  001d3	8b 45 90	 mov	 eax, DWORD PTR $T58093[ebp]
  001d6	50		 push	 eax
  001d7	68 24 03 00 00	 push	 804			; 00000324H
  001dc	8b 4d 98	 mov	 ecx, DWORD PTR $T58095[ebp]
  001df	83 c1 04	 add	 ecx, 4
  001e2	51		 push	 ecx
  001e3	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  001e8	8b 55 98	 mov	 edx, DWORD PTR $T58095[ebp]
  001eb	83 c2 04	 add	 edx, 4
  001ee	89 55 84	 mov	 DWORD PTR tv190[ebp], edx
  001f1	eb 07		 jmp	 SHORT $LN55@ConstructM@2
$LN54@ConstructM@2:
  001f3	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv190[ebp], 0
$LN55@ConstructM@2:
  001fa	8b 45 84	 mov	 eax, DWORD PTR tv190[ebp]
  001fd	89 45 94	 mov	 DWORD PTR $T58094[ebp], eax
  00200	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00207	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0020a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0020c	8b 45 94	 mov	 eax, DWORD PTR $T58094[ebp]
  0020f	89 82 4c 04 00
	00		 mov	 DWORD PTR [edx+1100], eax

; 1535 : 
; 1536 : 					for ( DWORD dwSubMesh = 0; dwSubMesh < ( *ppMesh )->dwSubMeshListCount; dwSubMesh++ )

  00215	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _dwSubMesh$57506[ebp], 0
  0021c	eb 09		 jmp	 SHORT $LN37@ConstructM@2
$LN36@ConstructM@2:
  0021e	8b 45 e8	 mov	 eax, DWORD PTR _dwSubMesh$57506[ebp]
  00221	83 c0 01	 add	 eax, 1
  00224	89 45 e8	 mov	 DWORD PTR _dwSubMesh$57506[ebp], eax
$LN37@ConstructM@2:
  00227	8b 45 08	 mov	 eax, DWORD PTR _ppMesh$[ebp]
  0022a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022c	8b 55 e8	 mov	 edx, DWORD PTR _dwSubMesh$57506[ebp]
  0022f	3b 91 50 04 00
	00		 cmp	 edx, DWORD PTR [ecx+1104]
  00235	73 79		 jae	 SHORT $LN38@ConstructM@2

; 1537 : 					{
; 1538 : 						sFrame* pFrames = new sFrame;

  00237	68 24 03 00 00	 push	 804			; 00000324H
  0023c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00241	83 c4 04	 add	 esp, 4
  00244	89 45 a0	 mov	 DWORD PTR $T58099[ebp], eax
  00247	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0024e	83 7d a0 00	 cmp	 DWORD PTR $T58099[ebp], 0
  00252	74 0d		 je	 SHORT $LN56@ConstructM@2
  00254	8b 4d a0	 mov	 ecx, DWORD PTR $T58099[ebp]
  00257	e8 00 00 00 00	 call	 ??0sFrame@@QAE@XZ	; sFrame::sFrame
  0025c	89 45 84	 mov	 DWORD PTR tv204[ebp], eax
  0025f	eb 07		 jmp	 SHORT $LN57@ConstructM@2
$LN56@ConstructM@2:
  00261	c7 45 84 00 00
	00 00		 mov	 DWORD PTR tv204[ebp], 0
$LN57@ConstructM@2:
  00268	8b 45 84	 mov	 eax, DWORD PTR tv204[ebp]
  0026b	89 45 9c	 mov	 DWORD PTR $T58098[ebp], eax
  0026e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00275	8b 4d 9c	 mov	 ecx, DWORD PTR $T58098[ebp]
  00278	89 4d e4	 mov	 DWORD PTR _pFrames$57510[ebp], ecx

; 1539 : 
; 1540 : 						ConstructFrame ( &pFrames, ppBlock );

  0027b	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0027e	50		 push	 eax
  0027f	8d 4d e4	 lea	 ecx, DWORD PTR _pFrames$57510[ebp]
  00282	51		 push	 ecx
  00283	e8 00 00 00 00	 call	 ?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z ; ConstructFrame
  00288	83 c4 08	 add	 esp, 8

; 1541 : 
; 1542 : 						( *ppMesh )->pSubFrameList [ dwSubMesh ] = *pFrames;

  0028b	8b 75 e4	 mov	 esi, DWORD PTR _pFrames$57510[ebp]
  0028e	8b 45 08	 mov	 eax, DWORD PTR _ppMesh$[ebp]
  00291	8b 08		 mov	 ecx, DWORD PTR [eax]
  00293	8b 55 e8	 mov	 edx, DWORD PTR _dwSubMesh$57506[ebp]
  00296	69 d2 24 03 00
	00		 imul	 edx, 804		; 00000324H
  0029c	8b b9 4c 04 00
	00		 mov	 edi, DWORD PTR [ecx+1100]
  002a2	03 fa		 add	 edi, edx
  002a4	b9 c9 00 00 00	 mov	 ecx, 201		; 000000c9H
  002a9	f3 a5		 rep movsd

; 1543 : 					}

  002ab	e9 6e ff ff ff	 jmp	 $LN36@ConstructM@2
$LN38@ConstructM@2:

; 1544 : 				}
; 1545 : 			}
; 1546 : 			break;

  002b0	e9 ef 03 00 00	 jmp	 $LN45@ConstructM@2
$LN34@ConstructM@2:

; 1547 : 			
; 1548 : 			case DBOBLOCK_MESH_VERTEXDATA :		ReadVertexData ( &(*ppMesh)->pVertexData, (*ppMesh)->dwFVFSize, (*ppMesh)->dwVertexCount, ppBlock );	break;

  002b5	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  002b8	50		 push	 eax
  002b9	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  002bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  002be	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  002c1	50		 push	 eax
  002c2	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  002c5	8b 11		 mov	 edx, DWORD PTR [ecx]
  002c7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002ca	50		 push	 eax
  002cb	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  002ce	8b 11		 mov	 edx, DWORD PTR [ecx]
  002d0	83 c2 14	 add	 edx, 20			; 00000014H
  002d3	52		 push	 edx
  002d4	e8 00 00 00 00	 call	 ?ReadVertexData@@YA_NPAPAEKKPAPAD@Z ; ReadVertexData
  002d9	83 c4 10	 add	 esp, 16			; 00000010H
  002dc	e9 c3 03 00 00	 jmp	 $LN45@ConstructM@2
$LN33@ConstructM@2:

; 1549 : 			
; 1550 : 			case DBOBLOCK_MESH_INDEXDATA :
; 1551 : 			{
; 1552 : 				ReadIndexData ( &(*ppMesh)->pIndices, (*ppMesh)->dwIndexCount, ppBlock );

  002e1	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  002e4	50		 push	 eax
  002e5	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  002e8	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ea	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  002ed	50		 push	 eax
  002ee	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  002f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  002f3	83 c2 18	 add	 edx, 24			; 00000018H
  002f6	52		 push	 edx
  002f7	e8 00 00 00 00	 call	 ?ReadIndexData@@YA_NPAPAGKPAPAD@Z ; ReadIndexData
  002fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1553 : 
; 1554 : 				if ( ( *ppMesh )->dwIndexCount == 0 )

  002ff	8b 45 08	 mov	 eax, DWORD PTR _ppMesh$[ebp]
  00302	8b 08		 mov	 ecx, DWORD PTR [eax]
  00304	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00308	75 0d		 jne	 SHORT $LN32@ConstructM@2

; 1555 : 					*ppBlock += dwCodeSize;

  0030a	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0030d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0030f	03 4d ec	 add	 ecx, DWORD PTR _dwCodeSize$[ebp]
  00312	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00315	89 0a		 mov	 DWORD PTR [edx], ecx
$LN32@ConstructM@2:

; 1556 : 			}
; 1557 : 			break;

  00317	e9 88 03 00 00	 jmp	 $LN45@ConstructM@2
$LN31@ConstructM@2:

; 1558 : 
; 1559 : 			case DBOBLOCK_MESH_PRIMTYPE :		ReadDWORD              ( (DWORD*)&(*ppMesh)->iPrimitiveType, ppBlock );								break;

  0031c	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0031f	50		 push	 eax
  00320	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00323	8b 11		 mov	 edx, DWORD PTR [ecx]
  00325	83 c2 24	 add	 edx, 36			; 00000024H
  00328	52		 push	 edx
  00329	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  0032e	83 c4 08	 add	 esp, 8
  00331	e9 6e 03 00 00	 jmp	 $LN45@ConstructM@2
$LN30@ConstructM@2:

; 1560 : 			case DBOBLOCK_MESH_DRAWVERTCOUNT :	ReadDWORD              ( (DWORD*)&(*ppMesh)->iDrawVertexCount, ppBlock );							break;

  00336	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00339	50		 push	 eax
  0033a	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0033d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0033f	83 c2 28	 add	 edx, 40			; 00000028H
  00342	52		 push	 edx
  00343	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00348	83 c4 08	 add	 esp, 8
  0034b	e9 54 03 00 00	 jmp	 $LN45@ConstructM@2
$LN29@ConstructM@2:

; 1561 : 			case DBOBLOCK_MESH_DRAWPRIMCOUNT :	ReadDWORD              ( (DWORD*)&(*ppMesh)->iDrawPrimitives, ppBlock );							break;

  00350	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00353	50		 push	 eax
  00354	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00357	8b 11		 mov	 edx, DWORD PTR [ecx]
  00359	83 c2 2c	 add	 edx, 44			; 0000002cH
  0035c	52		 push	 edx
  0035d	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00362	83 c4 08	 add	 esp, 8
  00365	e9 3a 03 00 00	 jmp	 $LN45@ConstructM@2
$LN28@ConstructM@2:

; 1562 : 			case DBOBLOCK_MESH_BONECOUNT :		ReadDWORD              ( &(*ppMesh)->dwBoneCount, ppBlock );										break;

  0036a	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0036d	50		 push	 eax
  0036e	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00371	8b 11		 mov	 edx, DWORD PTR [ecx]
  00373	81 c2 6c 03 00
	00		 add	 edx, 876		; 0000036cH
  00379	52		 push	 edx
  0037a	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  0037f	83 c4 08	 add	 esp, 8
  00382	e9 1d 03 00 00	 jmp	 $LN45@ConstructM@2
$LN27@ConstructM@2:

; 1563 : 			case DBOBLOCK_MESH_BONESDATA : 		ConstructBones         ( &(*ppMesh)->pBones, (*ppMesh)->dwBoneCount, ppBlock );						break;

  00387	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0038a	50		 push	 eax
  0038b	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0038e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00390	8b 82 6c 03 00
	00		 mov	 eax, DWORD PTR [edx+876]
  00396	50		 push	 eax
  00397	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0039a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0039c	81 c2 68 03 00
	00		 add	 edx, 872		; 00000368H
  003a2	52		 push	 edx
  003a3	e8 00 00 00 00	 call	 ?ConstructBones@@YA_NPAPAUsBone@@KPAPAD@Z ; ConstructBones
  003a8	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ab	e9 f4 02 00 00	 jmp	 $LN45@ConstructM@2
$LN26@ConstructM@2:

; 1564 : 			case DBOBLOCK_MESH_USEMATERIAL : 	ReadBOOL               ( &(*ppMesh)->bUsesMaterial, ppBlock );										break;

  003b0	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  003b3	50		 push	 eax
  003b4	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  003b7	8b 11		 mov	 edx, DWORD PTR [ecx]
  003b9	81 c2 78 03 00
	00		 add	 edx, 888		; 00000378H
  003bf	52		 push	 edx
  003c0	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  003c5	83 c4 08	 add	 esp, 8
  003c8	e9 d7 02 00 00	 jmp	 $LN45@ConstructM@2
$LN25@ConstructM@2:

; 1565 : 			case DBOBLOCK_MESH_MATERIAL : 		ReadMaterial           ( &(*ppMesh)->mMaterial,	ppBlock );											break;

  003cd	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  003d0	50		 push	 eax
  003d1	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  003d4	8b 11		 mov	 edx, DWORD PTR [ecx]
  003d6	81 c2 94 03 00
	00		 add	 edx, 916		; 00000394H
  003dc	52		 push	 edx
  003dd	e8 00 00 00 00	 call	 ?ReadMaterial@@YA_NPAU_D3DMATERIAL9@@PAPAD@Z ; ReadMaterial
  003e2	83 c4 08	 add	 esp, 8
  003e5	e9 ba 02 00 00	 jmp	 $LN45@ConstructM@2
$LN24@ConstructM@2:

; 1566 : 			case DBOBLOCK_MESH_TEXTURECOUNT : 	ReadDWORD              ( &(*ppMesh)->dwTextureCount, ppBlock );										break;

  003ea	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  003ed	50		 push	 eax
  003ee	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  003f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f3	81 c2 7c 03 00
	00		 add	 edx, 892		; 0000037cH
  003f9	52		 push	 edx
  003fa	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  003ff	83 c4 08	 add	 esp, 8
  00402	e9 9d 02 00 00	 jmp	 $LN45@ConstructM@2
$LN23@ConstructM@2:

; 1567 : 			case DBOBLOCK_MESH_TEXTURES :		ConstructTexture       ( &(*ppMesh)->pTextures,	(*ppMesh)->dwTextureCount, ppBlock );				break;

  00407	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0040a	50		 push	 eax
  0040b	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0040e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00410	8b 82 7c 03 00
	00		 mov	 eax, DWORD PTR [edx+892]
  00416	50		 push	 eax
  00417	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0041a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0041c	81 c2 88 03 00
	00		 add	 edx, 904		; 00000388H
  00422	52		 push	 edx
  00423	e8 00 00 00 00	 call	 ?ConstructTexture@@YA_NPAPAUsTexture@@KPAPAD@Z ; ConstructTexture
  00428	83 c4 0c	 add	 esp, 12			; 0000000cH
  0042b	e9 74 02 00 00	 jmp	 $LN45@ConstructM@2
$LN22@ConstructM@2:

; 1568 : 			case DBOBLOCK_MESH_USEMULTIMAT : 	ReadBOOL               ( &(*ppMesh)->bUseMultiMaterial,	ppBlock );									break;

  00430	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00433	50		 push	 eax
  00434	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00437	8b 11		 mov	 edx, DWORD PTR [ecx]
  00439	81 c2 7a 03 00
	00		 add	 edx, 890		; 0000037aH
  0043f	52		 push	 edx
  00440	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  00445	83 c4 08	 add	 esp, 8
  00448	e9 57 02 00 00	 jmp	 $LN45@ConstructM@2
$LN21@ConstructM@2:

; 1569 : 			case DBOBLOCK_MESH_MULTIMATCOUNT : 	ReadDWORD              ( &(*ppMesh)->dwMultiMaterialCount, ppBlock );								break;

  0044d	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00450	50		 push	 eax
  00451	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00454	8b 11		 mov	 edx, DWORD PTR [ecx]
  00456	81 c2 80 03 00
	00		 add	 edx, 896		; 00000380H
  0045c	52		 push	 edx
  0045d	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00462	83 c4 08	 add	 esp, 8
  00465	e9 3a 02 00 00	 jmp	 $LN45@ConstructM@2
$LN20@ConstructM@2:

; 1570 : 			case DBOBLOCK_MESH_MULTIMAT	: 		ConstructMultiMaterial ( &(*ppMesh)->pMultiMaterial, (*ppMesh)->dwMultiMaterialCount, ppBlock );	break;

  0046a	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0046d	50		 push	 eax
  0046e	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00471	8b 11		 mov	 edx, DWORD PTR [ecx]
  00473	8b 82 80 03 00
	00		 mov	 eax, DWORD PTR [edx+896]
  00479	50		 push	 eax
  0047a	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0047d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0047f	81 c2 8c 03 00
	00		 add	 edx, 908		; 0000038cH
  00485	52		 push	 edx
  00486	e8 00 00 00 00	 call	 ?ConstructMultiMaterial@@YA_NPAPAUsMultiMaterial@@KPAPAD@Z ; ConstructMultiMaterial
  0048b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0048e	e9 11 02 00 00	 jmp	 $LN45@ConstructM@2
$LN19@ConstructM@2:

; 1571 : 			case DBOBLOCK_MESH_WIREFRAME :		ReadBOOL               ( &(*ppMesh)->bWireframe, ppBlock );											break;

  00493	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00496	50		 push	 eax
  00497	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0049a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0049c	81 c2 0c 04 00
	00		 add	 edx, 1036		; 0000040cH
  004a2	52		 push	 edx
  004a3	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  004a8	83 c4 08	 add	 esp, 8
  004ab	e9 f4 01 00 00	 jmp	 $LN45@ConstructM@2
$LN18@ConstructM@2:

; 1572 : 			case DBOBLOCK_MESH_LIGHT :			ReadBOOL               ( &(*ppMesh)->bLight, ppBlock );												break;

  004b0	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  004b3	50		 push	 eax
  004b4	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  004b7	8b 11		 mov	 edx, DWORD PTR [ecx]
  004b9	81 c2 0d 04 00
	00		 add	 edx, 1037		; 0000040dH
  004bf	52		 push	 edx
  004c0	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  004c5	83 c4 08	 add	 esp, 8
  004c8	e9 d7 01 00 00	 jmp	 $LN45@ConstructM@2
$LN17@ConstructM@2:

; 1573 : 			case DBOBLOCK_MESH_CULL :			ReadBOOL               ( &(*ppMesh)->bCull,	ppBlock );												break;

  004cd	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  004d0	50		 push	 eax
  004d1	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  004d4	8b 11		 mov	 edx, DWORD PTR [ecx]
  004d6	81 c2 0e 04 00
	00		 add	 edx, 1038		; 0000040eH
  004dc	52		 push	 edx
  004dd	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  004e2	83 c4 08	 add	 esp, 8
  004e5	e9 ba 01 00 00	 jmp	 $LN45@ConstructM@2
$LN16@ConstructM@2:

; 1574 : 			case DBOBLOCK_MESH_FOG :			ReadBOOL               ( &(*ppMesh)->bFog, ppBlock );												break;

  004ea	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  004ed	50		 push	 eax
  004ee	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  004f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  004f3	81 c2 0f 04 00
	00		 add	 edx, 1039		; 0000040fH
  004f9	52		 push	 edx
  004fa	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  004ff	83 c4 08	 add	 esp, 8
  00502	e9 9d 01 00 00	 jmp	 $LN45@ConstructM@2
$LN15@ConstructM@2:

; 1575 : 			case DBOBLOCK_MESH_AMBIENT :		ReadBOOL               ( &(*ppMesh)->bAmbient, ppBlock );											break;

  00507	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0050a	50		 push	 eax
  0050b	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0050e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00510	81 c2 10 04 00
	00		 add	 edx, 1040		; 00000410H
  00516	52		 push	 edx
  00517	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  0051c	83 c4 08	 add	 esp, 8
  0051f	e9 80 01 00 00	 jmp	 $LN45@ConstructM@2
$LN14@ConstructM@2:

; 1576 : 			case DBOBLOCK_MESH_TRANSPARENCY :	ReadBOOL               ( &(*ppMesh)->bTransparency, ppBlock );										break;

  00524	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00527	50		 push	 eax
  00528	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0052b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0052d	81 c2 11 04 00
	00		 add	 edx, 1041		; 00000411H
  00533	52		 push	 edx
  00534	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  00539	83 c4 08	 add	 esp, 8
  0053c	e9 63 01 00 00	 jmp	 $LN45@ConstructM@2
$LN13@ConstructM@2:

; 1577 : 			case DBOBLOCK_MESH_GHOST :			ReadBOOL               ( &(*ppMesh)->bGhost, ppBlock );												break;

  00541	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00544	50		 push	 eax
  00545	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00548	8b 11		 mov	 edx, DWORD PTR [ecx]
  0054a	81 c2 18 04 00
	00		 add	 edx, 1048		; 00000418H
  00550	52		 push	 edx
  00551	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  00556	83 c4 08	 add	 esp, 8
  00559	e9 46 01 00 00	 jmp	 $LN45@ConstructM@2
$LN12@ConstructM@2:

; 1578 : 			case DBOBLOCK_MESH_GHOSTMODE :		ReadDWORD              ( (DWORD*)&(*ppMesh)->iGhostMode, ppBlock );									break;

  0055e	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00561	50		 push	 eax
  00562	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00565	8b 11		 mov	 edx, DWORD PTR [ecx]
  00567	81 c2 1c 04 00
	00		 add	 edx, 1052		; 0000041cH
  0056d	52		 push	 edx
  0056e	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00573	83 c4 08	 add	 esp, 8
  00576	e9 29 01 00 00	 jmp	 $LN45@ConstructM@2
$LN11@ConstructM@2:

; 1579 : 			case DBOBLOCK_MESH_VISIBLE :		ReadBOOL               ( &(*ppMesh)->bVisible, ppBlock );											break;

  0057b	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0057e	50		 push	 eax
  0057f	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00582	8b 11		 mov	 edx, DWORD PTR [ecx]
  00584	81 c2 19 04 00
	00		 add	 edx, 1049		; 00000419H
  0058a	52		 push	 edx
  0058b	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  00590	83 c4 08	 add	 esp, 8
  00593	e9 0c 01 00 00	 jmp	 $LN45@ConstructM@2
$LN10@ConstructM@2:

; 1580 : 			case DBOBLOCK_MESH_LINKED :			ReadBOOL               ( &(*ppMesh)->bLinked, ppBlock );											break;

  00598	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0059b	50		 push	 eax
  0059c	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0059f	8b 11		 mov	 edx, DWORD PTR [ecx]
  005a1	81 c2 70 04 00
	00		 add	 edx, 1136		; 00000470H
  005a7	52		 push	 edx
  005a8	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  005ad	83 c4 08	 add	 esp, 8
  005b0	e9 ef 00 00 00	 jmp	 $LN45@ConstructM@2
$LN9@ConstructM@2:

; 1581 : 
; 1582 : 			case DBOBLOCK_MESH_FXEFFECTNAME :	
; 1583 : 			{
; 1584 : 				// 250704 - create vertex effect object
; 1585 : 				ReadString ( (*ppMesh)->pEffectName,	ppBlock );

  005b5	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  005b8	50		 push	 eax
  005b9	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  005bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  005be	81 c2 5c 02 00
	00		 add	 edx, 604		; 0000025cH
  005c4	52		 push	 edx
  005c5	e8 00 00 00 00	 call	 ?ReadString@@YA_NPADPAPAD@Z ; ReadString
  005ca	83 c4 08	 add	 esp, 8

; 1586 : 				(*ppMesh)->bUseVertexShader = true;

  005cd	8b 45 08	 mov	 eax, DWORD PTR _ppMesh$[ebp]
  005d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  005d2	c6 41 40 01	 mov	 BYTE PTR [ecx+64], 1

; 1587 : 				break;

  005d6	e9 c9 00 00 00	 jmp	 $LN45@ConstructM@2
$LN8@ConstructM@2:

; 1588 : 			}
; 1589 : 
; 1590 : 			case DBOBLOCK_MESH_ARBITARYVALUE :	
; 1591 : 			{
; 1592 : 				// 190804 - retain this value
; 1593 : 				ReadDWORD              ( (DWORD*)&(*ppMesh)->Collision.dwArbitaryValue, ppBlock );

  005db	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  005de	50		 push	 eax
  005df	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  005e2	8b 11		 mov	 edx, DWORD PTR [ecx]
  005e4	81 c2 d8 04 00
	00		 add	 edx, 1240		; 000004d8H
  005ea	52		 push	 edx
  005eb	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  005f0	83 c4 08	 add	 esp, 8

; 1594 : 				break;

  005f3	e9 ac 00 00 00	 jmp	 $LN45@ConstructM@2
$LN7@ConstructM@2:

; 1595 : 			}
; 1596 : 				
; 1597 : 			case DBOBLOCK_MESH_ZBIASFLAG :		ReadBOOL               ( &(*ppMesh)->bZBiasActive, ppBlock );										break;

  005f8	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  005fb	50		 push	 eax
  005fc	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  005ff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00601	81 c2 20 04 00
	00		 add	 edx, 1056		; 00000420H
  00607	52		 push	 edx
  00608	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  0060d	83 c4 08	 add	 esp, 8
  00610	e9 8f 00 00 00	 jmp	 $LN45@ConstructM@2
$LN6@ConstructM@2:

; 1598 : 			case DBOBLOCK_MESH_ZBIASSLOPE :		ReadDWORD              ( (DWORD*)&(*ppMesh)->fZBiasSlopeScale, ppBlock );							break;

  00615	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00618	50		 push	 eax
  00619	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0061c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0061e	81 c2 24 04 00
	00		 add	 edx, 1060		; 00000424H
  00624	52		 push	 edx
  00625	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  0062a	83 c4 08	 add	 esp, 8
  0062d	eb 75		 jmp	 SHORT $LN45@ConstructM@2
$LN5@ConstructM@2:

; 1599 : 			case DBOBLOCK_MESH_ZBIASDEPTH :		ReadDWORD              ( (DWORD*)&(*ppMesh)->fZBiasDepth, ppBlock );								break;

  0062f	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00632	50		 push	 eax
  00633	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00636	8b 11		 mov	 edx, DWORD PTR [ecx]
  00638	81 c2 28 04 00
	00		 add	 edx, 1064		; 00000428H
  0063e	52		 push	 edx
  0063f	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00644	83 c4 08	 add	 esp, 8
  00647	eb 5b		 jmp	 SHORT $LN45@ConstructM@2
$LN4@ConstructM@2:

; 1600 : 			case DBOBLOCK_MESH_ZREAD :			ReadBOOL               ( &(*ppMesh)->bZRead, ppBlock );												break;

  00649	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0064c	50		 push	 eax
  0064d	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00650	8b 11		 mov	 edx, DWORD PTR [ecx]
  00652	81 c2 1a 04 00
	00		 add	 edx, 1050		; 0000041aH
  00658	52		 push	 edx
  00659	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  0065e	83 c4 08	 add	 esp, 8
  00661	eb 41		 jmp	 SHORT $LN45@ConstructM@2
$LN3@ConstructM@2:

; 1601 : 			case DBOBLOCK_MESH_ZWRITE :			ReadBOOL               ( &(*ppMesh)->bZWrite, ppBlock );											break;

  00663	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00666	50		 push	 eax
  00667	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  0066a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0066c	81 c2 1b 04 00
	00		 add	 edx, 1051		; 0000041bH
  00672	52		 push	 edx
  00673	e8 00 00 00 00	 call	 ?ReadBOOL@@YA_NPA_NPAPAD@Z ; ReadBOOL
  00678	83 c4 08	 add	 esp, 8
  0067b	eb 27		 jmp	 SHORT $LN45@ConstructM@2
$LN2@ConstructM@2:

; 1602 : 
; 1603 : 			case DBOBLOCK_MESH_ALPHATESTVALUE : ReadDWORD              ( (DWORD*)&(*ppMesh)->dwAlphaTestValue, ppBlock );									break;

  0067d	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00680	50		 push	 eax
  00681	8b 4d 08	 mov	 ecx, DWORD PTR _ppMesh$[ebp]
  00684	8b 11		 mov	 edx, DWORD PTR [ecx]
  00686	81 c2 14 04 00
	00		 add	 edx, 1044		; 00000414H
  0068c	52		 push	 edx
  0068d	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00692	83 c4 08	 add	 esp, 8
  00695	eb 0d		 jmp	 SHORT $LN45@ConstructM@2
$LN1@ConstructM@2:

; 1604 : 
; 1605 : 			default : 
; 1606 : 				*ppBlock += dwCodeSize;

  00697	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0069a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0069c	03 4d ec	 add	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0069f	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  006a2	89 0a		 mov	 DWORD PTR [edx], ecx
$LN45@ConstructM@2:

; 1607 : 			break;
; 1608 : 		}
; 1609 : 
; 1610 : 		// get next code
; 1611 : 		ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  006a4	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  006a7	50		 push	 eax
  006a8	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  006ab	51		 push	 ecx
  006ac	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  006af	52		 push	 edx
  006b0	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  006b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1612 : 	}

  006b8	e9 d9 f9 ff ff	 jmp	 $LN48@ConstructM@2
$LN47@ConstructM@2:

; 1613 : 
; 1614 : 	// okay
; 1615 : 	return true;

  006bd	b0 01		 mov	 al, 1

; 1616 : }

  006bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  006c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  006c9	59		 pop	 ecx
  006ca	5f		 pop	 edi
  006cb	5e		 pop	 esi
  006cc	5b		 pop	 ebx
  006cd	8b e5		 mov	 esp, ebp
  006cf	5d		 pop	 ebp
  006d0	c3		 ret	 0
  006d1	8d 49 00	 npad	 3
$LN63@ConstructM@2:
  006d4	00 00 00 00	 DD	 $LN44@ConstructM@2
  006d8	00 00 00 00	 DD	 $LN43@ConstructM@2
  006dc	00 00 00 00	 DD	 $LN42@ConstructM@2
  006e0	00 00 00 00	 DD	 $LN41@ConstructM@2
  006e4	00 00 00 00	 DD	 $LN34@ConstructM@2
  006e8	00 00 00 00	 DD	 $LN33@ConstructM@2
  006ec	00 00 00 00	 DD	 $LN31@ConstructM@2
  006f0	00 00 00 00	 DD	 $LN30@ConstructM@2
  006f4	00 00 00 00	 DD	 $LN29@ConstructM@2
  006f8	00 00 00 00	 DD	 $LN40@ConstructM@2
  006fc	00 00 00 00	 DD	 $LN28@ConstructM@2
  00700	00 00 00 00	 DD	 $LN27@ConstructM@2
  00704	00 00 00 00	 DD	 $LN22@ConstructM@2
  00708	00 00 00 00	 DD	 $LN21@ConstructM@2
  0070c	00 00 00 00	 DD	 $LN26@ConstructM@2
  00710	00 00 00 00	 DD	 $LN25@ConstructM@2
  00714	00 00 00 00	 DD	 $LN24@ConstructM@2
  00718	00 00 00 00	 DD	 $LN23@ConstructM@2
  0071c	00 00 00 00	 DD	 $LN19@ConstructM@2
  00720	00 00 00 00	 DD	 $LN18@ConstructM@2
  00724	00 00 00 00	 DD	 $LN17@ConstructM@2
  00728	00 00 00 00	 DD	 $LN16@ConstructM@2
  0072c	00 00 00 00	 DD	 $LN15@ConstructM@2
  00730	00 00 00 00	 DD	 $LN14@ConstructM@2
  00734	00 00 00 00	 DD	 $LN13@ConstructM@2
  00738	00 00 00 00	 DD	 $LN12@ConstructM@2
  0073c	00 00 00 00	 DD	 $LN10@ConstructM@2
  00740	00 00 00 00	 DD	 $LN39@ConstructM@2
  00744	00 00 00 00	 DD	 $LN20@ConstructM@2
  00748	00 00 00 00	 DD	 $LN11@ConstructM@2
  0074c	00 00 00 00	 DD	 $LN9@ConstructM@2
  00750	00 00 00 00	 DD	 $LN8@ConstructM@2
  00754	00 00 00 00	 DD	 $LN7@ConstructM@2
  00758	00 00 00 00	 DD	 $LN6@ConstructM@2
  0075c	00 00 00 00	 DD	 $LN5@ConstructM@2
  00760	00 00 00 00	 DD	 $LN4@ConstructM@2
  00764	00 00 00 00	 DD	 $LN3@ConstructM@2
  00768	00 00 00 00	 DD	 $LN2@ConstructM@2
  0076c	00 00 00 00	 DD	 $LN1@ConstructM@2
$LN61@ConstructM@2:
  00770	00		 DB	 0
  00771	01		 DB	 1
  00772	02		 DB	 2
  00773	03		 DB	 3
  00774	04		 DB	 4
  00775	05		 DB	 5
  00776	06		 DB	 6
  00777	07		 DB	 7
  00778	08		 DB	 8
  00779	09		 DB	 9
  0077a	0a		 DB	 10			; 0000000aH
  0077b	0b		 DB	 11			; 0000000bH
  0077c	0c		 DB	 12			; 0000000cH
  0077d	0d		 DB	 13			; 0000000dH
  0077e	0e		 DB	 14			; 0000000eH
  0077f	0f		 DB	 15			; 0000000fH
  00780	10		 DB	 16			; 00000010H
  00781	11		 DB	 17			; 00000011H
  00782	12		 DB	 18			; 00000012H
  00783	13		 DB	 19			; 00000013H
  00784	14		 DB	 20			; 00000014H
  00785	15		 DB	 21			; 00000015H
  00786	16		 DB	 22			; 00000016H
  00787	17		 DB	 23			; 00000017H
  00788	18		 DB	 24			; 00000018H
  00789	19		 DB	 25			; 00000019H
  0078a	1a		 DB	 26			; 0000001aH
  0078b	1b		 DB	 27			; 0000001bH
  0078c	1c		 DB	 28			; 0000001cH
  0078d	1d		 DB	 29			; 0000001dH
  0078e	26		 DB	 38			; 00000026H
  0078f	26		 DB	 38			; 00000026H
  00790	26		 DB	 38			; 00000026H
  00791	26		 DB	 38			; 00000026H
  00792	26		 DB	 38			; 00000026H
  00793	26		 DB	 38			; 00000026H
  00794	26		 DB	 38			; 00000026H
  00795	26		 DB	 38			; 00000026H
  00796	26		 DB	 38			; 00000026H
  00797	26		 DB	 38			; 00000026H
  00798	26		 DB	 38			; 00000026H
  00799	26		 DB	 38			; 00000026H
  0079a	26		 DB	 38			; 00000026H
  0079b	1e		 DB	 30			; 0000001eH
  0079c	1f		 DB	 31			; 0000001fH
  0079d	20		 DB	 32			; 00000020H
  0079e	21		 DB	 33			; 00000021H
  0079f	22		 DB	 34			; 00000022H
  007a0	23		 DB	 35			; 00000023H
  007a1	24		 DB	 36			; 00000024H
  007a2	26		 DB	 38			; 00000026H
  007a3	26		 DB	 38			; 00000026H
  007a4	26		 DB	 38			; 00000026H
  007a5	26		 DB	 38			; 00000026H
  007a6	26		 DB	 38			; 00000026H
  007a7	25		 DB	 37			; 00000025H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z$0:
  00000	8b 45 8c	 mov	 eax, DWORD PTR $T58090[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__unwindfunclet$?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z$1:
  0000b	8b 45 98	 mov	 eax, DWORD PTR $T58095[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
__unwindfunclet$?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z$2:
  00016	8b 45 a0	 mov	 eax, DWORD PTR $T58099[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
  00020	c3		 ret	 0
__ehhandler$?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z:
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z ENDP		; ConstructMesh
PUBLIC	??_EsFrame@@QAEPAXI@Z				; sFrame::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EsFrame@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EsFrame@@QAEPAXI@Z PROC				; sFrame::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000f	83 e0 02	 and	 eax, 2
  00012	74 39		 je	 SHORT $LN3@vector@4
  00014	68 00 00 00 00	 push	 OFFSET ??1sFrame@@QAE@XZ ; sFrame::~sFrame
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001f	51		 push	 ecx
  00020	68 24 03 00 00	 push	 804			; 00000324H
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 0f		 je	 SHORT $LN2@vector@4
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 e8 04	 sub	 eax, 4
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
$LN2@vector@4:
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 e8 04	 sub	 eax, 4
  0004b	eb 1f		 jmp	 SHORT $LN4@vector@4
$LN3@vector@4:
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??1sFrame@@QAE@XZ	; sFrame::~sFrame
  00055	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00058	83 e0 01	 and	 eax, 1
  0005b	74 0c		 je	 SHORT $LN1@vector@4
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00066	83 c4 04	 add	 esp, 4
$LN1@vector@4:
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@vector@4:
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
??_EsFrame@@QAEPAXI@Z ENDP				; sFrame::`vector deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z$0
__ehfuncinfo$?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z
_TEXT	SEGMENT
tv76 = -96						; size = 4
tv75 = -96						; size = 4
$T58117 = -92						; size = 4
$T58118 = -88						; size = 4
_dwCodeSize$ = -20					; size = 4
_dwCode$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ppFrame$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z PROC		; ConstructFrame, COMDAT

; 1621 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1622 : 	// get code
; 1623 : 	DWORD dwCode = 0;

  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwCode$[ebp], 0

; 1624 : 	DWORD dwCodeSize = 0;

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwCodeSize$[ebp], 0

; 1625 : 	ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00036	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00039	50		 push	 eax
  0003a	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0003d	51		 push	 ecx
  0003e	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1626 : 	if ( dwCode > 0 )

  0004a	83 7d f0 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  0004e	76 46		 jbe	 SHORT $LN13@ConstructF

; 1627 : 	{
; 1628 : 		// create frame
; 1629 : 		(*ppFrame) = new sFrame;

  00050	68 24 03 00 00	 push	 804			; 00000324H
  00055	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005a	83 c4 04	 add	 esp, 4
  0005d	89 45 a8	 mov	 DWORD PTR $T58118[ebp], eax
  00060	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00067	83 7d a8 00	 cmp	 DWORD PTR $T58118[ebp], 0
  0006b	74 0d		 je	 SHORT $LN17@ConstructF
  0006d	8b 4d a8	 mov	 ecx, DWORD PTR $T58118[ebp]
  00070	e8 00 00 00 00	 call	 ??0sFrame@@QAE@XZ	; sFrame::sFrame
  00075	89 45 a0	 mov	 DWORD PTR tv75[ebp], eax
  00078	eb 07		 jmp	 SHORT $LN18@ConstructF
$LN17@ConstructF:
  0007a	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN18@ConstructF:
  00081	8b 45 a0	 mov	 eax, DWORD PTR tv75[ebp]
  00084	89 45 a4	 mov	 DWORD PTR $T58117[ebp], eax
  00087	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _ppFrame$[ebp]
  00091	8b 55 a4	 mov	 edx, DWORD PTR $T58117[ebp]
  00094	89 11		 mov	 DWORD PTR [ecx], edx
$LN13@ConstructF:

; 1630 : 	}
; 1631 : 
; 1632 : 	while ( dwCode > 0 )

  00096	83 7d f0 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  0009a	0f 86 1c 01 00
	00		 jbe	 $LN12@ConstructF

; 1633 : 	{
; 1634 : 		switch ( dwCode )

  000a0	8b 45 f0	 mov	 eax, DWORD PTR _dwCode$[ebp]
  000a3	89 45 a0	 mov	 DWORD PTR tv76[ebp], eax
  000a6	8b 4d a0	 mov	 ecx, DWORD PTR tv76[ebp]
  000a9	83 e9 65	 sub	 ecx, 101		; 00000065H
  000ac	89 4d a0	 mov	 DWORD PTR tv76[ebp], ecx
  000af	83 7d a0 07	 cmp	 DWORD PTR tv76[ebp], 7
  000b3	0f 87 dd 00 00
	00		 ja	 $LN1@ConstructF
  000b9	8b 55 a0	 mov	 edx, DWORD PTR tv76[ebp]
  000bc	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN21@ConstructF[edx*4]
$LN9@ConstructF:

; 1635 : 		{
; 1636 : 			case DBOBLOCK_FRAME_NAME :     ReadString     ( (*ppFrame)->szName, ppBlock );			break;

  000c3	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000c6	50		 push	 eax
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _ppFrame$[ebp]
  000ca	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ?ReadString@@YA_NPADPAPAD@Z ; ReadString
  000d2	83 c4 08	 add	 esp, 8
  000d5	e9 c9 00 00 00	 jmp	 $LN10@ConstructF
$LN8@ConstructF:

; 1637 : 			case DBOBLOCK_FRAME_MATRIX :   ReadMatrix     ( &(*ppFrame)->matOriginal, ppBlock );	break;

  000da	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000dd	50		 push	 eax
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _ppFrame$[ebp]
  000e1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e3	81 c2 10 01 00
	00		 add	 edx, 272		; 00000110H
  000e9	52		 push	 edx
  000ea	e8 00 00 00 00	 call	 ?ReadMatrix@@YA_NPAUD3DXMATRIX@@PAPAD@Z ; ReadMatrix
  000ef	83 c4 08	 add	 esp, 8
  000f2	e9 ac 00 00 00	 jmp	 $LN10@ConstructF
$LN7@ConstructF:

; 1638 : 			case DBOBLOCK_FRAME_MESH :     ConstructMesh  ( &(*ppFrame)->pMesh, ppBlock );			break;

  000f7	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000fa	50		 push	 eax
  000fb	8b 4d 08	 mov	 ecx, DWORD PTR _ppFrame$[ebp]
  000fe	8b 11		 mov	 edx, DWORD PTR [ecx]
  00100	81 c2 f8 02 00
	00		 add	 edx, 760		; 000002f8H
  00106	52		 push	 edx
  00107	e8 00 00 00 00	 call	 ?ConstructMesh@@YA_NPAPAUsMesh@@PAPAD@Z ; ConstructMesh
  0010c	83 c4 08	 add	 esp, 8
  0010f	e9 8f 00 00 00	 jmp	 $LN10@ConstructF
$LN6@ConstructF:

; 1639 : 			case DBOBLOCK_FRAME_CHILD :    ConstructFrame ( &(*ppFrame)->pChild, ppBlock );			break;

  00114	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00117	50		 push	 eax
  00118	8b 4d 08	 mov	 ecx, DWORD PTR _ppFrame$[ebp]
  0011b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0011d	81 c2 08 01 00
	00		 add	 edx, 264		; 00000108H
  00123	52		 push	 edx
  00124	e8 00 00 00 00	 call	 ?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z ; ConstructFrame
  00129	83 c4 08	 add	 esp, 8
  0012c	eb 75		 jmp	 SHORT $LN10@ConstructF
$LN5@ConstructF:

; 1640 : 			case DBOBLOCK_FRAME_SIBLING :  ConstructFrame ( &(*ppFrame)->pSibling, ppBlock );		break;

  0012e	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00131	50		 push	 eax
  00132	8b 4d 08	 mov	 ecx, DWORD PTR _ppFrame$[ebp]
  00135	8b 11		 mov	 edx, DWORD PTR [ecx]
  00137	81 c2 0c 01 00
	00		 add	 edx, 268		; 0000010cH
  0013d	52		 push	 edx
  0013e	e8 00 00 00 00	 call	 ?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z ; ConstructFrame
  00143	83 c4 08	 add	 esp, 8
  00146	eb 5b		 jmp	 SHORT $LN10@ConstructF
$LN4@ConstructF:

; 1641 : 			case DBOBLOCK_FRAME_OFFSET :   ReadVector     ( &(*ppFrame)->vecOffset, ppBlock );		break;

  00148	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0014b	50		 push	 eax
  0014c	8b 4d 08	 mov	 ecx, DWORD PTR _ppFrame$[ebp]
  0014f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00151	81 c2 a0 02 00
	00		 add	 edx, 672		; 000002a0H
  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 ?ReadVector@@YA_NPAUD3DXVECTOR3@@PAPAD@Z ; ReadVector
  0015d	83 c4 08	 add	 esp, 8
  00160	eb 41		 jmp	 SHORT $LN10@ConstructF
$LN3@ConstructF:

; 1642 : 			case DBOBLOCK_FRAME_ROTATION : ReadVector     ( &(*ppFrame)->vecRotation, ppBlock );	break;

  00162	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00165	50		 push	 eax
  00166	8b 4d 08	 mov	 ecx, DWORD PTR _ppFrame$[ebp]
  00169	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016b	81 c2 b8 02 00
	00		 add	 edx, 696		; 000002b8H
  00171	52		 push	 edx
  00172	e8 00 00 00 00	 call	 ?ReadVector@@YA_NPAUD3DXVECTOR3@@PAPAD@Z ; ReadVector
  00177	83 c4 08	 add	 esp, 8
  0017a	eb 27		 jmp	 SHORT $LN10@ConstructF
$LN2@ConstructF:

; 1643 : 			case DBOBLOCK_FRAME_SCALE :    ReadVector     ( &(*ppFrame)->vecScale, ppBlock );		break;

  0017c	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0017f	50		 push	 eax
  00180	8b 4d 08	 mov	 ecx, DWORD PTR _ppFrame$[ebp]
  00183	8b 11		 mov	 edx, DWORD PTR [ecx]
  00185	81 c2 ac 02 00
	00		 add	 edx, 684		; 000002acH
  0018b	52		 push	 edx
  0018c	e8 00 00 00 00	 call	 ?ReadVector@@YA_NPAUD3DXVECTOR3@@PAPAD@Z ; ReadVector
  00191	83 c4 08	 add	 esp, 8
  00194	eb 0d		 jmp	 SHORT $LN10@ConstructF
$LN1@ConstructF:

; 1644 : 
; 1645 : 			default :
; 1646 : 				*ppBlock += dwCodeSize;

  00196	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00199	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019b	03 4d ec	 add	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0019e	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  001a1	89 0a		 mov	 DWORD PTR [edx], ecx
$LN10@ConstructF:

; 1647 : 			break;
; 1648 : 		}
; 1649 : 
; 1650 : 		// get next code
; 1651 : 		ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  001a3	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001a6	50		 push	 eax
  001a7	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  001aa	51		 push	 ecx
  001ab	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  001ae	52		 push	 edx
  001af	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  001b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1652 : 	}

  001b7	e9 da fe ff ff	 jmp	 $LN13@ConstructF
$LN12@ConstructF:

; 1653 : 
; 1654 : 	// okay
; 1655 : 	return true;

  001bc	b0 01		 mov	 al, 1

; 1656 : }

  001be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c8	59		 pop	 ecx
  001c9	5f		 pop	 edi
  001ca	5e		 pop	 esi
  001cb	5b		 pop	 ebx
  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c3		 ret	 0
$LN21@ConstructF:
  001d0	00 00 00 00	 DD	 $LN9@ConstructF
  001d4	00 00 00 00	 DD	 $LN8@ConstructF
  001d8	00 00 00 00	 DD	 $LN7@ConstructF
  001dc	00 00 00 00	 DD	 $LN6@ConstructF
  001e0	00 00 00 00	 DD	 $LN5@ConstructF
  001e4	00 00 00 00	 DD	 $LN4@ConstructF
  001e8	00 00 00 00	 DD	 $LN3@ConstructF
  001ec	00 00 00 00	 DD	 $LN2@ConstructF
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z$0:
  00000	8b 45 a8	 mov	 eax, DWORD PTR $T58118[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z ENDP		; ConstructFrame
PUBLIC	?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z ; ConstructAnimation
EXTRN	??0sAnimation@@QAE@XZ:PROC			; sAnimation::sAnimation
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z$0
__ehfuncinfo$?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z
_TEXT	SEGMENT
tv76 = -100						; size = 4
tv75 = -100						; size = 4
$T58131 = -96						; size = 4
$T58132 = -92						; size = 4
$T58135 = -88						; size = 4
_dwCodeSize$ = -20					; size = 4
_dwCode$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ppAnim$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z PROC	; ConstructAnimation, COMDAT

; 1659 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1660 : 	// get code
; 1661 : 	DWORD dwCode = 0;

  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwCode$[ebp], 0

; 1662 : 	DWORD dwCodeSize = 0;

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwCodeSize$[ebp], 0

; 1663 : 	ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00036	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00039	50		 push	 eax
  0003a	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0003d	51		 push	 ecx
  0003e	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1664 : 	if ( dwCode > 0 )

  0004a	83 7d f0 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  0004e	76 46		 jbe	 SHORT $LN21@ConstructA

; 1665 : 	{
; 1666 : 		// create animset
; 1667 : 		(*ppAnim) = new sAnimation;

  00050	68 68 01 00 00	 push	 360			; 00000168H
  00055	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005a	83 c4 04	 add	 esp, 4
  0005d	89 45 a4	 mov	 DWORD PTR $T58132[ebp], eax
  00060	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00067	83 7d a4 00	 cmp	 DWORD PTR $T58132[ebp], 0
  0006b	74 0d		 je	 SHORT $LN25@ConstructA
  0006d	8b 4d a4	 mov	 ecx, DWORD PTR $T58132[ebp]
  00070	e8 00 00 00 00	 call	 ??0sAnimation@@QAE@XZ	; sAnimation::sAnimation
  00075	89 45 9c	 mov	 DWORD PTR tv75[ebp], eax
  00078	eb 07		 jmp	 SHORT $LN26@ConstructA
$LN25@ConstructA:
  0007a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN26@ConstructA:
  00081	8b 45 9c	 mov	 eax, DWORD PTR tv75[ebp]
  00084	89 45 a0	 mov	 DWORD PTR $T58131[ebp], eax
  00087	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  00091	8b 55 a0	 mov	 edx, DWORD PTR $T58131[ebp]
  00094	89 11		 mov	 DWORD PTR [ecx], edx
$LN21@ConstructA:

; 1668 : 	}
; 1669 : 
; 1670 : 	while ( dwCode > 0 )

  00096	83 7d f0 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  0009a	0f 86 b2 02 00
	00		 jbe	 $LN20@ConstructA

; 1671 : 	{
; 1672 : 		switch ( dwCode )

  000a0	8b 45 f0	 mov	 eax, DWORD PTR _dwCode$[ebp]
  000a3	89 45 9c	 mov	 DWORD PTR tv76[ebp], eax
  000a6	8b 4d 9c	 mov	 ecx, DWORD PTR tv76[ebp]
  000a9	81 e9 d3 00 00
	00		 sub	 ecx, 211		; 000000d3H
  000af	89 4d 9c	 mov	 DWORD PTR tv76[ebp], ecx
  000b2	81 7d 9c c2 00
	00 00		 cmp	 DWORD PTR tv76[ebp], 194 ; 000000c2H
  000b9	0f 87 6d 02 00
	00		 ja	 $LN1@ConstructA
  000bf	8b 55 9c	 mov	 edx, DWORD PTR tv76[ebp]
  000c2	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN28@ConstructA[edx]
  000c9	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN30@ConstructA[eax*4]
$LN17@ConstructA:

; 1673 : 		{
; 1674 : 			case DBOBLOCK_ANIM_NAME : 				ReadString         ( (*ppAnim)->szName,	ppBlock );																		break;

  000d0	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000d3	50		 push	 eax
  000d4	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  000d7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d9	52		 push	 edx
  000da	e8 00 00 00 00	 call	 ?ReadString@@YA_NPADPAPAD@Z ; ReadString
  000df	83 c4 08	 add	 esp, 8
  000e2	e9 52 02 00 00	 jmp	 $LN18@ConstructA
$LN16@ConstructA:

; 1675 : 			case DBOBLOCK_ANIM_NUMPOSKEYS :			ReadDWORD          ( &(*ppAnim)->dwNumPositionKeys,	ppBlock );															break;

  000e7	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  000ee	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f0	81 c2 0c 01 00
	00		 add	 edx, 268		; 0000010cH
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  000fc	83 c4 08	 add	 esp, 8
  000ff	e9 35 02 00 00	 jmp	 $LN18@ConstructA
$LN15@ConstructA:

; 1676 : 			case DBOBLOCK_ANIM_POSDATA :			ReadMemory         ( (BYTE**)&(*ppAnim)->pPositionKeys,	sizeof(sPositionKey) * (*ppAnim)->dwNumPositionKeys, ppBlock );	break;

  00104	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00107	50		 push	 eax
  00108	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  0010b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010d	8b 82 0c 01 00
	00		 mov	 eax, DWORD PTR [edx+268]
  00113	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00116	50		 push	 eax
  00117	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  0011a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0011c	81 c2 1c 01 00
	00		 add	 edx, 284		; 0000011cH
  00122	52		 push	 edx
  00123	e8 00 00 00 00	 call	 ?ReadMemory@@YA_NPAPAEKPAPAD@Z ; ReadMemory
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012b	e9 09 02 00 00	 jmp	 $LN18@ConstructA
$LN14@ConstructA:

; 1677 : 			case DBOBLOCK_ANIM_NUMROTKEYS :			ReadDWORD          ( &(*ppAnim)->dwNumRotateKeys, ppBlock );															break;

  00130	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00133	50		 push	 eax
  00134	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  00137	8b 11		 mov	 edx, DWORD PTR [ecx]
  00139	81 c2 10 01 00
	00		 add	 edx, 272		; 00000110H
  0013f	52		 push	 edx
  00140	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00145	83 c4 08	 add	 esp, 8
  00148	e9 ec 01 00 00	 jmp	 $LN18@ConstructA
$LN13@ConstructA:

; 1678 : 			case DBOBLOCK_ANIM_ROTDATA :			ReadMemory         ( (BYTE**)&(*ppAnim)->pRotateKeys, sizeof(sRotateKey) * (*ppAnim)->dwNumRotateKeys, ppBlock );		break;

  0014d	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00150	50		 push	 eax
  00151	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  00154	8b 11		 mov	 edx, DWORD PTR [ecx]
  00156	8b 82 10 01 00
	00		 mov	 eax, DWORD PTR [edx+272]
  0015c	6b c0 14	 imul	 eax, 20			; 00000014H
  0015f	50		 push	 eax
  00160	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  00163	8b 11		 mov	 edx, DWORD PTR [ecx]
  00165	81 c2 20 01 00
	00		 add	 edx, 288		; 00000120H
  0016b	52		 push	 edx
  0016c	e8 00 00 00 00	 call	 ?ReadMemory@@YA_NPAPAEKPAPAD@Z ; ReadMemory
  00171	83 c4 0c	 add	 esp, 12			; 0000000cH
  00174	e9 c0 01 00 00	 jmp	 $LN18@ConstructA
$LN12@ConstructA:

; 1679 : 			case DBOBLOCK_ANIM_NUMSCALEKEYS :		ReadDWORD          ( &(*ppAnim)->dwNumScaleKeys, ppBlock );																break;

  00179	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0017c	50		 push	 eax
  0017d	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  00180	8b 11		 mov	 edx, DWORD PTR [ecx]
  00182	81 c2 14 01 00
	00		 add	 edx, 276		; 00000114H
  00188	52		 push	 edx
  00189	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  0018e	83 c4 08	 add	 esp, 8
  00191	e9 a3 01 00 00	 jmp	 $LN18@ConstructA
$LN11@ConstructA:

; 1680 : 			case DBOBLOCK_ANIM_SCALEDATA :			ReadMemory         ( (BYTE**)&(*ppAnim)->pScaleKeys, sizeof(sScaleKey) * (*ppAnim)->dwNumScaleKeys,	ppBlock );			break;

  00196	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00199	50		 push	 eax
  0019a	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  0019d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0019f	8b 82 14 01 00
	00		 mov	 eax, DWORD PTR [edx+276]
  001a5	6b c0 1c	 imul	 eax, 28			; 0000001cH
  001a8	50		 push	 eax
  001a9	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  001ac	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ae	81 c2 24 01 00
	00		 add	 edx, 292		; 00000124H
  001b4	52		 push	 edx
  001b5	e8 00 00 00 00	 call	 ?ReadMemory@@YA_NPAPAEKPAPAD@Z ; ReadMemory
  001ba	83 c4 0c	 add	 esp, 12			; 0000000cH
  001bd	e9 77 01 00 00	 jmp	 $LN18@ConstructA
$LN10@ConstructA:

; 1681 : 			case DBOBLOCK_ANIM_NUMMATRIXKEYS :		ReadDWORD          ( &(*ppAnim)->dwNumMatrixKeys, ppBlock );															break;

  001c2	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001c5	50		 push	 eax
  001c6	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  001c9	8b 11		 mov	 edx, DWORD PTR [ecx]
  001cb	81 c2 18 01 00
	00		 add	 edx, 280		; 00000118H
  001d1	52		 push	 edx
  001d2	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  001d7	83 c4 08	 add	 esp, 8
  001da	e9 5a 01 00 00	 jmp	 $LN18@ConstructA
$LN9@ConstructA:

; 1682 : 			case DBOBLOCK_ANIM_MATRIXDATA :			ReadMemory         ( (BYTE**)&(*ppAnim)->pMatrixKeys, sizeof(sMatrixKey) * (*ppAnim)->dwNumMatrixKeys, ppBlock );		break;

  001df	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001e2	50		 push	 eax
  001e3	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  001e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e8	8b 82 18 01 00
	00		 mov	 eax, DWORD PTR [edx+280]
  001ee	69 c0 84 00 00
	00		 imul	 eax, 132		; 00000084H
  001f4	50		 push	 eax
  001f5	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  001f8	8b 11		 mov	 edx, DWORD PTR [ecx]
  001fa	81 c2 28 01 00
	00		 add	 edx, 296		; 00000128H
  00200	52		 push	 edx
  00201	e8 00 00 00 00	 call	 ?ReadMemory@@YA_NPAPAEKPAPAD@Z ; ReadMemory
  00206	83 c4 0c	 add	 esp, 12			; 0000000cH
  00209	e9 2b 01 00 00	 jmp	 $LN18@ConstructA
$LN8@ConstructA:

; 1683 : 			case DBOBLOCK_FRAME_BONETYPE:			ReadDWORD          ( &(*ppAnim)->bBoneType,	ppBlock );																	break;

  0020e	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00211	50		 push	 eax
  00212	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  00215	8b 11		 mov	 edx, DWORD PTR [ecx]
  00217	81 c2 3c 01 00
	00		 add	 edx, 316		; 0000013cH
  0021d	52		 push	 edx
  0021e	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00223	83 c4 08	 add	 esp, 8
  00226	e9 0e 01 00 00	 jmp	 $LN18@ConstructA
$LN7@ConstructA:

; 1684 : 			case DBOBLOCK_FRAME_BONEOFFSETLISTSIZE: ReadDWORD          ( ( DWORD* ) &(*ppAnim)->iBoneOffsetListCount,	ppBlock );											break;

  0022b	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0022e	50		 push	 eax
  0022f	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  00232	8b 11		 mov	 edx, DWORD PTR [ecx]
  00234	81 c2 44 01 00
	00		 add	 edx, 324		; 00000144H
  0023a	52		 push	 edx
  0023b	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00240	83 c4 08	 add	 esp, 8
  00243	e9 f1 00 00 00	 jmp	 $LN18@ConstructA
$LN6@ConstructA:

; 1685 : 			case DBOBLOCK_FRAME_BONEOFFSETLIST:		ReadOffsetListData ( &(*ppAnim)->piBoneOffsetList, (*ppAnim)->iBoneOffsetListCount, ppBlock );							break;

  00248	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0024b	50		 push	 eax
  0024c	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  0024f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00251	8b 82 44 01 00
	00		 mov	 eax, DWORD PTR [edx+324]
  00257	50		 push	 eax
  00258	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  0025b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0025d	81 c2 40 01 00
	00		 add	 edx, 320		; 00000140H
  00263	52		 push	 edx
  00264	e8 00 00 00 00	 call	 ?ReadOffsetListData@@YA_NPAPAHKPAPAD@Z ; ReadOffsetListData
  00269	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026c	e9 c8 00 00 00	 jmp	 $LN18@ConstructA
$LN5@ConstructA:

; 1686 : 			case DBOBLOCK_FRAME_BONEMATRIXSIZEA:	ReadDWORD		   ( ( DWORD* ) &(*ppAnim)->iBoneFrameA, ppBlock );														break;

  00271	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00274	50		 push	 eax
  00275	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  00278	8b 11		 mov	 edx, DWORD PTR [ecx]
  0027a	81 c2 4c 01 00
	00		 add	 edx, 332		; 0000014cH
  00280	52		 push	 edx
  00281	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  00286	83 c4 08	 add	 esp, 8
  00289	e9 ab 00 00 00	 jmp	 $LN18@ConstructA
$LN4@ConstructA:

; 1687 : 			case DBOBLOCK_FRAME_BONEMATRIXSIZEB:	ReadDWORD		   ( ( DWORD* ) &(*ppAnim)->iBoneFrameB, ppBlock );														break;

  0028e	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00291	50		 push	 eax
  00292	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  00295	8b 11		 mov	 edx, DWORD PTR [ecx]
  00297	81 c2 50 01 00
	00		 add	 edx, 336		; 00000150H
  0029d	52		 push	 edx
  0029e	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  002a3	83 c4 08	 add	 esp, 8
  002a6	e9 8e 00 00 00	 jmp	 $LN18@ConstructA
$LN3@ConstructA:

; 1688 : 			case DBOBLOCK_ANIM_NEXT :				ConstructAnimation ( &(*ppAnim)->pNext, ppBlock );																		break;

  002ab	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  002ae	50		 push	 eax
  002af	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  002b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  002b4	81 c2 58 01 00
	00		 add	 edx, 344		; 00000158H
  002ba	52		 push	 edx
  002bb	e8 00 00 00 00	 call	 ?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z ; ConstructAnimation
  002c0	83 c4 08	 add	 esp, 8
  002c3	eb 74		 jmp	 SHORT $LN18@ConstructA
$LN2@ConstructA:

; 1689 : 
; 1690 : 			case DBOBLOCK_FRAME_BONEMATRIXLIST:
; 1691 : 				(*ppAnim)->ppBoneFrames = new D3DXMATRIX* [ (*ppAnim)->iBoneFrameA];

  002c5	8b 45 08	 mov	 eax, DWORD PTR _ppAnim$[ebp]
  002c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ca	33 db		 xor	 ebx, ebx
  002cc	8b 81 4c 01 00
	00		 mov	 eax, DWORD PTR [ecx+332]
  002d2	ba 04 00 00 00	 mov	 edx, 4
  002d7	f7 e2		 mul	 edx
  002d9	0f 90 c3	 seto	 bl
  002dc	f7 db		 neg	 ebx
  002de	0b d8		 or	 ebx, eax
  002e0	53		 push	 ebx
  002e1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002e6	83 c4 04	 add	 esp, 4
  002e9	89 45 a8	 mov	 DWORD PTR $T58135[ebp], eax
  002ec	8b 45 08	 mov	 eax, DWORD PTR _ppAnim$[ebp]
  002ef	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f1	8b 55 a8	 mov	 edx, DWORD PTR $T58135[ebp]
  002f4	89 91 48 01 00
	00		 mov	 DWORD PTR [ecx+328], edx

; 1692 : 				ReadBoneMatrices ( (*ppAnim)->ppBoneFrames, (*ppAnim)->iBoneFrameA, (*ppAnim)->iBoneFrameA, ppBlock );

  002fa	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  002fd	50		 push	 eax
  002fe	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  00301	8b 11		 mov	 edx, DWORD PTR [ecx]
  00303	8b 82 4c 01 00
	00		 mov	 eax, DWORD PTR [edx+332]
  00309	50		 push	 eax
  0030a	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  0030d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0030f	8b 82 4c 01 00
	00		 mov	 eax, DWORD PTR [edx+332]
  00315	50		 push	 eax
  00316	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnim$[ebp]
  00319	8b 11		 mov	 edx, DWORD PTR [ecx]
  0031b	8b 82 48 01 00
	00		 mov	 eax, DWORD PTR [edx+328]
  00321	50		 push	 eax
  00322	e8 00 00 00 00	 call	 ?ReadBoneMatrices@@YA_NPAPAUD3DXMATRIX@@KKPAPAD@Z ; ReadBoneMatrices
  00327	83 c4 10	 add	 esp, 16			; 00000010H

; 1693 : 			break;

  0032a	eb 0d		 jmp	 SHORT $LN18@ConstructA
$LN1@ConstructA:

; 1694 : 
; 1695 : 			default : 
; 1696 : 				*ppBlock += dwCodeSize;

  0032c	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0032f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00331	03 4d ec	 add	 ecx, DWORD PTR _dwCodeSize$[ebp]
  00334	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00337	89 0a		 mov	 DWORD PTR [edx], ecx
$LN18@ConstructA:

; 1697 : 			break;
; 1698 : 		}
; 1699 : 
; 1700 : 		// get next code
; 1701 : 		ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00339	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0033c	50		 push	 eax
  0033d	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  00340	51		 push	 ecx
  00341	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  00344	52		 push	 edx
  00345	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  0034a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1702 : 	}

  0034d	e9 44 fd ff ff	 jmp	 $LN21@ConstructA
$LN20@ConstructA:

; 1703 : 
; 1704 : 	// okay
; 1705 : 	return true;

  00352	b0 01		 mov	 al, 1

; 1706 : }

  00354	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00357	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0035e	59		 pop	 ecx
  0035f	5f		 pop	 edi
  00360	5e		 pop	 esi
  00361	5b		 pop	 ebx
  00362	8b e5		 mov	 esp, ebp
  00364	5d		 pop	 ebp
  00365	c3		 ret	 0
  00366	8b ff		 npad	 2
$LN30@ConstructA:
  00368	00 00 00 00	 DD	 $LN17@ConstructA
  0036c	00 00 00 00	 DD	 $LN16@ConstructA
  00370	00 00 00 00	 DD	 $LN15@ConstructA
  00374	00 00 00 00	 DD	 $LN14@ConstructA
  00378	00 00 00 00	 DD	 $LN13@ConstructA
  0037c	00 00 00 00	 DD	 $LN12@ConstructA
  00380	00 00 00 00	 DD	 $LN11@ConstructA
  00384	00 00 00 00	 DD	 $LN10@ConstructA
  00388	00 00 00 00	 DD	 $LN9@ConstructA
  0038c	00 00 00 00	 DD	 $LN3@ConstructA
  00390	00 00 00 00	 DD	 $LN8@ConstructA
  00394	00 00 00 00	 DD	 $LN6@ConstructA
  00398	00 00 00 00	 DD	 $LN7@ConstructA
  0039c	00 00 00 00	 DD	 $LN5@ConstructA
  003a0	00 00 00 00	 DD	 $LN4@ConstructA
  003a4	00 00 00 00	 DD	 $LN2@ConstructA
  003a8	00 00 00 00	 DD	 $LN1@ConstructA
$LN28@ConstructA:
  003ac	00		 DB	 0
  003ad	01		 DB	 1
  003ae	02		 DB	 2
  003af	03		 DB	 3
  003b0	04		 DB	 4
  003b1	05		 DB	 5
  003b2	06		 DB	 6
  003b3	07		 DB	 7
  003b4	08		 DB	 8
  003b5	09		 DB	 9
  003b6	10		 DB	 16			; 00000010H
  003b7	10		 DB	 16			; 00000010H
  003b8	10		 DB	 16			; 00000010H
  003b9	10		 DB	 16			; 00000010H
  003ba	10		 DB	 16			; 00000010H
  003bb	10		 DB	 16			; 00000010H
  003bc	10		 DB	 16			; 00000010H
  003bd	10		 DB	 16			; 00000010H
  003be	10		 DB	 16			; 00000010H
  003bf	10		 DB	 16			; 00000010H
  003c0	10		 DB	 16			; 00000010H
  003c1	10		 DB	 16			; 00000010H
  003c2	10		 DB	 16			; 00000010H
  003c3	10		 DB	 16			; 00000010H
  003c4	10		 DB	 16			; 00000010H
  003c5	10		 DB	 16			; 00000010H
  003c6	10		 DB	 16			; 00000010H
  003c7	10		 DB	 16			; 00000010H
  003c8	10		 DB	 16			; 00000010H
  003c9	10		 DB	 16			; 00000010H
  003ca	10		 DB	 16			; 00000010H
  003cb	10		 DB	 16			; 00000010H
  003cc	10		 DB	 16			; 00000010H
  003cd	10		 DB	 16			; 00000010H
  003ce	10		 DB	 16			; 00000010H
  003cf	10		 DB	 16			; 00000010H
  003d0	10		 DB	 16			; 00000010H
  003d1	10		 DB	 16			; 00000010H
  003d2	10		 DB	 16			; 00000010H
  003d3	10		 DB	 16			; 00000010H
  003d4	10		 DB	 16			; 00000010H
  003d5	10		 DB	 16			; 00000010H
  003d6	10		 DB	 16			; 00000010H
  003d7	10		 DB	 16			; 00000010H
  003d8	10		 DB	 16			; 00000010H
  003d9	10		 DB	 16			; 00000010H
  003da	10		 DB	 16			; 00000010H
  003db	10		 DB	 16			; 00000010H
  003dc	10		 DB	 16			; 00000010H
  003dd	10		 DB	 16			; 00000010H
  003de	10		 DB	 16			; 00000010H
  003df	10		 DB	 16			; 00000010H
  003e0	10		 DB	 16			; 00000010H
  003e1	10		 DB	 16			; 00000010H
  003e2	10		 DB	 16			; 00000010H
  003e3	10		 DB	 16			; 00000010H
  003e4	10		 DB	 16			; 00000010H
  003e5	10		 DB	 16			; 00000010H
  003e6	10		 DB	 16			; 00000010H
  003e7	10		 DB	 16			; 00000010H
  003e8	10		 DB	 16			; 00000010H
  003e9	10		 DB	 16			; 00000010H
  003ea	10		 DB	 16			; 00000010H
  003eb	10		 DB	 16			; 00000010H
  003ec	10		 DB	 16			; 00000010H
  003ed	10		 DB	 16			; 00000010H
  003ee	10		 DB	 16			; 00000010H
  003ef	10		 DB	 16			; 00000010H
  003f0	10		 DB	 16			; 00000010H
  003f1	10		 DB	 16			; 00000010H
  003f2	10		 DB	 16			; 00000010H
  003f3	10		 DB	 16			; 00000010H
  003f4	10		 DB	 16			; 00000010H
  003f5	10		 DB	 16			; 00000010H
  003f6	10		 DB	 16			; 00000010H
  003f7	10		 DB	 16			; 00000010H
  003f8	10		 DB	 16			; 00000010H
  003f9	10		 DB	 16			; 00000010H
  003fa	10		 DB	 16			; 00000010H
  003fb	10		 DB	 16			; 00000010H
  003fc	10		 DB	 16			; 00000010H
  003fd	10		 DB	 16			; 00000010H
  003fe	10		 DB	 16			; 00000010H
  003ff	10		 DB	 16			; 00000010H
  00400	10		 DB	 16			; 00000010H
  00401	10		 DB	 16			; 00000010H
  00402	10		 DB	 16			; 00000010H
  00403	10		 DB	 16			; 00000010H
  00404	10		 DB	 16			; 00000010H
  00405	10		 DB	 16			; 00000010H
  00406	10		 DB	 16			; 00000010H
  00407	10		 DB	 16			; 00000010H
  00408	10		 DB	 16			; 00000010H
  00409	10		 DB	 16			; 00000010H
  0040a	10		 DB	 16			; 00000010H
  0040b	10		 DB	 16			; 00000010H
  0040c	10		 DB	 16			; 00000010H
  0040d	10		 DB	 16			; 00000010H
  0040e	10		 DB	 16			; 00000010H
  0040f	10		 DB	 16			; 00000010H
  00410	10		 DB	 16			; 00000010H
  00411	10		 DB	 16			; 00000010H
  00412	10		 DB	 16			; 00000010H
  00413	10		 DB	 16			; 00000010H
  00414	10		 DB	 16			; 00000010H
  00415	10		 DB	 16			; 00000010H
  00416	10		 DB	 16			; 00000010H
  00417	10		 DB	 16			; 00000010H
  00418	10		 DB	 16			; 00000010H
  00419	10		 DB	 16			; 00000010H
  0041a	10		 DB	 16			; 00000010H
  0041b	10		 DB	 16			; 00000010H
  0041c	10		 DB	 16			; 00000010H
  0041d	10		 DB	 16			; 00000010H
  0041e	10		 DB	 16			; 00000010H
  0041f	10		 DB	 16			; 00000010H
  00420	10		 DB	 16			; 00000010H
  00421	10		 DB	 16			; 00000010H
  00422	10		 DB	 16			; 00000010H
  00423	10		 DB	 16			; 00000010H
  00424	10		 DB	 16			; 00000010H
  00425	10		 DB	 16			; 00000010H
  00426	10		 DB	 16			; 00000010H
  00427	10		 DB	 16			; 00000010H
  00428	10		 DB	 16			; 00000010H
  00429	10		 DB	 16			; 00000010H
  0042a	10		 DB	 16			; 00000010H
  0042b	10		 DB	 16			; 00000010H
  0042c	10		 DB	 16			; 00000010H
  0042d	10		 DB	 16			; 00000010H
  0042e	10		 DB	 16			; 00000010H
  0042f	10		 DB	 16			; 00000010H
  00430	10		 DB	 16			; 00000010H
  00431	10		 DB	 16			; 00000010H
  00432	10		 DB	 16			; 00000010H
  00433	10		 DB	 16			; 00000010H
  00434	10		 DB	 16			; 00000010H
  00435	10		 DB	 16			; 00000010H
  00436	10		 DB	 16			; 00000010H
  00437	10		 DB	 16			; 00000010H
  00438	10		 DB	 16			; 00000010H
  00439	10		 DB	 16			; 00000010H
  0043a	10		 DB	 16			; 00000010H
  0043b	10		 DB	 16			; 00000010H
  0043c	10		 DB	 16			; 00000010H
  0043d	10		 DB	 16			; 00000010H
  0043e	10		 DB	 16			; 00000010H
  0043f	10		 DB	 16			; 00000010H
  00440	10		 DB	 16			; 00000010H
  00441	10		 DB	 16			; 00000010H
  00442	10		 DB	 16			; 00000010H
  00443	10		 DB	 16			; 00000010H
  00444	10		 DB	 16			; 00000010H
  00445	10		 DB	 16			; 00000010H
  00446	10		 DB	 16			; 00000010H
  00447	10		 DB	 16			; 00000010H
  00448	10		 DB	 16			; 00000010H
  00449	10		 DB	 16			; 00000010H
  0044a	10		 DB	 16			; 00000010H
  0044b	10		 DB	 16			; 00000010H
  0044c	10		 DB	 16			; 00000010H
  0044d	10		 DB	 16			; 00000010H
  0044e	10		 DB	 16			; 00000010H
  0044f	10		 DB	 16			; 00000010H
  00450	10		 DB	 16			; 00000010H
  00451	10		 DB	 16			; 00000010H
  00452	10		 DB	 16			; 00000010H
  00453	10		 DB	 16			; 00000010H
  00454	10		 DB	 16			; 00000010H
  00455	10		 DB	 16			; 00000010H
  00456	10		 DB	 16			; 00000010H
  00457	10		 DB	 16			; 00000010H
  00458	10		 DB	 16			; 00000010H
  00459	10		 DB	 16			; 00000010H
  0045a	10		 DB	 16			; 00000010H
  0045b	10		 DB	 16			; 00000010H
  0045c	10		 DB	 16			; 00000010H
  0045d	10		 DB	 16			; 00000010H
  0045e	10		 DB	 16			; 00000010H
  0045f	10		 DB	 16			; 00000010H
  00460	10		 DB	 16			; 00000010H
  00461	10		 DB	 16			; 00000010H
  00462	10		 DB	 16			; 00000010H
  00463	10		 DB	 16			; 00000010H
  00464	10		 DB	 16			; 00000010H
  00465	10		 DB	 16			; 00000010H
  00466	10		 DB	 16			; 00000010H
  00467	10		 DB	 16			; 00000010H
  00468	10		 DB	 16			; 00000010H
  00469	0a		 DB	 10			; 0000000aH
  0046a	0b		 DB	 11			; 0000000bH
  0046b	0c		 DB	 12			; 0000000cH
  0046c	0d		 DB	 13			; 0000000dH
  0046d	0e		 DB	 14			; 0000000eH
  0046e	0f		 DB	 15			; 0000000fH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z$0:
  00000	8b 45 a4	 mov	 eax, DWORD PTR $T58132[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z ENDP	; ConstructAnimation
PUBLIC	?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z ; ConstructAnimationSet
EXTRN	??0sAnimationSet@@QAE@XZ:PROC			; sAnimationSet::sAnimationSet
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z$0
__ehfuncinfo$?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z
_TEXT	SEGMENT
tv76 = -96						; size = 4
tv75 = -96						; size = 4
$T58147 = -92						; size = 4
$T58148 = -88						; size = 4
_dwCodeSize$ = -20					; size = 4
_dwCode$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ppAnimSet$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z PROC ; ConstructAnimationSet, COMDAT

; 1709 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1710 : 	// get code
; 1711 : 	DWORD dwCode = 0;

  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwCode$[ebp], 0

; 1712 : 	DWORD dwCodeSize = 0;

  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwCodeSize$[ebp], 0

; 1713 : 	
; 1714 : 	ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00036	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00039	50		 push	 eax
  0003a	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0003d	51		 push	 ecx
  0003e	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  00041	52		 push	 edx
  00042	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1715 : 	
; 1716 : 	if ( dwCode > 0 )

  0004a	83 7d f0 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  0004e	76 46		 jbe	 SHORT $LN8@ConstructA@2

; 1717 : 	{
; 1718 : 		// create animset
; 1719 : 		(*ppAnimSet) = new sAnimationSet;

  00050	68 28 01 00 00	 push	 296			; 00000128H
  00055	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005a	83 c4 04	 add	 esp, 4
  0005d	89 45 a8	 mov	 DWORD PTR $T58148[ebp], eax
  00060	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00067	83 7d a8 00	 cmp	 DWORD PTR $T58148[ebp], 0
  0006b	74 0d		 je	 SHORT $LN12@ConstructA@2
  0006d	8b 4d a8	 mov	 ecx, DWORD PTR $T58148[ebp]
  00070	e8 00 00 00 00	 call	 ??0sAnimationSet@@QAE@XZ ; sAnimationSet::sAnimationSet
  00075	89 45 a0	 mov	 DWORD PTR tv75[ebp], eax
  00078	eb 07		 jmp	 SHORT $LN13@ConstructA@2
$LN12@ConstructA@2:
  0007a	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN13@ConstructA@2:
  00081	8b 45 a0	 mov	 eax, DWORD PTR tv75[ebp]
  00084	89 45 a4	 mov	 DWORD PTR $T58147[ebp], eax
  00087	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnimSet$[ebp]
  00091	8b 55 a4	 mov	 edx, DWORD PTR $T58147[ebp]
  00094	89 11		 mov	 DWORD PTR [ecx], edx
$LN8@ConstructA@2:

; 1720 : 	}
; 1721 : 
; 1722 : 	while ( dwCode > 0 )

  00096	83 7d f0 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  0009a	0f 86 91 00 00
	00		 jbe	 $LN7@ConstructA@2

; 1723 : 	{
; 1724 : 		switch ( dwCode )

  000a0	8b 45 f0	 mov	 eax, DWORD PTR _dwCode$[ebp]
  000a3	89 45 a0	 mov	 DWORD PTR tv76[ebp], eax
  000a6	81 7d a0 c9 00
	00 00		 cmp	 DWORD PTR tv76[ebp], 201 ; 000000c9H
  000ad	74 14		 je	 SHORT $LN4@ConstructA@2
  000af	81 7d a0 ca 00
	00 00		 cmp	 DWORD PTR tv76[ebp], 202 ; 000000caH
  000b6	74 1f		 je	 SHORT $LN3@ConstructA@2
  000b8	81 7d a0 cb 00
	00 00		 cmp	 DWORD PTR tv76[ebp], 203 ; 000000cbH
  000bf	74 30		 je	 SHORT $LN2@ConstructA@2
  000c1	eb 48		 jmp	 SHORT $LN1@ConstructA@2
$LN4@ConstructA@2:

; 1725 : 		{
; 1726 : 			case DBOBLOCK_ANIMSET_NAME :	ReadString         ( (*ppAnimSet)->szName,		ppBlock ); break;

  000c3	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000c6	50		 push	 eax
  000c7	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnimSet$[ebp]
  000ca	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ?ReadString@@YA_NPADPAPAD@Z ; ReadString
  000d2	83 c4 08	 add	 esp, 8
  000d5	eb 41		 jmp	 SHORT $LN5@ConstructA@2
$LN3@ConstructA@2:

; 1727 : 			case DBOBLOCK_ANIMSET_LENGTH :  ReadDWORD		   ( &(*ppAnimSet)->ulLength,	ppBlock ); break;

  000d7	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000da	50		 push	 eax
  000db	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnimSet$[ebp]
  000de	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e0	81 c2 04 01 00
	00		 add	 edx, 260		; 00000104H
  000e6	52		 push	 edx
  000e7	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  000ec	83 c4 08	 add	 esp, 8
  000ef	eb 27		 jmp	 SHORT $LN5@ConstructA@2
$LN2@ConstructA@2:

; 1728 : 			case DBOBLOCK_ANIMSET_DATA :	ConstructAnimation ( &(*ppAnimSet)->pAnimation,	ppBlock ); break;				

  000f1	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000f4	50		 push	 eax
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _ppAnimSet$[ebp]
  000f8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fa	81 c2 00 01 00
	00		 add	 edx, 256		; 00000100H
  00100	52		 push	 edx
  00101	e8 00 00 00 00	 call	 ?ConstructAnimation@@YA_NPAPAUsAnimation@@PAPAD@Z ; ConstructAnimation
  00106	83 c4 08	 add	 esp, 8
  00109	eb 0d		 jmp	 SHORT $LN5@ConstructA@2
$LN1@ConstructA@2:

; 1729 : 
; 1730 : 			default :
; 1731 : 				*ppBlock += dwCodeSize;

  0010b	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0010e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00110	03 4d ec	 add	 ecx, DWORD PTR _dwCodeSize$[ebp]
  00113	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00116	89 0a		 mov	 DWORD PTR [edx], ecx
$LN5@ConstructA@2:

; 1732 : 			break;
; 1733 : 		}
; 1734 : 
; 1735 : 		// get next code
; 1736 : 		ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00118	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0011b	50		 push	 eax
  0011c	8d 4d ec	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0011f	51		 push	 ecx
  00120	8d 55 f0	 lea	 edx, DWORD PTR _dwCode$[ebp]
  00123	52		 push	 edx
  00124	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00129	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1737 : 	}

  0012c	e9 65 ff ff ff	 jmp	 $LN8@ConstructA@2
$LN7@ConstructA@2:

; 1738 : 
; 1739 : 	// okay
; 1740 : 	return true;

  00131	b0 01		 mov	 al, 1

; 1741 : }

  00133	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00136	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013d	59		 pop	 ecx
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5b		 pop	 ebx
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z$0:
  00000	8b 45 a8	 mov	 eax, DWORD PTR $T58148[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z ENDP ; ConstructAnimationSet
PUBLIC	?ConstructCustomData@@YA_NPAPAUsObject@@PAPAD@Z	; ConstructCustomData
; Function compile flags: /Odtp /ZI
;	COMDAT ?ConstructCustomData@@YA_NPAPAUsObject@@PAPAD@Z
_TEXT	SEGMENT
tv148 = -88						; size = 4
$T58160 = -84						; size = 4
$T58161 = -80						; size = 4
$T58162 = -76						; size = 4
_dwCodeSize$ = -8					; size = 4
_dwCode$ = -4						; size = 4
_ppObject$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
?ConstructCustomData@@YA_NPAPAUsObject@@PAPAD@Z PROC	; ConstructCustomData, COMDAT

; 1744 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1745 : 	// 280305 - used when objects want to store custom data for example when they save and want to save out this data
; 1746 : 	DWORD dwCode = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwCode$[ebp], 0

; 1747 : 	DWORD dwCodeSize = 0;

  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dwCodeSize$[ebp], 0

; 1748 : 	ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00017	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0001a	50		 push	 eax
  0001b	8d 4d f8	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0001e	51		 push	 ecx
  0001f	8d 55 fc	 lea	 edx, DWORD PTR _dwCode$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1749 : 	SAFE_DELETE ( (*ppObject)->pCustomData );

  0002b	8b 45 08	 mov	 eax, DWORD PTR _ppObject$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	83 b9 28 05 00
	00 00		 cmp	 DWORD PTR [ecx+1320], 0
  00037	74 29		 je	 SHORT $LN9@ConstructC
  00039	8b 45 08	 mov	 eax, DWORD PTR _ppObject$[ebp]
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	8b 91 28 05 00
	00		 mov	 edx, DWORD PTR [ecx+1320]
  00044	89 55 ac	 mov	 DWORD PTR $T58160[ebp], edx
  00047	8b 45 ac	 mov	 eax, DWORD PTR $T58160[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00050	83 c4 04	 add	 esp, 4
  00053	8b 45 08	 mov	 eax, DWORD PTR _ppObject$[ebp]
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	c7 81 28 05 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1320], 0
$LN9@ConstructC:

; 1750 : 
; 1751 : 	// LEEFIX - 150508 - the OLD method of custom data would not have 'dwCustomSize' and so cause ppBlock to advance wrongly
; 1752 : 	// and thus the ReadCODE after the case will cause reading invalid memory (loading DBO from UU3D!)
; 1753 : 	if ( g_dwVersion<=1 )

  00062	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_dwVersion@@3KA, 1 ; g_dwVersion
  00069	77 5c		 ja	 SHORT $LN6@ConstructC

; 1754 : 	{
; 1755 : 		// leefix - 150508 - allowed for old version to fill custom data too
; 1756 : 		(*ppObject)->dwCustomSize = dwCodeSize;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _ppObject$[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	8b 55 f8	 mov	 edx, DWORD PTR _dwCodeSize$[ebp]
  00073	89 91 24 05 00
	00		 mov	 DWORD PTR [ecx+1316], edx

; 1757 : 		(*ppObject)->pCustomData = new BYTE [ (*ppObject)->dwCustomSize ];

  00079	8b 45 08	 mov	 eax, DWORD PTR _ppObject$[ebp]
  0007c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007e	8b 91 24 05 00
	00		 mov	 edx, DWORD PTR [ecx+1316]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008a	83 c4 04	 add	 esp, 4
  0008d	89 45 b0	 mov	 DWORD PTR $T58161[ebp], eax
  00090	8b 45 08	 mov	 eax, DWORD PTR _ppObject$[ebp]
  00093	8b 08		 mov	 ecx, DWORD PTR [eax]
  00095	8b 55 b0	 mov	 edx, DWORD PTR $T58161[ebp]
  00098	89 91 28 05 00
	00		 mov	 DWORD PTR [ecx+1320], edx

; 1758 : 		ReadIntoMemory ( (BYTE*)(*ppObject)->pCustomData, (*ppObject)->dwCustomSize, ppBlock );

  0009e	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000a1	50		 push	 eax
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _ppObject$[ebp]
  000a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a7	8b 82 24 05 00
	00		 mov	 eax, DWORD PTR [edx+1316]
  000ad	50		 push	 eax
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _ppObject$[ebp]
  000b1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b3	8b 82 28 05 00
	00		 mov	 eax, DWORD PTR [edx+1320]
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ?ReadIntoMemory@@YA_NPAEKPAPAD@Z ; ReadIntoMemory
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1759 : 	}
; 1760 : 	else

  000c2	e9 a4 00 00 00	 jmp	 $LN7@ConstructC
$LN6@ConstructC:

; 1761 : 	{
; 1762 : 		// new versions have extra customsize DWORD - get code
; 1763 : 		while ( dwCode > 0 )

  000c7	83 7d fc 00	 cmp	 DWORD PTR _dwCode$[ebp], 0
  000cb	0f 86 9a 00 00
	00		 jbe	 $LN7@ConstructC

; 1764 : 		{
; 1765 : 			switch ( dwCode )

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _dwCode$[ebp]
  000d4	89 45 a8	 mov	 DWORD PTR tv148[ebp], eax
  000d7	81 7d a8 96 01
	00 00		 cmp	 DWORD PTR tv148[ebp], 406 ; 00000196H
  000de	74 02		 je	 SHORT $LN2@ConstructC
  000e0	eb 63		 jmp	 SHORT $LN1@ConstructC
$LN2@ConstructC:

; 1766 : 			{
; 1767 : 				case DBOBLOCK_OBJECT_CUSTOMDATA:
; 1768 : 				{
; 1769 : 					ReadDWORD      ( &(*ppObject)->dwCustomSize, ppBlock );

  000e2	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000e5	50		 push	 eax
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR _ppObject$[ebp]
  000e9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000eb	81 c2 24 05 00
	00		 add	 edx, 1316		; 00000524H
  000f1	52		 push	 edx
  000f2	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  000f7	83 c4 08	 add	 esp, 8

; 1770 : 					(*ppObject)->pCustomData = new BYTE [ (*ppObject)->dwCustomSize ];

  000fa	8b 45 08	 mov	 eax, DWORD PTR _ppObject$[ebp]
  000fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ff	8b 91 24 05 00
	00		 mov	 edx, DWORD PTR [ecx+1316]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0010b	83 c4 04	 add	 esp, 4
  0010e	89 45 b4	 mov	 DWORD PTR $T58162[ebp], eax
  00111	8b 45 08	 mov	 eax, DWORD PTR _ppObject$[ebp]
  00114	8b 08		 mov	 ecx, DWORD PTR [eax]
  00116	8b 55 b4	 mov	 edx, DWORD PTR $T58162[ebp]
  00119	89 91 28 05 00
	00		 mov	 DWORD PTR [ecx+1320], edx

; 1771 : 					ReadIntoMemory ( (BYTE*)(*ppObject)->pCustomData, (*ppObject)->dwCustomSize, ppBlock );

  0011f	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00122	50		 push	 eax
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _ppObject$[ebp]
  00126	8b 11		 mov	 edx, DWORD PTR [ecx]
  00128	8b 82 24 05 00
	00		 mov	 eax, DWORD PTR [edx+1316]
  0012e	50		 push	 eax
  0012f	8b 4d 08	 mov	 ecx, DWORD PTR _ppObject$[ebp]
  00132	8b 11		 mov	 edx, DWORD PTR [ecx]
  00134	8b 82 28 05 00
	00		 mov	 eax, DWORD PTR [edx+1320]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ?ReadIntoMemory@@YA_NPAEKPAPAD@Z ; ReadIntoMemory
  00140	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1772 : 				}
; 1773 : 				break;

  00143	eb 0d		 jmp	 SHORT $LN3@ConstructC
$LN1@ConstructC:

; 1774 : 
; 1775 : 				// leefix - 070405 - this u58 addition caused saved DBO objects to run through garbage data
; 1776 : 				default :
; 1777 : 					*ppBlock += dwCodeSize;

  00145	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00148	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014a	03 4d f8	 add	 ecx, DWORD PTR _dwCodeSize$[ebp]
  0014d	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  00150	89 0a		 mov	 DWORD PTR [edx], ecx
$LN3@ConstructC:

; 1778 : 
; 1779 : 				break;
; 1780 : 			}
; 1781 : 
; 1782 : 			// get next code
; 1783 : 			// leefix - 070405 - also no final terminate code was written (in write part) meaning we are trapped here until random crash!
; 1784 : 			ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00152	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00155	50		 push	 eax
  00156	8d 4d f8	 lea	 ecx, DWORD PTR _dwCodeSize$[ebp]
  00159	51		 push	 ecx
  0015a	8d 55 fc	 lea	 edx, DWORD PTR _dwCode$[ebp]
  0015d	52		 push	 edx
  0015e	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00163	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1785 : 		}

  00166	e9 5c ff ff ff	 jmp	 $LN6@ConstructC
$LN7@ConstructC:

; 1786 : 	}
; 1787 : 
; 1788 : 	return true;

  0016b	b0 01		 mov	 al, 1

; 1789 : }

  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
?ConstructCustomData@@YA_NPAPAUsObject@@PAPAD@Z ENDP	; ConstructCustomData
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z	; ConstructObject
EXTRN	??0sObject@@QAE@XZ:PROC				; sObject::sObject
EXTRN	__stricmp:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z$0
__ehfuncinfo$?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z
_TEXT	SEGMENT
tv83 = -368						; size = 4
$T58166 = -364						; size = 4
$T58167 = -360						; size = 4
_dwCodeSize$57700 = -292				; size = 4
_dwCode$57699 = -288					; size = 4
_dwRes2$57694 = -284					; size = 4
_dwRes1$57693 = -280					; size = 4
_dwVersion$57692 = -276					; size = 4
_pMagicString$ = -272					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_ppObject$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z PROC	; ConstructObject, COMDAT

; 1792 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1793 : 	// ensure is DBO block
; 1794 : 	char pMagicString [ MAX_STRING ];
; 1795 : 
; 1796 : 	ReadString ( pMagicString, ppBlock );

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00031	50		 push	 eax
  00032	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _pMagicString$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ?ReadString@@YA_NPADPAPAD@Z ; ReadString
  0003e	83 c4 08	 add	 esp, 8

; 1797 : 
; 1798 : 	if ( _stricmp ( pMagicString, "MAGICDBO" )==NULL )

  00041	68 00 00 00 00	 push	 OFFSET ??_C@_08HFDNDKLG@MAGICDBO?$AA@
  00046	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _pMagicString$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __stricmp
  00052	83 c4 08	 add	 esp, 8
  00055	85 c0		 test	 eax, eax
  00057	0f 85 67 01 00
	00		 jne	 $LN5@ConstructO

; 1799 : 	{
; 1800 : 		// version information
; 1801 : 		DWORD dwVersion=0;

  0005d	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwVersion$57692[ebp], 0

; 1802 : 		DWORD dwRes1=0, dwRes2=0;

  00067	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwRes1$57693[ebp], 0
  00071	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwRes2$57694[ebp], 0

; 1803 : 		ReadDWORD	( &dwVersion,	ppBlock );

  0007b	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0007e	50		 push	 eax
  0007f	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _dwVersion$57692[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  0008b	83 c4 08	 add	 esp, 8

; 1804 : 		ReadDWORD	( &dwRes1,		ppBlock );

  0008e	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00091	50		 push	 eax
  00092	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _dwRes1$57693[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  0009e	83 c4 08	 add	 esp, 8

; 1805 : 		ReadDWORD	( &dwRes2,		ppBlock );

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  000a4	50		 push	 eax
  000a5	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _dwRes2$57694[ebp]
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 ?ReadDWORD@@YA_NPAKPAPAD@Z ; ReadDWORD
  000b1	83 c4 08	 add	 esp, 8

; 1806 : 		g_dwVersion = dwVersion;

  000b4	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _dwVersion$57692[ebp]
  000ba	a3 00 00 00 00	 mov	 DWORD PTR ?g_dwVersion@@3KA, eax ; g_dwVersion

; 1807 : 
; 1808 : 		// create object
; 1809 : 		(*ppObject) = new sObject;

  000bf	68 2c 05 00 00	 push	 1324			; 0000052cH
  000c4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c9	83 c4 04	 add	 esp, 4
  000cc	89 85 98 fe ff
	ff		 mov	 DWORD PTR $T58167[ebp], eax
  000d2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d9	83 bd 98 fe ff
	ff 00		 cmp	 DWORD PTR $T58167[ebp], 0
  000e0	74 13		 je	 SHORT $LN8@ConstructO
  000e2	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR $T58167[ebp]
  000e8	e8 00 00 00 00	 call	 ??0sObject@@QAE@XZ	; sObject::sObject
  000ed	89 85 90 fe ff
	ff		 mov	 DWORD PTR tv83[ebp], eax
  000f3	eb 0a		 jmp	 SHORT $LN9@ConstructO
$LN8@ConstructO:
  000f5	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv83[ebp], 0
$LN9@ConstructO:
  000ff	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR tv83[ebp]
  00105	89 85 94 fe ff
	ff		 mov	 DWORD PTR $T58166[ebp], eax
  0010b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00112	8b 4d 08	 mov	 ecx, DWORD PTR _ppObject$[ebp]
  00115	8b 95 94 fe ff
	ff		 mov	 edx, DWORD PTR $T58166[ebp]
  0011b	89 11		 mov	 DWORD PTR [ecx], edx

; 1810 : 
; 1811 : 		// construct frame data
; 1812 : 		DWORD dwCode = 0, dwCodeSize = 0;

  0011d	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwCode$57699[ebp], 0
  00127	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwCodeSize$57700[ebp], 0

; 1813 : 		ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  00131	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00134	50		 push	 eax
  00135	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _dwCodeSize$57700[ebp]
  0013b	51		 push	 ecx
  0013c	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR _dwCode$57699[ebp]
  00142	52		 push	 edx
  00143	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00148	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1814 : 		if ( !ConstructFrame ( &(*ppObject)->pFrame, ppBlock ) )

  0014b	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0014e	50		 push	 eax
  0014f	8b 4d 08	 mov	 ecx, DWORD PTR _ppObject$[ebp]
  00152	8b 11		 mov	 edx, DWORD PTR [ecx]
  00154	83 c2 10	 add	 edx, 16			; 00000010H
  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 ?ConstructFrame@@YA_NPAPAUsFrame@@PAPAD@Z ; ConstructFrame
  0015d	83 c4 08	 add	 esp, 8
  00160	0f b6 c0	 movzx	 eax, al
  00163	85 c0		 test	 eax, eax
  00165	75 04		 jne	 SHORT $LN4@ConstructO

; 1815 : 		{
; 1816 : 			// cannot construct frame
; 1817 : 			return false;

  00167	32 c0		 xor	 al, al
  00169	eb 5f		 jmp	 SHORT $LN6@ConstructO
$LN4@ConstructO:

; 1818 : 		}
; 1819 : 
; 1820 : 		// construct animation data
; 1821 : 		ReadCODE ( &dwCode, &dwCodeSize, ppBlock );

  0016b	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0016e	50		 push	 eax
  0016f	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _dwCodeSize$57700[ebp]
  00175	51		 push	 ecx
  00176	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR _dwCode$57699[ebp]
  0017c	52		 push	 edx
  0017d	e8 00 00 00 00	 call	 ?ReadCODE@@YA_NPAK0PAPAD@Z ; ReadCODE
  00182	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1822 : 		if ( !ConstructAnimationSet ( &(*ppObject)->pAnimationSet, ppBlock ) )

  00185	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00188	50		 push	 eax
  00189	8b 4d 08	 mov	 ecx, DWORD PTR _ppObject$[ebp]
  0018c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0018e	83 c2 14	 add	 edx, 20			; 00000014H
  00191	52		 push	 edx
  00192	e8 00 00 00 00	 call	 ?ConstructAnimationSet@@YA_NPAPAUsAnimationSet@@PAPAD@Z ; ConstructAnimationSet
  00197	83 c4 08	 add	 esp, 8
  0019a	0f b6 c0	 movzx	 eax, al
  0019d	85 c0		 test	 eax, eax
  0019f	75 04		 jne	 SHORT $LN3@ConstructO

; 1823 : 		{
; 1824 : 			// cannot construct animation
; 1825 : 			return false;

  001a1	32 c0		 xor	 al, al
  001a3	eb 25		 jmp	 SHORT $LN6@ConstructO
$LN3@ConstructO:

; 1826 : 		}
; 1827 : 
; 1828 : 		// 280305 - new custom data
; 1829 : 		// lee - 280306 - u6rc2 - ONLY if there is more block data (older DBO files did not have any more data)
; 1830 : 		if ( *ppBlock < g_pBlockEnd ) ConstructCustomData ( ppObject, ppBlock );

  001a5	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  001aa	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?g_pBlockEnd@@3PADA ; g_pBlockEnd
  001b0	73 10		 jae	 SHORT $LN2@ConstructO
  001b2	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  001b5	50		 push	 eax
  001b6	8b 4d 08	 mov	 ecx, DWORD PTR _ppObject$[ebp]
  001b9	51		 push	 ecx
  001ba	e8 00 00 00 00	 call	 ?ConstructCustomData@@YA_NPAPAUsObject@@PAPAD@Z ; ConstructCustomData
  001bf	83 c4 08	 add	 esp, 8
$LN2@ConstructO:

; 1831 : 	}
; 1832 : 	else

  001c2	eb 04		 jmp	 SHORT $LN1@ConstructO
$LN5@ConstructO:

; 1833 : 	{
; 1834 : 		// not a DBO file
; 1835 : 		return false;

  001c4	32 c0		 xor	 al, al
  001c6	eb 02		 jmp	 SHORT $LN6@ConstructO
$LN1@ConstructO:

; 1836 : 	}
; 1837 : 
; 1838 : 	// return result
; 1839 : 	return true;

  001c8	b0 01		 mov	 al, 1
$LN6@ConstructO:

; 1840 : }

  001ca	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d4	59		 pop	 ecx
  001d5	5f		 pop	 edi
  001d6	5e		 pop	 esi
  001d7	5b		 pop	 ebx
  001d8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001db	33 cd		 xor	 ecx, ebp
  001dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e2	8b e5		 mov	 esp, ebp
  001e4	5d		 pop	 ebp
  001e5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z$0:
  00000	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR $T58167[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000c	59		 pop	 ecx
  0000d	c3		 ret	 0
__ehhandler$?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 8a 8c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-372]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z ENDP	; ConstructObject
PUBLIC	?DBOConvertObjectToBlock@@YA_NPAUsObject@@PAK1@Z ; DBOConvertObjectToBlock
; Function compile flags: /Odtp /ZI
;	COMDAT ?DBOConvertObjectToBlock@@YA_NPAUsObject@@PAK1@Z
_TEXT	SEGMENT
$T58179 = -88						; size = 4
$T58180 = -84						; size = 4
_pBlock$ = -16						; size = 4
_dwBytePosition$ = -12					; size = 4
_pBlockBase$ = -8					; size = 4
_dwSize$ = -4						; size = 4
_pObject$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
_pdwBlockSize$ = 16					; size = 4
?DBOConvertObjectToBlock@@YA_NPAUsObject@@PAK1@Z PROC	; DBOConvertObjectToBlock, COMDAT

; 1847 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1848 : 	// determine size of block
; 1849 : 	DWORD dwSize = 0;

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _dwSize$[ebp], 0

; 1850 : 	if ( !ScanObject ( pObject, NULL, &dwSize ) )

  00010	8d 45 fc	 lea	 eax, DWORD PTR _dwSize$[ebp]
  00013	50		 push	 eax
  00014	6a 00		 push	 0
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _pObject$[ebp]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ?ScanObject@@YA_NPAUsObject@@PAPADPAK@Z ; ScanObject
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00022	0f b6 d0	 movzx	 edx, al
  00025	85 d2		 test	 edx, edx
  00027	75 04		 jne	 SHORT $LN3@DBOConvert

; 1851 : 	{
; 1852 : 		// could not parse object
; 1853 : 		return false;

  00029	32 c0		 xor	 al, al
  0002b	eb 72		 jmp	 SHORT $LN4@DBOConvert
$LN3@DBOConvert:

; 1854 : 	}
; 1855 : 
; 1856 : 	// create block memory
; 1857 : 	LPSTR pBlockBase = new char[dwSize];

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 a8	 mov	 DWORD PTR $T58179[ebp], eax
  0003c	8b 4d a8	 mov	 ecx, DWORD PTR $T58179[ebp]
  0003f	89 4d f8	 mov	 DWORD PTR _pBlockBase$[ebp], ecx

; 1858 : 
; 1859 : 	// generate block data from object
; 1860 : 	DWORD dwBytePosition = 0;

  00042	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dwBytePosition$[ebp], 0

; 1861 : 	LPSTR pBlock = pBlockBase;

  00049	8b 45 f8	 mov	 eax, DWORD PTR _pBlockBase$[ebp]
  0004c	89 45 f0	 mov	 DWORD PTR _pBlock$[ebp], eax

; 1862 : 	if ( !ScanObject ( pObject, &pBlock, &dwBytePosition ) )

  0004f	8d 45 f4	 lea	 eax, DWORD PTR _dwBytePosition$[ebp]
  00052	50		 push	 eax
  00053	8d 4d f0	 lea	 ecx, DWORD PTR _pBlock$[ebp]
  00056	51		 push	 ecx
  00057	8b 55 08	 mov	 edx, DWORD PTR _pObject$[ebp]
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 ?ScanObject@@YA_NPAUsObject@@PAPADPAK@Z ; ScanObject
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	0f b6 c0	 movzx	 eax, al
  00066	85 c0		 test	 eax, eax
  00068	75 23		 jne	 SHORT $LN2@DBOConvert

; 1863 : 	{
; 1864 : 		// could not parse object
; 1865 : 		SAFE_DELETE(pBlock);

  0006a	83 7d f0 00	 cmp	 DWORD PTR _pBlock$[ebp], 0
  0006e	74 19		 je	 SHORT $LN1@DBOConvert
  00070	8b 45 f0	 mov	 eax, DWORD PTR _pBlock$[ebp]
  00073	89 45 ac	 mov	 DWORD PTR $T58180[ebp], eax
  00076	8b 4d ac	 mov	 ecx, DWORD PTR $T58180[ebp]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007f	83 c4 04	 add	 esp, 4
  00082	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pBlock$[ebp], 0
$LN1@DBOConvert:

; 1866 : 		return false;

  00089	32 c0		 xor	 al, al
  0008b	eb 12		 jmp	 SHORT $LN4@DBOConvert
$LN2@DBOConvert:

; 1867 : 	}
; 1868 : 
; 1869 : 	// store block size
; 1870 : 	*ppBlock = (DWORD)pBlockBase;

  0008d	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  00090	8b 4d f8	 mov	 ecx, DWORD PTR _pBlockBase$[ebp]
  00093	89 08		 mov	 DWORD PTR [eax], ecx

; 1871 : 	*pdwBlockSize = dwSize;

  00095	8b 45 10	 mov	 eax, DWORD PTR _pdwBlockSize$[ebp]
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _dwSize$[ebp]
  0009b	89 08		 mov	 DWORD PTR [eax], ecx

; 1872 : 
; 1873 : 	// return okay
; 1874 : 	return true;

  0009d	b0 01		 mov	 al, 1
$LN4@DBOConvert:

; 1875 : }

  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
?DBOConvertObjectToBlock@@YA_NPAUsObject@@PAK1@Z ENDP	; DBOConvertObjectToBlock
_TEXT	ENDS
PUBLIC	?DBOConvertBlockToObject@@YA_NKKPAPAUsObject@@@Z ; DBOConvertBlockToObject
; Function compile flags: /Odtp /ZI
;	COMDAT ?DBOConvertBlockToObject@@YA_NKKPAPAUsObject@@@Z
_TEXT	SEGMENT
_pBlock$ = 8						; size = 4
_dwBlockSize$ = 12					; size = 4
_ppObject$ = 16						; size = 4
?DBOConvertBlockToObject@@YA_NKKPAPAUsObject@@@Z PROC	; DBOConvertBlockToObject, COMDAT

; 1878 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1879 : 	// lee - 280306 - u6rc2 - defeat custom-data read crash (from old DBO files), by recording end of block data gloablly
; 1880 : 	g_pBlockEnd = (LPSTR)pBlock + dwBlockSize;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pBlock$[ebp]
  0000c	03 45 0c	 add	 eax, DWORD PTR _dwBlockSize$[ebp]
  0000f	a3 00 00 00 00	 mov	 DWORD PTR ?g_pBlockEnd@@3PADA, eax ; g_pBlockEnd

; 1881 : 
; 1882 : 	// construct object from block
; 1883 : 	if ( !ConstructObject ( ppObject, (LPSTR*)&pBlock ) )

  00014	8d 45 08	 lea	 eax, DWORD PTR _pBlock$[ebp]
  00017	50		 push	 eax
  00018	8b 4d 10	 mov	 ecx, DWORD PTR _ppObject$[ebp]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 ?ConstructObject@@YA_NPAPAUsObject@@PAPAD@Z ; ConstructObject
  00021	83 c4 08	 add	 esp, 8
  00024	0f b6 d0	 movzx	 edx, al
  00027	85 d2		 test	 edx, edx
  00029	75 04		 jne	 SHORT $LN1@DBOConvert@2

; 1884 : 		return false;

  0002b	32 c0		 xor	 al, al
  0002d	eb 02		 jmp	 SHORT $LN2@DBOConvert@2
$LN1@DBOConvert@2:

; 1885 : 
; 1886 : 	// return okay
; 1887 : 	return true;

  0002f	b0 01		 mov	 al, 1
$LN2@DBOConvert@2:

; 1888 : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?DBOConvertBlockToObject@@YA_NKKPAPAUsObject@@@Z ENDP	; DBOConvertBlockToObject
_TEXT	ENDS
PUBLIC	?DBOLoadBlockFile@@YA_NPADPAK1@Z		; DBOLoadBlockFile
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__CreateFileA@28:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?DBOLoadBlockFile@@YA_NPADPAK1@Z
_TEXT	SEGMENT
$T58185 = -76						; size = 4
_bytesread$57738 = -8					; size = 4
_hfile$ = -4						; size = 4
_pFilename$ = 8						; size = 4
_ppBlock$ = 12						; size = 4
_pdwSize$ = 16						; size = 4
?DBOLoadBlockFile@@YA_NPADPAK1@Z PROC			; DBOLoadBlockFile, COMDAT

; 1891 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1892 : 	// load file
; 1893 : 	HANDLE hfile = CreateFile ( pFilename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL );

  00009	6a 00		 push	 0
  0000b	68 80 00 00 00	 push	 128			; 00000080H
  00010	6a 03		 push	 3
  00012	6a 00		 push	 0
  00014	6a 01		 push	 1
  00016	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0001b	8b 45 08	 mov	 eax, DWORD PTR _pFilename$[ebp]
  0001e	50		 push	 eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00025	89 45 fc	 mov	 DWORD PTR _hfile$[ebp], eax

; 1894 : 	if ( hfile != INVALID_HANDLE_VALUE )

  00028	83 7d fc ff	 cmp	 DWORD PTR _hfile$[ebp], -1
  0002c	74 59		 je	 SHORT $LN2@DBOLoadBlo

; 1895 : 	{
; 1896 : 		DWORD bytesread=0;

  0002e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bytesread$57738[ebp], 0

; 1897 : 		*pdwSize = GetFileSize ( hfile, NULL );

  00035	6a 00		 push	 0
  00037	8b 45 fc	 mov	 eax, DWORD PTR _hfile$[ebp]
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  00041	8b 4d 10	 mov	 ecx, DWORD PTR _pdwSize$[ebp]
  00044	89 01		 mov	 DWORD PTR [ecx], eax

; 1898 : 		*ppBlock = (DWORD)new char[*pdwSize];

  00046	8b 45 10	 mov	 eax, DWORD PTR _pdwSize$[ebp]
  00049	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	83 c4 04	 add	 esp, 4
  00054	89 45 b4	 mov	 DWORD PTR $T58185[ebp], eax
  00057	8b 55 0c	 mov	 edx, DWORD PTR _ppBlock$[ebp]
  0005a	8b 45 b4	 mov	 eax, DWORD PTR $T58185[ebp]
  0005d	89 02		 mov	 DWORD PTR [edx], eax

; 1899 : 		ReadFile( hfile, (LPSTR)(*ppBlock), *pdwSize, &bytesread, NULL ); 

  0005f	6a 00		 push	 0
  00061	8d 45 f8	 lea	 eax, DWORD PTR _bytesread$57738[ebp]
  00064	50		 push	 eax
  00065	8b 4d 10	 mov	 ecx, DWORD PTR _pdwSize$[ebp]
  00068	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006a	52		 push	 edx
  0006b	8b 45 0c	 mov	 eax, DWORD PTR _ppBlock$[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	51		 push	 ecx
  00071	8b 55 fc	 mov	 edx, DWORD PTR _hfile$[ebp]
  00074	52		 push	 edx
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20

; 1900 : 		CloseHandle ( hfile );

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _hfile$[ebp]
  0007e	50		 push	 eax
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 1901 : 	}
; 1902 : 	else

  00085	eb 04		 jmp	 SHORT $LN1@DBOLoadBlo
$LN2@DBOLoadBlo:

; 1903 : 	{
; 1904 : 		// could not load file
; 1905 : 		return false;

  00087	32 c0		 xor	 al, al
  00089	eb 02		 jmp	 SHORT $LN3@DBOLoadBlo
$LN1@DBOLoadBlo:

; 1906 : 	}
; 1907 : 
; 1908 : 	// okay
; 1909 : 	return true;

  0008b	b0 01		 mov	 al, 1
$LN3@DBOLoadBlo:

; 1910 : }

  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?DBOLoadBlockFile@@YA_NPADPAK1@Z ENDP			; DBOLoadBlockFile
_TEXT	ENDS
PUBLIC	?DBOSaveBlockFile@@YA_NPADKK@Z			; DBOSaveBlockFile
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__DeleteFileA@4:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?DBOSaveBlockFile@@YA_NPADKK@Z
_TEXT	SEGMENT
_byteswritten$57753 = -8				; size = 4
_hfile$ = -4						; size = 4
_pFilename$ = 8						; size = 4
_pBlock$ = 12						; size = 4
_dwSize$ = 16						; size = 4
?DBOSaveBlockFile@@YA_NPADKK@Z PROC			; DBOSaveBlockFile, COMDAT

; 1913 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1914 : 	// save new file
; 1915 : 	DeleteFile ( pFilename );

  00009	8b 45 08	 mov	 eax, DWORD PTR _pFilename$[ebp]
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4

; 1916 : 	HANDLE hfile = CreateFile ( pFilename, GENERIC_WRITE, FILE_SHARE_WRITE, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL );

  00013	6a 00		 push	 0
  00015	68 80 00 00 00	 push	 128			; 00000080H
  0001a	6a 02		 push	 2
  0001c	6a 00		 push	 0
  0001e	6a 02		 push	 2
  00020	68 00 00 00 40	 push	 1073741824		; 40000000H
  00025	8b 45 08	 mov	 eax, DWORD PTR _pFilename$[ebp]
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0002f	89 45 fc	 mov	 DWORD PTR _hfile$[ebp], eax

; 1917 : 	if ( hfile != INVALID_HANDLE_VALUE )

  00032	83 7d fc ff	 cmp	 DWORD PTR _hfile$[ebp], -1
  00036	74 2b		 je	 SHORT $LN2@DBOSaveBlo

; 1918 : 	{
; 1919 : 		DWORD byteswritten=0;

  00038	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _byteswritten$57753[ebp], 0

; 1920 : 		WriteFile( hfile, (LPSTR)pBlock, dwSize, &byteswritten, NULL ); 

  0003f	6a 00		 push	 0
  00041	8d 45 f8	 lea	 eax, DWORD PTR _byteswritten$57753[ebp]
  00044	50		 push	 eax
  00045	8b 4d 10	 mov	 ecx, DWORD PTR _dwSize$[ebp]
  00048	51		 push	 ecx
  00049	8b 55 0c	 mov	 edx, DWORD PTR _pBlock$[ebp]
  0004c	52		 push	 edx
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _hfile$[ebp]
  00050	50		 push	 eax
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20

; 1921 : 		CloseHandle ( hfile );

  00057	8b 45 fc	 mov	 eax, DWORD PTR _hfile$[ebp]
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 1922 : 	}
; 1923 : 	else

  00061	eb 04		 jmp	 SHORT $LN1@DBOSaveBlo
$LN2@DBOSaveBlo:

; 1924 : 	{
; 1925 : 		// could not create file
; 1926 : 		return false;

  00063	32 c0		 xor	 al, al
  00065	eb 02		 jmp	 SHORT $LN3@DBOSaveBlo
$LN1@DBOSaveBlo:

; 1927 : 	}
; 1928 : 
; 1929 : 	// okay
; 1930 : 	return true;

  00067	b0 01		 mov	 al, 1
$LN3@DBOSaveBlo:

; 1931 : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?DBOSaveBlockFile@@YA_NPADKK@Z ENDP			; DBOSaveBlockFile
_TEXT	ENDS
END
