; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\Program Files\The Game Creators\Dark GDK\Include\DBO Format\DBOData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0sBone@@QAE@XZ				; sBone::sBone
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
; File c:\program files\the game creators\dark gdk\include\dbo format\dbodata.cpp
;	COMDAT ??0sBone@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sBone@@QAE@XZ PROC					; sBone::sBone, COMDAT
; _this$ = ecx

; 4    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  00015	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX

; 5    : 	// clear out structure
; 6    : 	memset ( this, 0, sizeof ( sBone ) );

  0001a	68 58 01 00 00	 push	 344			; 00000158H
  0001f	6a 00		 push	 0
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7    : 	
; 8    : 	// set values to 0 and pointers to null
; 9    : 	dwNumInfluences = 0;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 80 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+256], 0

; 10   : 	pVertices       = NULL;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 80 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+260], 0

; 11   : 	pWeights        = NULL;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 80 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+264], 0

; 12   : }

  00054	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
??0sBone@@QAE@XZ ENDP					; sBone::sBone
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft directx sdk (august 2007)\include\d3dx9math.h
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
PUBLIC	??1sBone@@QAE@XZ				; sBone::~sBone
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
; File c:\program files\the game creators\dark gdk\include\dbo format\dbodata.cpp
;	COMDAT ??1sBone@@QAE@XZ
_TEXT	SEGMENT
$T57182 = -76						; size = 4
$T57183 = -72						; size = 4
_this$ = -4						; size = 4
??1sBone@@QAE@XZ PROC					; sBone::~sBone, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 16   : 	SAFE_DELETE_ARRAY ( pVertices );	// delete vertex array

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 b8 04 01 00
	00 00		 cmp	 DWORD PTR [eax+260], 0
  00016	74 25		 je	 SHORT $LN2@sBone
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  00021	89 4d b4	 mov	 DWORD PTR $T57182[ebp], ecx
  00024	8b 55 b4	 mov	 edx, DWORD PTR $T57182[ebp]
  00027	52		 push	 edx
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 80 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+260], 0
$LN2@sBone:

; 17   : 	SAFE_DELETE_ARRAY ( pWeights );		// delete weights array

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 b8 08 01 00
	00 00		 cmp	 DWORD PTR [eax+264], 0
  00047	74 25		 je	 SHORT $LN3@sBone
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 88 08 01 00
	00		 mov	 ecx, DWORD PTR [eax+264]
  00052	89 4d b8	 mov	 DWORD PTR $T57183[ebp], ecx
  00055	8b 55 b8	 mov	 edx, DWORD PTR $T57183[ebp]
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005e	83 c4 04	 add	 esp, 4
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	c7 80 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+264], 0
$LN3@sBone:

; 18   : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
??1sBone@@QAE@XZ ENDP					; sBone::~sBone
_TEXT	ENDS
PUBLIC	??0sTexture@@QAE@XZ				; sTexture::sTexture
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sTexture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sTexture@@QAE@XZ PROC				; sTexture::sTexture, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : 	// clear out the structure
; 23   : 	memset ( this, 0, sizeof ( sTexture ) );

  0000c	68 48 01 00 00	 push	 328			; 00000148H
  00011	6a 00		 push	 0
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 _memset
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 24   : 
; 25   : 	// default texture settings
; 26   : 	dwBlendMode		= D3DTOP_SELECTARG1;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 80 10 01 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+272], 2

; 27   : 	dwBlendArg1		= D3DTA_DIFFUSE;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 80 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+276], 0

; 28   : 	dwBlendArg2		= D3DTA_DIFFUSE;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c7 80 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+280], 0

; 29   : 	dwAddressU		= D3DTADDRESS_WRAP;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 80 1c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+284], 1

; 30   : 	dwAddressV		= D3DTADDRESS_WRAP;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	c7 80 20 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+288], 1

; 31   : 	dwMagState		= D3DTEXF_LINEAR;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 80 24 01 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+292], 2

; 32   : 	dwMinState		= D3DTEXF_LINEAR;

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c7 80 28 01 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+296], 2

; 33   : 	dwMipState		= D3DTEXF_LINEAR;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	c7 80 2c 01 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+300], 2

; 34   : }

  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
??0sTexture@@QAE@XZ ENDP				; sTexture::sTexture
_TEXT	ENDS
PUBLIC	??1sTexture@@QAE@XZ				; sTexture::~sTexture
; Function compile flags: /Odtp /ZI
;	COMDAT ??1sTexture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sTexture@@QAE@XZ PROC				; sTexture::~sTexture, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 	SAFE_RELEASE ( pCubeTexture );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 b8 08 01 00
	00 00		 cmp	 DWORD PTR [eax+264], 0
  00016	74 27		 je	 SHORT $LN2@sTexture
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 88 08 01 00
	00		 mov	 ecx, DWORD PTR [eax+264]
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	8b 82 08 01 00
	00		 mov	 eax, DWORD PTR [edx+264]
  0002a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0002c	50		 push	 eax
  0002d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00030	ff d2		 call	 edx
  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c7 80 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+264], 0
$LN2@sTexture:

; 39   : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??1sTexture@@QAE@XZ ENDP				; sTexture::~sTexture
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0sCollisionData@@QAE@XZ			; sCollisionData::sCollisionData
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sCollisionData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sCollisionData@@QAE@XZ PROC				; sCollisionData::sCollisionData, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 c1 18	 add	 ecx, 24			; 00000018H
  00025	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	83 c1 38	 add	 ecx, 56			; 00000038H
  00030	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3

; 43   : 	// clear out the structure
; 44   : 	memset ( this, 0, sizeof ( sCollisionData ) );

  00035	6a 6c		 push	 108			; 0000006cH
  00037	6a 00		 push	 0
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 45   : 
; 46   : 	bActive					= true;				// default box collision

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	c6 40 34 01	 mov	 BYTE PTR [eax+52], 1

; 47   : 	eCollisionType			= COLLISION_BOX;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 40 44 02 00
	00 00		 mov	 DWORD PTR [eax+68], 2

; 48   : 	bBoundProduceResult		= true;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c6 40 54 01	 mov	 BYTE PTR [eax+84], 1

; 49   : }

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
??0sCollisionData@@QAE@XZ ENDP				; sCollisionData::sCollisionData
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft directx sdk (august 2007)\include\d3dx9math.h
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	5f		 pop	 edi
  00010	5e		 pop	 esi
  00011	5b		 pop	 ebx
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??1sCollisionData@@QAE@XZ			; sCollisionData::~sCollisionData
; Function compile flags: /Odtp /ZI
; File c:\program files\the game creators\dark gdk\include\dbo format\dbodata.cpp
;	COMDAT ??1sCollisionData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sCollisionData@@QAE@XZ PROC				; sCollisionData::~sCollisionData, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 53   : 
; 54   : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1sCollisionData@@QAE@XZ ENDP				; sCollisionData::~sCollisionData
_TEXT	ENDS
PUBLIC	??0sDrawBuffer@@QAE@XZ				; sDrawBuffer::sDrawBuffer
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sDrawBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sDrawBuffer@@QAE@XZ PROC				; sDrawBuffer::sDrawBuffer, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : 	memset ( this, 0, sizeof ( sDrawBuffer ) );

  0000c	6a 38		 push	 56			; 00000038H
  0000e	6a 00		 push	 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _memset
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??0sDrawBuffer@@QAE@XZ ENDP				; sDrawBuffer::sDrawBuffer
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@00000000
PUBLIC	??0sMesh@@QAE@XZ				; sMesh::sMesh
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0sMesh@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sMesh@@QAE@XZ PROC					; sMesh::sMesh, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	81 c1 80 04 00
	00		 add	 ecx, 1152		; 00000480H
  00015	e8 00 00 00 00	 call	 ??0sCollisionData@@QAE@XZ ; sCollisionData::sCollisionData

; 63   : 	// clear out the structure
; 64   : 	memset ( this, 0, sizeof ( sMesh ) );

  0001a	68 f8 04 00 00	 push	 1272			; 000004f8H
  0001f	6a 00		 push	 0
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _memset
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 65   : 
; 66   : 	iPrimitiveType			= 4;		// default to triangle list

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 40 24 04 00
	00 00		 mov	 DWORD PTR [eax+36], 4

; 67   : 	iDrawVertexCount		= 0;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 68   : 	iDrawPrimitives			= 0;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 69   : 
; 70   : 	bWireframe				= false;	// fill mesh with default render flags

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	c6 80 0c 04 00
	00 00		 mov	 BYTE PTR [eax+1036], 0

; 71   : 	bLight					= true;

  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	c6 80 0d 04 00
	00 01		 mov	 BYTE PTR [eax+1037], 1

; 72   : 	bCull					= true;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	c6 80 0e 04 00
	00 01		 mov	 BYTE PTR [eax+1038], 1

; 73   : 	iCullMode				= 0;

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c7 80 2c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1068], 0

; 74   : 	bFog					= true;

  00076	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00079	c6 80 0f 04 00
	00 01		 mov	 BYTE PTR [eax+1039], 1

; 75   : 	bAmbient				= true;

  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	c6 80 10 04 00
	00 01		 mov	 BYTE PTR [eax+1040], 1

; 76   : 	bTransparency			= false;

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	c6 80 11 04 00
	00 00		 mov	 BYTE PTR [eax+1041], 0

; 77   : 	dwAlphaTestValue		= 0;

  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	c7 80 14 04 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1044], 0

; 78   : 	bGhost					= false;

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	c6 80 18 04 00
	00 00		 mov	 BYTE PTR [eax+1048], 0

; 79   : 	iGhostMode				= 2;

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	c7 80 1c 04 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+1052], 2

; 80   : 	bVisible				= true;

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	c6 80 19 04 00
	00 01		 mov	 BYTE PTR [eax+1049], 1

; 81   : 	bZRead					= true;

  000c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	c6 80 1a 04 00
	00 01		 mov	 BYTE PTR [eax+1050], 1

; 82   : 	bZWrite					= true;

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	c6 80 1b 04 00
	00 01		 mov	 BYTE PTR [eax+1051], 1

; 83   : 	bZBiasActive			= false;

  000d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d9	c6 80 20 04 00
	00 00		 mov	 BYTE PTR [eax+1056], 0

; 84   : 	fZBiasSlopeScale		= 0.0f;

  000e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e3	d9 ee		 fldz
  000e5	d9 98 24 04 00
	00		 fstp	 DWORD PTR [eax+1060]

; 85   : 	fZBiasDepth				= 0.0f;

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	d9 ee		 fldz
  000f0	d9 98 28 04 00
	00		 fstp	 DWORD PTR [eax+1064]

; 86   : 
; 87   : 	// mike 160505 - added ability to draw bounds of an individual mesh
; 88   : 	bDrawBounds				= false;

  000f6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f9	c6 80 30 04 00
	00 00		 mov	 BYTE PTR [eax+1072], 0

; 89   : 
; 90   : 	bUsesMaterial			= false;	// default settings in case we use it (ie fade object)

  00100	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00103	c6 80 78 03 00
	00 00		 mov	 BYTE PTR [eax+888], 0

; 91   : 	mMaterial.Diffuse.r		= 1.0f;

  0010a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010d	d9 e8		 fld1
  0010f	d9 98 94 03 00
	00		 fstp	 DWORD PTR [eax+916]

; 92   : 	mMaterial.Diffuse.g		= 1.0f;

  00115	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00118	d9 e8		 fld1
  0011a	d9 98 98 03 00
	00		 fstp	 DWORD PTR [eax+920]

; 93   : 	mMaterial.Diffuse.b		= 1.0f;

  00120	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00123	d9 e8		 fld1
  00125	d9 98 9c 03 00
	00		 fstp	 DWORD PTR [eax+924]

; 94   : 	mMaterial.Diffuse.a		= 1.0f;

  0012b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012e	d9 e8		 fld1
  00130	d9 98 a0 03 00
	00		 fstp	 DWORD PTR [eax+928]

; 95   : 	mMaterial.Ambient.r		= 1.0f;

  00136	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00139	d9 e8		 fld1
  0013b	d9 98 a4 03 00
	00		 fstp	 DWORD PTR [eax+932]

; 96   : 	mMaterial.Ambient.g		= 1.0f;

  00141	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00144	d9 e8		 fld1
  00146	d9 98 a8 03 00
	00		 fstp	 DWORD PTR [eax+936]

; 97   : 	mMaterial.Ambient.b		= 1.0f;

  0014c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014f	d9 e8		 fld1
  00151	d9 98 ac 03 00
	00		 fstp	 DWORD PTR [eax+940]

; 98   : 	mMaterial.Ambient.a		= 1.0f;

  00157	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015a	d9 e8		 fld1
  0015c	d9 98 b0 03 00
	00		 fstp	 DWORD PTR [eax+944]

; 99   : 
; 100  : 	bLinked                 = false;

  00162	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00165	c6 80 70 04 00
	00 00		 mov	 BYTE PTR [eax+1136], 0

; 101  : 	bVertexTransform		= false;

  0016c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016f	c6 80 eb 03 00
	00 00		 mov	 BYTE PTR [eax+1003], 0

; 102  : 
; 103  : 	// mike - 230505 - need to be able to set mip map LOD bias on a per mesh basis
; 104  : 	fMipMapLODBias			= 0.0f;		// default value in DX is 0.0f

  00176	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00179	d9 ee		 fldz
  0017b	d9 98 34 04 00
	00		 fstp	 DWORD PTR [eax+1076]

; 105  : }

  00181	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00184	5f		 pop	 edi
  00185	5e		 pop	 esi
  00186	5b		 pop	 ebx
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c3		 ret	 0
??0sMesh@@QAE@XZ ENDP					; sMesh::sMesh
_TEXT	ENDS
PUBLIC	??_EsTexture@@QAEPAXI@Z				; sTexture::`vector deleting destructor'
PUBLIC	??_EsBone@@QAEPAXI@Z				; sBone::`vector deleting destructor'
PUBLIC	??1sMesh@@QAE@XZ				; sMesh::~sMesh
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sMesh@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sMesh@@QAE@XZ$0
__ehfuncinfo$??1sMesh@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sMesh@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1sMesh@@QAE@XZ
_TEXT	SEGMENT
tv266 = -144						; size = 4
tv194 = -144						; size = 4
tv90 = -144						; size = 4
$T57206 = -140						; size = 4
$T57207 = -136						; size = 4
$T57210 = -132						; size = 4
$T57211 = -128						; size = 4
$T57212 = -124						; size = 4
$T57213 = -120						; size = 4
$T57214 = -116						; size = 4
$T57217 = -112						; size = 4
$T57218 = -108						; size = 4
$T57219 = -104						; size = 4
$T57220 = -100						; size = 4
$T57221 = -96						; size = 4
$T57224 = -92						; size = 4
$T57225 = -88						; size = 4
$T57226 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sMesh@@QAE@XZ PROC					; sMesh::~sMesh, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sMesh@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 109  : 	// delete any shader effect
; 110  : 	if ( bVertexShaderEffectRefOnly==false )

  00035	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00038	0f b6 48 42	 movzx	 ecx, BYTE PTR [eax+66]
  0003c	85 c9		 test	 ecx, ecx
  0003e	75 63		 jne	 SHORT $LN13@sMesh

; 111  : 		SAFE_DELETE ( pVertexShaderEffect );

  00040	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 b8 58 02 00
	00 00		 cmp	 DWORD PTR [eax+600], 0
  0004a	74 57		 je	 SHORT $LN13@sMesh
  0004c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 88 58 02 00
	00		 mov	 ecx, DWORD PTR [eax+600]
  00055	89 8d 78 ff ff
	ff		 mov	 DWORD PTR $T57207[ebp], ecx
  0005b	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR $T57207[ebp]
  00061	89 95 74 ff ff
	ff		 mov	 DWORD PTR $T57206[ebp], edx
  00067	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR $T57206[ebp], 0
  0006e	74 1c		 je	 SHORT $LN16@sMesh
  00070	6a 01		 push	 1
  00072	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T57206[ebp]
  00078	8b 10		 mov	 edx, DWORD PTR [eax]
  0007a	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR $T57206[ebp]
  00080	8b 02		 mov	 eax, DWORD PTR [edx]
  00082	ff d0		 call	 eax
  00084	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  0008a	eb 0a		 jmp	 SHORT $LN17@sMesh
$LN16@sMesh:
  0008c	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN17@sMesh:
  00096	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00099	c7 80 58 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+600], 0
$LN13@sMesh:

; 112  : 
; 113  : 	// delete all previously created memory
; 114  : 	SAFE_DELETE_ARRAY ( pOriginalVertexData );

  000a3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000aa	74 25		 je	 SHORT $LN11@sMesh
  000ac	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000af	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b2	89 8d 7c ff ff
	ff		 mov	 DWORD PTR $T57210[ebp], ecx
  000b8	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR $T57210[ebp]
  000be	52		 push	 edx
  000bf	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c4	83 c4 04	 add	 esp, 4
  000c7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN11@sMesh:

; 115  : 	SAFE_DELETE_ARRAY ( pVertexData );

  000d1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  000d8	74 1f		 je	 SHORT $LN10@sMesh
  000da	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000dd	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000e0	89 4d 80	 mov	 DWORD PTR $T57211[ebp], ecx
  000e3	8b 55 80	 mov	 edx, DWORD PTR $T57211[ebp]
  000e6	52		 push	 edx
  000e7	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ec	83 c4 04	 add	 esp, 4
  000ef	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f2	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
$LN10@sMesh:

; 116  : 	SAFE_DELETE_ARRAY ( pIndices );

  000f9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00100	74 1f		 je	 SHORT $LN9@sMesh
  00102	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00105	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00108	89 4d 84	 mov	 DWORD PTR $T57212[ebp], ecx
  0010b	8b 55 84	 mov	 edx, DWORD PTR $T57212[ebp]
  0010e	52		 push	 edx
  0010f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00114	83 c4 04	 add	 esp, 4
  00117	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
$LN9@sMesh:

; 117  : 	SAFE_DELETE_ARRAY ( pBones );

  00121	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00124	83 b8 68 03 00
	00 00		 cmp	 DWORD PTR [eax+872], 0
  0012b	74 41		 je	 SHORT $LN8@sMesh
  0012d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00130	8b 88 68 03 00
	00		 mov	 ecx, DWORD PTR [eax+872]
  00136	89 4d 8c	 mov	 DWORD PTR $T57214[ebp], ecx
  00139	8b 55 8c	 mov	 edx, DWORD PTR $T57214[ebp]
  0013c	89 55 88	 mov	 DWORD PTR $T57213[ebp], edx
  0013f	83 7d 88 00	 cmp	 DWORD PTR $T57213[ebp], 0
  00143	74 12		 je	 SHORT $LN18@sMesh
  00145	6a 03		 push	 3
  00147	8b 4d 88	 mov	 ecx, DWORD PTR $T57213[ebp]
  0014a	e8 00 00 00 00	 call	 ??_EsBone@@QAEPAXI@Z
  0014f	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv194[ebp], eax
  00155	eb 0a		 jmp	 SHORT $LN19@sMesh
$LN18@sMesh:
  00157	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv194[ebp], 0
$LN19@sMesh:
  00161	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00164	c7 80 68 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+872], 0
$LN8@sMesh:

; 118  : 	SAFE_DELETE_ARRAY ( pFrameRef );

  0016e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00171	83 b8 70 03 00
	00 00		 cmp	 DWORD PTR [eax+880], 0
  00178	74 25		 je	 SHORT $LN7@sMesh
  0017a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0017d	8b 88 70 03 00
	00		 mov	 ecx, DWORD PTR [eax+880]
  00183	89 4d 90	 mov	 DWORD PTR $T57217[ebp], ecx
  00186	8b 55 90	 mov	 edx, DWORD PTR $T57217[ebp]
  00189	52		 push	 edx
  0018a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0018f	83 c4 04	 add	 esp, 4
  00192	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00195	c7 80 70 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+880], 0
$LN7@sMesh:

; 119  : 	SAFE_DELETE_ARRAY ( pFrameMatrices );

  0019f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001a2	83 b8 74 03 00
	00 00		 cmp	 DWORD PTR [eax+884], 0
  001a9	74 25		 je	 SHORT $LN6@sMesh
  001ab	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001ae	8b 88 74 03 00
	00		 mov	 ecx, DWORD PTR [eax+884]
  001b4	89 4d 94	 mov	 DWORD PTR $T57218[ebp], ecx
  001b7	8b 55 94	 mov	 edx, DWORD PTR $T57218[ebp]
  001ba	52		 push	 edx
  001bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001c0	83 c4 04	 add	 esp, 4
  001c3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001c6	c7 80 74 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+884], 0
$LN6@sMesh:

; 120  : 	SAFE_DELETE_ARRAY ( pMaterialBank );

  001d0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001d3	83 b8 90 03 00
	00 00		 cmp	 DWORD PTR [eax+912], 0
  001da	74 25		 je	 SHORT $LN5@sMesh
  001dc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001df	8b 88 90 03 00
	00		 mov	 ecx, DWORD PTR [eax+912]
  001e5	89 4d 98	 mov	 DWORD PTR $T57219[ebp], ecx
  001e8	8b 55 98	 mov	 edx, DWORD PTR $T57219[ebp]
  001eb	52		 push	 edx
  001ec	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001f1	83 c4 04	 add	 esp, 4
  001f4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001f7	c7 80 90 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+912], 0
$LN5@sMesh:

; 121  : 	SAFE_DELETE_ARRAY ( pTextures );

  00201	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00204	83 b8 88 03 00
	00 00		 cmp	 DWORD PTR [eax+904], 0
  0020b	74 41		 je	 SHORT $LN4@sMesh
  0020d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00210	8b 88 88 03 00
	00		 mov	 ecx, DWORD PTR [eax+904]
  00216	89 4d a0	 mov	 DWORD PTR $T57221[ebp], ecx
  00219	8b 55 a0	 mov	 edx, DWORD PTR $T57221[ebp]
  0021c	89 55 9c	 mov	 DWORD PTR $T57220[ebp], edx
  0021f	83 7d 9c 00	 cmp	 DWORD PTR $T57220[ebp], 0
  00223	74 12		 je	 SHORT $LN20@sMesh
  00225	6a 03		 push	 3
  00227	8b 4d 9c	 mov	 ecx, DWORD PTR $T57220[ebp]
  0022a	e8 00 00 00 00	 call	 ??_EsTexture@@QAEPAXI@Z
  0022f	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv266[ebp], eax
  00235	eb 0a		 jmp	 SHORT $LN21@sMesh
$LN20@sMesh:
  00237	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv266[ebp], 0
$LN21@sMesh:
  00241	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00244	c7 80 88 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+904], 0
$LN4@sMesh:

; 122  : 
; 123  : 	SAFE_DELETE_ARRAY ( pMultiMaterial );

  0024e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00251	83 b8 8c 03 00
	00 00		 cmp	 DWORD PTR [eax+908], 0
  00258	74 25		 je	 SHORT $LN3@sMesh
  0025a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0025d	8b 88 8c 03 00
	00		 mov	 ecx, DWORD PTR [eax+908]
  00263	89 4d a4	 mov	 DWORD PTR $T57224[ebp], ecx
  00266	8b 55 a4	 mov	 edx, DWORD PTR $T57224[ebp]
  00269	52		 push	 edx
  0026a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0026f	83 c4 04	 add	 esp, 4
  00272	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00275	c7 80 8c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+908], 0
$LN3@sMesh:

; 124  : 	SAFE_DELETE_ARRAY ( pDrawBuffer );

  0027f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00282	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  00286	74 1f		 je	 SHORT $LN2@sMesh
  00288	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0028b	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0028e	89 4d a8	 mov	 DWORD PTR $T57225[ebp], ecx
  00291	8b 55 a8	 mov	 edx, DWORD PTR $T57225[ebp]
  00294	52		 push	 edx
  00295	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0029a	83 c4 04	 add	 esp, 4
  0029d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002a0	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
$LN2@sMesh:

; 125  : 	SAFE_DELETE_ARRAY ( pAttributeWorkData );

  002a7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002aa	83 b8 d8 03 00
	00 00		 cmp	 DWORD PTR [eax+984], 0
  002b1	74 25		 je	 SHORT $LN14@sMesh
  002b3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002b6	8b 88 d8 03 00
	00		 mov	 ecx, DWORD PTR [eax+984]
  002bc	89 4d ac	 mov	 DWORD PTR $T57226[ebp], ecx
  002bf	8b 55 ac	 mov	 edx, DWORD PTR $T57226[ebp]
  002c2	52		 push	 edx
  002c3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  002c8	83 c4 04	 add	 esp, 4
  002cb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002ce	c7 80 d8 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+984], 0
$LN14@sMesh:

; 126  : }

  002d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002df	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002e2	81 c1 80 04 00
	00		 add	 ecx, 1152		; 00000480H
  002e8	e8 00 00 00 00	 call	 ??1sCollisionData@@QAE@XZ ; sCollisionData::~sCollisionData
  002ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002f7	59		 pop	 ecx
  002f8	5f		 pop	 edi
  002f9	5e		 pop	 esi
  002fa	5b		 pop	 ebx
  002fb	8b e5		 mov	 esp, ebp
  002fd	5d		 pop	 ebp
  002fe	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sMesh@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 80 04 00
	00		 add	 ecx, 1152		; 00000480H
  00009	e9 00 00 00 00	 jmp	 ??1sCollisionData@@QAE@XZ ; sCollisionData::~sCollisionData
__ehhandler$??1sMesh@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sMesh@@QAE@XZ
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sMesh@@QAE@XZ ENDP					; sMesh::~sMesh
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EsBone@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EsBone@@QAEPAXI@Z PROC				; sBone::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000f	83 e0 02	 and	 eax, 2
  00012	74 39		 je	 SHORT $LN3@vector
  00014	68 00 00 00 00	 push	 OFFSET ??1sBone@@QAE@XZ	; sBone::~sBone
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001f	51		 push	 ecx
  00020	68 58 01 00 00	 push	 344			; 00000158H
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 0f		 je	 SHORT $LN2@vector
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 e8 04	 sub	 eax, 4
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
$LN2@vector:
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 e8 04	 sub	 eax, 4
  0004b	eb 1f		 jmp	 SHORT $LN4@vector
$LN3@vector:
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??1sBone@@QAE@XZ	; sBone::~sBone
  00055	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00058	83 e0 01	 and	 eax, 1
  0005b	74 0c		 je	 SHORT $LN1@vector
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00066	83 c4 04	 add	 esp, 4
$LN1@vector:
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@vector:
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
??_EsBone@@QAEPAXI@Z ENDP				; sBone::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_EsTexture@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EsTexture@@QAEPAXI@Z PROC				; sTexture::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000f	83 e0 02	 and	 eax, 2
  00012	74 39		 je	 SHORT $LN3@vector@2
  00014	68 00 00 00 00	 push	 OFFSET ??1sTexture@@QAE@XZ ; sTexture::~sTexture
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001f	51		 push	 ecx
  00020	68 48 01 00 00	 push	 328			; 00000148H
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00031	83 e0 01	 and	 eax, 1
  00034	74 0f		 je	 SHORT $LN2@vector@2
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 e8 04	 sub	 eax, 4
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
$LN2@vector@2:
  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 e8 04	 sub	 eax, 4
  0004b	eb 1f		 jmp	 SHORT $LN4@vector@2
$LN3@vector@2:
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??1sTexture@@QAE@XZ	; sTexture::~sTexture
  00055	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00058	83 e0 01	 and	 eax, 1
  0005b	74 0c		 je	 SHORT $LN1@vector@2
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00066	83 c4 04	 add	 esp, 4
$LN1@vector@2:
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
??_EsTexture@@QAEPAXI@Z ENDP				; sTexture::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	??0sFramePosition@@QAE@XZ			; sFramePosition::sFramePosition
PUBLIC	??0sFrameTransforms@@QAE@XZ			; sFrameTransforms::sFrameTransforms
PUBLIC	??0sFrame@@QAE@XZ				; sFrame::sFrame
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sFrame@@QAE@XZ
_TEXT	SEGMENT
$T57245 = -80						; size = 12
_this$ = -4						; size = 4
??0sFrame@@QAE@XZ PROC					; sFrame::sFrame, COMDAT
; _this$ = ecx

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	81 c1 10 01 00
	00		 add	 ecx, 272		; 00000110H
  00015	e8 00 00 00 00	 call	 ??0sFrameTransforms@@QAE@XZ
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	81 c1 60 02 00
	00		 add	 ecx, 608		; 00000260H
  00023	e8 00 00 00 00	 call	 ??0sFramePosition@@QAE@XZ

; 130  : 	// clear out structure
; 131  : 	memset ( this, 0, sizeof ( sFrame ) );

  00028	68 24 03 00 00	 push	 804			; 00000324H
  0002d	6a 00		 push	 0
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _memset
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 132  : 
; 133  : 	// create identity matrices
; 134  : 	D3DXMatrixIdentity ( &matOriginal );

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	05 10 01 00 00	 add	 eax, 272		; 00000110H
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
  00049	83 c4 04	 add	 esp, 4

; 135  : 	D3DXMatrixIdentity ( &matUserMatrix );

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	05 60 02 00 00	 add	 eax, 608		; 00000260H
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
  0005a	83 c4 04	 add	 esp, 4

; 136  : 	D3DXMatrixIdentity ( &matCombined );

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00060	05 90 01 00 00	 add	 eax, 400		; 00000190H
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
  0006b	83 c4 04	 add	 esp, 4

; 137  : 	D3DXMatrixIdentity ( &matTransformed );

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00071	05 50 01 00 00	 add	 eax, 336		; 00000150H
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
  0007c	83 c4 04	 add	 esp, 4

; 138  : 	D3DXMatrixIdentity ( &matAbsoluteWorld );

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	05 d0 01 00 00	 add	 eax, 464		; 000001d0H
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
  0008d	83 c4 04	 add	 esp, 4

; 139  : 
; 140  : 	// setup vectors and orientation data
; 141  : 	vecScale = D3DXVECTOR3 ( 1.0f, 1.0f, 1.f);

  00090	51		 push	 ecx
  00091	d9 e8		 fld1
  00093	d9 1c 24	 fstp	 DWORD PTR [esp]
  00096	51		 push	 ecx
  00097	d9 e8		 fld1
  00099	d9 1c 24	 fstp	 DWORD PTR [esp]
  0009c	51		 push	 ecx
  0009d	d9 e8		 fld1
  0009f	d9 1c 24	 fstp	 DWORD PTR [esp]
  000a2	8d 4d b0	 lea	 ecx, DWORD PTR $T57245[ebp]
  000a5	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@MMM@Z ; D3DXVECTOR3::D3DXVECTOR3
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	81 c1 ac 02 00
	00		 add	 ecx, 684		; 000002acH
  000b3	8b 10		 mov	 edx, DWORD PTR [eax]
  000b5	89 11		 mov	 DWORD PTR [ecx], edx
  000b7	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ba	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  000bd	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c0	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 142  : 
; 143  : 	// mike 170505 - new matrix for completely custom, physics needs this for implementing it's own matrix
; 144  : 	bOverride = false;

  000c3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	c6 80 10 02 00
	00 00		 mov	 BYTE PTR [eax+528], 0

; 145  : 	D3DXMatrixIdentity ( &matOverride );

  000cd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d0	05 14 02 00 00	 add	 eax, 532		; 00000214H
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
  000db	83 c4 04	 add	 esp, 4

; 146  : 
; 147  : 	// 201007 - each limb is not excluded by default
; 148  : 	bExcluded = false;

  000de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	c6 80 10 03 00
	00 00		 mov	 BYTE PTR [eax+784], 0

; 149  : 
; 150  : 	// 211008 - u71 - clear state bits
; 151  : 	dwStatusBits = 0;

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	c7 80 14 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+788], 0

; 152  : }

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	5b		 pop	 ebx
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
??0sFrame@@QAE@XZ ENDP					; sFrame::sFrame
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft directx sdk (august 2007)\include\d3dx9math.inl
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 304  :     x = fx;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR _fx$[ebp]
  00012	d9 18		 fstp	 DWORD PTR [eax]

; 305  :     y = fy;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	d9 45 0c	 fld	 DWORD PTR _fy$[ebp]
  0001a	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 306  :     z = fz;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	d9 45 10	 fld	 DWORD PTR _fz$[ebp]
  00023	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 307  : }

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1988 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1989 : #ifdef D3DX_DEBUG
; 1990 :     if(!pOut)
; 1991 :         return NULL;
; 1992 : #endif
; 1993 : 
; 1994 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1995 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1996 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1997 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  0000c	d9 ee		 fldz
  0000e	d9 58 38	 fstp	 DWORD PTR [eax+56]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  00014	d9 ee		 fldz
  00016	d9 59 34	 fstp	 DWORD PTR [ecx+52]
  00019	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  0001c	d9 ee		 fldz
  0001e	d9 5a 30	 fstp	 DWORD PTR [edx+48]
  00021	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00024	d9 ee		 fldz
  00026	d9 58 2c	 fstp	 DWORD PTR [eax+44]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  0002c	d9 ee		 fldz
  0002e	d9 59 24	 fstp	 DWORD PTR [ecx+36]
  00031	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  00034	d9 ee		 fldz
  00036	d9 5a 20	 fstp	 DWORD PTR [edx+32]
  00039	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  0003c	d9 ee		 fldz
  0003e	d9 58 1c	 fstp	 DWORD PTR [eax+28]
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  00044	d9 ee		 fldz
  00046	d9 59 18	 fstp	 DWORD PTR [ecx+24]
  00049	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  0004c	d9 ee		 fldz
  0004e	d9 5a 10	 fstp	 DWORD PTR [edx+16]
  00051	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00054	d9 ee		 fldz
  00056	d9 58 0c	 fstp	 DWORD PTR [eax+12]
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  0005c	d9 ee		 fldz
  0005e	d9 59 08	 fstp	 DWORD PTR [ecx+8]
  00061	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  00064	d9 ee		 fldz
  00066	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 1998 : 
; 1999 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00069	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  0006c	d9 e8		 fld1
  0006e	d9 58 3c	 fstp	 DWORD PTR [eax+60]
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _pOut$[ebp]
  00074	d9 e8		 fld1
  00076	d9 59 28	 fstp	 DWORD PTR [ecx+40]
  00079	8b 55 08	 mov	 edx, DWORD PTR _pOut$[ebp]
  0007c	d9 e8		 fld1
  0007e	d9 5a 14	 fstp	 DWORD PTR [edx+20]
  00081	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00084	d9 e8		 fld1
  00086	d9 18		 fstp	 DWORD PTR [eax]

; 2000 :     return pOut;

  00088	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]

; 2001 : }

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0sFrameTransforms@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sFrameTransforms@@QAE@XZ PROC			; sFrameTransforms::sFrameTransforms, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 40	 add	 ecx, 64			; 00000040H
  0001a	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00028	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	81 c1 c0 00 00
	00		 add	 ecx, 192		; 000000c0H
  00036	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	81 c1 04 01 00
	00		 add	 ecx, 260		; 00000104H
  00044	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??0sFrameTransforms@@QAE@XZ ENDP			; sFrameTransforms::sFrameTransforms
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0sFramePosition@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sFramePosition@@QAE@XZ PROC				; sFramePosition::sFramePosition, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 40	 add	 ecx, 64			; 00000040H
  0001a	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00025	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	83 c1 58	 add	 ecx, 88			; 00000058H
  00030	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 64	 add	 ecx, 100		; 00000064H
  0003b	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 70	 add	 ecx, 112		; 00000070H
  00046	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00054	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	81 c1 8c 00 00
	00		 add	 ecx, 140		; 0000008cH
  00062	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
??0sFramePosition@@QAE@XZ ENDP				; sFramePosition::sFramePosition
_TEXT	ENDS
PUBLIC	??_GsFrame@@QAEPAXI@Z				; sFrame::`scalar deleting destructor'
PUBLIC	??_GsMesh@@QAEPAXI@Z				; sMesh::`scalar deleting destructor'
PUBLIC	??1sFrame@@QAE@XZ				; sFrame::~sFrame
; Function compile flags: /Odtp /ZI
; File c:\program files\the game creators\dark gdk\include\dbo format\dbodata.cpp
;	COMDAT ??1sFrame@@QAE@XZ
_TEXT	SEGMENT
tv192 = -136						; size = 4
tv171 = -136						; size = 4
tv153 = -136						; size = 4
tv141 = -136						; size = 4
tv130 = -136						; size = 4
tv89 = -136						; size = 4
tv80 = -136						; size = 4
tv71 = -136						; size = 4
$T57256 = -132						; size = 4
$T57257 = -128						; size = 4
$T57260 = -124						; size = 4
$T57261 = -120						; size = 4
$T57264 = -116						; size = 4
$T57265 = -112						; size = 4
$T57268 = -108						; size = 4
$T57269 = -104						; size = 4
$T57272 = -100						; size = 4
$T57273 = -96						; size = 4
$T57276 = -92						; size = 4
$T57277 = -88						; size = 4
$T57280 = -84						; size = 4
$T57281 = -80						; size = 4
$T57284 = -76						; size = 4
$T57285 = -72						; size = 4
_this$ = -4						; size = 4
??1sFrame@@QAE@XZ PROC					; sFrame::~sFrame, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 156  : 	// free all mesh data
; 157  : 	SAFE_DELETE ( pMesh );

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 b8 f8 02 00
	00 00		 cmp	 DWORD PTR [eax+760], 0
  00019	74 4a		 je	 SHORT $LN8@sFrame
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 88 f8 02 00
	00		 mov	 ecx, DWORD PTR [eax+760]
  00024	89 4d 80	 mov	 DWORD PTR $T57257[ebp], ecx
  00027	8b 55 80	 mov	 edx, DWORD PTR $T57257[ebp]
  0002a	89 95 7c ff ff
	ff		 mov	 DWORD PTR $T57256[ebp], edx
  00030	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR $T57256[ebp], 0
  00037	74 15		 je	 SHORT $LN11@sFrame
  00039	6a 01		 push	 1
  0003b	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR $T57256[ebp]
  00041	e8 00 00 00 00	 call	 ??_GsMesh@@QAEPAXI@Z
  00046	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
  0004c	eb 0a		 jmp	 SHORT $LN12@sFrame
$LN11@sFrame:
  0004e	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN12@sFrame:
  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	c7 80 f8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+760], 0
$LN8@sFrame:

; 158  : 	SAFE_DELETE ( pShadowMesh );

  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	83 b8 fc 02 00
	00 00		 cmp	 DWORD PTR [eax+764], 0
  0006f	74 41		 je	 SHORT $LN7@sFrame
  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 88 fc 02 00
	00		 mov	 ecx, DWORD PTR [eax+764]
  0007a	89 4d 88	 mov	 DWORD PTR $T57261[ebp], ecx
  0007d	8b 55 88	 mov	 edx, DWORD PTR $T57261[ebp]
  00080	89 55 84	 mov	 DWORD PTR $T57260[ebp], edx
  00083	83 7d 84 00	 cmp	 DWORD PTR $T57260[ebp], 0
  00087	74 12		 je	 SHORT $LN13@sFrame
  00089	6a 01		 push	 1
  0008b	8b 4d 84	 mov	 ecx, DWORD PTR $T57260[ebp]
  0008e	e8 00 00 00 00	 call	 ??_GsMesh@@QAEPAXI@Z
  00093	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv80[ebp], eax
  00099	eb 0a		 jmp	 SHORT $LN14@sFrame
$LN13@sFrame:
  0009b	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv80[ebp], 0
$LN14@sFrame:
  000a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	c7 80 fc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+764], 0
$LN7@sFrame:

; 159  : 	SAFE_DELETE ( pBoundBox );

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	83 b8 00 03 00
	00 00		 cmp	 DWORD PTR [eax+768], 0
  000bc	74 41		 je	 SHORT $LN6@sFrame
  000be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c1	8b 88 00 03 00
	00		 mov	 ecx, DWORD PTR [eax+768]
  000c7	89 4d 90	 mov	 DWORD PTR $T57265[ebp], ecx
  000ca	8b 55 90	 mov	 edx, DWORD PTR $T57265[ebp]
  000cd	89 55 8c	 mov	 DWORD PTR $T57264[ebp], edx
  000d0	83 7d 8c 00	 cmp	 DWORD PTR $T57264[ebp], 0
  000d4	74 12		 je	 SHORT $LN15@sFrame
  000d6	6a 01		 push	 1
  000d8	8b 4d 8c	 mov	 ecx, DWORD PTR $T57264[ebp]
  000db	e8 00 00 00 00	 call	 ??_GsMesh@@QAEPAXI@Z
  000e0	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv89[ebp], eax
  000e6	eb 0a		 jmp	 SHORT $LN16@sFrame
$LN15@sFrame:
  000e8	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv89[ebp], 0
$LN16@sFrame:
  000f2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f5	c7 80 00 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+768], 0
$LN6@sFrame:

; 160  : 	SAFE_DELETE ( pBoundSphere );

  000ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00102	83 b8 04 03 00
	00 00		 cmp	 DWORD PTR [eax+772], 0
  00109	74 41		 je	 SHORT $LN5@sFrame
  0010b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010e	8b 88 04 03 00
	00		 mov	 ecx, DWORD PTR [eax+772]
  00114	89 4d 98	 mov	 DWORD PTR $T57269[ebp], ecx
  00117	8b 55 98	 mov	 edx, DWORD PTR $T57269[ebp]
  0011a	89 55 94	 mov	 DWORD PTR $T57268[ebp], edx
  0011d	83 7d 94 00	 cmp	 DWORD PTR $T57268[ebp], 0
  00121	74 12		 je	 SHORT $LN17@sFrame
  00123	6a 01		 push	 1
  00125	8b 4d 94	 mov	 ecx, DWORD PTR $T57268[ebp]
  00128	e8 00 00 00 00	 call	 ??_GsMesh@@QAEPAXI@Z
  0012d	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv130[ebp], eax
  00133	eb 0a		 jmp	 SHORT $LN18@sFrame
$LN17@sFrame:
  00135	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv130[ebp], 0
$LN18@sFrame:
  0013f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00142	c7 80 04 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+772], 0
$LN5@sFrame:

; 161  : 	SAFE_DELETE ( pLOD [ 0 ] );

  0014c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014f	83 b8 08 03 00
	00 00		 cmp	 DWORD PTR [eax+776], 0
  00156	74 41		 je	 SHORT $LN4@sFrame
  00158	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015b	8b 88 08 03 00
	00		 mov	 ecx, DWORD PTR [eax+776]
  00161	89 4d a0	 mov	 DWORD PTR $T57273[ebp], ecx
  00164	8b 55 a0	 mov	 edx, DWORD PTR $T57273[ebp]
  00167	89 55 9c	 mov	 DWORD PTR $T57272[ebp], edx
  0016a	83 7d 9c 00	 cmp	 DWORD PTR $T57272[ebp], 0
  0016e	74 12		 je	 SHORT $LN19@sFrame
  00170	6a 01		 push	 1
  00172	8b 4d 9c	 mov	 ecx, DWORD PTR $T57272[ebp]
  00175	e8 00 00 00 00	 call	 ??_GsMesh@@QAEPAXI@Z
  0017a	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv141[ebp], eax
  00180	eb 0a		 jmp	 SHORT $LN20@sFrame
$LN19@sFrame:
  00182	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv141[ebp], 0
$LN20@sFrame:
  0018c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	c7 80 08 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+776], 0
$LN4@sFrame:

; 162  : 	SAFE_DELETE ( pLOD [ 1 ] );

  00199	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019c	83 b8 0c 03 00
	00 00		 cmp	 DWORD PTR [eax+780], 0
  001a3	74 41		 je	 SHORT $LN3@sFrame
  001a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a8	8b 88 0c 03 00
	00		 mov	 ecx, DWORD PTR [eax+780]
  001ae	89 4d a8	 mov	 DWORD PTR $T57277[ebp], ecx
  001b1	8b 55 a8	 mov	 edx, DWORD PTR $T57277[ebp]
  001b4	89 55 a4	 mov	 DWORD PTR $T57276[ebp], edx
  001b7	83 7d a4 00	 cmp	 DWORD PTR $T57276[ebp], 0
  001bb	74 12		 je	 SHORT $LN21@sFrame
  001bd	6a 01		 push	 1
  001bf	8b 4d a4	 mov	 ecx, DWORD PTR $T57276[ebp]
  001c2	e8 00 00 00 00	 call	 ??_GsMesh@@QAEPAXI@Z
  001c7	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv153[ebp], eax
  001cd	eb 0a		 jmp	 SHORT $LN22@sFrame
$LN21@sFrame:
  001cf	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv153[ebp], 0
$LN22@sFrame:
  001d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001dc	c7 80 0c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+780], 0
$LN3@sFrame:

; 163  : 
; 164  : 	// delete all pointers which will in turn delete all sub frames
; 165  : 	SAFE_DELETE ( pChild );

  001e6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001e9	83 b8 08 01 00
	00 00		 cmp	 DWORD PTR [eax+264], 0
  001f0	74 41		 je	 SHORT $LN2@sFrame
  001f2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001f5	8b 88 08 01 00
	00		 mov	 ecx, DWORD PTR [eax+264]
  001fb	89 4d b0	 mov	 DWORD PTR $T57281[ebp], ecx
  001fe	8b 55 b0	 mov	 edx, DWORD PTR $T57281[ebp]
  00201	89 55 ac	 mov	 DWORD PTR $T57280[ebp], edx
  00204	83 7d ac 00	 cmp	 DWORD PTR $T57280[ebp], 0
  00208	74 12		 je	 SHORT $LN23@sFrame
  0020a	6a 01		 push	 1
  0020c	8b 4d ac	 mov	 ecx, DWORD PTR $T57280[ebp]
  0020f	e8 00 00 00 00	 call	 ??_GsFrame@@QAEPAXI@Z
  00214	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv171[ebp], eax
  0021a	eb 0a		 jmp	 SHORT $LN24@sFrame
$LN23@sFrame:
  0021c	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv171[ebp], 0
$LN24@sFrame:
  00226	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00229	c7 80 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+264], 0
$LN2@sFrame:

; 166  : 	SAFE_DELETE ( pSibling );

  00233	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00236	83 b8 0c 01 00
	00 00		 cmp	 DWORD PTR [eax+268], 0
  0023d	74 41		 je	 SHORT $LN9@sFrame
  0023f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00242	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  00248	89 4d b8	 mov	 DWORD PTR $T57285[ebp], ecx
  0024b	8b 55 b8	 mov	 edx, DWORD PTR $T57285[ebp]
  0024e	89 55 b4	 mov	 DWORD PTR $T57284[ebp], edx
  00251	83 7d b4 00	 cmp	 DWORD PTR $T57284[ebp], 0
  00255	74 12		 je	 SHORT $LN25@sFrame
  00257	6a 01		 push	 1
  00259	8b 4d b4	 mov	 ecx, DWORD PTR $T57284[ebp]
  0025c	e8 00 00 00 00	 call	 ??_GsFrame@@QAEPAXI@Z
  00261	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv192[ebp], eax
  00267	eb 0a		 jmp	 SHORT $LN26@sFrame
$LN25@sFrame:
  00269	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv192[ebp], 0
$LN26@sFrame:
  00273	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00276	c7 80 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+268], 0
$LN9@sFrame:

; 167  : }

  00280	5f		 pop	 edi
  00281	5e		 pop	 esi
  00282	5b		 pop	 ebx
  00283	8b e5		 mov	 esp, ebp
  00285	5d		 pop	 ebp
  00286	c3		 ret	 0
??1sFrame@@QAE@XZ ENDP					; sFrame::~sFrame
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_GsMesh@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GsMesh@@QAEPAXI@Z PROC				; sMesh::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1sMesh@@QAE@XZ	; sMesh::~sMesh
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GsMesh@@QAEPAXI@Z ENDP				; sMesh::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_GsFrame@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GsFrame@@QAEPAXI@Z PROC				; sFrame::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1sFrame@@QAE@XZ	; sFrame::~sFrame
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@2
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@2:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GsFrame@@QAEPAXI@Z ENDP				; sFrame::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0sAnimation@@QAE@XZ				; sAnimation::sAnimation
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sAnimation@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sAnimation@@QAE@XZ PROC				; sAnimation::sAnimation, COMDAT
; _this$ = ecx

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 171  : 	memset ( szName, 0, sizeof ( szName ) );

  0000c	68 00 01 00 00	 push	 256			; 00000100H
  00011	6a 00		 push	 0
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 _memset
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 172  : 
; 173  : 	pFrame            = NULL;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 80 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+256], 0

; 174  : 	bLoop             = FALSE;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 80 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+260], 0

; 175  : 	bLinear           = TRUE;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c7 80 08 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+264], 1

; 176  : 	pPositionKeys     = NULL;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 80 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+284], 0

; 177  : 	dwNumPositionKeys = 0;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	c7 80 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+268], 0

; 178  : 	pRotateKeys       = NULL;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 80 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+288], 0

; 179  : 	dwNumRotateKeys   = 0;

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c7 80 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+272], 0

; 180  : 	pScaleKeys        = NULL;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0

; 181  : 	dwNumScaleKeys    = 0;

  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	c7 80 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+276], 0

; 182  : 	pMatrixKeys       = NULL;

  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	c7 80 28 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+296], 0

; 183  : 	dwNumMatrixKeys   = 0;

  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	c7 80 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+280], 0

; 184  : 	pNext             = NULL;

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	c7 80 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+344], 0

; 185  : 
; 186  : 	dwLastPositionKey		= 0;

  000bb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000be	c7 80 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+300], 0

; 187  : 	dwLastRotateKey			= 0;

  000c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	c7 80 30 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+304], 0

; 188  : 	dwLastScaleKey			= 0;

  000d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d8	c7 80 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+308], 0

; 189  : 	dwLastMatrixKey			= 0;

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	c7 80 38 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+312], 0

; 190  : 	
; 191  : 	bBoneType				= 1;

  000ef	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f2	c7 80 3c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+316], 1

; 192  : 	piBoneOffsetList		= NULL;

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	c7 80 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+320], 0

; 193  : 	iBoneOffsetListCount	= 0;

  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	c7 80 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+324], 0

; 194  : 	ppBoneFrames			= NULL;

  00116	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00119	c7 80 48 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+328], 0

; 195  : 	iBoneFrameA				= 0;

  00123	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00126	c7 80 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+332], 0

; 196  : 	iBoneFrameB				= 0;

  00130	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00133	c7 80 50 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+336], 0

; 197  : 
; 198  : 	pSharedReadAnim			= NULL;

  0013d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00140	c7 80 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+340], 0

; 199  : }

  0014a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014d	5f		 pop	 edi
  0014e	5e		 pop	 esi
  0014f	5b		 pop	 ebx
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c3		 ret	 0
??0sAnimation@@QAE@XZ ENDP				; sAnimation::sAnimation
_TEXT	ENDS
PUBLIC	??_GsAnimation@@QAEPAXI@Z			; sAnimation::`scalar deleting destructor'
PUBLIC	??1sAnimation@@QAE@XZ				; sAnimation::~sAnimation
; Function compile flags: /Odtp /ZI
;	COMDAT ??1sAnimation@@QAE@XZ
_TEXT	SEGMENT
tv241 = -112						; size = 4
$T57296 = -108						; size = 4
$T57297 = -104						; size = 4
$T57298 = -100						; size = 4
$T57299 = -96						; size = 4
$T57300 = -92						; size = 4
$T57301 = -88						; size = 4
$T57302 = -84						; size = 4
$T57303 = -80						; size = 4
$T57304 = -76						; size = 4
_iFrame$56910 = -8					; size = 4
_this$ = -4						; size = 4
??1sAnimation@@QAE@XZ PROC				; sAnimation::~sAnimation, COMDAT
; _this$ = ecx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 203  : 	SAFE_DELETE_ARRAY ( piBoneOffsetList );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 b8 40 01 00
	00 00		 cmp	 DWORD PTR [eax+320], 0
  00016	74 25		 je	 SHORT $LN12@sAnimation
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [eax+320]
  00021	89 4d 94	 mov	 DWORD PTR $T57296[ebp], ecx
  00024	8b 55 94	 mov	 edx, DWORD PTR $T57296[ebp]
  00027	52		 push	 edx
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 80 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+320], 0
$LN12@sAnimation:

; 204  : 
; 205  : 	if ( ppBoneFrames )

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  00047	74 65		 je	 SHORT $LN11@sAnimation

; 206  : 	{
; 207  : 		for ( int iFrame = 0; iFrame < iBoneFrameA; iFrame++ )

  00049	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iFrame$56910[ebp], 0
  00050	eb 09		 jmp	 SHORT $LN10@sAnimation
$LN9@sAnimation:
  00052	8b 45 f8	 mov	 eax, DWORD PTR _iFrame$56910[ebp]
  00055	83 c0 01	 add	 eax, 1
  00058	89 45 f8	 mov	 DWORD PTR _iFrame$56910[ebp], eax
$LN10@sAnimation:
  0005b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _iFrame$56910[ebp]
  00061	3b 88 4c 01 00
	00		 cmp	 ecx, DWORD PTR [eax+332]
  00067	7d 45		 jge	 SHORT $LN11@sAnimation

; 208  : 		{
; 209  : 			SAFE_DELETE_ARRAY ( ppBoneFrames [ iFrame ] );

  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [eax+328]
  00072	8b 55 f8	 mov	 edx, DWORD PTR _iFrame$56910[ebp]
  00075	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  00079	74 31		 je	 SHORT $LN7@sAnimation
  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [eax+328]
  00084	8b 55 f8	 mov	 edx, DWORD PTR _iFrame$56910[ebp]
  00087	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0008a	89 45 98	 mov	 DWORD PTR $T57297[ebp], eax
  0008d	8b 4d 98	 mov	 ecx, DWORD PTR $T57297[ebp]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00096	83 c4 04	 add	 esp, 4
  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [eax+328]
  000a2	8b 55 f8	 mov	 edx, DWORD PTR _iFrame$56910[ebp]
  000a5	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0
$LN7@sAnimation:

; 210  : 		}

  000ac	eb a4		 jmp	 SHORT $LN9@sAnimation
$LN11@sAnimation:

; 211  : 	}
; 212  : 
; 213  : 	SAFE_DELETE_ARRAY ( ppBoneFrames );

  000ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [eax+328], 0
  000b8	74 25		 je	 SHORT $LN6@sAnimation
  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [eax+328]
  000c3	89 4d 9c	 mov	 DWORD PTR $T57298[ebp], ecx
  000c6	8b 55 9c	 mov	 edx, DWORD PTR $T57298[ebp]
  000c9	52		 push	 edx
  000ca	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000cf	83 c4 04	 add	 esp, 4
  000d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d5	c7 80 48 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+328], 0
$LN6@sAnimation:

; 214  : 
; 215  : 	SAFE_DELETE ( pPositionKeys );

  000df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	83 b8 1c 01 00
	00 00		 cmp	 DWORD PTR [eax+284], 0
  000e9	74 25		 je	 SHORT $LN5@sAnimation
  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 88 1c 01 00
	00		 mov	 ecx, DWORD PTR [eax+284]
  000f4	89 4d a0	 mov	 DWORD PTR $T57299[ebp], ecx
  000f7	8b 55 a0	 mov	 edx, DWORD PTR $T57299[ebp]
  000fa	52		 push	 edx
  000fb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00100	83 c4 04	 add	 esp, 4
  00103	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00106	c7 80 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+284], 0
$LN5@sAnimation:

; 216  : 	SAFE_DELETE ( pRotateKeys );

  00110	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00113	83 b8 20 01 00
	00 00		 cmp	 DWORD PTR [eax+288], 0
  0011a	74 25		 je	 SHORT $LN4@sAnimation
  0011c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011f	8b 88 20 01 00
	00		 mov	 ecx, DWORD PTR [eax+288]
  00125	89 4d a4	 mov	 DWORD PTR $T57300[ebp], ecx
  00128	8b 55 a4	 mov	 edx, DWORD PTR $T57300[ebp]
  0012b	52		 push	 edx
  0012c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00131	83 c4 04	 add	 esp, 4
  00134	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00137	c7 80 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+288], 0
$LN4@sAnimation:

; 217  : 	SAFE_DELETE ( pScaleKeys );

  00141	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00144	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  0014b	74 25		 je	 SHORT $LN3@sAnimation
  0014d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00150	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  00156	89 4d a8	 mov	 DWORD PTR $T57301[ebp], ecx
  00159	8b 55 a8	 mov	 edx, DWORD PTR $T57301[ebp]
  0015c	52		 push	 edx
  0015d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00162	83 c4 04	 add	 esp, 4
  00165	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00168	c7 80 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+292], 0
$LN3@sAnimation:

; 218  : 	SAFE_DELETE ( pMatrixKeys );

  00172	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00175	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [eax+296], 0
  0017c	74 25		 je	 SHORT $LN2@sAnimation
  0017e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00181	8b 88 28 01 00
	00		 mov	 ecx, DWORD PTR [eax+296]
  00187	89 4d ac	 mov	 DWORD PTR $T57302[ebp], ecx
  0018a	8b 55 ac	 mov	 edx, DWORD PTR $T57302[ebp]
  0018d	52		 push	 edx
  0018e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00193	83 c4 04	 add	 esp, 4
  00196	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00199	c7 80 28 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+296], 0
$LN2@sAnimation:

; 219  : 	SAFE_DELETE ( pNext );

  001a3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a6	83 b8 58 01 00
	00 00		 cmp	 DWORD PTR [eax+344], 0
  001ad	74 3b		 je	 SHORT $LN13@sAnimation
  001af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b2	8b 88 58 01 00
	00		 mov	 ecx, DWORD PTR [eax+344]
  001b8	89 4d b4	 mov	 DWORD PTR $T57304[ebp], ecx
  001bb	8b 55 b4	 mov	 edx, DWORD PTR $T57304[ebp]
  001be	89 55 b0	 mov	 DWORD PTR $T57303[ebp], edx
  001c1	83 7d b0 00	 cmp	 DWORD PTR $T57303[ebp], 0
  001c5	74 0f		 je	 SHORT $LN15@sAnimation
  001c7	6a 01		 push	 1
  001c9	8b 4d b0	 mov	 ecx, DWORD PTR $T57303[ebp]
  001cc	e8 00 00 00 00	 call	 ??_GsAnimation@@QAEPAXI@Z
  001d1	89 45 90	 mov	 DWORD PTR tv241[ebp], eax
  001d4	eb 07		 jmp	 SHORT $LN16@sAnimation
$LN15@sAnimation:
  001d6	c7 45 90 00 00
	00 00		 mov	 DWORD PTR tv241[ebp], 0
$LN16@sAnimation:
  001dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001e0	c7 80 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+344], 0
$LN13@sAnimation:

; 220  : }

  001ea	5f		 pop	 edi
  001eb	5e		 pop	 esi
  001ec	5b		 pop	 ebx
  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c3		 ret	 0
??1sAnimation@@QAE@XZ ENDP				; sAnimation::~sAnimation
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_GsAnimation@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GsAnimation@@QAEPAXI@Z PROC				; sAnimation::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1sAnimation@@QAE@XZ	; sAnimation::~sAnimation
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@3
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@3:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GsAnimation@@QAEPAXI@Z ENDP				; sAnimation::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0sAnimationSet@@QAE@XZ			; sAnimationSet::sAnimationSet
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sAnimationSet@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sAnimationSet@@QAE@XZ PROC				; sAnimationSet::sAnimationSet, COMDAT
; _this$ = ecx

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 224  : 	memset ( this, 0, sizeof ( sAnimationSet ) );

  0000c	68 28 01 00 00	 push	 296			; 00000128H
  00011	6a 00		 push	 0
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 _memset
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 225  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0sAnimationSet@@QAE@XZ ENDP				; sAnimationSet::sAnimationSet
_TEXT	ENDS
PUBLIC	??_GsAnimationSet@@QAEPAXI@Z			; sAnimationSet::`scalar deleting destructor'
PUBLIC	??1sAnimationSet@@QAE@XZ			; sAnimationSet::~sAnimationSet
; Function compile flags: /Odtp /ZI
;	COMDAT ??1sAnimationSet@@QAE@XZ
_TEXT	SEGMENT
tv132 = -104						; size = 4
tv91 = -104						; size = 4
$T57313 = -100						; size = 4
$T57314 = -96						; size = 4
$T57315 = -92						; size = 4
$T57316 = -88						; size = 4
$T57317 = -84						; size = 4
$T57318 = -80						; size = 4
$T57321 = -76						; size = 4
$T57322 = -72						; size = 4
_this$ = -4						; size = 4
??1sAnimationSet@@QAE@XZ PROC				; sAnimationSet::~sAnimationSet, COMDAT
; _this$ = ecx

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  : 	SAFE_DELETE		  ( pvecBoundMin );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 b8 0c 01 00
	00 00		 cmp	 DWORD PTR [eax+268], 0
  00016	74 25		 je	 SHORT $LN6@sAnimation@2
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 88 0c 01 00
	00		 mov	 ecx, DWORD PTR [eax+268]
  00021	89 4d 9c	 mov	 DWORD PTR $T57313[ebp], ecx
  00024	8b 55 9c	 mov	 edx, DWORD PTR $T57313[ebp]
  00027	52		 push	 edx
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 80 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+268], 0
$LN6@sAnimation@2:

; 230  : 	SAFE_DELETE		  ( pvecBoundMax );

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 b8 10 01 00
	00 00		 cmp	 DWORD PTR [eax+272], 0
  00047	74 25		 je	 SHORT $LN5@sAnimation@2
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  00052	89 4d a0	 mov	 DWORD PTR $T57314[ebp], ecx
  00055	8b 55 a0	 mov	 edx, DWORD PTR $T57314[ebp]
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005e	83 c4 04	 add	 esp, 4
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	c7 80 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+272], 0
$LN5@sAnimation@2:

; 231  : 	SAFE_DELETE		  ( pvecBoundCenter );

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00071	83 b8 14 01 00
	00 00		 cmp	 DWORD PTR [eax+276], 0
  00078	74 25		 je	 SHORT $LN4@sAnimation@2
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 88 14 01 00
	00		 mov	 ecx, DWORD PTR [eax+276]
  00083	89 4d a4	 mov	 DWORD PTR $T57315[ebp], ecx
  00086	8b 55 a4	 mov	 edx, DWORD PTR $T57315[ebp]
  00089	52		 push	 edx
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008f	83 c4 04	 add	 esp, 4
  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	c7 80 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+276], 0
$LN4@sAnimation@2:

; 232  : 	SAFE_DELETE		  ( pfBoundRadius );

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	83 b8 18 01 00
	00 00		 cmp	 DWORD PTR [eax+280], 0
  000a9	74 25		 je	 SHORT $LN3@sAnimation@2
  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 88 18 01 00
	00		 mov	 ecx, DWORD PTR [eax+280]
  000b4	89 4d a8	 mov	 DWORD PTR $T57316[ebp], ecx
  000b7	8b 55 a8	 mov	 edx, DWORD PTR $T57316[ebp]
  000ba	52		 push	 edx
  000bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c0	83 c4 04	 add	 esp, 4
  000c3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	c7 80 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+280], 0
$LN3@sAnimation@2:

; 233  : 	SAFE_DELETE       ( pAnimation );

  000d0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR [eax+256], 0
  000da	74 3b		 je	 SHORT $LN2@sAnimation@2
  000dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000df	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [eax+256]
  000e5	89 4d b0	 mov	 DWORD PTR $T57318[ebp], ecx
  000e8	8b 55 b0	 mov	 edx, DWORD PTR $T57318[ebp]
  000eb	89 55 ac	 mov	 DWORD PTR $T57317[ebp], edx
  000ee	83 7d ac 00	 cmp	 DWORD PTR $T57317[ebp], 0
  000f2	74 0f		 je	 SHORT $LN9@sAnimation@2
  000f4	6a 01		 push	 1
  000f6	8b 4d ac	 mov	 ecx, DWORD PTR $T57317[ebp]
  000f9	e8 00 00 00 00	 call	 ??_GsAnimation@@QAEPAXI@Z
  000fe	89 45 98	 mov	 DWORD PTR tv91[ebp], eax
  00101	eb 07		 jmp	 SHORT $LN10@sAnimation@2
$LN9@sAnimation@2:
  00103	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN10@sAnimation@2:
  0010a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010d	c7 80 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+256], 0
$LN2@sAnimation@2:

; 234  : 	SAFE_DELETE       ( pNext );

  00117	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	83 b8 08 01 00
	00 00		 cmp	 DWORD PTR [eax+264], 0
  00121	74 3b		 je	 SHORT $LN7@sAnimation@2
  00123	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00126	8b 88 08 01 00
	00		 mov	 ecx, DWORD PTR [eax+264]
  0012c	89 4d b8	 mov	 DWORD PTR $T57322[ebp], ecx
  0012f	8b 55 b8	 mov	 edx, DWORD PTR $T57322[ebp]
  00132	89 55 b4	 mov	 DWORD PTR $T57321[ebp], edx
  00135	83 7d b4 00	 cmp	 DWORD PTR $T57321[ebp], 0
  00139	74 0f		 je	 SHORT $LN11@sAnimation@2
  0013b	6a 01		 push	 1
  0013d	8b 4d b4	 mov	 ecx, DWORD PTR $T57321[ebp]
  00140	e8 00 00 00 00	 call	 ??_GsAnimationSet@@QAEPAXI@Z
  00145	89 45 98	 mov	 DWORD PTR tv132[ebp], eax
  00148	eb 07		 jmp	 SHORT $LN12@sAnimation@2
$LN11@sAnimation@2:
  0014a	c7 45 98 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN12@sAnimation@2:
  00151	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00154	c7 80 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+264], 0
$LN7@sAnimation@2:

; 235  : }

  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi
  00160	5b		 pop	 ebx
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
??1sAnimationSet@@QAE@XZ ENDP				; sAnimationSet::~sAnimationSet
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_GsAnimationSet@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GsAnimationSet@@QAEPAXI@Z PROC			; sAnimationSet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1sAnimationSet@@QAE@XZ ; sAnimationSet::~sAnimationSet
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@4
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@4:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GsAnimationSet@@QAEPAXI@Z ENDP			; sAnimationSet::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0sPositionMatrices@@QAE@XZ			; sPositionMatrices::sPositionMatrices
PUBLIC	??0sPositionVectors@@QAE@XZ			; sPositionVectors::sPositionVectors
PUBLIC	??0sPositionData@@QAE@XZ			; sPositionData::sPositionData
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sPositionData@@QAE@XZ
_TEXT	SEGMENT
$T57329 = -140						; size = 12
$T57330 = -128						; size = 12
$T57331 = -116						; size = 12
$T57332 = -104						; size = 12
$T57333 = -92						; size = 12
$T57334 = -80						; size = 12
_this$ = -4						; size = 4
??0sPositionData@@QAE@XZ PROC				; sPositionData::sPositionData, COMDAT
; _this$ = ecx

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??0sPositionVectors@@QAE@XZ
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 c4 00 00
	00		 add	 ecx, 196		; 000000c4H
  00020	e8 00 00 00 00	 call	 ??0sPositionMatrices@@QAE@XZ

; 239  : 	memset ( this, 0, sizeof ( sPositionData ) );

  00025	68 04 04 00 00	 push	 1028			; 00000404H
  0002a	6a 00		 push	 0
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _memset
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 240  : 
; 241  : 	vecPosition	= D3DXVECTOR3 ( 0, 0, 0 );		// default settings

  00038	51		 push	 ecx
  00039	d9 ee		 fldz
  0003b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0003e	51		 push	 ecx
  0003f	d9 ee		 fldz
  00041	d9 1c 24	 fstp	 DWORD PTR [esp]
  00044	51		 push	 ecx
  00045	d9 ee		 fldz
  00047	d9 1c 24	 fstp	 DWORD PTR [esp]
  0004a	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T57329[ebp]
  00050	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@MMM@Z ; D3DXVECTOR3::D3DXVECTOR3
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 10		 mov	 edx, DWORD PTR [eax]
  0005a	89 11		 mov	 DWORD PTR [ecx], edx
  0005c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00062	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00065	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 242  : 	vecRotate	= D3DXVECTOR3 ( 0, 0, 0 );

  00068	51		 push	 ecx
  00069	d9 ee		 fldz
  0006b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0006e	51		 push	 ecx
  0006f	d9 ee		 fldz
  00071	d9 1c 24	 fstp	 DWORD PTR [esp]
  00074	51		 push	 ecx
  00075	d9 ee		 fldz
  00077	d9 1c 24	 fstp	 DWORD PTR [esp]
  0007a	8d 4d 80	 lea	 ecx, DWORD PTR $T57330[ebp]
  0007d	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@MMM@Z ; D3DXVECTOR3::D3DXVECTOR3
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00088	8b 10		 mov	 edx, DWORD PTR [eax]
  0008a	89 11		 mov	 DWORD PTR [ecx], edx
  0008c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0008f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00092	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00095	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 243  : 	vecScale    = D3DXVECTOR3 ( 1, 1, 1 );

  00098	51		 push	 ecx
  00099	d9 e8		 fld1
  0009b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0009e	51		 push	 ecx
  0009f	d9 e8		 fld1
  000a1	d9 1c 24	 fstp	 DWORD PTR [esp]
  000a4	51		 push	 ecx
  000a5	d9 e8		 fld1
  000a7	d9 1c 24	 fstp	 DWORD PTR [esp]
  000aa	8d 4d 8c	 lea	 ecx, DWORD PTR $T57331[ebp]
  000ad	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@MMM@Z ; D3DXVECTOR3::D3DXVECTOR3
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	83 c1 18	 add	 ecx, 24			; 00000018H
  000b8	8b 10		 mov	 edx, DWORD PTR [eax]
  000ba	89 11		 mov	 DWORD PTR [ecx], edx
  000bc	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000bf	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  000c2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c5	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 244  : 
; 245  : 	vecLook     = D3DXVECTOR3 ( 0, 0, 1 );		// look vector

  000c8	51		 push	 ecx
  000c9	d9 e8		 fld1
  000cb	d9 1c 24	 fstp	 DWORD PTR [esp]
  000ce	51		 push	 ecx
  000cf	d9 ee		 fldz
  000d1	d9 1c 24	 fstp	 DWORD PTR [esp]
  000d4	51		 push	 ecx
  000d5	d9 ee		 fldz
  000d7	d9 1c 24	 fstp	 DWORD PTR [esp]
  000da	8d 4d 98	 lea	 ecx, DWORD PTR $T57332[ebp]
  000dd	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@MMM@Z ; D3DXVECTOR3::D3DXVECTOR3
  000e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	83 c1 24	 add	 ecx, 36			; 00000024H
  000e8	8b 10		 mov	 edx, DWORD PTR [eax]
  000ea	89 11		 mov	 DWORD PTR [ecx], edx
  000ec	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ef	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  000f2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000f5	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 246  : 	vecUp       = D3DXVECTOR3 ( 0, 1, 0 );		// up vector

  000f8	51		 push	 ecx
  000f9	d9 ee		 fldz
  000fb	d9 1c 24	 fstp	 DWORD PTR [esp]
  000fe	51		 push	 ecx
  000ff	d9 e8		 fld1
  00101	d9 1c 24	 fstp	 DWORD PTR [esp]
  00104	51		 push	 ecx
  00105	d9 ee		 fldz
  00107	d9 1c 24	 fstp	 DWORD PTR [esp]
  0010a	8d 4d a4	 lea	 ecx, DWORD PTR $T57333[ebp]
  0010d	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@MMM@Z ; D3DXVECTOR3::D3DXVECTOR3
  00112	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	83 c1 30	 add	 ecx, 48			; 00000030H
  00118	8b 10		 mov	 edx, DWORD PTR [eax]
  0011a	89 11		 mov	 DWORD PTR [ecx], edx
  0011c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0011f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00122	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00125	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 247  : 	vecRight    = D3DXVECTOR3 ( 1, 0, 0 );		// right vector

  00128	51		 push	 ecx
  00129	d9 ee		 fldz
  0012b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0012e	51		 push	 ecx
  0012f	d9 ee		 fldz
  00131	d9 1c 24	 fstp	 DWORD PTR [esp]
  00134	51		 push	 ecx
  00135	d9 e8		 fld1
  00137	d9 1c 24	 fstp	 DWORD PTR [esp]
  0013a	8d 4d b0	 lea	 ecx, DWORD PTR $T57334[ebp]
  0013d	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@MMM@Z ; D3DXVECTOR3::D3DXVECTOR3
  00142	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00145	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00148	8b 10		 mov	 edx, DWORD PTR [eax]
  0014a	89 11		 mov	 DWORD PTR [ecx], edx
  0014c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00152	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00155	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 248  : 
; 249  : 	bFreeFlightRotation		= false;			// default euler rotation

  00158	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015b	c6 80 a0 00 00
	00 00		 mov	 BYTE PTR [eax+160], 0

; 250  : 	bApplyPivot				= false;

  00162	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00165	c6 80 a1 00 00
	00 00		 mov	 BYTE PTR [eax+161], 0

; 251  : 	bGlued					= false;

  0016c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016f	c6 80 a2 00 00
	00 00		 mov	 BYTE PTR [eax+162], 0

; 252  : 	dwRotationOrder			= ROTORDER_XYZ;

  00176	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00179	c7 80 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+172], 0

; 253  : 	D3DXMatrixIdentity		( &matFreeFlightRotate );

  00183	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00186	05 c4 02 00 00	 add	 eax, 708		; 000002c4H
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
  00191	83 c4 04	 add	 esp, 4

; 254  : 
; 255  : 	// Required for immediate limb data extraction (uses this matrix)
; 256  : 	D3DXMatrixIdentity ( &matWorld );

  00194	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00197	05 84 02 00 00	 add	 eax, 644		; 00000284H
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
  001a2	83 c4 04	 add	 esp, 4

; 257  : 
; 258  : 	// used for when world matrix is calculated manually
; 259  : 	bCustomWorldMatrix = false;

  001a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a8	c6 80 a3 00 00
	00 00		 mov	 BYTE PTR [eax+163], 0

; 260  : 	bCustomBoneMatrix = false;

  001af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b2	c6 80 b4 00 00
	00 00		 mov	 BYTE PTR [eax+180], 0

; 261  : }

  001b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c3		 ret	 0
??0sPositionData@@QAE@XZ ENDP				; sPositionData::sPositionData
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0sPositionVectors@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sPositionVectors@@QAE@XZ PROC			; sPositionVectors::sPositionVectors, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001a	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 c1 18	 add	 ecx, 24			; 00000018H
  00025	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	83 c1 24	 add	 ecx, 36			; 00000024H
  00030	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 30	 add	 ecx, 48			; 00000030H
  0003b	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00046	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 48	 add	 ecx, 72			; 00000048H
  00051	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	83 c1 54	 add	 ecx, 84			; 00000054H
  0005c	e8 00 00 00 00	 call	 ??0D3DXVECTOR3@@QAE@XZ	; D3DXVECTOR3::D3DXVECTOR3
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	83 c1 60	 add	 ecx, 96			; 00000060H
  00067	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
??0sPositionVectors@@QAE@XZ ENDP			; sPositionVectors::sPositionVectors
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0sPositionMatrices@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sPositionMatrices@@QAE@XZ PROC			; sPositionMatrices::sPositionMatrices, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	83 c1 40	 add	 ecx, 64			; 00000040H
  0001a	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00028	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	81 c1 c0 00 00
	00		 add	 ecx, 192		; 000000c0H
  00036	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00044	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	81 c1 40 01 00
	00		 add	 ecx, 320		; 00000140H
  00052	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	81 c1 80 01 00
	00		 add	 ecx, 384		; 00000180H
  00060	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	81 c1 c0 01 00
	00		 add	 ecx, 448		; 000001c0H
  0006e	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	81 c1 00 02 00
	00		 add	 ecx, 512		; 00000200H
  0007c	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	81 c1 40 02 00
	00		 add	 ecx, 576		; 00000240H
  0008a	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	81 c1 80 02 00
	00		 add	 ecx, 640		; 00000280H
  00098	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	81 c1 c0 02 00
	00		 add	 ecx, 704		; 000002c0H
  000a6	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	81 c1 00 03 00
	00		 add	 ecx, 768		; 00000300H
  000b4	e8 00 00 00 00	 call	 ??0D3DXMATRIX@@QAE@XZ	; D3DXMATRIX::D3DXMATRIX
  000b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
??0sPositionMatrices@@QAE@XZ ENDP			; sPositionMatrices::sPositionMatrices
_TEXT	ENDS
PUBLIC	??1sPositionData@@QAE@XZ			; sPositionData::~sPositionData
; Function compile flags: /Odtp /ZI
;	COMDAT ??1sPositionData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sPositionData@@QAE@XZ PROC				; sPositionData::~sPositionData, COMDAT
; _this$ = ecx

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 265  : 
; 266  : }

  0000c	5f		 pop	 edi
  0000d	5e		 pop	 esi
  0000e	5b		 pop	 ebx
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1sPositionData@@QAE@XZ ENDP				; sPositionData::~sPositionData
_TEXT	ENDS
PUBLIC	??1sObjectDelete@@QAE@XZ			; sObjectDelete::~sObjectDelete
PUBLIC	??1sObjectData@@QAE@XZ				; sObjectData::~sObjectData
PUBLIC	??0sObjectCustom@@QAE@XZ			; sObjectCustom::sObjectCustom
PUBLIC	??0sObjectData@@QAE@XZ				; sObjectData::sObjectData
PUBLIC	??0sObject@@QAE@XZ				; sObject::sObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sObject@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sObject@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0sObject@@QAE@XZ$1
__ehfuncinfo$??0sObject@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0sObject@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0sObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0sObject@@QAE@XZ PROC					; sObject::sObject, COMDAT
; _this$ = ecx

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sObject@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0sObjectData@@QAE@XZ
  00033	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	81 c1 24 05 00
	00		 add	 ecx, 1316		; 00000524H
  00043	e8 00 00 00 00	 call	 ??0sObjectCustom@@QAE@XZ ; sObjectCustom::sObjectCustom

; 270  : 	pDelete					= NULL;

  00048	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c7 80 18 05 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1304], 0

; 271  : 	iDeleteCount			= 0;

  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	c7 80 1c 05 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1308], 0

; 272  : 	iDeleteID				= 0;

  00062	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00065	c7 80 20 05 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1312], 0

; 273  : 	bDisableTransform		= false;

  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	c6 80 a2 04 00
	00 00		 mov	 BYTE PTR [eax+1186], 0

; 274  : 	fFOV					= 0.0f;

  00079	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	d9 ee		 fldz
  0007e	d9 98 a4 04 00
	00		 fstp	 DWORD PTR [eax+1188]

; 275  : 	iInsideUniverseArea		= -1;

  00084	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00087	c7 80 a8 04 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+1192], -1

; 276  : 
; 277  : 	pInstanceOfObject		= NULL;

  00091	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00094	c7 80 08 05 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1288], 0

; 278  : 	pInstanceMeshVisible	= NULL;

  0009e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	c7 80 0c 05 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1292], 0

; 279  : 	bInstanceAlphaOverride	= false;

  000ab	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	c6 80 10 05 00
	00 00		 mov	 BYTE PTR [eax+1296], 0

; 280  : 	dwInstanceAlphaOverride	= 0;

  000b5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	c7 80 14 05 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1300], 0

; 281  : 
; 282  : 	pFrame					= NULL;

  000c2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 283  : 	pAnimationSet			= NULL;

  000cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 284  : 	iMeshCount				= 0;

  000d6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d9	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 285  : 	iFrameCount				= 0;

  000df	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 286  : 	ppMeshList				= NULL;

  000e9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 287  : 	ppFrameList				= NULL;

  000f3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 288  : 
; 289  : 	bVisible				= true;

  000fd	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00100	c6 80 88 04 00
	00 01		 mov	 BYTE PTR [eax+1160], 1

; 290  : 	bUniverseVisible		= true;

  00107	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	c6 80 89 04 00
	00 01		 mov	 BYTE PTR [eax+1161], 1

; 291  : 	bNoMeshesInObject		= false;

  00111	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00114	c6 80 8a 04 00
	00 00		 mov	 BYTE PTR [eax+1162], 0

; 292  : 	bUpdateOverallBounds	= false;

  0011b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0011e	c6 80 8b 04 00
	00 00		 mov	 BYTE PTR [eax+1163], 0

; 293  : 	bUpdateOnlyCurrentFrameBounds = true;		// false 290506 - u62 - restored pre-U6 behaviour of boundbox

  00125	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00128	c6 80 8c 04 00
	00 01		 mov	 BYTE PTR [eax+1164], 1

; 294  : 
; 295  : 	bDrawBounds				= false;

  0012f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00132	c6 80 97 04 00
	00 00		 mov	 BYTE PTR [eax+1175], 0

; 296  : 	bCastsAShadow			= false;

  00139	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0013c	c6 80 9b 04 00
	00 00		 mov	 BYTE PTR [eax+1179], 0

; 297  : 	pShadowMesh				= NULL;

  00143	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00146	c7 80 9c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1180], 0

; 298  : 	bExcluded				= false;

  00150	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00153	c6 80 a1 04 00
	00 00		 mov	 BYTE PTR [eax+1185], 0

; 299  : 
; 300  : 	bOverlayObject			= false;

  0015a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0015d	c6 80 8d 04 00
	00 00		 mov	 BYTE PTR [eax+1165], 0

; 301  : 	bGhostedObject			= false;

  00164	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00167	c6 80 8e 04 00
	00 00		 mov	 BYTE PTR [eax+1166], 0

; 302  : 	bTransparentObject		= false;

  0016e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00171	c6 80 8f 04 00
	00 00		 mov	 BYTE PTR [eax+1167], 0

; 303  : 	bNewZLayerObject		= false;

  00178	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0017b	c6 80 91 04 00
	00 00		 mov	 BYTE PTR [eax+1169], 0

; 304  : 	bLockedObject			= false;

  00182	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00185	c6 80 92 04 00
	00 00		 mov	 BYTE PTR [eax+1170], 0

; 305  : 	bStencilObject			= false;

  0018c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0018f	c6 80 93 04 00
	00 00		 mov	 BYTE PTR [eax+1171], 0

; 306  : 	bReflectiveObject		= false;

  00196	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00199	c6 80 94 04 00
	00 00		 mov	 BYTE PTR [eax+1172], 0

; 307  : 	bReflectiveClipping		= false;

  001a0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001a3	c6 80 95 04 00
	00 00		 mov	 BYTE PTR [eax+1173], 0

; 308  : 	bHadLODNeedCamDistance	= false;

  001aa	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001ad	c6 80 96 04 00
	00 00		 mov	 BYTE PTR [eax+1174], 0

; 309  : 
; 310  : 	bAnimPlaying			= false;

  001b4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001b7	c6 80 d4 04 00
	00 00		 mov	 BYTE PTR [eax+1236], 0

; 311  : 	bAnimLooping			= false;

  001be	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001c1	c6 80 d5 04 00
	00 00		 mov	 BYTE PTR [eax+1237], 0

; 312  : 	bAnimUpdateOnce			= false;

  001c8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001cb	c6 80 d6 04 00
	00 00		 mov	 BYTE PTR [eax+1238], 0

; 313  : 	fAnimFrame				= 0.0f;

  001d2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001d5	d9 ee		 fldz
  001d7	d9 98 d8 04 00
	00		 fstp	 DWORD PTR [eax+1240]

; 314  : 	fAnimSpeed				= 1.0f;

  001dd	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001e0	d9 e8		 fld1
  001e2	d9 98 e0 04 00
	00		 fstp	 DWORD PTR [eax+1248]

; 315  : 	fAnimLoopStart			= 0.0f;

  001e8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001eb	d9 ee		 fldz
  001ed	d9 98 e4 04 00
	00		 fstp	 DWORD PTR [eax+1252]

; 316  : 	fAnimFrameEnd			= 0.0f;

  001f3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001f6	d9 ee		 fldz
  001f8	d9 98 e8 04 00
	00		 fstp	 DWORD PTR [eax+1256]

; 317  : 	fAnimTotalFrames		= 0.0f;

  001fe	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00201	d9 ee		 fldz
  00203	d9 98 ec 04 00
	00		 fstp	 DWORD PTR [eax+1260]

; 318  : 
; 319  : 	bAnimManualSlerp		= false;

  00209	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0020c	c6 80 f0 04 00
	00 00		 mov	 BYTE PTR [eax+1264], 0

; 320  : 	fAnimSlerpStartFrame	= 0.0f;

  00213	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00216	d9 ee		 fldz
  00218	d9 98 f4 04 00
	00		 fstp	 DWORD PTR [eax+1268]

; 321  : 	fAnimSlerpEndFrame		= 0.0f;

  0021e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00221	d9 ee		 fldz
  00223	d9 98 f8 04 00
	00		 fstp	 DWORD PTR [eax+1272]

; 322  : 	fAnimSlerpTime			= 0.0f;

  00229	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0022c	d9 ee		 fldz
  0022e	d9 98 00 05 00
	00		 fstp	 DWORD PTR [eax+1280]

; 323  : 	fAnimInterp				= 1.0f;

  00234	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00237	d9 e8		 fld1
  00239	d9 98 04 05 00
	00		 fstp	 DWORD PTR [eax+1284]

; 324  : 
; 325  : 	bStatic						= false;

  0023f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00242	c6 80 98 04 00
	00 00		 mov	 BYTE PTR [eax+1176], 0

; 326  : 	bUsesItsOwnBuffers			= true; // can be changed in ObjSetup (bGlobalVBIBUsageFlag)

  00249	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0024c	c6 80 99 04 00
	00 01		 mov	 BYTE PTR [eax+1177], 1

; 327  : 	bReplaceObjectFromBuffers	= false;

  00253	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00256	c6 80 9a 04 00
	00 00		 mov	 BYTE PTR [eax+1178], 0

; 328  : 
; 329  : 	fLODDistance[0]				= 0;

  0025d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00260	d9 ee		 fldz
  00262	d9 98 ac 04 00
	00		 fstp	 DWORD PTR [eax+1196]

; 330  : 	fLODDistance[1]				= 0;

  00268	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0026b	d9 ee		 fldz
  0026d	d9 98 b0 04 00
	00		 fstp	 DWORD PTR [eax+1200]

; 331  : 	iUsingWhichLOD				= 0;

  00273	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00276	c7 80 b4 04 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1204], 0

; 332  : 
; 333  : 	dwCameraMaskBits			= 4294967295;	// lee - 211006 - u63 - for darkshader

  00280	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00283	c7 80 c4 04 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+1220], -1

; 334  : }

  0028d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00294	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00297	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0029a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002a1	59		 pop	 ecx
  002a2	5f		 pop	 edi
  002a3	5e		 pop	 esi
  002a4	5b		 pop	 ebx
  002a5	8b e5		 mov	 esp, ebp
  002a7	5d		 pop	 ebp
  002a8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sObject@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sObjectData@@QAE@XZ
__unwindfunclet$??0sObject@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 18 05 00
	00		 add	 ecx, 1304		; 00000518H
  00011	e9 00 00 00 00	 jmp	 ??1sObjectDelete@@QAE@XZ ; sObjectDelete::~sObjectDelete
__ehhandler$??0sObject@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sObject@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sObject@@QAE@XZ ENDP					; sObject::sObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sObjectData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sObjectData@@QAE@XZ$0
__ehfuncinfo$??0sObjectData@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sObjectData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0sObjectData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0sObjectData@@QAE@XZ PROC				; sObjectData::sObjectData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sObjectData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 18	 add	 ecx, 24			; 00000018H
  00031	e8 00 00 00 00	 call	 ??0sCollisionData@@QAE@XZ ; sCollisionData::sCollisionData
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00046	e8 00 00 00 00	 call	 ??0sPositionData@@QAE@XZ ; sPositionData::sPositionData
  0004b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005f	59		 pop	 ecx
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sObjectData@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	e9 00 00 00 00	 jmp	 ??1sCollisionData@@QAE@XZ ; sCollisionData::~sCollisionData
__ehhandler$??0sObjectData@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sObjectData@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sObjectData@@QAE@XZ ENDP				; sObjectData::sObjectData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sObjectData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sObjectData@@QAE@XZ$0
__ehfuncinfo$??1sObjectData@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sObjectData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1sObjectData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sObjectData@@QAE@XZ PROC				; sObjectData::~sObjectData, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sObjectData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0003b	e8 00 00 00 00	 call	 ??1sPositionData@@QAE@XZ ; sPositionData::~sPositionData
  00040	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 c1 18	 add	 ecx, 24			; 00000018H
  0004d	e8 00 00 00 00	 call	 ??1sCollisionData@@QAE@XZ ; sCollisionData::~sCollisionData
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sObjectData@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 18	 add	 ecx, 24			; 00000018H
  00006	e9 00 00 00 00	 jmp	 ??1sCollisionData@@QAE@XZ ; sCollisionData::~sCollisionData
__ehhandler$??1sObjectData@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sObjectData@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sObjectData@@QAE@XZ ENDP				; sObjectData::~sObjectData
PUBLIC	??1sObjectCustom@@QAE@XZ			; sObjectCustom::~sObjectCustom
PUBLIC	??1sObject@@QAE@XZ				; sObject::~sObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sObject@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sObject@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1sObject@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1sObject@@QAE@XZ$2
__ehfuncinfo$??1sObject@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1sObject@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1sObject@@QAE@XZ
_TEXT	SEGMENT
tv258 = -132						; size = 4
tv201 = -132						; size = 4
tv180 = -132						; size = 4
$T57374 = -128						; size = 4
$T57375 = -124						; size = 4
$T57376 = -120						; size = 4
$T57379 = -116						; size = 4
$T57380 = -112						; size = 4
$T57383 = -108						; size = 4
$T57384 = -104						; size = 4
$T57385 = -100						; size = 4
$T57388 = -96						; size = 4
_m$57006 = -28						; size = 4
_f$56990 = -24						; size = 4
_m$56985 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sObject@@QAE@XZ PROC					; sObject::~sObject, COMDAT
; _this$ = ecx

; 337  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sObject@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 78	 sub	 esp, 120		; 00000078H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 338  : 	// lee - 290306 - u6rc3 - clear rogue meshes from meshlist
; 339  : 	// for each mesh reference, clear ptr if mesh found in frame list
; 340  : 	for ( int m=0; m<(int)iMeshCount; m++ )

  00032	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _m$56985[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN17@sObject
$LN16@sObject:
  0003b	8b 45 ec	 mov	 eax, DWORD PTR _m$56985[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 ec	 mov	 DWORD PTR _m$56985[ebp], eax
$LN17@sObject:
  00044	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4d ec	 mov	 ecx, DWORD PTR _m$56985[ebp]
  0004a	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0004c	7d 51		 jge	 SHORT $LN15@sObject

; 341  : 		for ( int f=0; f<(int)iFrameCount; f++ )

  0004e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _f$56990[ebp], 0
  00055	eb 09		 jmp	 SHORT $LN14@sObject
$LN13@sObject:
  00057	8b 45 e8	 mov	 eax, DWORD PTR _f$56990[ebp]
  0005a	83 c0 01	 add	 eax, 1
  0005d	89 45 e8	 mov	 DWORD PTR _f$56990[ebp], eax
$LN14@sObject:
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d e8	 mov	 ecx, DWORD PTR _f$56990[ebp]
  00066	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00069	7d 32		 jge	 SHORT $LN12@sObject

; 342  : 			if ( ppFrameList [ f ]->pMesh==ppMeshList [ m ] )

  0006b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00071	8b 55 e8	 mov	 edx, DWORD PTR _f$56990[ebp]
  00074	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR _m$56985[ebp]
  00080	8b 80 f8 02 00
	00		 mov	 eax, DWORD PTR [eax+760]
  00086	3b 04 8a	 cmp	 eax, DWORD PTR [edx+ecx*4]
  00089	75 10		 jne	 SHORT $LN11@sObject

; 343  : 				ppMeshList [ m ] = NULL;

  0008b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00091	8b 55 ec	 mov	 edx, DWORD PTR _m$56985[ebp]
  00094	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0
$LN11@sObject:

; 344  : 	
; 345  : 	// delete any previously allocate memory
; 346  : 	SAFE_DELETE		  ( pInstanceMeshVisible );

  0009b	eb ba		 jmp	 SHORT $LN13@sObject
$LN12@sObject:
  0009d	eb 9c		 jmp	 SHORT $LN16@sObject
$LN15@sObject:
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	83 b8 0c 05 00
	00 00		 cmp	 DWORD PTR [eax+1292], 0
  000a9	74 25		 je	 SHORT $LN10@sObject
  000ab	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 88 0c 05 00
	00		 mov	 ecx, DWORD PTR [eax+1292]
  000b4	89 4d 80	 mov	 DWORD PTR $T57374[ebp], ecx
  000b7	8b 55 80	 mov	 edx, DWORD PTR $T57374[ebp]
  000ba	52		 push	 edx
  000bb	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c0	83 c4 04	 add	 esp, 4
  000c3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	c7 80 0c 05 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1292], 0
$LN10@sObject:

; 347  : 	SAFE_DELETE       ( pFrame );

  000d0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000d7	74 3b		 je	 SHORT $LN9@sObject
  000d9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000df	89 4d 88	 mov	 DWORD PTR $T57376[ebp], ecx
  000e2	8b 55 88	 mov	 edx, DWORD PTR $T57376[ebp]
  000e5	89 55 84	 mov	 DWORD PTR $T57375[ebp], edx
  000e8	83 7d 84 00	 cmp	 DWORD PTR $T57375[ebp], 0
  000ec	74 12		 je	 SHORT $LN20@sObject
  000ee	6a 01		 push	 1
  000f0	8b 4d 84	 mov	 ecx, DWORD PTR $T57375[ebp]
  000f3	e8 00 00 00 00	 call	 ??_GsFrame@@QAEPAXI@Z
  000f8	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv180[ebp], eax
  000fe	eb 0a		 jmp	 SHORT $LN21@sObject
$LN20@sObject:
  00100	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv180[ebp], 0
$LN21@sObject:
  0010a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010d	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN9@sObject:

; 348  : 	SAFE_DELETE       ( pAnimationSet );

  00114	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00117	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0011b	74 3b		 je	 SHORT $LN8@sObject
  0011d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00120	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00123	89 4d 90	 mov	 DWORD PTR $T57380[ebp], ecx
  00126	8b 55 90	 mov	 edx, DWORD PTR $T57380[ebp]
  00129	89 55 8c	 mov	 DWORD PTR $T57379[ebp], edx
  0012c	83 7d 8c 00	 cmp	 DWORD PTR $T57379[ebp], 0
  00130	74 12		 je	 SHORT $LN22@sObject
  00132	6a 01		 push	 1
  00134	8b 4d 8c	 mov	 ecx, DWORD PTR $T57379[ebp]
  00137	e8 00 00 00 00	 call	 ??_GsAnimationSet@@QAEPAXI@Z
  0013c	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv201[ebp], eax
  00142	eb 0a		 jmp	 SHORT $LN23@sObject
$LN22@sObject:
  00144	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv201[ebp], 0
$LN23@sObject:
  0014e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00151	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
$LN8@sObject:

; 349  : 	SAFE_DELETE       ( ppFrameList );

  00158	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0015b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0015f	74 1f		 je	 SHORT $LN7@sObject
  00161	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00164	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00167	89 4d 94	 mov	 DWORD PTR $T57383[ebp], ecx
  0016a	8b 55 94	 mov	 edx, DWORD PTR $T57383[ebp]
  0016d	52		 push	 edx
  0016e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00173	83 c4 04	 add	 esp, 4
  00176	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00179	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$LN7@sObject:

; 350  : 
; 351  : 	// lee - 290306 - u6rc3 - command like MAKE OBJECT FROM LIMB can store meshes without frame links
; 352  : 	for ( int m=0; m<(int)iMeshCount; m++ )

  00180	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _m$57006[ebp], 0
  00187	eb 09		 jmp	 SHORT $LN6@sObject
$LN5@sObject:
  00189	8b 45 e4	 mov	 eax, DWORD PTR _m$57006[ebp]
  0018c	83 c0 01	 add	 eax, 1
  0018f	89 45 e4	 mov	 DWORD PTR _m$57006[ebp], eax
$LN6@sObject:
  00192	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00195	8b 4d e4	 mov	 ecx, DWORD PTR _m$57006[ebp]
  00198	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0019a	7d 67		 jge	 SHORT $LN4@sObject

; 353  : 		if ( ppMeshList [ m ] )

  0019c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0019f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001a2	8b 55 e4	 mov	 edx, DWORD PTR _m$57006[ebp]
  001a5	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  001a9	74 56		 je	 SHORT $LN3@sObject

; 354  : 			SAFE_DELETE ( ppMeshList [ m ] );

  001ab	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001ae	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001b1	8b 55 e4	 mov	 edx, DWORD PTR _m$57006[ebp]
  001b4	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  001b8	74 47		 je	 SHORT $LN3@sObject
  001ba	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001bd	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001c0	8b 55 e4	 mov	 edx, DWORD PTR _m$57006[ebp]
  001c3	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  001c6	89 45 9c	 mov	 DWORD PTR $T57385[ebp], eax
  001c9	8b 4d 9c	 mov	 ecx, DWORD PTR $T57385[ebp]
  001cc	89 4d 98	 mov	 DWORD PTR $T57384[ebp], ecx
  001cf	83 7d 98 00	 cmp	 DWORD PTR $T57384[ebp], 0
  001d3	74 12		 je	 SHORT $LN24@sObject
  001d5	6a 01		 push	 1
  001d7	8b 4d 98	 mov	 ecx, DWORD PTR $T57384[ebp]
  001da	e8 00 00 00 00	 call	 ??_GsMesh@@QAEPAXI@Z
  001df	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv258[ebp], eax
  001e5	eb 0a		 jmp	 SHORT $LN25@sObject
$LN24@sObject:
  001e7	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv258[ebp], 0
$LN25@sObject:
  001f1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001f4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001f7	8b 55 e4	 mov	 edx, DWORD PTR _m$57006[ebp]
  001fa	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0
$LN3@sObject:
  00201	eb 86		 jmp	 SHORT $LN5@sObject
$LN4@sObject:

; 355  : 
; 356  : 	// finally clear mesh reference list
; 357  : 	SAFE_DELETE       ( ppMeshList );

  00203	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00206	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0020a	74 1f		 je	 SHORT $LN18@sObject
  0020c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0020f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00212	89 4d a0	 mov	 DWORD PTR $T57388[ebp], ecx
  00215	8b 55 a0	 mov	 edx, DWORD PTR $T57388[ebp]
  00218	52		 push	 edx
  00219	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0021e	83 c4 04	 add	 esp, 4
  00221	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00224	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN18@sObject:

; 358  : }

  0022b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0022f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00232	81 c1 24 05 00
	00		 add	 ecx, 1316		; 00000524H
  00238	e8 00 00 00 00	 call	 ??1sObjectCustom@@QAE@XZ ; sObjectCustom::~sObjectCustom
  0023d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00241	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00244	81 c1 18 05 00
	00		 add	 ecx, 1304		; 00000518H
  0024a	e8 00 00 00 00	 call	 ??1sObjectDelete@@QAE@XZ ; sObjectDelete::~sObjectDelete
  0024f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00256	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00259	e8 00 00 00 00	 call	 ??1sObjectData@@QAE@XZ
  0025e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00261	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00268	59		 pop	 ecx
  00269	5f		 pop	 edi
  0026a	5e		 pop	 esi
  0026b	5b		 pop	 ebx
  0026c	8b e5		 mov	 esp, ebp
  0026e	5d		 pop	 ebp
  0026f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sObject@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sObjectData@@QAE@XZ
__unwindfunclet$??1sObject@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 18 05 00
	00		 add	 ecx, 1304		; 00000518H
  00011	e9 00 00 00 00	 jmp	 ??1sObjectDelete@@QAE@XZ ; sObjectDelete::~sObjectDelete
__unwindfunclet$??1sObject@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 24 05 00
	00		 add	 ecx, 1316		; 00000524H
  0001f	e9 00 00 00 00	 jmp	 ??1sObjectCustom@@QAE@XZ ; sObjectCustom::~sObjectCustom
__ehhandler$??1sObject@@QAE@XZ:
  00024	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00028	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002b	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sObject@@QAE@XZ
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sObject@@QAE@XZ ENDP					; sObject::~sObject
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sObjectCustom@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sObjectCustom@@QAE@XZ PROC				; sObjectCustom::sObjectCustom, COMDAT
; _this$ = ecx

; 361  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 362  : 	// 280305 - used when objects want to store custom data for example when
; 363  : 	//        - they save and want to save out this data
; 364  : 
; 365  : 	dwCustomSize = 0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 366  : 	pCustomData  = NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 367  : 
; 368  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0sObjectCustom@@QAE@XZ ENDP				; sObjectCustom::sObjectCustom
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1sObjectCustom@@QAE@XZ
_TEXT	SEGMENT
$T57402 = -72						; size = 4
_this$ = -4						; size = 4
??1sObjectCustom@@QAE@XZ PROC				; sObjectCustom::~sObjectCustom, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 373  : 	SAFE_DELETE_ARRAY ( pCustomData );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00013	74 1f		 je	 SHORT $LN2@sObjectCus
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	89 4d b8	 mov	 DWORD PTR $T57402[ebp], ecx
  0001e	8b 55 b8	 mov	 edx, DWORD PTR $T57402[ebp]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN2@sObjectCus:

; 374  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??1sObjectCustom@@QAE@XZ ENDP				; sObjectCustom::~sObjectCustom
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1sObjectDelete@@QAE@XZ
_TEXT	SEGMENT
$T57405 = -72						; size = 4
_this$ = -4						; size = 4
??1sObjectDelete@@QAE@XZ PROC				; sObjectDelete::~sObjectDelete, COMDAT
; _this$ = ecx

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 379  : 	SAFE_DELETE_ARRAY ( pDelete );

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00012	74 1d		 je	 SHORT $LN2@sObjectDel
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	89 4d b8	 mov	 DWORD PTR $T57405[ebp], ecx
  0001c	8b 55 b8	 mov	 edx, DWORD PTR $T57405[ebp]
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN2@sObjectDel:

; 380  : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??1sObjectDelete@@QAE@XZ ENDP				; sObjectDelete::~sObjectDelete
_TEXT	ENDS
END
