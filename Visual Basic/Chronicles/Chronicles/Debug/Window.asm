; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\Users\FireEmblem16\Documents\Visual Studio 2008\Projects\Chronicles\Chronicles\Source\Window.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	?SetRefreshRate@Window@@QAEXH@Z			; Window::SetRefreshRate
PUBLIC	?SetCD@Window@@QAEXPAD@Z			; Window::SetCD
PUBLIC	?SetWindowPosition@Window@@QAEXHH@Z		; Window::SetWindowPosition
PUBLIC	?SetWindowTitle@Window@@QAEXPAD@Z		; Window::SetWindowTitle
PUBLIC	??0Window@@QAE@H_N00HHPAD1@Z			; Window::Window
EXTRN	?dbWindowToFront@@YAXXZ:PROC			; dbWindowToFront
EXTRN	?dbShowWindow@@YAXXZ:PROC			; dbShowWindow
EXTRN	?dbDisableEscapeKey@@YAXXZ:PROC			; dbDisableEscapeKey
EXTRN	?dbEnableEscapeKey@@YAXXZ:PROC			; dbEnableEscapeKey
EXTRN	?dbDisableSystemKeys@@YAXXZ:PROC		; dbDisableSystemKeys
EXTRN	?dbEnableSystemKeys@@YAXXZ:PROC			; dbEnableSystemKeys
EXTRN	?dbSetWindowLayout@@YAXHHH@Z:PROC		; dbSetWindowLayout
EXTRN	?dbSetWindowOn@@YAXXZ:PROC			; dbSetWindowOn
EXTRN	?dbSetWindowOff@@YAXXZ:PROC			; dbSetWindowOff
EXTRN	?dbScreenWidth@@YAHXZ:PROC			; dbScreenWidth
EXTRN	?dbScreenHeight@@YAHXZ:PROC			; dbScreenHeight
EXTRN	?dbScreenDepth@@YAHXZ:PROC			; dbScreenDepth
EXTRN	?dbSetDisplayMode@@YAXHHH@Z:PROC		; dbSetDisplayMode
EXTRN	?dbChecklistValueC@@YAHH@Z:PROC			; dbChecklistValueC
EXTRN	?dbChecklistValueB@@YAHH@Z:PROC			; dbChecklistValueB
EXTRN	?dbChecklistValueA@@YAHH@Z:PROC			; dbChecklistValueA
EXTRN	?dbPerformChecklistForDisplayModes@@YAXXZ:PROC	; dbPerformChecklistForDisplayModes
EXTRN	?dbEmptyChecklist@@YAXXZ:PROC			; dbEmptyChecklist
EXTRN	?dbSetGraphicsCard@@YAXPAD@Z:PROC		; dbSetGraphicsCard
EXTRN	?dbChecklistString@@YAPADH@Z:PROC		; dbChecklistString
EXTRN	?dbPerformChecklistForGraphicsCards@@YAXXZ:PROC	; dbPerformChecklistForGraphicsCards
EXTRN	?dbCl$@@YAPADXZ:PROC				; dbCl$
EXTRN	?dbScreenFPS@@YAHXZ:PROC			; dbScreenFPS
EXTRN	?dbHideWindow@@YAXXZ:PROC			; dbHideWindow
; Function compile flags: /Odtp /ZI
; File c:\users\fireemblem16\documents\visual studio 2008\projects\chronicles\chronicles\source\window.cpp
;	COMDAT ??0Window@@QAE@H_N00HHPAD1@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_FPS$ = 8						; size = 4
_Full$ = 12						; size = 1
_SysKeys$ = 16						; size = 1
_Esc$ = 20						; size = 1
_X$ = 24						; size = 4
_Y$ = 28						; size = 4
_CD$ = 32						; size = 4
_Title$ = 36						; size = 4
??0Window@@QAE@H_N00HHPAD1@Z PROC			; Window::Window, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 23   : 	dbHideWindow();

	call	?dbHideWindow@@YAXXZ			; dbHideWindow

; 24   : 
; 25   : 	this->RefreshRate=FPS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _FPS$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 26   : 	this->FullScreen=Full;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _Full$[ebp]
	mov	BYTE PTR [eax+1], cl

; 27   : 	this->EscapeOn=Esc;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _Esc$[ebp]
	mov	BYTE PTR [eax], cl

; 28   : 	this->SystemKeysOn=SysKeys;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _SysKeys$[ebp]
	mov	BYTE PTR [eax+2], cl

; 29   : 	this->WindowTitle=Title;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Title$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 30   : 	this->ActiveFPS=dbScreenFPS();

	call	?dbScreenFPS@@YAHXZ			; dbScreenFPS
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 31   : 
; 32   : 	this->WindowXPos=X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _X$[ebp]
	mov	DWORD PTR [eax+60], ecx

; 33   : 	this->WindowYPos=Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Y$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 34   : 	this->CurrentDirectory=CD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _CD$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 35   : 
; 36   : 	this->SetWindowTitle(this->WindowTitle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWindowTitle@Window@@QAEXPAD@Z	; Window::SetWindowTitle

; 37   : 	this->SetWindowPosition(this->WindowXPos,this->WindowYPos);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWindowPosition@Window@@QAEXHH@Z	; Window::SetWindowPosition

; 38   : 	this->SetCD(this->CurrentDirectory);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCD@Window@@QAEXPAD@Z		; Window::SetCD

; 39   : 	this->CommandString=dbCl$();

	call	?dbCl$@@YAPADXZ				; dbCl$
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 40   : 
; 41   : 	dbPerformChecklistForGraphicsCards();

	call	?dbPerformChecklistForGraphicsCards@@YAXXZ ; dbPerformChecklistForGraphicsCards

; 42   : 	for(this->NumberOfGraphicsCards=0;NULL!=dbChecklistString(this->NumberOfGraphicsCards+1);this->NumberOfGraphicsCards++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
	jmp	SHORT $LN19@Window
$LN18@Window:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], ecx
$LN19@Window:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	test	eax, eax
	je	SHORT $LN17@Window
	jmp	SHORT $LN18@Window
$LN17@Window:

; 43   : 	if(this->NumberOfGraphicsCards>0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jle	SHORT $LN16@Window

; 44   : 	{
; 45   : 		this->CurrentGraphicsCard=1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 1

; 46   : 		
; 47   : 		this->CurrentGraphicsCard$=dbChecklistString(this->CurrentGraphicsCard);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 48   : 		dbSetGraphicsCard(dbChecklistString(this->CurrentGraphicsCard));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	push	eax
	call	?dbSetGraphicsCard@@YAXPAD@Z		; dbSetGraphicsCard
	add	esp, 4
$LN16@Window:

; 49   : 	}
; 50   : 	dbEmptyChecklist();

	call	?dbEmptyChecklist@@YAXXZ		; dbEmptyChecklist

; 51   : 
; 52   : 	dbPerformChecklistForDisplayModes();

	call	?dbPerformChecklistForDisplayModes@@YAXXZ ; dbPerformChecklistForDisplayModes

; 53   : 	for(this->NumberOfResolutions=0;NULL!=dbChecklistString(this->NumberOfResolutions+1);this->NumberOfResolutions++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	jmp	SHORT $LN15@Window
$LN14@Window:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx
$LN15@Window:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	test	eax, eax
	je	SHORT $LN13@Window
	jmp	SHORT $LN14@Window
$LN13@Window:

; 54   : 	if(this->NumberOfResolutions>0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jle	$LN12@Window

; 55   : 	{
; 56   : 		if(this->FullScreen)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN11@Window

; 57   : 			this->CurrentResolution=1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 1

; 58   : 		else

	jmp	SHORT $LN10@Window
$LN11@Window:

; 59   : 			for(this->CurrentResolution=1;dbChecklistValueA(this->CurrentResolution)!=800&&dbChecklistValueB(this->CurrentResolution)!=600;this->CurrentResolution++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 1
	jmp	SHORT $LN9@Window
$LN8@Window:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx
$LN9@Window:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?dbChecklistValueA@@YAHH@Z		; dbChecklistValueA
	add	esp, 4
	cmp	eax, 800				; 00000320H
	je	SHORT $LN10@Window
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?dbChecklistValueB@@YAHH@Z		; dbChecklistValueB
	add	esp, 4
	cmp	eax, 600				; 00000258H
	je	SHORT $LN10@Window
	jmp	SHORT $LN8@Window
$LN10@Window:

; 60   : 		
; 61   : 		this->CurrentResolution$=dbChecklistString(this->CurrentResolution);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax

; 62   : 		dbSetDisplayMode(dbChecklistValueA(this->CurrentResolution),dbChecklistValueB(this->CurrentResolution),dbChecklistValueC(this->CurrentResolution));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?dbChecklistValueC@@YAHH@Z		; dbChecklistValueC
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	?dbChecklistValueB@@YAHH@Z		; dbChecklistValueB
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	?dbChecklistValueA@@YAHH@Z		; dbChecklistValueA
	add	esp, 4
	push	eax
	call	?dbSetDisplayMode@@YAXHHH@Z		; dbSetDisplayMode
	add	esp, 12					; 0000000cH
$LN12@Window:

; 63   : 	}
; 64   : 	dbEmptyChecklist();

	call	?dbEmptyChecklist@@YAXXZ		; dbEmptyChecklist

; 65   : 
; 66   : 	this->SetRefreshRate(this->RefreshRate);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRefreshRate@Window@@QAEXH@Z		; Window::SetRefreshRate

; 67   : 	this->Depth=dbScreenDepth();

	call	?dbScreenDepth@@YAHXZ			; dbScreenDepth
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 68   : 	this->Height=dbScreenHeight();

	call	?dbScreenHeight@@YAHXZ			; dbScreenHeight
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 69   : 	this->Width=dbScreenWidth();

	call	?dbScreenWidth@@YAHXZ			; dbScreenWidth
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 70   : 
; 71   : 	if(this->FullScreen)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN6@Window

; 72   : 		dbSetWindowOff();

	call	?dbSetWindowOff@@YAXXZ			; dbSetWindowOff

; 73   : 	else

	jmp	SHORT $LN5@Window
$LN6@Window:

; 74   : 	{
; 75   : 		dbSetWindowOn();

	call	?dbSetWindowOn@@YAXXZ			; dbSetWindowOn

; 76   : 		dbSetWindowLayout(1,1,1);

	push	1
	push	1
	push	1
	call	?dbSetWindowLayout@@YAXHHH@Z		; dbSetWindowLayout
	add	esp, 12					; 0000000cH
$LN5@Window:

; 77   : 	}
; 78   : 
; 79   : 	if(this->SystemKeysOn)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN4@Window

; 80   : 		dbEnableSystemKeys();

	call	?dbEnableSystemKeys@@YAXXZ		; dbEnableSystemKeys

; 81   : 	else

	jmp	SHORT $LN3@Window
$LN4@Window:

; 82   : 		dbDisableSystemKeys();

	call	?dbDisableSystemKeys@@YAXXZ		; dbDisableSystemKeys
$LN3@Window:

; 83   : 
; 84   : 	if(this->EscapeOn)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@Window

; 85   : 		dbEnableEscapeKey();

	call	?dbEnableEscapeKey@@YAXXZ		; dbEnableEscapeKey

; 86   : 	else

	jmp	SHORT $LN1@Window
$LN2@Window:

; 87   : 		dbDisableEscapeKey();

	call	?dbDisableEscapeKey@@YAXXZ		; dbDisableEscapeKey
$LN1@Window:

; 88   : 
; 89   : 	dbShowWindow();

	call	?dbShowWindow@@YAXXZ			; dbShowWindow

; 90   : 	dbWindowToFront();

	call	?dbWindowToFront@@YAXXZ			; dbWindowToFront

; 91   : 
; 92   : 	return;
; 93   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
??0Window@@QAE@H_N00HHPAD1@Z ENDP			; Window::Window
_TEXT	ENDS
PUBLIC	??1Window@@QAE@XZ				; Window::~Window
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??1Window@@QAE@XZ
_TEXT	SEGMENT
$T91772 = -88						; size = 4
$T91773 = -84						; size = 4
$T91774 = -80						; size = 4
$T91775 = -76						; size = 4
$T91776 = -72						; size = 4
_this$ = -4						; size = 4
??1Window@@QAE@XZ PROC					; Window::~Window, COMDAT
; _this$ = ecx

; 95   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 	delete this->CommandString;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T91772[ebp], ecx
	mov	edx, DWORD PTR $T91772[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 97   : 	delete this->CurrentDirectory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T91773[ebp], ecx
	mov	edx, DWORD PTR $T91773[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 98   : 	delete this->CurrentGraphicsCard$;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T91774[ebp], ecx
	mov	edx, DWORD PTR $T91774[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 99   : 	delete this->CurrentResolution$;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T91775[ebp], ecx
	mov	edx, DWORD PTR $T91775[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 100  : 	delete this->WindowTitle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T91776[ebp], ecx
	mov	edx, DWORD PTR $T91776[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 101  : 
; 102  : 	return;
; 103  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Window@@QAE@XZ ENDP					; Window::~Window
_TEXT	ENDS
PUBLIC	?GetEscapeOn@Window@@QAE_NXZ			; Window::GetEscapeOn
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetEscapeOn@Window@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEscapeOn@Window@@QAE_NXZ PROC			; Window::GetEscapeOn, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 	return this->EscapeOn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]

; 107  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEscapeOn@Window@@QAE_NXZ ENDP			; Window::GetEscapeOn
_TEXT	ENDS
PUBLIC	?GetFullScreen@Window@@QAE_NXZ			; Window::GetFullScreen
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetFullScreen@Window@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFullScreen@Window@@QAE_NXZ PROC			; Window::GetFullScreen, COMDAT
; _this$ = ecx

; 109  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 	return this->FullScreen;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+1]

; 111  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFullScreen@Window@@QAE_NXZ ENDP			; Window::GetFullScreen
_TEXT	ENDS
PUBLIC	?GetSystemKeysOn@Window@@QAE_NXZ		; Window::GetSystemKeysOn
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetSystemKeysOn@Window@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSystemKeysOn@Window@@QAE_NXZ PROC			; Window::GetSystemKeysOn, COMDAT
; _this$ = ecx

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 	return this->SystemKeysOn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+2]

; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSystemKeysOn@Window@@QAE_NXZ ENDP			; Window::GetSystemKeysOn
_TEXT	ENDS
PUBLIC	?GetCD@Window@@QAEPADXZ				; Window::GetCD
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCD@Window@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCD@Window@@QAEPADXZ PROC				; Window::GetCD, COMDAT
; _this$ = ecx

; 117  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 	return this->CurrentDirectory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 119  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCD@Window@@QAEPADXZ ENDP				; Window::GetCD
_TEXT	ENDS
PUBLIC	?GetCommandLineString@Window@@QAEPADXZ		; Window::GetCommandLineString
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCommandLineString@Window@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCommandLineString@Window@@QAEPADXZ PROC		; Window::GetCommandLineString, COMDAT
; _this$ = ecx

; 121  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 	return this->CommandString;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 123  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCommandLineString@Window@@QAEPADXZ ENDP		; Window::GetCommandLineString
_TEXT	ENDS
PUBLIC	?GetCurrentGraphicsCard$@Window@@QAEPADXZ	; Window::GetCurrentGraphicsCard$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCurrentGraphicsCard$@Window@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentGraphicsCard$@Window@@QAEPADXZ PROC		; Window::GetCurrentGraphicsCard$, COMDAT
; _this$ = ecx

; 125  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 	return this->CurrentGraphicsCard$;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentGraphicsCard$@Window@@QAEPADXZ ENDP		; Window::GetCurrentGraphicsCard$
_TEXT	ENDS
PUBLIC	?GetCurrentResolution$@Window@@QAEPADXZ		; Window::GetCurrentResolution$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCurrentResolution$@Window@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentResolution$@Window@@QAEPADXZ PROC		; Window::GetCurrentResolution$, COMDAT
; _this$ = ecx

; 129  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 130  : 	return this->CurrentResolution$;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 131  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentResolution$@Window@@QAEPADXZ ENDP		; Window::GetCurrentResolution$
_TEXT	ENDS
PUBLIC	?GetWindowTitle@Window@@QAEPADXZ		; Window::GetWindowTitle
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetWindowTitle@Window@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWindowTitle@Window@@QAEPADXZ PROC			; Window::GetWindowTitle, COMDAT
; _this$ = ecx

; 133  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 	return this->WindowTitle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 135  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWindowTitle@Window@@QAEPADXZ ENDP			; Window::GetWindowTitle
_TEXT	ENDS
PUBLIC	?GetCurrentDepth@Window@@QAEHXZ			; Window::GetCurrentDepth
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCurrentDepth@Window@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentDepth@Window@@QAEHXZ PROC			; Window::GetCurrentDepth, COMDAT
; _this$ = ecx

; 137  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 138  : 	return this->Depth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 139  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentDepth@Window@@QAEHXZ ENDP			; Window::GetCurrentDepth
_TEXT	ENDS
PUBLIC	?GetCurrentGraphicsCard@Window@@QAEHXZ		; Window::GetCurrentGraphicsCard
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCurrentGraphicsCard@Window@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentGraphicsCard@Window@@QAEHXZ PROC		; Window::GetCurrentGraphicsCard, COMDAT
; _this$ = ecx

; 141  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 142  : 	return this->CurrentGraphicsCard;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]

; 143  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentGraphicsCard@Window@@QAEHXZ ENDP		; Window::GetCurrentGraphicsCard
_TEXT	ENDS
PUBLIC	?GetCurrentHeight@Window@@QAEHXZ		; Window::GetCurrentHeight
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCurrentHeight@Window@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentHeight@Window@@QAEHXZ PROC			; Window::GetCurrentHeight, COMDAT
; _this$ = ecx

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 	return this->Height;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]

; 147  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentHeight@Window@@QAEHXZ ENDP			; Window::GetCurrentHeight
_TEXT	ENDS
PUBLIC	?GetCurrentResolution@Window@@QAEHXZ		; Window::GetCurrentResolution
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCurrentResolution@Window@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentResolution@Window@@QAEHXZ PROC		; Window::GetCurrentResolution, COMDAT
; _this$ = ecx

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 150  : 	return this->CurrentResolution;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]

; 151  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentResolution@Window@@QAEHXZ ENDP		; Window::GetCurrentResolution
_TEXT	ENDS
PUBLIC	?GetCurrentWidth@Window@@QAEHXZ			; Window::GetCurrentWidth
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCurrentWidth@Window@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentWidth@Window@@QAEHXZ PROC			; Window::GetCurrentWidth, COMDAT
; _this$ = ecx

; 153  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 154  : 	return this->Width;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]

; 155  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentWidth@Window@@QAEHXZ ENDP			; Window::GetCurrentWidth
_TEXT	ENDS
PUBLIC	?GetFPS@Window@@QAEHXZ				; Window::GetFPS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetFPS@Window@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFPS@Window@@QAEHXZ PROC				; Window::GetFPS, COMDAT
; _this$ = ecx

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 	return this->ActiveFPS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 159  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFPS@Window@@QAEHXZ ENDP				; Window::GetFPS
_TEXT	ENDS
PUBLIC	?GetNumberOfGraphicsCards@Window@@QAEHXZ	; Window::GetNumberOfGraphicsCards
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetNumberOfGraphicsCards@Window@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumberOfGraphicsCards@Window@@QAEHXZ PROC		; Window::GetNumberOfGraphicsCards, COMDAT
; _this$ = ecx

; 161  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 	return this->NumberOfGraphicsCards;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]

; 163  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumberOfGraphicsCards@Window@@QAEHXZ ENDP		; Window::GetNumberOfGraphicsCards
_TEXT	ENDS
PUBLIC	?GetNumberOfResolutions@Window@@QAEHXZ		; Window::GetNumberOfResolutions
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetNumberOfResolutions@Window@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumberOfResolutions@Window@@QAEHXZ PROC		; Window::GetNumberOfResolutions, COMDAT
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 	return this->NumberOfResolutions;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumberOfResolutions@Window@@QAEHXZ ENDP		; Window::GetNumberOfResolutions
_TEXT	ENDS
PUBLIC	?GetRefreshRate@Window@@QAEHXZ			; Window::GetRefreshRate
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetRefreshRate@Window@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRefreshRate@Window@@QAEHXZ PROC			; Window::GetRefreshRate, COMDAT
; _this$ = ecx

; 169  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 	return this->RefreshRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]

; 171  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRefreshRate@Window@@QAEHXZ ENDP			; Window::GetRefreshRate
_TEXT	ENDS
PUBLIC	?GetWindowXPos@Window@@QAEHXZ			; Window::GetWindowXPos
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetWindowXPos@Window@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWindowXPos@Window@@QAEHXZ PROC			; Window::GetWindowXPos, COMDAT
; _this$ = ecx

; 173  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 	return this->WindowXPos;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]

; 175  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWindowXPos@Window@@QAEHXZ ENDP			; Window::GetWindowXPos
_TEXT	ENDS
PUBLIC	?GetWindowYPos@Window@@QAEHXZ			; Window::GetWindowYPos
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetWindowYPos@Window@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWindowYPos@Window@@QAEHXZ PROC			; Window::GetWindowYPos, COMDAT
; _this$ = ecx

; 177  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 178  : 	return this->WindowYPos;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]

; 179  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWindowYPos@Window@@QAEHXZ ENDP			; Window::GetWindowYPos
_TEXT	ENDS
PUBLIC	?GetRefreshPtr@Window@@QAEPAHXZ			; Window::GetRefreshPtr
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetRefreshPtr@Window@@QAEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRefreshPtr@Window@@QAEPAHXZ PROC			; Window::GetRefreshPtr, COMDAT
; _this$ = ecx

; 181  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	return &(this->ActiveFPS);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H

; 183  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRefreshPtr@Window@@QAEPAHXZ ENDP			; Window::GetRefreshPtr
_TEXT	ENDS
PUBLIC	?SetSystemKeys@Window@@QAEX_N@Z			; Window::SetSystemKeys
PUBLIC	?SetFullScreen@Window@@QAEX_N@Z			; Window::SetFullScreen
PUBLIC	?SetEscapeKey@Window@@QAEX_N@Z			; Window::SetEscapeKey
PUBLIC	?SetCurrentResolution@Window@@QAEXH@Z		; Window::SetCurrentResolution
PUBLIC	?SetCurrentGraphicsCard@Window@@QAEXH@Z		; Window::SetCurrentGraphicsCard
PUBLIC	?ApplyToApp@Window@@QAEXXZ			; Window::ApplyToApp
; Function compile flags: /Odtp /ZI
;	COMDAT ?ApplyToApp@Window@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ApplyToApp@Window@@QAEXXZ PROC				; Window::ApplyToApp, COMDAT
; _this$ = ecx

; 185  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 186  : 	this->SetCD(this->CurrentDirectory);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCD@Window@@QAEXPAD@Z		; Window::SetCD

; 187  : 	this->SetCurrentGraphicsCard(this->CurrentGraphicsCard);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCurrentGraphicsCard@Window@@QAEXH@Z	; Window::SetCurrentGraphicsCard

; 188  : 	this->SetCurrentResolution(this->CurrentResolution);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCurrentResolution@Window@@QAEXH@Z	; Window::SetCurrentResolution

; 189  : 	this->SetEscapeKey(this->EscapeOn);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEscapeKey@Window@@QAEX_N@Z		; Window::SetEscapeKey

; 190  : 	this->SetFullScreen(this->FullScreen);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFullScreen@Window@@QAEX_N@Z		; Window::SetFullScreen

; 191  : 	this->SetRefreshRate(this->RefreshRate);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRefreshRate@Window@@QAEXH@Z		; Window::SetRefreshRate

; 192  : 	this->SetSystemKeys(this->SystemKeysOn);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSystemKeys@Window@@QAEX_N@Z		; Window::SetSystemKeys

; 193  : 	this->SetWindowPosition(this->WindowXPos,this->WindowYPos);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWindowPosition@Window@@QAEXHH@Z	; Window::SetWindowPosition

; 194  : 	this->SetWindowTitle(this->WindowTitle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWindowTitle@Window@@QAEXPAD@Z	; Window::SetWindowTitle

; 195  : 
; 196  : 	return;
; 197  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ApplyToApp@Window@@QAEXXZ ENDP				; Window::ApplyToApp
_TEXT	ENDS
EXTRN	?dbCD@@YAXPAD@Z:PROC				; dbCD
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetCD@Window@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_CD$ = 8						; size = 4
?SetCD@Window@@QAEXPAD@Z PROC				; Window::SetCD, COMDAT
; _this$ = ecx

; 199  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 	this->CurrentDirectory=CD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _CD$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 201  : 
; 202  : 	dbCD(this->CurrentDirectory);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?dbCD@@YAXPAD@Z				; dbCD
	add	esp, 4

; 203  : 
; 204  : 	return;
; 205  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCD@Window@@QAEXPAD@Z ENDP				; Window::SetCD
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetCurrentGraphicsCard@Window@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_GC$ = 8						; size = 4
?SetCurrentGraphicsCard@Window@@QAEXH@Z PROC		; Window::SetCurrentGraphicsCard, COMDAT
; _this$ = ecx

; 207  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 208  : 	if(this->CurrentGraphicsCard!=GC)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, DWORD PTR _GC$[ebp]
	je	$LN9@SetCurrent

; 209  : 	{
; 210  : 		this->CurrentGraphicsCard=GC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _GC$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 211  : 
; 212  : 		dbPerformChecklistForGraphicsCards();

	call	?dbPerformChecklistForGraphicsCards@@YAXXZ ; dbPerformChecklistForGraphicsCards

; 213  : 		this->CurrentGraphicsCard$=dbChecklistString(this->CurrentGraphicsCard);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 214  : 		dbSetGraphicsCard(dbChecklistString(this->CurrentGraphicsCard));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	push	eax
	call	?dbSetGraphicsCard@@YAXPAD@Z		; dbSetGraphicsCard
	add	esp, 4

; 215  : 		dbEmptyChecklist();

	call	?dbEmptyChecklist@@YAXXZ		; dbEmptyChecklist

; 216  : 
; 217  : 		dbPerformChecklistForDisplayModes();

	call	?dbPerformChecklistForDisplayModes@@YAXXZ ; dbPerformChecklistForDisplayModes

; 218  : 		for(this->NumberOfResolutions=0;NULL!=dbChecklistString(this->NumberOfResolutions+1);this->NumberOfResolutions++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	jmp	SHORT $LN7@SetCurrent
$LN6@SetCurrent:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx
$LN7@SetCurrent:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@SetCurrent
	jmp	SHORT $LN6@SetCurrent
$LN5@SetCurrent:

; 219  : 		for(this->SetCurrentResolution(1);dbChecklistValueA(this->CurrentResolution)==this->Width&&dbChecklistValueB(this->CurrentResolution)==this->Height&&dbChecklistValueC(this->CurrentResolution)==this->Depth;this->CurrentResolution++);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCurrentResolution@Window@@QAEXH@Z	; Window::SetCurrentResolution
	jmp	SHORT $LN4@SetCurrent
$LN3@SetCurrent:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx
$LN4@SetCurrent:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?dbChecklistValueA@@YAHH@Z		; dbChecklistValueA
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+56]
	jne	SHORT $LN2@SetCurrent
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?dbChecklistValueB@@YAHH@Z		; dbChecklistValueB
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+40]
	jne	SHORT $LN2@SetCurrent
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?dbChecklistValueC@@YAHH@Z		; dbChecklistValueC
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jne	SHORT $LN2@SetCurrent
	jmp	SHORT $LN3@SetCurrent
$LN2@SetCurrent:

; 220  : 		if(this->CurrentResolution>this->NumberOfResolutions)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+48]
	jle	SHORT $LN1@SetCurrent

; 221  : 		{
; 222  : 			this->SetCurrentResolution(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCurrentResolution@Window@@QAEXH@Z	; Window::SetCurrentResolution

; 223  : 
; 224  : 			SetWindowPosition(this->WindowXPos,this->WindowYPos);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWindowPosition@Window@@QAEXHH@Z	; Window::SetWindowPosition
$LN1@SetCurrent:

; 225  : 		}
; 226  : 		dbEmptyChecklist();

	call	?dbEmptyChecklist@@YAXXZ		; dbEmptyChecklist
$LN9@SetCurrent:

; 227  : 	}
; 228  : 
; 229  : 	return;
; 230  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCurrentGraphicsCard@Window@@QAEXH@Z ENDP		; Window::SetCurrentGraphicsCard
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetCurrentResolution@Window@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Res$ = 8						; size = 4
?SetCurrentResolution@Window@@QAEXH@Z PROC		; Window::SetCurrentResolution, COMDAT
; _this$ = ecx

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 233  : 	if(this->CurrentResolution!=Res)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	ecx, DWORD PTR _Res$[ebp]
	je	$LN2@SetCurrent@2

; 234  : 	{
; 235  : 		this->CurrentResolution=Res;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Res$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 236  : 
; 237  : 		dbPerformChecklistForDisplayModes();

	call	?dbPerformChecklistForDisplayModes@@YAXXZ ; dbPerformChecklistForDisplayModes

; 238  : 		this->CurrentResolution$=dbChecklistString(this->CurrentResolution);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax

; 239  : 		dbSetDisplayMode(dbChecklistValueA(this->CurrentResolution),dbChecklistValueB(this->CurrentResolution),dbChecklistValueC(this->CurrentResolution));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	?dbChecklistValueC@@YAHH@Z		; dbChecklistValueC
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	?dbChecklistValueB@@YAHH@Z		; dbChecklistValueB
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	?dbChecklistValueA@@YAHH@Z		; dbChecklistValueA
	add	esp, 4
	push	eax
	call	?dbSetDisplayMode@@YAXHHH@Z		; dbSetDisplayMode
	add	esp, 12					; 0000000cH

; 240  : 		dbEmptyChecklist();

	call	?dbEmptyChecklist@@YAXXZ		; dbEmptyChecklist

; 241  : 
; 242  : 		this->Depth=dbScreenDepth();

	call	?dbScreenDepth@@YAHXZ			; dbScreenDepth
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 243  : 		this->Height=dbScreenHeight();

	call	?dbScreenHeight@@YAHXZ			; dbScreenHeight
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 244  : 		this->Width=dbScreenWidth();

	call	?dbScreenWidth@@YAHXZ			; dbScreenWidth
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 245  : 		SetWindowPosition(this->WindowXPos,this->WindowYPos);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWindowPosition@Window@@QAEXHH@Z	; Window::SetWindowPosition
$LN2@SetCurrent@2:

; 246  : 	}
; 247  : 
; 248  : 	return;
; 249  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCurrentResolution@Window@@QAEXH@Z ENDP		; Window::SetCurrentResolution
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetEscapeKey@Window@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Esc$ = 8						; size = 1
?SetEscapeKey@Window@@QAEX_N@Z PROC			; Window::SetEscapeKey, COMDAT
; _this$ = ecx

; 251  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 	this->EscapeOn=Esc;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _Esc$[ebp]
	mov	BYTE PTR [eax], cl

; 253  : 
; 254  : 	if(this->EscapeOn)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@SetEscapeK

; 255  : 		dbEnableEscapeKey();

	call	?dbEnableEscapeKey@@YAXXZ		; dbEnableEscapeKey

; 256  : 	else

	jmp	SHORT $LN3@SetEscapeK
$LN2@SetEscapeK:

; 257  : 		dbDisableEscapeKey();

	call	?dbDisableEscapeKey@@YAXXZ		; dbDisableEscapeKey
$LN3@SetEscapeK:

; 258  : 
; 259  : 	return;
; 260  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetEscapeKey@Window@@QAEX_N@Z ENDP			; Window::SetEscapeKey
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetFullScreen@Window@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Full$ = 8						; size = 1
?SetFullScreen@Window@@QAEX_N@Z PROC			; Window::SetFullScreen, COMDAT
; _this$ = ecx

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 	this->FullScreen=Full;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _Full$[ebp]
	mov	BYTE PTR [eax+1], cl

; 264  : 
; 265  : 	if(this->FullScreen)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN2@SetFullScr

; 266  : 		dbSetWindowOff();

	call	?dbSetWindowOff@@YAXXZ			; dbSetWindowOff

; 267  : 	else

	jmp	SHORT $LN3@SetFullScr
$LN2@SetFullScr:

; 268  : 	{
; 269  : 		dbSetWindowOn();

	call	?dbSetWindowOn@@YAXXZ			; dbSetWindowOn

; 270  : 		dbSetWindowLayout(1,1,1);

	push	1
	push	1
	push	1
	call	?dbSetWindowLayout@@YAXHHH@Z		; dbSetWindowLayout
	add	esp, 12					; 0000000cH

; 271  : 		SetWindowTitle(this->WindowTitle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWindowTitle@Window@@QAEXPAD@Z	; Window::SetWindowTitle

; 272  : 		SetWindowPosition(this->WindowXPos,this->WindowYPos);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWindowPosition@Window@@QAEXHH@Z	; Window::SetWindowPosition
$LN3@SetFullScr:

; 273  : 	}
; 274  : 
; 275  : 	return;
; 276  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFullScreen@Window@@QAEX_N@Z ENDP			; Window::SetFullScreen
_TEXT	ENDS
EXTRN	?dbSyncRate@@YAXH@Z:PROC			; dbSyncRate
EXTRN	?dbSyncOn@@YAXXZ:PROC				; dbSyncOn
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetRefreshRate@Window@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Rate$ = 8						; size = 4
?SetRefreshRate@Window@@QAEXH@Z PROC			; Window::SetRefreshRate, COMDAT
; _this$ = ecx

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 279  : 	this->RefreshRate=Rate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Rate$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 280  : 	dbSyncOn();

	call	?dbSyncOn@@YAXXZ			; dbSyncOn

; 281  : 	dbSyncRate(this->RefreshRate);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	?dbSyncRate@@YAXH@Z			; dbSyncRate
	add	esp, 4

; 282  : 
; 283  : 	return;
; 284  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRefreshRate@Window@@QAEXH@Z ENDP			; Window::SetRefreshRate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetSystemKeys@Window@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_position$ = 8						; size = 1
?SetSystemKeys@Window@@QAEX_N@Z PROC			; Window::SetSystemKeys, COMDAT
; _this$ = ecx

; 286  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 287  : 	this->SystemKeysOn=position;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _position$[ebp]
	mov	BYTE PTR [eax+2], cl

; 288  : 
; 289  : 	if(this->SystemKeysOn)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN2@SetSystemK

; 290  : 		dbEnableSystemKeys();

	call	?dbEnableSystemKeys@@YAXXZ		; dbEnableSystemKeys

; 291  : 	else

	jmp	SHORT $LN3@SetSystemK
$LN2@SetSystemK:

; 292  : 		dbDisableSystemKeys();

	call	?dbDisableSystemKeys@@YAXXZ		; dbDisableSystemKeys
$LN3@SetSystemK:

; 293  : 
; 294  : 	return;
; 295  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSystemKeys@Window@@QAEX_N@Z ENDP			; Window::SetSystemKeys
_TEXT	ENDS
EXTRN	?dbSetWindowPosition@@YAXHH@Z:PROC		; dbSetWindowPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetWindowPosition@Window@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
?SetWindowPosition@Window@@QAEXHH@Z PROC		; Window::SetWindowPosition, COMDAT
; _this$ = ecx

; 297  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 298  : 	this->WindowXPos=X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _X$[ebp]
	mov	DWORD PTR [eax+60], ecx

; 299  : 	this->WindowYPos=Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Y$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 300  : 
; 301  : 	dbSetWindowPosition(this->WindowXPos,this->WindowYPos);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	call	?dbSetWindowPosition@@YAXHH@Z		; dbSetWindowPosition
	add	esp, 8

; 302  : 	
; 303  : 	return;
; 304  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetWindowPosition@Window@@QAEXHH@Z ENDP		; Window::SetWindowPosition
_TEXT	ENDS
EXTRN	?dbSetWindowTitle@@YAXPAD@Z:PROC		; dbSetWindowTitle
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetWindowTitle@Window@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_title$ = 8						; size = 4
?SetWindowTitle@Window@@QAEXPAD@Z PROC			; Window::SetWindowTitle, COMDAT
; _this$ = ecx

; 306  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 	this->WindowTitle=title;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _title$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 308  : 
; 309  : 	dbSetWindowTitle(this->WindowTitle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	?dbSetWindowTitle@@YAXPAD@Z		; dbSetWindowTitle
	add	esp, 4

; 310  : 
; 311  : 	return;
; 312  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWindowTitle@Window@@QAEXPAD@Z ENDP			; Window::SetWindowTitle
_TEXT	ENDS
PUBLIC	?Sync@Window@@QAEXXZ				; Window::Sync
EXTRN	?dbSync@@YAXXZ:PROC				; dbSync
EXTRN	?dbFastSync@@YAXXZ:PROC				; dbFastSync
; Function compile flags: /Odtp /ZI
;	COMDAT ?Sync@Window@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Sync@Window@@QAEXXZ PROC				; Window::Sync, COMDAT
; _this$ = ecx

; 314  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 	if(this->FullScreen)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN2@Sync

; 316  : 		dbFastSync();

	call	?dbFastSync@@YAXXZ			; dbFastSync

; 317  : 	else

	jmp	SHORT $LN1@Sync
$LN2@Sync:

; 318  : 		dbSync();

	call	?dbSync@@YAXXZ				; dbSync
$LN1@Sync:

; 319  : 
; 320  : 	this->ActiveFPS=dbScreenFPS();

	call	?dbScreenFPS@@YAHXZ			; dbScreenFPS
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 321  : 
; 322  : 	return;
; 323  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Sync@Window@@QAEXXZ ENDP				; Window::Sync
_TEXT	ENDS
END
