; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\Users\FireEmblem16\Documents\Visual Studio 2008\Projects\Chronicles\Chronicles\Source\Objects.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	?PositionObjectV@StaticObject@@IAEXVVector3@@@Z	; StaticObject::PositionObjectV
PUBLIC	?RotateObjectV@StaticObject@@IAEXVVector3@@@Z	; StaticObject::RotateObjectV
PUBLIC	?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z	; StaticObject::ScaleObjectV
PUBLIC	??_C@_08FBFOBNBE@Effects?2?$AA@			; `string'
PUBLIC	??_C@_09CBDJJBPN@?2Object?4X?$AA@		; `string'
PUBLIC	??_C@_08IHJKPDAE@Objects?2?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__real@00000000
PUBLIC	__real@42c80000
PUBLIC	??0StaticObject@@QAE@PAD_NPAH@Z			; StaticObject::StaticObject
EXTRN	?dbShowObject@@YAXH@Z:PROC			; dbShowObject
EXTRN	?dbLoadObject@@YAXPADH@Z:PROC			; dbLoadObject
EXTRN	?dbObjectExist@@YAHH@Z:PROC			; dbObjectExist
EXTRN	?dbFileExist@@YAHPAD@Z:PROC			; dbFileExist
EXTRN	_strcat:PROC
EXTRN	_strcpy:PROC
EXTRN	??1Vector3@@QAE@XZ:PROC				; Vector3::~Vector3
EXTRN	??4Vector3@@QAE?AV0@PAM@Z:PROC			; Vector3::operator=
EXTRN	??0Vector3@@QAE@XZ:PROC				; Vector3::Vector3
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_08FBFOBNBE@Effects?2?$AA@
; File c:\users\fireemblem16\documents\visual studio 2008\projects\chronicles\chronicles\source\objects.cpp
CONST	SEGMENT
??_C@_08FBFOBNBE@Effects?2?$AA@ DB 'Effects\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CBDJJBPN@?2Object?4X?$AA@
CONST	SEGMENT
??_C@_09CBDJJBPN@?2Object?4X?$AA@ DB '\Object.X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IHJKPDAE@Objects?2?$AA@
CONST	SEGMENT
??_C@_08IHJKPDAE@Objects?2?$AA@ DB 'Objects\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0StaticObject@@QAE@PAD_NPAH@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0StaticObject@@QAE@PAD_NPAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0StaticObject@@QAE@PAD_NPAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$8
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0StaticObject@@QAE@PAD_NPAH@Z
_TEXT	SEGMENT
$T92877 = -212						; size = 12
$T92878 = -200						; size = 12
$T92879 = -188						; size = 12
$T92880 = -176						; size = 12
$T92881 = -164						; size = 12
$T92882 = -152						; size = 12
$T92883 = -140						; size = 12
$T92884 = -128						; size = 12
$T92885 = -116						; size = 12
_Zero$ = -40						; size = 12
_Scl$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Name$ = 8						; size = 4
_AdjustRate$ = 12					; size = 1
_RefreshPointer$ = 16					; size = 4
??0StaticObject@@QAE@PAD_NPAH@Z PROC			; StaticObject::StaticObject, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0StaticObject@@QAE@PAD_NPAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 8

; 23   : 	float Scl[3]={100.0f,100.0f,100.0f};

	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _Scl$[ebp]
	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _Scl$[ebp+4]
	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _Scl$[ebp+8]

; 24   : 	float Zero[3]={0.0f,0.0f,0.0f};

	fldz
	fstp	DWORD PTR _Zero$[ebp]
	fldz
	fstp	DWORD PTR _Zero$[ebp+4]
	fldz
	fstp	DWORD PTR _Zero$[ebp+8]

; 25   : 
; 26   : 	this->ObjectName=Name;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Name$[ebp]
	mov	DWORD PTR [eax+3008], ecx

; 27   : 	this->Visible=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 28   : 
; 29   : 	this->Accelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92877[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92877[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 30   : 	this->AngularAccelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92878[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92878[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 31   : 	this->AngularVelocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92879[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92879[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 32   : 	this->Position=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92880[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92880[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 33   : 	this->Rotation=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92881[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92881[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 34   : 	this->ScalarAccelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92882[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92882[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 35   : 	this->ScalarVelocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92883[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92883[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 36   : 	this->Scale=Scl;

	lea	eax, DWORD PTR _Scl$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92884[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92884[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 37   : 	this->Velocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92885[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92885[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 38   : 
; 39   : 	this->ObjectEffectName="";

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3004], OFFSET ??_C@_00CNPNBAHC@?$AA@

; 40   : 	this->ObjectEffectNumber=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3016], 0

; 41   : 	this->RefreshRatePointer=RefreshPointer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _RefreshPointer$[ebp]
	mov	DWORD PTR [eax+3024], ecx

; 42   : 	this->AdjustToFrameRate=AdjustRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _AdjustRate$[ebp]
	mov	BYTE PTR [eax], cl

; 43   : 
; 44   : 	strcpy(this->ObjectFullPath,"Objects\\");

	push	OFFSET ??_C@_08IHJKPDAE@Objects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcpy
	add	esp, 8

; 45   : 	strcat(this->ObjectFullPath,this->ObjectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3008]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1002				; 000003eaH
	push	edx
	call	_strcat
	add	esp, 8

; 46   : 	strcat(this->ObjectFullPath,"\\Object.X");

	push	OFFSET ??_C@_09CBDJJBPN@?2Object?4X?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcat
	add	esp, 8

; 47   : 
; 48   : 	strcpy(this->ObjectEffectFullPath,"Effects\\");

	push	OFFSET ??_C@_08FBFOBNBE@Effects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 2
	push	eax
	call	_strcpy
	add	esp, 8

; 49   : 	strcat(this->ObjectEffectFullPath,this->ObjectEffectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3004]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 2
	push	edx
	call	_strcat
	add	esp, 8

; 50   : 
; 51   : 	if(dbFileExist(this->ObjectFullPath)==1)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbFileExist@@YAHPAD@Z			; dbFileExist
	add	esp, 4
	cmp	eax, 1
	jne	$LN4@StaticObje

; 52   : 	{
; 53   : 		for(this->ObjectNumber=1;dbObjectExist(this->ObjectNumber)==1;this->ObjectNumber++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3020], 1
	jmp	SHORT $LN3@StaticObje
$LN2@StaticObje:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3020], ecx
$LN3@StaticObje:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbObjectExist@@YAHH@Z			; dbObjectExist
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN1@StaticObje
	jmp	SHORT $LN2@StaticObje
$LN1@StaticObje:

; 54   : 		dbLoadObject(this->ObjectFullPath,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbLoadObject@@YAXPADH@Z		; dbLoadObject
	add	esp, 8

; 55   : 		dbShowObject(this->ObjectNumber);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbShowObject@@YAXH@Z			; dbShowObject
	add	esp, 4

; 56   : 
; 57   : 		ScaleObjectV(this->Scale);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3112				; 00000c28H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::ScaleObjectV

; 58   : 		RotateObjectV(this->Rotation);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3076				; 00000c04H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::RotateObjectV

; 59   : 		PositionObjectV(this->Position);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3064				; 00000bf8H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PositionObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::PositionObjectV
$LN4@StaticObje:

; 60   : 	}
; 61   : 
; 62   : 	return;
; 63   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAH@Z$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$??0StaticObject@@QAE@PAD_NPAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-216]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0StaticObject@@QAE@PAD_NPAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0StaticObject@@QAE@PAD_NPAH@Z ENDP			; StaticObject::StaticObject
PUBLIC	??0StaticObject@@QAE@PAD_NPAHMMM@Z		; StaticObject::StaticObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0StaticObject@@QAE@PAD_NPAHMMM@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0StaticObject@@QAE@PAD_NPAHMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0StaticObject@@QAE@PAD_NPAHMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$8
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0StaticObject@@QAE@PAD_NPAHMMM@Z
_TEXT	SEGMENT
$T92922 = -224						; size = 12
$T92923 = -212						; size = 12
$T92924 = -200						; size = 12
$T92925 = -188						; size = 12
$T92926 = -176						; size = 12
$T92927 = -164						; size = 12
$T92928 = -152						; size = 12
$T92929 = -140						; size = 12
$T92930 = -128						; size = 12
_Zero$ = -52						; size = 12
_Scl$ = -40						; size = 12
_Pos$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Name$ = 8						; size = 4
_AdjustRate$ = 12					; size = 1
_RefreshPointer$ = 16					; size = 4
_XPos$ = 20						; size = 4
_YPos$ = 24						; size = 4
_ZPos$ = 28						; size = 4
??0StaticObject@@QAE@PAD_NPAHMMM@Z PROC			; StaticObject::StaticObject, COMDAT
; _this$ = ecx

; 65   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0StaticObject@@QAE@PAD_NPAHMMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 8

; 66   : 	float Pos[3]={XPos,YPos,ZPos};

	fld	DWORD PTR _XPos$[ebp]
	fstp	DWORD PTR _Pos$[ebp]
	fld	DWORD PTR _YPos$[ebp]
	fstp	DWORD PTR _Pos$[ebp+4]
	fld	DWORD PTR _ZPos$[ebp]
	fstp	DWORD PTR _Pos$[ebp+8]

; 67   : 	float Scl[3]={100.0f,100.0f,100.0f};

	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _Scl$[ebp]
	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _Scl$[ebp+4]
	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _Scl$[ebp+8]

; 68   : 	float Zero[3]={0.0f,0.0f,0.0f};

	fldz
	fstp	DWORD PTR _Zero$[ebp]
	fldz
	fstp	DWORD PTR _Zero$[ebp+4]
	fldz
	fstp	DWORD PTR _Zero$[ebp+8]

; 69   : 
; 70   : 	this->ObjectName=Name;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Name$[ebp]
	mov	DWORD PTR [eax+3008], ecx

; 71   : 	this->Visible=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 72   : 
; 73   : 	this->Accelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92922[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92922[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 74   : 	this->AngularAccelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92923[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92923[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 75   : 	this->AngularVelocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92924[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92924[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 76   : 	this->Position=Pos;

	lea	eax, DWORD PTR _Pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92925[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92925[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 77   : 	this->Rotation=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92926[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92926[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 78   : 	this->ScalarAccelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92927[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92927[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 79   : 	this->ScalarVelocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92928[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92928[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 80   : 	this->Scale=Scl;

	lea	eax, DWORD PTR _Scl$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92929[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92929[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 81   : 	this->Velocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92930[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92930[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 82   : 
; 83   : 	this->ObjectEffectName="";

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3004], OFFSET ??_C@_00CNPNBAHC@?$AA@

; 84   : 	this->ObjectEffectNumber=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3016], 0

; 85   : 	this->RefreshRatePointer=RefreshPointer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _RefreshPointer$[ebp]
	mov	DWORD PTR [eax+3024], ecx

; 86   : 	this->AdjustToFrameRate=AdjustRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _AdjustRate$[ebp]
	mov	BYTE PTR [eax], cl

; 87   : 
; 88   : 	strcpy(this->ObjectFullPath,"Objects\\");

	push	OFFSET ??_C@_08IHJKPDAE@Objects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcpy
	add	esp, 8

; 89   : 	strcat(this->ObjectFullPath,this->ObjectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3008]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1002				; 000003eaH
	push	edx
	call	_strcat
	add	esp, 8

; 90   : 	strcat(this->ObjectFullPath,"\\Object.X");

	push	OFFSET ??_C@_09CBDJJBPN@?2Object?4X?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcat
	add	esp, 8

; 91   : 
; 92   : 	strcpy(this->ObjectEffectFullPath,"Effects\\");

	push	OFFSET ??_C@_08FBFOBNBE@Effects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 2
	push	eax
	call	_strcpy
	add	esp, 8

; 93   : 	strcat(this->ObjectEffectFullPath,this->ObjectEffectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3004]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 2
	push	edx
	call	_strcat
	add	esp, 8

; 94   : 
; 95   : 	if(dbFileExist(this->ObjectFullPath)==1)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbFileExist@@YAHPAD@Z			; dbFileExist
	add	esp, 4
	cmp	eax, 1
	jne	$LN4@StaticObje@2

; 96   : 	{
; 97   : 		for(this->ObjectNumber=1;dbObjectExist(this->ObjectNumber)==1;this->ObjectNumber++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3020], 1
	jmp	SHORT $LN3@StaticObje@2
$LN2@StaticObje@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3020], ecx
$LN3@StaticObje@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbObjectExist@@YAHH@Z			; dbObjectExist
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN1@StaticObje@2
	jmp	SHORT $LN2@StaticObje@2
$LN1@StaticObje@2:

; 98   : 		dbLoadObject(this->ObjectFullPath,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbLoadObject@@YAXPADH@Z		; dbLoadObject
	add	esp, 8

; 99   : 		dbShowObject(this->ObjectNumber);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbShowObject@@YAXH@Z			; dbShowObject
	add	esp, 4

; 100  : 
; 101  : 		ScaleObjectV(this->Scale);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3112				; 00000c28H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::ScaleObjectV

; 102  : 		RotateObjectV(this->Rotation);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3076				; 00000c04H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::RotateObjectV

; 103  : 		PositionObjectV(this->Position);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3064				; 00000bf8H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PositionObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::PositionObjectV
$LN4@StaticObje@2:

; 104  : 	}
; 105  : 
; 106  : 	return;
; 107  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMM@Z$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$??0StaticObject@@QAE@PAD_NPAHMMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-228]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0StaticObject@@QAE@PAD_NPAHMMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0StaticObject@@QAE@PAD_NPAHMMM@Z ENDP			; StaticObject::StaticObject
PUBLIC	??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z	; StaticObject::StaticObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$8
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z
_TEXT	SEGMENT
$T92957 = -236						; size = 12
$T92958 = -224						; size = 12
$T92959 = -212						; size = 12
$T92960 = -200						; size = 12
$T92961 = -188						; size = 12
$T92962 = -176						; size = 12
$T92963 = -164						; size = 12
$T92964 = -152						; size = 12
$T92965 = -140						; size = 12
_Zero$ = -64						; size = 12
_Rot$ = -52						; size = 12
_Scl$ = -40						; size = 12
_Pos$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Name$ = 8						; size = 4
_AdjustRate$ = 12					; size = 1
_RefreshPointer$ = 16					; size = 4
_XPos$ = 20						; size = 4
_YPos$ = 24						; size = 4
_ZPos$ = 28						; size = 4
_XRotPos$ = 32						; size = 4
_YRotPos$ = 36						; size = 4
_ZRotPos$ = 40						; size = 4
_XScl$ = 44						; size = 4
_YScl$ = 48						; size = 4
_ZScl$ = 52						; size = 4
??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z PROC		; StaticObject::StaticObject, COMDAT
; _this$ = ecx

; 109  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 8

; 110  : 	float Pos[3]={XPos,YPos,ZPos};

	fld	DWORD PTR _XPos$[ebp]
	fstp	DWORD PTR _Pos$[ebp]
	fld	DWORD PTR _YPos$[ebp]
	fstp	DWORD PTR _Pos$[ebp+4]
	fld	DWORD PTR _ZPos$[ebp]
	fstp	DWORD PTR _Pos$[ebp+8]

; 111  : 	float Scl[3]={XScl,YScl,ZScl};

	fld	DWORD PTR _XScl$[ebp]
	fstp	DWORD PTR _Scl$[ebp]
	fld	DWORD PTR _YScl$[ebp]
	fstp	DWORD PTR _Scl$[ebp+4]
	fld	DWORD PTR _ZScl$[ebp]
	fstp	DWORD PTR _Scl$[ebp+8]

; 112  : 	float Rot[3]={XRotPos,YRotPos,ZRotPos};

	fld	DWORD PTR _XRotPos$[ebp]
	fstp	DWORD PTR _Rot$[ebp]
	fld	DWORD PTR _YRotPos$[ebp]
	fstp	DWORD PTR _Rot$[ebp+4]
	fld	DWORD PTR _ZRotPos$[ebp]
	fstp	DWORD PTR _Rot$[ebp+8]

; 113  : 	float Zero[3]={0.0f,0.0f,0.0f};

	fldz
	fstp	DWORD PTR _Zero$[ebp]
	fldz
	fstp	DWORD PTR _Zero$[ebp+4]
	fldz
	fstp	DWORD PTR _Zero$[ebp+8]

; 114  : 
; 115  : 	this->ObjectName=Name;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Name$[ebp]
	mov	DWORD PTR [eax+3008], ecx

; 116  : 	this->Visible=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 117  : 
; 118  : 	this->Accelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92957[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92957[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 119  : 	this->AngularAccelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92958[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92958[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 120  : 	this->AngularVelocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92959[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92959[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 121  : 	this->Position=Pos;

	lea	eax, DWORD PTR _Pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92960[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92960[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 122  : 	this->Rotation=Rot;

	lea	eax, DWORD PTR _Rot$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92961[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92961[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 123  : 	this->ScalarAccelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92962[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92962[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 124  : 	this->ScalarVelocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92963[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92963[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 125  : 	this->Scale=Scl;

	lea	eax, DWORD PTR _Scl$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92964[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92964[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 126  : 	this->Velocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92965[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92965[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 127  : 
; 128  : 	this->ObjectEffectName="";

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3004], OFFSET ??_C@_00CNPNBAHC@?$AA@

; 129  : 	this->ObjectEffectNumber=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3016], 0

; 130  : 	this->RefreshRatePointer=RefreshPointer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _RefreshPointer$[ebp]
	mov	DWORD PTR [eax+3024], ecx

; 131  : 	this->AdjustToFrameRate=AdjustRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _AdjustRate$[ebp]
	mov	BYTE PTR [eax], cl

; 132  : 
; 133  : 	strcpy(this->ObjectFullPath,"Objects\\");

	push	OFFSET ??_C@_08IHJKPDAE@Objects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcpy
	add	esp, 8

; 134  : 	strcat(this->ObjectFullPath,this->ObjectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3008]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1002				; 000003eaH
	push	edx
	call	_strcat
	add	esp, 8

; 135  : 	strcat(this->ObjectFullPath,"\\Object.X");

	push	OFFSET ??_C@_09CBDJJBPN@?2Object?4X?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcat
	add	esp, 8

; 136  : 
; 137  : 	strcpy(this->ObjectEffectFullPath,"Effects\\");

	push	OFFSET ??_C@_08FBFOBNBE@Effects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 2
	push	eax
	call	_strcpy
	add	esp, 8

; 138  : 	strcat(this->ObjectEffectFullPath,this->ObjectEffectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3004]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 2
	push	edx
	call	_strcat
	add	esp, 8

; 139  : 
; 140  : 	if(dbFileExist(this->ObjectFullPath)==1)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbFileExist@@YAHPAD@Z			; dbFileExist
	add	esp, 4
	cmp	eax, 1
	jne	$LN4@StaticObje@3

; 141  : 	{
; 142  : 		for(this->ObjectNumber=1;dbObjectExist(this->ObjectNumber)==1;this->ObjectNumber++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3020], 1
	jmp	SHORT $LN3@StaticObje@3
$LN2@StaticObje@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3020], ecx
$LN3@StaticObje@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbObjectExist@@YAHH@Z			; dbObjectExist
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN1@StaticObje@3
	jmp	SHORT $LN2@StaticObje@3
$LN1@StaticObje@3:

; 143  : 		dbLoadObject(this->ObjectFullPath,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbLoadObject@@YAXPADH@Z		; dbLoadObject
	add	esp, 8

; 144  : 		dbShowObject(this->ObjectNumber);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbShowObject@@YAXH@Z			; dbShowObject
	add	esp, 4

; 145  : 
; 146  : 		ScaleObjectV(this->Scale);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3112				; 00000c28H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::ScaleObjectV

; 147  : 		RotateObjectV(this->Rotation);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3076				; 00000c04H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::RotateObjectV

; 148  : 		PositionObjectV(this->Position);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3064				; 00000bf8H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PositionObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::PositionObjectV
$LN4@StaticObje@3:

; 149  : 	}
; 150  : 
; 151  : 	return;
; 152  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-240]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0StaticObject@@QAE@PAD_NPAHMMMMMMMMM@Z ENDP		; StaticObject::StaticObject
PUBLIC	??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z ; StaticObject::StaticObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$8
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT
$T92992 = -296						; size = 12
$T92993 = -284						; size = 12
$T92994 = -272						; size = 12
$T92995 = -260						; size = 12
$T92996 = -248						; size = 12
$T92997 = -236						; size = 12
$T92998 = -224						; size = 12
$T92999 = -212						; size = 12
$T93000 = -200						; size = 12
_Scl$ = -124						; size = 12
_Rot$ = -112						; size = 12
_Pos$ = -100						; size = 12
_SVel$ = -88						; size = 12
_AVel$ = -76						; size = 12
_Vel$ = -64						; size = 12
_SAccel$ = -52						; size = 12
_AAccel$ = -40						; size = 12
_Accel$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Name$ = 8						; size = 4
_AdjustRate$ = 12					; size = 1
_RefreshPointer$ = 16					; size = 4
_XPos$ = 20						; size = 4
_YPos$ = 24						; size = 4
_ZPos$ = 28						; size = 4
_XRotPos$ = 32						; size = 4
_YRotPos$ = 36						; size = 4
_ZRotPos$ = 40						; size = 4
_XScl$ = 44						; size = 4
_YScl$ = 48						; size = 4
_ZScl$ = 52						; size = 4
_XVel$ = 56						; size = 4
_YVel$ = 60						; size = 4
_ZVel$ = 64						; size = 4
_XAccel$ = 68						; size = 4
_YAccel$ = 72						; size = 4
_ZAccel$ = 76						; size = 4
_XAVel$ = 80						; size = 4
_YAVel$ = 84						; size = 4
_ZAVel$ = 88						; size = 4
_XAAccel$ = 92						; size = 4
_YAAccel$ = 96						; size = 4
_ZAAccel$ = 100						; size = 4
_XSVel$ = 104						; size = 4
_YSVel$ = 108						; size = 4
_ZSVel$ = 112						; size = 4
_XSAccel$ = 116						; size = 4
_YSAccel$ = 120						; size = 4
_ZSAccel$ = 124						; size = 4
??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z PROC ; StaticObject::StaticObject, COMDAT
; _this$ = ecx

; 154  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 8

; 155  : 	float Accel[3]={XAccel,YAccel,ZAccel};

	fld	DWORD PTR _XAccel$[ebp]
	fstp	DWORD PTR _Accel$[ebp]
	fld	DWORD PTR _YAccel$[ebp]
	fstp	DWORD PTR _Accel$[ebp+4]
	fld	DWORD PTR _ZAccel$[ebp]
	fstp	DWORD PTR _Accel$[ebp+8]

; 156  : 	float AAccel[3]={XAAccel,YAAccel,ZAAccel};

	fld	DWORD PTR _XAAccel$[ebp]
	fstp	DWORD PTR _AAccel$[ebp]
	fld	DWORD PTR _YAAccel$[ebp]
	fstp	DWORD PTR _AAccel$[ebp+4]
	fld	DWORD PTR _ZAAccel$[ebp]
	fstp	DWORD PTR _AAccel$[ebp+8]

; 157  : 	float SAccel[3]={XSAccel,YSAccel,ZSAccel};

	fld	DWORD PTR _XSAccel$[ebp]
	fstp	DWORD PTR _SAccel$[ebp]
	fld	DWORD PTR _YSAccel$[ebp]
	fstp	DWORD PTR _SAccel$[ebp+4]
	fld	DWORD PTR _ZSAccel$[ebp]
	fstp	DWORD PTR _SAccel$[ebp+8]

; 158  : 	float Vel[3]={XVel,YVel,ZVel};

	fld	DWORD PTR _XVel$[ebp]
	fstp	DWORD PTR _Vel$[ebp]
	fld	DWORD PTR _YVel$[ebp]
	fstp	DWORD PTR _Vel$[ebp+4]
	fld	DWORD PTR _ZVel$[ebp]
	fstp	DWORD PTR _Vel$[ebp+8]

; 159  : 	float AVel[3]={XAVel,YAVel,ZAVel};

	fld	DWORD PTR _XAVel$[ebp]
	fstp	DWORD PTR _AVel$[ebp]
	fld	DWORD PTR _YAVel$[ebp]
	fstp	DWORD PTR _AVel$[ebp+4]
	fld	DWORD PTR _ZAVel$[ebp]
	fstp	DWORD PTR _AVel$[ebp+8]

; 160  : 	float SVel[3]={XSVel,YSVel,ZSVel};

	fld	DWORD PTR _XSVel$[ebp]
	fstp	DWORD PTR _SVel$[ebp]
	fld	DWORD PTR _YSVel$[ebp]
	fstp	DWORD PTR _SVel$[ebp+4]
	fld	DWORD PTR _ZSVel$[ebp]
	fstp	DWORD PTR _SVel$[ebp+8]

; 161  : 	float Pos[3]={XPos,YPos,ZPos};

	fld	DWORD PTR _XPos$[ebp]
	fstp	DWORD PTR _Pos$[ebp]
	fld	DWORD PTR _YPos$[ebp]
	fstp	DWORD PTR _Pos$[ebp+4]
	fld	DWORD PTR _ZPos$[ebp]
	fstp	DWORD PTR _Pos$[ebp+8]

; 162  : 	float Rot[3]={XRotPos,YRotPos,ZRotPos};

	fld	DWORD PTR _XRotPos$[ebp]
	fstp	DWORD PTR _Rot$[ebp]
	fld	DWORD PTR _YRotPos$[ebp]
	fstp	DWORD PTR _Rot$[ebp+4]
	fld	DWORD PTR _ZRotPos$[ebp]
	fstp	DWORD PTR _Rot$[ebp+8]

; 163  : 	float Scl[3]={XScl,YScl,ZScl};

	fld	DWORD PTR _XScl$[ebp]
	fstp	DWORD PTR _Scl$[ebp]
	fld	DWORD PTR _YScl$[ebp]
	fstp	DWORD PTR _Scl$[ebp+4]
	fld	DWORD PTR _ZScl$[ebp]
	fstp	DWORD PTR _Scl$[ebp+8]

; 164  : 
; 165  : 	this->ObjectName=Name;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Name$[ebp]
	mov	DWORD PTR [eax+3008], ecx

; 166  : 	this->Visible=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 167  : 
; 168  : 	this->Accelaration=Accel;

	lea	eax, DWORD PTR _Accel$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92992[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92992[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 169  : 	this->AngularAccelaration=AAccel;

	lea	eax, DWORD PTR _AAccel$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92993[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92993[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 170  : 	this->AngularVelocity=AVel;

	lea	eax, DWORD PTR _AVel$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92994[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92994[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 171  : 	this->Position=Pos;

	lea	eax, DWORD PTR _Pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92995[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92995[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 172  : 	this->Rotation=Rot;

	lea	eax, DWORD PTR _Rot$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92996[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92996[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 173  : 	this->ScalarAccelaration=SAccel;

	lea	eax, DWORD PTR _SAccel$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92997[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92997[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 174  : 	this->ScalarVelocity=SVel;

	lea	eax, DWORD PTR _SVel$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92998[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92998[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 175  : 	this->Scale=Scl;

	lea	eax, DWORD PTR _Scl$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92999[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T92999[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 176  : 	this->Velocity=Vel;

	lea	eax, DWORD PTR _Vel$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93000[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93000[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 177  : 
; 178  : 	this->ObjectEffectName="";

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3004], OFFSET ??_C@_00CNPNBAHC@?$AA@

; 179  : 	this->ObjectEffectNumber=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3016], 0

; 180  : 	this->RefreshRatePointer=RefreshPointer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _RefreshPointer$[ebp]
	mov	DWORD PTR [eax+3024], ecx

; 181  : 	this->AdjustToFrameRate=AdjustRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _AdjustRate$[ebp]
	mov	BYTE PTR [eax], cl

; 182  : 
; 183  : 	strcpy(this->ObjectFullPath,"Objects\\");

	push	OFFSET ??_C@_08IHJKPDAE@Objects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcpy
	add	esp, 8

; 184  : 	strcat(this->ObjectFullPath,this->ObjectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3008]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1002				; 000003eaH
	push	edx
	call	_strcat
	add	esp, 8

; 185  : 	strcat(this->ObjectFullPath,"\\Object.X");

	push	OFFSET ??_C@_09CBDJJBPN@?2Object?4X?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcat
	add	esp, 8

; 186  : 
; 187  : 	strcpy(this->ObjectEffectFullPath,"Effects\\");

	push	OFFSET ??_C@_08FBFOBNBE@Effects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 2
	push	eax
	call	_strcpy
	add	esp, 8

; 188  : 	strcat(this->ObjectEffectFullPath,this->ObjectEffectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3004]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 2
	push	edx
	call	_strcat
	add	esp, 8

; 189  : 
; 190  : 	if(dbFileExist(this->ObjectFullPath)==1)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbFileExist@@YAHPAD@Z			; dbFileExist
	add	esp, 4
	cmp	eax, 1
	jne	$LN4@StaticObje@4

; 191  : 	{
; 192  : 		for(this->ObjectNumber=1;dbObjectExist(this->ObjectNumber)==1;this->ObjectNumber++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3020], 1
	jmp	SHORT $LN3@StaticObje@4
$LN2@StaticObje@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3020], ecx
$LN3@StaticObje@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbObjectExist@@YAHH@Z			; dbObjectExist
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN1@StaticObje@4
	jmp	SHORT $LN2@StaticObje@4
$LN1@StaticObje@4:

; 193  : 		dbLoadObject(this->ObjectFullPath,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbLoadObject@@YAXPADH@Z		; dbLoadObject
	add	esp, 8

; 194  : 		dbShowObject(this->ObjectNumber);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbShowObject@@YAXH@Z			; dbShowObject
	add	esp, 4

; 195  : 
; 196  : 		ScaleObjectV(this->Scale);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3112				; 00000c28H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::ScaleObjectV

; 197  : 		RotateObjectV(this->Rotation);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3076				; 00000c04H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::RotateObjectV

; 198  : 		PositionObjectV(this->Position);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3064				; 00000bf8H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PositionObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::PositionObjectV
$LN4@StaticObje@4:

; 199  : 	}
; 200  : 
; 201  : 	return;
; 202  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	120					; 00000078H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0StaticObject@@QAE@PAD_NPAHMMMMMMMMMMMMMMMMMMMMMMMMMMM@Z ENDP ; StaticObject::StaticObject
PUBLIC	??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z	; StaticObject::StaticObject
EXTRN	??4Vector3@@QAE?AV0@V0@@Z:PROC			; Vector3::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$9
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z
_TEXT	SEGMENT
$T93027 = -212						; size = 12
$T93028 = -200						; size = 12
$T93029 = -188						; size = 12
$T93030 = -176						; size = 12
$T93031 = -164						; size = 12
$T93032 = -152						; size = 12
$T93033 = -140						; size = 12
$T93034 = -128						; size = 12
$T93035 = -116						; size = 12
_Zero$ = -40						; size = 12
_Scl$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Name$ = 8						; size = 4
_AdjustRate$ = 12					; size = 1
_RefreshPointer$ = 16					; size = 4
_Pos$ = 20						; size = 12
??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z PROC		; StaticObject::StaticObject, COMDAT
; _this$ = ecx

; 204  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 9

; 205  : 	float Scl[3]={100.0f,100.0f,100.0f};

	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _Scl$[ebp]
	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _Scl$[ebp+4]
	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _Scl$[ebp+8]

; 206  : 	float Zero[3]={0.0f,0.0f,0.0f};

	fldz
	fstp	DWORD PTR _Zero$[ebp]
	fldz
	fstp	DWORD PTR _Zero$[ebp+4]
	fldz
	fstp	DWORD PTR _Zero$[ebp+8]

; 207  : 
; 208  : 	this->ObjectName=Name;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Name$[ebp]
	mov	DWORD PTR [eax+3008], ecx

; 209  : 	this->Visible=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 210  : 
; 211  : 	this->Accelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93027[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93027[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 212  : 	this->AngularAccelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93028[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93028[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 213  : 	this->AngularVelocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93029[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93029[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 214  : 	this->Position=Pos;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _Pos$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _Pos$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93030[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93030[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 215  : 	this->Rotation=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93031[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93031[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 216  : 	this->ScalarAccelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93032[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93032[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 217  : 	this->ScalarVelocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93033[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93033[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 218  : 	this->Scale=Scl;

	lea	eax, DWORD PTR _Scl$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93034[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93034[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 219  : 	this->Velocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93035[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93035[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 220  : 
; 221  : 	this->ObjectEffectName="";

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3004], OFFSET ??_C@_00CNPNBAHC@?$AA@

; 222  : 	this->ObjectEffectNumber=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3016], 0

; 223  : 	this->RefreshRatePointer=RefreshPointer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _RefreshPointer$[ebp]
	mov	DWORD PTR [eax+3024], ecx

; 224  : 	this->AdjustToFrameRate=AdjustRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _AdjustRate$[ebp]
	mov	BYTE PTR [eax], cl

; 225  : 
; 226  : 	strcpy(this->ObjectFullPath,"Objects\\");

	push	OFFSET ??_C@_08IHJKPDAE@Objects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcpy
	add	esp, 8

; 227  : 	strcat(this->ObjectFullPath,this->ObjectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3008]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1002				; 000003eaH
	push	edx
	call	_strcat
	add	esp, 8

; 228  : 	strcat(this->ObjectFullPath,"\\Object.X");

	push	OFFSET ??_C@_09CBDJJBPN@?2Object?4X?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcat
	add	esp, 8

; 229  : 
; 230  : 	strcpy(this->ObjectEffectFullPath,"Effects\\");

	push	OFFSET ??_C@_08FBFOBNBE@Effects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 2
	push	eax
	call	_strcpy
	add	esp, 8

; 231  : 	strcat(this->ObjectEffectFullPath,this->ObjectEffectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3004]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 2
	push	edx
	call	_strcat
	add	esp, 8

; 232  : 
; 233  : 	if(dbFileExist(this->ObjectFullPath)==1)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbFileExist@@YAHPAD@Z			; dbFileExist
	add	esp, 4
	cmp	eax, 1
	jne	$LN4@StaticObje@5

; 234  : 	{
; 235  : 		for(this->ObjectNumber=1;dbObjectExist(this->ObjectNumber)==1;this->ObjectNumber++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3020], 1
	jmp	SHORT $LN3@StaticObje@5
$LN2@StaticObje@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3020], ecx
$LN3@StaticObje@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbObjectExist@@YAHH@Z			; dbObjectExist
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN1@StaticObje@5
	jmp	SHORT $LN2@StaticObje@5
$LN1@StaticObje@5:

; 236  : 		dbLoadObject(this->ObjectFullPath,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbLoadObject@@YAXPADH@Z		; dbLoadObject
	add	esp, 8

; 237  : 		dbShowObject(this->ObjectNumber);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbShowObject@@YAXH@Z			; dbShowObject
	add	esp, 4

; 238  : 
; 239  : 		ScaleObjectV(this->Scale);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3112				; 00000c28H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::ScaleObjectV

; 240  : 		RotateObjectV(this->Rotation);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3076				; 00000c04H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::RotateObjectV

; 241  : 		PositionObjectV(this->Position);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3064				; 00000bf8H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PositionObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::PositionObjectV
$LN4@StaticObje@5:

; 242  : 	}
; 243  : 
; 244  : 	return;
; 245  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Pos$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$0:
	lea	ecx, DWORD PTR _Pos$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-216]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0StaticObject@@QAE@PAD_NPAHVVector3@@@Z ENDP		; StaticObject::StaticObject
PUBLIC	??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z	; StaticObject::StaticObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$11
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z
_TEXT	SEGMENT
$T93063 = -200						; size = 12
$T93064 = -188						; size = 12
$T93065 = -176						; size = 12
$T93066 = -164						; size = 12
$T93067 = -152						; size = 12
$T93068 = -140						; size = 12
$T93069 = -128						; size = 12
$T93070 = -116						; size = 12
$T93071 = -104						; size = 12
_Zero$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Name$ = 8						; size = 4
_AdjustRate$ = 12					; size = 1
_RefreshPointer$ = 16					; size = 4
_Pos$ = 20						; size = 12
_Rot$ = 32						; size = 12
_Scl$ = 44						; size = 12
??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z PROC	; StaticObject::StaticObject, COMDAT
; _this$ = ecx

; 247  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 188				; 000000bcH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH

; 248  : 	float Zero[3]={0.0f,0.0f,0.0f};

	fldz
	fstp	DWORD PTR _Zero$[ebp]
	fldz
	fstp	DWORD PTR _Zero$[ebp+4]
	fldz
	fstp	DWORD PTR _Zero$[ebp+8]

; 249  : 
; 250  : 	this->ObjectName=Name;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Name$[ebp]
	mov	DWORD PTR [eax+3008], ecx

; 251  : 	this->Visible=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 252  : 
; 253  : 	this->Accelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93063[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93063[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 254  : 	this->AngularAccelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93064[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93064[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 255  : 	this->AngularVelocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93065[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93065[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 256  : 	this->Position=Pos;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _Pos$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _Pos$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93066[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93066[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 257  : 	this->Rotation=Rot;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _Rot$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _Rot$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _Rot$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93067[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93067[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 258  : 	this->ScalarAccelaration=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93068[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93068[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 259  : 	this->ScalarVelocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93069[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93069[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 260  : 	this->Scale=Scl;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _Scl$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _Scl$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _Scl$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93070[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93070[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 261  : 	this->Velocity=Zero;

	lea	eax, DWORD PTR _Zero$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93071[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93071[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 262  : 
; 263  : 	this->ObjectEffectName="";

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3004], OFFSET ??_C@_00CNPNBAHC@?$AA@

; 264  : 	this->ObjectEffectNumber=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3016], 0

; 265  : 	this->RefreshRatePointer=RefreshPointer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _RefreshPointer$[ebp]
	mov	DWORD PTR [eax+3024], ecx

; 266  : 	this->AdjustToFrameRate=AdjustRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _AdjustRate$[ebp]
	mov	BYTE PTR [eax], cl

; 267  : 
; 268  : 	strcpy(this->ObjectFullPath,"Objects\\");

	push	OFFSET ??_C@_08IHJKPDAE@Objects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcpy
	add	esp, 8

; 269  : 	strcat(this->ObjectFullPath,this->ObjectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3008]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1002				; 000003eaH
	push	edx
	call	_strcat
	add	esp, 8

; 270  : 	strcat(this->ObjectFullPath,"\\Object.X");

	push	OFFSET ??_C@_09CBDJJBPN@?2Object?4X?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcat
	add	esp, 8

; 271  : 
; 272  : 	strcpy(this->ObjectEffectFullPath,"Effects\\");

	push	OFFSET ??_C@_08FBFOBNBE@Effects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 2
	push	eax
	call	_strcpy
	add	esp, 8

; 273  : 	strcat(this->ObjectEffectFullPath,this->ObjectEffectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3004]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 2
	push	edx
	call	_strcat
	add	esp, 8

; 274  : 
; 275  : 	if(dbFileExist(this->ObjectFullPath)==1)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbFileExist@@YAHPAD@Z			; dbFileExist
	add	esp, 4
	cmp	eax, 1
	jne	$LN4@StaticObje@6

; 276  : 	{
; 277  : 		for(this->ObjectNumber=1;dbObjectExist(this->ObjectNumber)==1;this->ObjectNumber++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3020], 1
	jmp	SHORT $LN3@StaticObje@6
$LN2@StaticObje@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3020], ecx
$LN3@StaticObje@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbObjectExist@@YAHH@Z			; dbObjectExist
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN1@StaticObje@6
	jmp	SHORT $LN2@StaticObje@6
$LN1@StaticObje@6:

; 278  : 		dbLoadObject(this->ObjectFullPath,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbLoadObject@@YAXPADH@Z		; dbLoadObject
	add	esp, 8

; 279  : 		dbShowObject(this->ObjectNumber);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbShowObject@@YAXH@Z			; dbShowObject
	add	esp, 4

; 280  : 
; 281  : 		ScaleObjectV(this->Scale);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3112				; 00000c28H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::ScaleObjectV

; 282  : 		RotateObjectV(this->Rotation);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3076				; 00000c04H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::RotateObjectV

; 283  : 		PositionObjectV(this->Position);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3064				; 00000bf8H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PositionObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::PositionObjectV
$LN4@StaticObje@6:

; 284  : 	}
; 285  : 
; 286  : 	return;
; 287  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _Pos$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Rot$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Scl$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$0:
	lea	ecx, DWORD PTR _Scl$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$1:
	lea	ecx, DWORD PTR _Rot$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$2:
	lea	ecx, DWORD PTR _Pos$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z$11:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-204]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0StaticObject@@QAE@PAD_NPAHVVector3@@33@Z ENDP	; StaticObject::StaticObject
PUBLIC	??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z ; StaticObject::StaticObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z DD 019930522H
	DD	012H
	DD	FLAT:__unwindtable$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$16
	DD	010H
	DD	FLAT:__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$17
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z
_TEXT	SEGMENT
$T93101 = -188						; size = 12
$T93102 = -176						; size = 12
$T93103 = -164						; size = 12
$T93104 = -152						; size = 12
$T93105 = -140						; size = 12
$T93106 = -128						; size = 12
$T93107 = -116						; size = 12
$T93108 = -104						; size = 12
$T93109 = -92						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Name$ = 8						; size = 4
_AdjustRate$ = 12					; size = 1
_RefreshPointer$ = 16					; size = 4
_Pos$ = 20						; size = 12
_Rot$ = 32						; size = 12
_Scl$ = 44						; size = 12
_Vel$ = 56						; size = 12
_Accel$ = 68						; size = 12
_AVel$ = 80						; size = 12
_AAccel$ = 92						; size = 12
_SVel$ = 104						; size = 12
_SAccel$ = 116						; size = 12
??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z PROC	; StaticObject::StaticObject, COMDAT
; _this$ = ecx

; 289  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 176				; 000000b0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H

; 290  : 	this->ObjectName=Name;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Name$[ebp]
	mov	DWORD PTR [eax+3008], ecx

; 291  : 	this->Visible=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 292  : 
; 293  : 	this->Accelaration=Accel;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _Accel$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _Accel$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _Accel$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93101[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93101[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 294  : 	this->AngularAccelaration=AAccel;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _AAccel$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _AAccel$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _AAccel$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93102[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93102[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 295  : 	this->AngularVelocity=AVel;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _AVel$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _AVel$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _AVel$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93103[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93103[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 296  : 	this->Position=Pos;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _Pos$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _Pos$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _Pos$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93104[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93104[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 297  : 	this->Rotation=Rot;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _Rot$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _Rot$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _Rot$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93105[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93105[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 298  : 	this->ScalarAccelaration=SAccel;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _SAccel$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _SAccel$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _SAccel$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93106[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93106[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 299  : 	this->ScalarVelocity=SVel;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _SVel$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _SVel$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _SVel$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93107[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93107[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 300  : 	this->Scale=Scl;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _Scl$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _Scl$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _Scl$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93108[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93108[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 301  : 	this->Velocity=Vel;

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _Vel$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _Vel$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _Vel$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR $T93109[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??4Vector3@@QAE?AV0@V0@@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93109[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 302  : 
; 303  : 	this->ObjectEffectName="";

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3004], OFFSET ??_C@_00CNPNBAHC@?$AA@

; 304  : 	this->ObjectEffectNumber=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3016], 0

; 305  : 	this->RefreshRatePointer=RefreshPointer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _RefreshPointer$[ebp]
	mov	DWORD PTR [eax+3024], ecx

; 306  : 	this->AdjustToFrameRate=AdjustRate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _AdjustRate$[ebp]
	mov	BYTE PTR [eax], cl

; 307  : 
; 308  : 	strcpy(this->ObjectFullPath,"Objects\\");

	push	OFFSET ??_C@_08IHJKPDAE@Objects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcpy
	add	esp, 8

; 309  : 	strcat(this->ObjectFullPath,this->ObjectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3008]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1002				; 000003eaH
	push	edx
	call	_strcat
	add	esp, 8

; 310  : 	strcat(this->ObjectFullPath,"\\Object.X");

	push	OFFSET ??_C@_09CBDJJBPN@?2Object?4X?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	_strcat
	add	esp, 8

; 311  : 
; 312  : 	strcpy(this->ObjectEffectFullPath,"Effects\\");

	push	OFFSET ??_C@_08FBFOBNBE@Effects?2?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 2
	push	eax
	call	_strcpy
	add	esp, 8

; 313  : 	strcat(this->ObjectEffectFullPath,this->ObjectEffectName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3004]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 2
	push	edx
	call	_strcat
	add	esp, 8

; 314  : 
; 315  : 	if(dbFileExist(this->ObjectFullPath)==1)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbFileExist@@YAHPAD@Z			; dbFileExist
	add	esp, 4
	cmp	eax, 1
	jne	$LN5@StaticObje@7

; 316  : 	{
; 317  : 		for(this->ObjectNumber=1;dbObjectExist(this->ObjectNumber)==1;this->ObjectNumber++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3020], 1
	jmp	SHORT $LN3@StaticObje@7
$LN2@StaticObje@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3020], ecx
$LN3@StaticObje@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbObjectExist@@YAHH@Z			; dbObjectExist
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN1@StaticObje@7
	jmp	SHORT $LN2@StaticObje@7
$LN1@StaticObje@7:

; 318  : 		dbLoadObject(this->ObjectFullPath,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1002				; 000003eaH
	push	eax
	call	?dbLoadObject@@YAXPADH@Z		; dbLoadObject
	add	esp, 8

; 319  : 		dbShowObject(this->ObjectNumber);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbShowObject@@YAXH@Z			; dbShowObject
	add	esp, 4

; 320  : 
; 321  : 		ScaleObjectV(this->Scale);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3112				; 00000c28H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::ScaleObjectV

; 322  : 		RotateObjectV(this->Rotation);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3076				; 00000c04H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::RotateObjectV

; 323  : 		PositionObjectV(this->Position);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3064				; 00000bf8H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PositionObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::PositionObjectV
$LN5@StaticObje@7:

; 324  : 	}
; 325  : 
; 326  : 	return;
; 327  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _Pos$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _Rot$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _Scl$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _Vel$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _Accel$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _AVel$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _AAccel$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _SVel$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _SAccel$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	120					; 00000078H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$0:
	lea	ecx, DWORD PTR _SAccel$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$1:
	lea	ecx, DWORD PTR _SVel$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$2:
	lea	ecx, DWORD PTR _AAccel$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$3:
	lea	ecx, DWORD PTR _AVel$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$4:
	lea	ecx, DWORD PTR _Accel$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$5:
	lea	ecx, DWORD PTR _Vel$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$6:
	lea	ecx, DWORD PTR _Scl$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$7:
	lea	ecx, DWORD PTR _Rot$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$8:
	lea	ecx, DWORD PTR _Pos$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$11:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$12:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$13:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$14:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$15:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$16:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z$17:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-192]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z ENDP	; StaticObject::StaticObject
PUBLIC	??1StaticObject@@QAE@XZ				; StaticObject::~StaticObject
EXTRN	?dbDeleteEffect@@YAXH@Z:PROC			; dbDeleteEffect
EXTRN	?dbDeleteObject@@YAXH@Z:PROC			; dbDeleteObject
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1StaticObject@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??1StaticObject@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1StaticObject@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1StaticObject@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1StaticObject@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1StaticObject@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1StaticObject@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1StaticObject@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1StaticObject@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1StaticObject@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1StaticObject@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1StaticObject@@QAE@XZ$8
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1StaticObject@@QAE@XZ
_TEXT	SEGMENT
$T93145 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1StaticObject@@QAE@XZ PROC				; StaticObject::~StaticObject, COMDAT
; _this$ = ecx

; 329  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1StaticObject@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 8

; 330  : 	delete this->ObjectName;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3008]
	mov	DWORD PTR $T93145[ebp], ecx
	mov	edx, DWORD PTR $T93145[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 331  : 	dbDeleteObject(this->ObjectNumber);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbDeleteObject@@YAXH@Z			; dbDeleteObject
	add	esp, 4

; 332  : 	dbDeleteEffect(this->ObjectEffectNumber);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3016]
	push	ecx
	call	?dbDeleteEffect@@YAXH@Z			; dbDeleteEffect
	add	esp, 4

; 333  : 
; 334  : 	return;
; 335  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1StaticObject@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??1StaticObject@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??1StaticObject@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??1StaticObject@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??1StaticObject@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??1StaticObject@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??1StaticObject@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??1StaticObject@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??1StaticObject@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$??1StaticObject@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1StaticObject@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1StaticObject@@QAE@XZ ENDP				; StaticObject::~StaticObject
PUBLIC	?GetAccelaration@StaticObject@@QAE?AVVector3@@XZ ; StaticObject::GetAccelaration
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetAccelaration@StaticObject@@QAE?AVVector3@@XZ
_TEXT	SEGMENT
$T93164 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetAccelaration@StaticObject@@QAE?AVVector3@@XZ PROC	; StaticObject::GetAccelaration, COMDAT
; _this$ = ecx

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93164[ebp], 0

; 338  : 	return this->Accelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3028				; 00000bd4H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93164[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93164[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 339  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAccelaration@StaticObject@@QAE?AVVector3@@XZ ENDP	; StaticObject::GetAccelaration
_TEXT	ENDS
PUBLIC	?GetAngularAccelaration@StaticObject@@QAE?AVVector3@@XZ ; StaticObject::GetAngularAccelaration
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetAngularAccelaration@StaticObject@@QAE?AVVector3@@XZ
_TEXT	SEGMENT
$T93169 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetAngularAccelaration@StaticObject@@QAE?AVVector3@@XZ PROC ; StaticObject::GetAngularAccelaration, COMDAT
; _this$ = ecx

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93169[ebp], 0

; 342  : 	return this->AngularAccelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3040				; 00000be0H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93169[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93169[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 343  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAngularAccelaration@StaticObject@@QAE?AVVector3@@XZ ENDP ; StaticObject::GetAngularAccelaration
_TEXT	ENDS
PUBLIC	?GetAngularVelocity@StaticObject@@QAE?AVVector3@@XZ ; StaticObject::GetAngularVelocity
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetAngularVelocity@StaticObject@@QAE?AVVector3@@XZ
_TEXT	SEGMENT
$T93174 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetAngularVelocity@StaticObject@@QAE?AVVector3@@XZ PROC ; StaticObject::GetAngularVelocity, COMDAT
; _this$ = ecx

; 345  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93174[ebp], 0

; 346  : 	return this->AngularVelocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3052				; 00000becH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93174[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93174[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 347  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAngularVelocity@StaticObject@@QAE?AVVector3@@XZ ENDP ; StaticObject::GetAngularVelocity
_TEXT	ENDS
PUBLIC	?GetScalarAccelaration@StaticObject@@QAE?AVVector3@@XZ ; StaticObject::GetScalarAccelaration
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetScalarAccelaration@StaticObject@@QAE?AVVector3@@XZ
_TEXT	SEGMENT
$T93179 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetScalarAccelaration@StaticObject@@QAE?AVVector3@@XZ PROC ; StaticObject::GetScalarAccelaration, COMDAT
; _this$ = ecx

; 349  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93179[ebp], 0

; 350  : 	return this->ScalarAccelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3088				; 00000c10H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93179[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93179[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 351  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetScalarAccelaration@StaticObject@@QAE?AVVector3@@XZ ENDP ; StaticObject::GetScalarAccelaration
_TEXT	ENDS
PUBLIC	?GetScalarVelocity@StaticObject@@QAE?AVVector3@@XZ ; StaticObject::GetScalarVelocity
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetScalarVelocity@StaticObject@@QAE?AVVector3@@XZ
_TEXT	SEGMENT
$T93184 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetScalarVelocity@StaticObject@@QAE?AVVector3@@XZ PROC	; StaticObject::GetScalarVelocity, COMDAT
; _this$ = ecx

; 353  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93184[ebp], 0

; 354  : 	return this->ScalarVelocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3100				; 00000c1cH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93184[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93184[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 355  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetScalarVelocity@StaticObject@@QAE?AVVector3@@XZ ENDP	; StaticObject::GetScalarVelocity
_TEXT	ENDS
PUBLIC	?GetVelocity@StaticObject@@QAE?AVVector3@@XZ	; StaticObject::GetVelocity
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetVelocity@StaticObject@@QAE?AVVector3@@XZ
_TEXT	SEGMENT
$T93189 = -72						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetVelocity@StaticObject@@QAE?AVVector3@@XZ PROC	; StaticObject::GetVelocity, COMDAT
; _this$ = ecx

; 357  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93189[ebp], 0

; 358  : 	return this->Velocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3124				; 00000c34H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93189[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93189[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 359  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetVelocity@StaticObject@@QAE?AVVector3@@XZ ENDP	; StaticObject::GetVelocity
_TEXT	ENDS
PUBLIC	?IncAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::IncAccelaration
EXTRN	??YVector3@@QAE?AV0@PAM@Z:PROC			; Vector3::operator+=
; Function compile flags: /Odtp /ZI
;	COMDAT ?IncAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z
_TEXT	SEGMENT
$T93193 = -96						; size = 12
$T93196 = -84						; size = 4
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_X$ = 12						; size = 4
_Y$ = 16						; size = 4
_Z$ = 20						; size = 4
?IncAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z PROC ; StaticObject::IncAccelaration, COMDAT
; _this$ = ecx

; 361  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93196[ebp], 0

; 362  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 363  : 
; 364  : 	this->Accelaration+=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93193[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??YVector3@@QAE?AV0@PAM@Z		; Vector3::operator+=
	lea	ecx, DWORD PTR $T93193[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 365  : 
; 366  : 	return this->Accelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3028				; 00000bd4H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93196[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93196[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 367  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?IncAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ENDP ; StaticObject::IncAccelaration
_TEXT	ENDS
PUBLIC	?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z ; StaticObject::IncAccelaration
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$0
__ehfuncinfo$?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
_TEXT	SEGMENT
$T93200 = -96						; size = 12
$T93204 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector$ = 12						; size = 12
?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z PROC ; StaticObject::IncAccelaration, COMDAT
; _this$ = ecx

; 369  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93204[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 370  : 	this->IncAccelaration(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93200[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::IncAccelaration
	lea	ecx, DWORD PTR $T93200[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 371  : 
; 372  : 	return this->Accelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3028				; 00000bd4H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93204[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93204[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 373  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$2:
	mov	eax, DWORD PTR $T93204[ebp]
	and	eax, 1
	je	$LN6@IncAccelar
	and	DWORD PTR $T93204[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@IncAccelar:
	ret	0
__ehhandler$?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?IncAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z ENDP ; StaticObject::IncAccelaration
PUBLIC	?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::IncAngularAccelaration
; Function compile flags: /Odtp /ZI
;	COMDAT ?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z
_TEXT	SEGMENT
$T93214 = -96						; size = 12
$T93217 = -84						; size = 4
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_X$ = 12						; size = 4
_Y$ = 16						; size = 4
_Z$ = 20						; size = 4
?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z PROC ; StaticObject::IncAngularAccelaration, COMDAT
; _this$ = ecx

; 375  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93217[ebp], 0

; 376  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 377  : 
; 378  : 	this->AngularAccelaration+=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93214[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??YVector3@@QAE?AV0@PAM@Z		; Vector3::operator+=
	lea	ecx, DWORD PTR $T93214[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 379  : 
; 380  : 	return this->AngularAccelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3040				; 00000be0H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93217[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93217[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 381  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ENDP ; StaticObject::IncAngularAccelaration
_TEXT	ENDS
PUBLIC	?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z ; StaticObject::IncAngularAccelaration
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$0
__ehfuncinfo$?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
_TEXT	SEGMENT
$T93221 = -96						; size = 12
$T93225 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector$ = 12						; size = 12
?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z PROC ; StaticObject::IncAngularAccelaration, COMDAT
; _this$ = ecx

; 383  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93225[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 384  : 	this->IncAngularAccelaration(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93221[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::IncAngularAccelaration
	lea	ecx, DWORD PTR $T93221[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 385  : 
; 386  : 	return this->AngularAccelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3040				; 00000be0H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93225[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93225[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 387  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$2:
	mov	eax, DWORD PTR $T93225[ebp]
	and	eax, 1
	je	$LN6@IncAngular
	and	DWORD PTR $T93225[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@IncAngular:
	ret	0
__ehhandler$?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?IncAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z ENDP ; StaticObject::IncAngularAccelaration
PUBLIC	?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::IncScalarAccelaration
; Function compile flags: /Odtp /ZI
;	COMDAT ?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z
_TEXT	SEGMENT
$T93235 = -96						; size = 12
$T93238 = -84						; size = 4
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_X$ = 12						; size = 4
_Y$ = 16						; size = 4
_Z$ = 20						; size = 4
?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z PROC ; StaticObject::IncScalarAccelaration, COMDAT
; _this$ = ecx

; 389  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93238[ebp], 0

; 390  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 391  : 
; 392  : 	this->ScalarAccelaration+=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93235[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??YVector3@@QAE?AV0@PAM@Z		; Vector3::operator+=
	lea	ecx, DWORD PTR $T93235[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 393  : 
; 394  : 	return this->ScalarAccelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3088				; 00000c10H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93238[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93238[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 395  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ENDP ; StaticObject::IncScalarAccelaration
_TEXT	ENDS
PUBLIC	?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z ; StaticObject::IncScalarAccelaration
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$0
__ehfuncinfo$?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
_TEXT	SEGMENT
$T93242 = -96						; size = 12
$T93246 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector$ = 12						; size = 12
?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z PROC ; StaticObject::IncScalarAccelaration, COMDAT
; _this$ = ecx

; 397  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93246[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 398  : 	this->IncScalarAccelaration(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93242[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::IncScalarAccelaration
	lea	ecx, DWORD PTR $T93242[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 399  : 
; 400  : 	return this->ScalarAccelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3088				; 00000c10H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93246[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93246[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 401  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$2:
	mov	eax, DWORD PTR $T93246[ebp]
	and	eax, 1
	je	$LN6@IncScalarA
	and	DWORD PTR $T93246[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@IncScalarA:
	ret	0
__ehhandler$?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?IncScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z ENDP ; StaticObject::IncScalarAccelaration
PUBLIC	?IncAngularVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::IncAngularVelocity
; Function compile flags: /Odtp /ZI
;	COMDAT ?IncAngularVelocity@StaticObject@@QAE?AVVector3@@MMM@Z
_TEXT	SEGMENT
$T93256 = -96						; size = 12
$T93259 = -84						; size = 4
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_X$ = 12						; size = 4
_Y$ = 16						; size = 4
_Z$ = 20						; size = 4
?IncAngularVelocity@StaticObject@@QAE?AVVector3@@MMM@Z PROC ; StaticObject::IncAngularVelocity, COMDAT
; _this$ = ecx

; 403  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93259[ebp], 0

; 404  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 405  : 
; 406  : 	this->AngularVelocity+=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93256[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??YVector3@@QAE?AV0@PAM@Z		; Vector3::operator+=
	lea	ecx, DWORD PTR $T93256[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 407  : 
; 408  : 	return this->AngularVelocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3052				; 00000becH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93259[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93259[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 409  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?IncAngularVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ENDP ; StaticObject::IncAngularVelocity
_TEXT	ENDS
PUBLIC	?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z ; StaticObject::IncAngularVelocity
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$0
__ehfuncinfo$?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
_TEXT	SEGMENT
$T93263 = -96						; size = 12
$T93267 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector$ = 12						; size = 12
?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z PROC ; StaticObject::IncAngularVelocity, COMDAT
; _this$ = ecx

; 411  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93267[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 412  : 	this->IncAngularVelocity(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93263[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncAngularVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::IncAngularVelocity
	lea	ecx, DWORD PTR $T93263[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 413  : 
; 414  : 	return this->AngularVelocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3052				; 00000becH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93267[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93267[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 415  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$2:
	mov	eax, DWORD PTR $T93267[ebp]
	and	eax, 1
	je	$LN6@IncAngular@2
	and	DWORD PTR $T93267[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@IncAngular@2:
	ret	0
__ehhandler$?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?IncAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z ENDP ; StaticObject::IncAngularVelocity
PUBLIC	?IncScalarVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::IncScalarVelocity
; Function compile flags: /Odtp /ZI
;	COMDAT ?IncScalarVelocity@StaticObject@@QAE?AVVector3@@MMM@Z
_TEXT	SEGMENT
$T93277 = -96						; size = 12
$T93280 = -84						; size = 4
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_X$ = 12						; size = 4
_Y$ = 16						; size = 4
_Z$ = 20						; size = 4
?IncScalarVelocity@StaticObject@@QAE?AVVector3@@MMM@Z PROC ; StaticObject::IncScalarVelocity, COMDAT
; _this$ = ecx

; 417  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93280[ebp], 0

; 418  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 419  : 
; 420  : 	this->ScalarVelocity+=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93277[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??YVector3@@QAE?AV0@PAM@Z		; Vector3::operator+=
	lea	ecx, DWORD PTR $T93277[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 421  : 
; 422  : 	return this->ScalarVelocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3100				; 00000c1cH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93280[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93280[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 423  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?IncScalarVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ENDP ; StaticObject::IncScalarVelocity
_TEXT	ENDS
PUBLIC	?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z ; StaticObject::IncScalarVelocity
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$0
__ehfuncinfo$?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
_TEXT	SEGMENT
$T93284 = -96						; size = 12
$T93288 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector$ = 12						; size = 12
?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z PROC ; StaticObject::IncScalarVelocity, COMDAT
; _this$ = ecx

; 425  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93288[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 426  : 	this->IncScalarVelocity(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93284[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncScalarVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::IncScalarVelocity
	lea	ecx, DWORD PTR $T93284[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 427  : 
; 428  : 	return this->ScalarVelocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3100				; 00000c1cH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93288[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93288[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 429  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$2:
	mov	eax, DWORD PTR $T93288[ebp]
	and	eax, 1
	je	$LN6@IncScalarV
	and	DWORD PTR $T93288[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@IncScalarV:
	ret	0
__ehhandler$?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?IncScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z ENDP ; StaticObject::IncScalarVelocity
PUBLIC	?IncVelocity@StaticObject@@QAE?AVVector3@@MMM@Z	; StaticObject::IncVelocity
; Function compile flags: /Odtp /ZI
;	COMDAT ?IncVelocity@StaticObject@@QAE?AVVector3@@MMM@Z
_TEXT	SEGMENT
$T93298 = -96						; size = 12
$T93301 = -84						; size = 4
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_X$ = 12						; size = 4
_Y$ = 16						; size = 4
_Z$ = 20						; size = 4
?IncVelocity@StaticObject@@QAE?AVVector3@@MMM@Z PROC	; StaticObject::IncVelocity, COMDAT
; _this$ = ecx

; 431  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93301[ebp], 0

; 432  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 433  : 
; 434  : 	this->Velocity+=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93298[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??YVector3@@QAE?AV0@PAM@Z		; Vector3::operator+=
	lea	ecx, DWORD PTR $T93298[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 435  : 
; 436  : 	return this->Velocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3124				; 00000c34H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93301[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93301[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 437  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?IncVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ENDP	; StaticObject::IncVelocity
_TEXT	ENDS
PUBLIC	?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z	; StaticObject::IncVelocity
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$0
__ehfuncinfo$?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
_TEXT	SEGMENT
$T93305 = -96						; size = 12
$T93309 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector$ = 12						; size = 12
?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z PROC	; StaticObject::IncVelocity, COMDAT
; _this$ = ecx

; 439  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93309[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 440  : 	this->IncVelocity(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93305[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::IncVelocity
	lea	ecx, DWORD PTR $T93305[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 441  : 
; 442  : 	return this->Velocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3124				; 00000c34H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93309[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93309[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 443  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$2:
	mov	eax, DWORD PTR $T93309[ebp]
	and	eax, 1
	je	$LN6@IncVelocit
	and	DWORD PTR $T93309[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@IncVelocit:
	ret	0
__ehhandler$?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?IncVelocity@StaticObject@@QAE?AVVector3@@V2@@Z ENDP	; StaticObject::IncVelocity
PUBLIC	?SetAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::SetAccelaration
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z
_TEXT	SEGMENT
$T93319 = -96						; size = 12
$T93322 = -84						; size = 4
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_X$ = 12						; size = 4
_Y$ = 16						; size = 4
_Z$ = 20						; size = 4
?SetAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z PROC ; StaticObject::SetAccelaration, COMDAT
; _this$ = ecx

; 445  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93322[ebp], 0

; 446  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 447  : 
; 448  : 	this->Accelaration=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93319[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3028				; 00000bd4H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93319[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 449  : 
; 450  : 	return this->Accelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3028				; 00000bd4H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93322[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93322[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 451  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ENDP ; StaticObject::SetAccelaration
_TEXT	ENDS
PUBLIC	?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z ; StaticObject::SetAccelaration
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$0
__ehfuncinfo$?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
_TEXT	SEGMENT
$T93326 = -96						; size = 12
$T93330 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector$ = 12						; size = 12
?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z PROC ; StaticObject::SetAccelaration, COMDAT
; _this$ = ecx

; 453  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93330[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 454  : 	this->SetAccelaration(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93326[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::SetAccelaration
	lea	ecx, DWORD PTR $T93326[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 455  : 
; 456  : 	return this->Accelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3028				; 00000bd4H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93330[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93330[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 457  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$2:
	mov	eax, DWORD PTR $T93330[ebp]
	and	eax, 1
	je	$LN6@SetAccelar
	and	DWORD PTR $T93330[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@SetAccelar:
	ret	0
__ehhandler$?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z ENDP ; StaticObject::SetAccelaration
PUBLIC	?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::SetAngularAccelaration
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z
_TEXT	SEGMENT
$T93340 = -96						; size = 12
$T93343 = -84						; size = 4
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_X$ = 12						; size = 4
_Y$ = 16						; size = 4
_Z$ = 20						; size = 4
?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z PROC ; StaticObject::SetAngularAccelaration, COMDAT
; _this$ = ecx

; 459  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93343[ebp], 0

; 460  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 461  : 
; 462  : 	this->AngularAccelaration=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93340[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3040				; 00000be0H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93340[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 463  : 
; 464  : 	return this->AngularAccelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3040				; 00000be0H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93343[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93343[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 465  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ENDP ; StaticObject::SetAngularAccelaration
_TEXT	ENDS
PUBLIC	?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z ; StaticObject::SetAngularAccelaration
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$0
__ehfuncinfo$?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
_TEXT	SEGMENT
$T93347 = -96						; size = 12
$T93351 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector$ = 12						; size = 12
?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z PROC ; StaticObject::SetAngularAccelaration, COMDAT
; _this$ = ecx

; 467  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93351[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 468  : 	this->SetAngularAccelaration(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93347[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::SetAngularAccelaration
	lea	ecx, DWORD PTR $T93347[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 469  : 
; 470  : 	return this->AngularAccelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3040				; 00000be0H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93351[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93351[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 471  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$2:
	mov	eax, DWORD PTR $T93351[ebp]
	and	eax, 1
	je	$LN6@SetAngular
	and	DWORD PTR $T93351[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@SetAngular:
	ret	0
__ehhandler$?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetAngularAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z ENDP ; StaticObject::SetAngularAccelaration
PUBLIC	?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::SetScalarAccelaration
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z
_TEXT	SEGMENT
$T93361 = -96						; size = 12
$T93364 = -84						; size = 4
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_X$ = 12						; size = 4
_Y$ = 16						; size = 4
_Z$ = 20						; size = 4
?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z PROC ; StaticObject::SetScalarAccelaration, COMDAT
; _this$ = ecx

; 473  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93364[ebp], 0

; 474  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 475  : 
; 476  : 	this->ScalarAccelaration=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93361[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3088				; 00000c10H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93361[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 477  : 
; 478  : 	return this->ScalarAccelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3088				; 00000c10H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93364[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93364[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 479  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ENDP ; StaticObject::SetScalarAccelaration
_TEXT	ENDS
PUBLIC	?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z ; StaticObject::SetScalarAccelaration
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$0
__ehfuncinfo$?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
_TEXT	SEGMENT
$T93368 = -96						; size = 12
$T93372 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector$ = 12						; size = 12
?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z PROC ; StaticObject::SetScalarAccelaration, COMDAT
; _this$ = ecx

; 481  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93372[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 482  : 	this->SetScalarAccelaration(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93368[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::SetScalarAccelaration
	lea	ecx, DWORD PTR $T93368[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 483  : 
; 484  : 	return this->ScalarAccelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3088				; 00000c10H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93372[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93372[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 485  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z$2:
	mov	eax, DWORD PTR $T93372[ebp]
	and	eax, 1
	je	$LN6@SetScalarA
	and	DWORD PTR $T93372[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@SetScalarA:
	ret	0
__ehhandler$?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetScalarAccelaration@StaticObject@@QAE?AVVector3@@V2@@Z ENDP ; StaticObject::SetScalarAccelaration
PUBLIC	?SetAngularVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::SetAngularVelocity
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetAngularVelocity@StaticObject@@QAE?AVVector3@@MMM@Z
_TEXT	SEGMENT
$T93382 = -96						; size = 12
$T93385 = -84						; size = 4
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_X$ = 12						; size = 4
_Y$ = 16						; size = 4
_Z$ = 20						; size = 4
?SetAngularVelocity@StaticObject@@QAE?AVVector3@@MMM@Z PROC ; StaticObject::SetAngularVelocity, COMDAT
; _this$ = ecx

; 487  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93385[ebp], 0

; 488  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 489  : 
; 490  : 	this->AngularVelocity=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93382[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93382[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 491  : 
; 492  : 	return this->AngularVelocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3052				; 00000becH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93385[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93385[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 493  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetAngularVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ENDP ; StaticObject::SetAngularVelocity
_TEXT	ENDS
PUBLIC	?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z ; StaticObject::SetAngularVelocity
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$0
__ehfuncinfo$?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
_TEXT	SEGMENT
$T93389 = -96						; size = 12
$T93393 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector$ = 12						; size = 12
?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z PROC ; StaticObject::SetAngularVelocity, COMDAT
; _this$ = ecx

; 495  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93393[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 496  : 	this->SetAngularVelocity(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93389[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAngularVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::SetAngularVelocity
	lea	ecx, DWORD PTR $T93389[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 497  : 
; 498  : 	return this->AngularVelocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3052				; 00000becH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93393[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93393[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 499  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$2:
	mov	eax, DWORD PTR $T93393[ebp]
	and	eax, 1
	je	$LN6@SetAngular@2
	and	DWORD PTR $T93393[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@SetAngular@2:
	ret	0
__ehhandler$?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetAngularVelocity@StaticObject@@QAE?AVVector3@@V2@@Z ENDP ; StaticObject::SetAngularVelocity
PUBLIC	?SetScalarVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::SetScalarVelocity
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetScalarVelocity@StaticObject@@QAE?AVVector3@@MMM@Z
_TEXT	SEGMENT
$T93403 = -96						; size = 12
$T93406 = -84						; size = 4
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_X$ = 12						; size = 4
_Y$ = 16						; size = 4
_Z$ = 20						; size = 4
?SetScalarVelocity@StaticObject@@QAE?AVVector3@@MMM@Z PROC ; StaticObject::SetScalarVelocity, COMDAT
; _this$ = ecx

; 501  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93406[ebp], 0

; 502  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 503  : 
; 504  : 	this->ScalarVelocity=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93403[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93403[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 505  : 
; 506  : 	return this->ScalarVelocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3100				; 00000c1cH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93406[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93406[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 507  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetScalarVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ENDP ; StaticObject::SetScalarVelocity
_TEXT	ENDS
PUBLIC	?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z ; StaticObject::SetScalarVelocity
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$0
__ehfuncinfo$?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
_TEXT	SEGMENT
$T93410 = -96						; size = 12
$T93414 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector$ = 12						; size = 12
?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z PROC ; StaticObject::SetScalarVelocity, COMDAT
; _this$ = ecx

; 509  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93414[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 510  : 	this->SetScalarVelocity(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93410[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetScalarVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::SetScalarVelocity
	lea	ecx, DWORD PTR $T93410[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 511  : 
; 512  : 	return this->ScalarVelocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3100				; 00000c1cH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93414[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93414[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 513  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$2:
	mov	eax, DWORD PTR $T93414[ebp]
	and	eax, 1
	je	$LN6@SetScalarV
	and	DWORD PTR $T93414[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@SetScalarV:
	ret	0
__ehhandler$?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetScalarVelocity@StaticObject@@QAE?AVVector3@@V2@@Z ENDP ; StaticObject::SetScalarVelocity
PUBLIC	?SetVelocity@StaticObject@@QAE?AVVector3@@MMM@Z	; StaticObject::SetVelocity
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetVelocity@StaticObject@@QAE?AVVector3@@MMM@Z
_TEXT	SEGMENT
$T93424 = -96						; size = 12
$T93427 = -84						; size = 4
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_X$ = 12						; size = 4
_Y$ = 16						; size = 4
_Z$ = 20						; size = 4
?SetVelocity@StaticObject@@QAE?AVVector3@@MMM@Z PROC	; StaticObject::SetVelocity, COMDAT
; _this$ = ecx

; 515  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93427[ebp], 0

; 516  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 517  : 
; 518  : 	this->Velocity=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93424[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93424[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 519  : 
; 520  : 	return this->Velocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3124				; 00000c34H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93427[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93427[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 521  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ENDP	; StaticObject::SetVelocity
_TEXT	ENDS
PUBLIC	?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z	; StaticObject::SetVelocity
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$0
__ehfuncinfo$?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
_TEXT	SEGMENT
$T93431 = -96						; size = 12
$T93435 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector$ = 12						; size = 12
?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z PROC	; StaticObject::SetVelocity, COMDAT
; _this$ = ecx

; 523  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T93435[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 524  : 	this->SetVelocity(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93431[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetVelocity@StaticObject@@QAE?AVVector3@@MMM@Z ; StaticObject::SetVelocity
	lea	ecx, DWORD PTR $T93431[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 525  : 
; 526  : 	return this->Velocity;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3124				; 00000c34H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T93435[ebp]
	or	ecx, 1
	mov	DWORD PTR $T93435[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 527  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z$2:
	mov	eax, DWORD PTR $T93435[ebp]
	and	eax, 1
	je	$LN6@SetVelocit
	and	DWORD PTR $T93435[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@SetVelocit:
	ret	0
__ehhandler$?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetVelocity@StaticObject@@QAE?AVVector3@@V2@@Z ENDP	; StaticObject::SetVelocity
EXTRN	?dbPositionObject@@YAXHMMM@Z:PROC		; dbPositionObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PositionObjectV@StaticObject@@IAEXVVector3@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PositionObjectV@StaticObject@@IAEXVVector3@@@Z$0
__ehfuncinfo$?PositionObjectV@StaticObject@@IAEXVVector3@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PositionObjectV@StaticObject@@IAEXVVector3@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?PositionObjectV@StaticObject@@IAEXVVector3@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Vector$ = 8						; size = 12
?PositionObjectV@StaticObject@@IAEXVVector3@@@Z PROC	; StaticObject::PositionObjectV, COMDAT
; _this$ = ecx

; 529  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?PositionObjectV@StaticObject@@IAEXVVector3@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 530  : 	dbPositionObject(this->ObjectNumber,Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbPositionObject@@YAXHMMM@Z		; dbPositionObject
	add	esp, 16					; 00000010H

; 531  : 
; 532  : 	return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	jmp	SHORT $LN1@PositionOb

; 533  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN1@PositionOb:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PositionObjectV@StaticObject@@IAEXVVector3@@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$?PositionObjectV@StaticObject@@IAEXVVector3@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?PositionObjectV@StaticObject@@IAEXVVector3@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?PositionObjectV@StaticObject@@IAEXVVector3@@@Z ENDP	; StaticObject::PositionObjectV
EXTRN	?dbRotateObject@@YAXHMMM@Z:PROC			; dbRotateObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RotateObjectV@StaticObject@@IAEXVVector3@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RotateObjectV@StaticObject@@IAEXVVector3@@@Z$0
__ehfuncinfo$?RotateObjectV@StaticObject@@IAEXVVector3@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RotateObjectV@StaticObject@@IAEXVVector3@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?RotateObjectV@StaticObject@@IAEXVVector3@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Vector$ = 8						; size = 12
?RotateObjectV@StaticObject@@IAEXVVector3@@@Z PROC	; StaticObject::RotateObjectV, COMDAT
; _this$ = ecx

; 535  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RotateObjectV@StaticObject@@IAEXVVector3@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 536  : 	dbRotateObject(this->ObjectNumber,Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbRotateObject@@YAXHMMM@Z		; dbRotateObject
	add	esp, 16					; 00000010H

; 537  : 
; 538  : 	return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	jmp	SHORT $LN1@RotateObje

; 539  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN1@RotateObje:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RotateObjectV@StaticObject@@IAEXVVector3@@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$?RotateObjectV@StaticObject@@IAEXVVector3@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RotateObjectV@StaticObject@@IAEXVVector3@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RotateObjectV@StaticObject@@IAEXVVector3@@@Z ENDP	; StaticObject::RotateObjectV
EXTRN	?dbScaleObject@@YAXHMMM@Z:PROC			; dbScaleObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z$0
__ehfuncinfo$?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Vector$ = 8						; size = 12
?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z PROC	; StaticObject::ScaleObjectV, COMDAT
; _this$ = ecx

; 541  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 542  : 	dbScaleObject(this->ObjectNumber,Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3020]
	push	ecx
	call	?dbScaleObject@@YAXHMMM@Z		; dbScaleObject
	add	esp, 16					; 00000010H

; 543  : 
; 544  : 	return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	jmp	SHORT $LN1@ScaleObjec

; 545  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN1@ScaleObjec:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z ENDP	; StaticObject::ScaleObjectV
PUBLIC	?MoveObject@StaticObject@@QAEXMMM@Z		; StaticObject::MoveObject
; Function compile flags: /Odtp /ZI
;	COMDAT ?MoveObject@StaticObject@@QAEXMMM@Z
_TEXT	SEGMENT
$T93472 = -116						; size = 12
$T93473 = -104						; size = 12
_Temp$91760 = -28					; size = 12
_Temp$91757 = -16					; size = 12
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
?MoveObject@StaticObject@@QAEXMMM@Z PROC		; StaticObject::MoveObject, COMDAT
; _this$ = ecx

; 547  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 548  : 	if(this->AdjustToFrameRate)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@MoveObject

; 549  : 	{
; 550  : 		float Temp[3]={X*this->Mod,Y*this->Mod,Z*this->Mod};

	fld	DWORD PTR _X$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+3012]
	fstp	DWORD PTR _Temp$91757[ebp]
	fld	DWORD PTR _Y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+3012]
	fstp	DWORD PTR _Temp$91757[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+3012]
	fstp	DWORD PTR _Temp$91757[ebp+8]

; 551  : 
; 552  : 		this->Position+=Temp;

	lea	eax, DWORD PTR _Temp$91757[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93472[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??YVector3@@QAE?AV0@PAM@Z		; Vector3::operator+=
	lea	ecx, DWORD PTR $T93472[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 553  : 	}
; 554  : 	else

	jmp	SHORT $LN1@MoveObject
$LN2@MoveObject:

; 555  : 	{
; 556  : 		float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$91760[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$91760[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$91760[ebp+8]

; 557  : 
; 558  : 		this->Position+=Temp;

	lea	eax, DWORD PTR _Temp$91760[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93473[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??YVector3@@QAE?AV0@PAM@Z		; Vector3::operator+=
	lea	ecx, DWORD PTR $T93473[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN1@MoveObject:

; 559  : 	}
; 560  : 
; 561  : 	this->PositionObjectV(this->Position);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3064				; 00000bf8H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PositionObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::PositionObjectV

; 562  : 
; 563  : 	return;
; 564  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MoveObject@StaticObject@@QAEXMMM@Z ENDP		; StaticObject::MoveObject
_TEXT	ENDS
PUBLIC	?MoveObject@StaticObject@@QAEXVVector3@@@Z	; StaticObject::MoveObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MoveObject@StaticObject@@QAEXVVector3@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MoveObject@StaticObject@@QAEXVVector3@@@Z$0
__ehfuncinfo$?MoveObject@StaticObject@@QAEXVVector3@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?MoveObject@StaticObject@@QAEXVVector3@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?MoveObject@StaticObject@@QAEXVVector3@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Vector$ = 8						; size = 12
?MoveObject@StaticObject@@QAEXVVector3@@@Z PROC		; StaticObject::MoveObject, COMDAT
; _this$ = ecx

; 566  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MoveObject@StaticObject@@QAEXVVector3@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 567  : 	this->MoveObject(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveObject@StaticObject@@QAEXMMM@Z	; StaticObject::MoveObject

; 568  : 
; 569  : 	return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	jmp	SHORT $LN1@MoveObject@2

; 570  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN1@MoveObject@2:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MoveObject@StaticObject@@QAEXVVector3@@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$?MoveObject@StaticObject@@QAEXVVector3@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MoveObject@StaticObject@@QAEXVVector3@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MoveObject@StaticObject@@QAEXVVector3@@@Z ENDP		; StaticObject::MoveObject
PUBLIC	?PositionObject@StaticObject@@QAEXMMM@Z		; StaticObject::PositionObject
; Function compile flags: /Odtp /ZI
;	COMDAT ?PositionObject@StaticObject@@QAEXMMM@Z
_TEXT	SEGMENT
$T93487 = -92						; size = 12
_Pos$ = -16						; size = 12
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
?PositionObject@StaticObject@@QAEXMMM@Z PROC		; StaticObject::PositionObject, COMDAT
; _this$ = ecx

; 572  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 573  : 	float Pos[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Pos$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Pos$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Pos$[ebp+8]

; 574  : 
; 575  : 	this->Position=Pos;

	lea	eax, DWORD PTR _Pos$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93487[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3064				; 00000bf8H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93487[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 576  : 
; 577  : 	this->PositionObjectV(this->Position);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3064				; 00000bf8H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PositionObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::PositionObjectV

; 578  : 
; 579  : 	return;
; 580  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PositionObject@StaticObject@@QAEXMMM@Z ENDP		; StaticObject::PositionObject
_TEXT	ENDS
PUBLIC	?PositionObject@StaticObject@@QAEXVVector3@@@Z	; StaticObject::PositionObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PositionObject@StaticObject@@QAEXVVector3@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PositionObject@StaticObject@@QAEXVVector3@@@Z$0
__ehfuncinfo$?PositionObject@StaticObject@@QAEXVVector3@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PositionObject@StaticObject@@QAEXVVector3@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?PositionObject@StaticObject@@QAEXVVector3@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Vector$ = 8						; size = 12
?PositionObject@StaticObject@@QAEXVVector3@@@Z PROC	; StaticObject::PositionObject, COMDAT
; _this$ = ecx

; 582  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?PositionObject@StaticObject@@QAEXVVector3@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 583  : 	this->PositionObject(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PositionObject@StaticObject@@QAEXMMM@Z	; StaticObject::PositionObject

; 584  : 
; 585  : 	return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	jmp	SHORT $LN1@PositionOb@2

; 586  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN1@PositionOb@2:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PositionObject@StaticObject@@QAEXVVector3@@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$?PositionObject@StaticObject@@QAEXVVector3@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?PositionObject@StaticObject@@QAEXVVector3@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?PositionObject@StaticObject@@QAEXVVector3@@@Z ENDP	; StaticObject::PositionObject
PUBLIC	?RescaleObject@StaticObject@@QAEXMMM@Z		; StaticObject::RescaleObject
; Function compile flags: /Odtp /ZI
;	COMDAT ?RescaleObject@StaticObject@@QAEXMMM@Z
_TEXT	SEGMENT
$T93500 = -92						; size = 12
_Scl$ = -16						; size = 12
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
?RescaleObject@StaticObject@@QAEXMMM@Z PROC		; StaticObject::RescaleObject, COMDAT
; _this$ = ecx

; 588  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 589  : 	float Scl[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Scl$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Scl$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Scl$[ebp+8]

; 590  : 	
; 591  : 	this->Scale=Scl;

	lea	eax, DWORD PTR _Scl$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93500[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93500[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 592  : 
; 593  : 	this->ScaleObjectV(this->Scale);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3112				; 00000c28H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::ScaleObjectV

; 594  : 
; 595  : 	return;
; 596  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?RescaleObject@StaticObject@@QAEXMMM@Z ENDP		; StaticObject::RescaleObject
_TEXT	ENDS
PUBLIC	?RescaleObject@StaticObject@@QAEXVVector3@@@Z	; StaticObject::RescaleObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RescaleObject@StaticObject@@QAEXVVector3@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RescaleObject@StaticObject@@QAEXVVector3@@@Z$0
__ehfuncinfo$?RescaleObject@StaticObject@@QAEXVVector3@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RescaleObject@StaticObject@@QAEXVVector3@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?RescaleObject@StaticObject@@QAEXVVector3@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Vector$ = 8						; size = 12
?RescaleObject@StaticObject@@QAEXVVector3@@@Z PROC	; StaticObject::RescaleObject, COMDAT
; _this$ = ecx

; 598  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RescaleObject@StaticObject@@QAEXVVector3@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 599  : 	this->RescaleObject(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RescaleObject@StaticObject@@QAEXMMM@Z	; StaticObject::RescaleObject

; 600  : 
; 601  : 	return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	jmp	SHORT $LN1@RescaleObj

; 602  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN1@RescaleObj:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RescaleObject@StaticObject@@QAEXVVector3@@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$?RescaleObject@StaticObject@@QAEXVVector3@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RescaleObject@StaticObject@@QAEXVVector3@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RescaleObject@StaticObject@@QAEXVVector3@@@Z ENDP	; StaticObject::RescaleObject
PUBLIC	?RotateObject@StaticObject@@QAEXMMM@Z		; StaticObject::RotateObject
; Function compile flags: /Odtp /ZI
;	COMDAT ?RotateObject@StaticObject@@QAEXMMM@Z
_TEXT	SEGMENT
$T93513 = -116						; size = 12
$T93514 = -104						; size = 12
_Temp$91800 = -28					; size = 12
_Temp$91797 = -16					; size = 12
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
?RotateObject@StaticObject@@QAEXMMM@Z PROC		; StaticObject::RotateObject, COMDAT
; _this$ = ecx

; 604  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 605  : 	if(this->AdjustToFrameRate)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@RotateObje@2

; 606  : 	{
; 607  : 		float Temp[3]={X*this->Mod,Y*this->Mod,Z*this->Mod};

	fld	DWORD PTR _X$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+3012]
	fstp	DWORD PTR _Temp$91797[ebp]
	fld	DWORD PTR _Y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+3012]
	fstp	DWORD PTR _Temp$91797[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+3012]
	fstp	DWORD PTR _Temp$91797[ebp+8]

; 608  : 
; 609  : 		this->Rotation+=Temp;

	lea	eax, DWORD PTR _Temp$91797[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93513[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??YVector3@@QAE?AV0@PAM@Z		; Vector3::operator+=
	lea	ecx, DWORD PTR $T93513[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 610  : 	}
; 611  : 	else

	jmp	SHORT $LN1@RotateObje@2
$LN2@RotateObje@2:

; 612  : 	{
; 613  : 		float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$91800[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$91800[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$91800[ebp+8]

; 614  : 
; 615  : 		this->Rotation+=Temp;

	lea	eax, DWORD PTR _Temp$91800[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93514[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??YVector3@@QAE?AV0@PAM@Z		; Vector3::operator+=
	lea	ecx, DWORD PTR $T93514[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN1@RotateObje@2:

; 616  : 	}
; 617  : 
; 618  : 	this->RotateObjectV(this->Rotation);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3076				; 00000c04H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::RotateObjectV

; 619  : 
; 620  : 	return;
; 621  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?RotateObject@StaticObject@@QAEXMMM@Z ENDP		; StaticObject::RotateObject
_TEXT	ENDS
PUBLIC	?RotateObject@StaticObject@@QAEXVVector3@@@Z	; StaticObject::RotateObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RotateObject@StaticObject@@QAEXVVector3@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RotateObject@StaticObject@@QAEXVVector3@@@Z$0
__ehfuncinfo$?RotateObject@StaticObject@@QAEXVVector3@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RotateObject@StaticObject@@QAEXVVector3@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?RotateObject@StaticObject@@QAEXVVector3@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Vector$ = 8						; size = 12
?RotateObject@StaticObject@@QAEXVVector3@@@Z PROC	; StaticObject::RotateObject, COMDAT
; _this$ = ecx

; 623  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RotateObject@StaticObject@@QAEXVVector3@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 624  : 	this->RotateObject(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateObject@StaticObject@@QAEXMMM@Z	; StaticObject::RotateObject

; 625  : 
; 626  : 	return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	jmp	SHORT $LN1@RotateObje@3

; 627  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN1@RotateObje@3:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RotateObject@StaticObject@@QAEXVVector3@@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$?RotateObject@StaticObject@@QAEXVVector3@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RotateObject@StaticObject@@QAEXVVector3@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RotateObject@StaticObject@@QAEXVVector3@@@Z ENDP	; StaticObject::RotateObject
PUBLIC	?ScaleObject@StaticObject@@QAEXMMM@Z		; StaticObject::ScaleObject
EXTRN	??XVector3@@QAE?AV0@PAM@Z:PROC			; Vector3::operator*=
; Function compile flags: /Odtp /ZI
;	COMDAT ?ScaleObject@StaticObject@@QAEXMMM@Z
_TEXT	SEGMENT
$T93528 = -92						; size = 12
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
?ScaleObject@StaticObject@@QAEXMMM@Z PROC		; StaticObject::ScaleObject, COMDAT
; _this$ = ecx

; 629  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 631  : 
; 632  : 	this->Scale*=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93528[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3112				; 00000c28H
	call	??XVector3@@QAE?AV0@PAM@Z		; Vector3::operator*=
	lea	ecx, DWORD PTR $T93528[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 633  : 
; 634  : 	this->ScaleObjectV(this->Scale);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3112				; 00000c28H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScaleObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::ScaleObjectV

; 635  : 
; 636  : 	return;
; 637  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ScaleObject@StaticObject@@QAEXMMM@Z ENDP		; StaticObject::ScaleObject
_TEXT	ENDS
PUBLIC	?ScaleObject@StaticObject@@QAEXVVector3@@@Z	; StaticObject::ScaleObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ScaleObject@StaticObject@@QAEXVVector3@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ScaleObject@StaticObject@@QAEXVVector3@@@Z$0
__ehfuncinfo$?ScaleObject@StaticObject@@QAEXVVector3@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ScaleObject@StaticObject@@QAEXVVector3@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?ScaleObject@StaticObject@@QAEXVVector3@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Vector$ = 8						; size = 12
?ScaleObject@StaticObject@@QAEXVVector3@@@Z PROC	; StaticObject::ScaleObject, COMDAT
; _this$ = ecx

; 639  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ScaleObject@StaticObject@@QAEXVVector3@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 640  : 	this->ScaleObject(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScaleObject@StaticObject@@QAEXMMM@Z	; StaticObject::ScaleObject

; 641  : 
; 642  : 	return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	jmp	SHORT $LN1@ScaleObjec@2

; 643  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN1@ScaleObjec@2:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ScaleObject@StaticObject@@QAEXVVector3@@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$?ScaleObject@StaticObject@@QAEXVVector3@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ScaleObject@StaticObject@@QAEXVVector3@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ScaleObject@StaticObject@@QAEXVVector3@@@Z ENDP	; StaticObject::ScaleObject
PUBLIC	?SetObjectRotation@StaticObject@@QAEXMMM@Z	; StaticObject::SetObjectRotation
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetObjectRotation@StaticObject@@QAEXMMM@Z
_TEXT	SEGMENT
$T93541 = -92						; size = 12
_Temp$ = -16						; size = 12
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
?SetObjectRotation@StaticObject@@QAEXMMM@Z PROC		; StaticObject::SetObjectRotation, COMDAT
; _this$ = ecx

; 645  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 	float Temp[3]={X,Y,Z};

	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR _Temp$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR _Temp$[ebp+4]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR _Temp$[ebp+8]

; 647  : 
; 648  : 	this->Rotation=Temp;

	lea	eax, DWORD PTR _Temp$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T93541[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3076				; 00000c04H
	call	??4Vector3@@QAE?AV0@PAM@Z		; Vector3::operator=
	lea	ecx, DWORD PTR $T93541[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 649  : 
; 650  : 	this->RotateObjectV(this->Rotation);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3076				; 00000c04H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateObjectV@StaticObject@@IAEXVVector3@@@Z ; StaticObject::RotateObjectV

; 651  : 
; 652  : 	return;
; 653  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetObjectRotation@StaticObject@@QAEXMMM@Z ENDP		; StaticObject::SetObjectRotation
_TEXT	ENDS
PUBLIC	?SetObjectRotation@StaticObject@@QAEXVVector3@@@Z ; StaticObject::SetObjectRotation
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetObjectRotation@StaticObject@@QAEXVVector3@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetObjectRotation@StaticObject@@QAEXVVector3@@@Z$0
__ehfuncinfo$?SetObjectRotation@StaticObject@@QAEXVVector3@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetObjectRotation@StaticObject@@QAEXVVector3@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?SetObjectRotation@StaticObject@@QAEXVVector3@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_Vector$ = 8						; size = 12
?SetObjectRotation@StaticObject@@QAEXVVector3@@@Z PROC	; StaticObject::SetObjectRotation, COMDAT
; _this$ = ecx

; 655  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetObjectRotation@StaticObject@@QAEXVVector3@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 656  : 	this->SetObjectRotation(Vector.X,Vector.Y,Vector.Z);

	push	ecx
	fld	DWORD PTR _Vector$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vector$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjectRotation@StaticObject@@QAEXMMM@Z ; StaticObject::SetObjectRotation

; 657  : 
; 658  : 	return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	jmp	SHORT $LN1@SetObjectR

; 659  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Vector$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN1@SetObjectR:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetObjectRotation@StaticObject@@QAEXVVector3@@@Z$0:
	lea	ecx, DWORD PTR _Vector$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$?SetObjectRotation@StaticObject@@QAEXVVector3@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetObjectRotation@StaticObject@@QAEXVVector3@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetObjectRotation@StaticObject@@QAEXVVector3@@@Z ENDP	; StaticObject::SetObjectRotation
PUBLIC	__real@3f800000
PUBLIC	__real@404e000000000000
PUBLIC	?Update@StaticObject@@QAEXXZ			; StaticObject::Update
EXTRN	??YVector3@@QAE?AV0@V0@@Z:PROC			; Vector3::operator+=
EXTRN	??XVector3@@QAE?AV0@V0@@Z:PROC			; Vector3::operator*=
EXTRN	??9Vector3@@QAE_NM@Z:PROC			; Vector3::operator!=
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@404e000000000000
CONST	SEGMENT
__real@404e000000000000 DQ 0404e000000000000r	; 60
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Update@StaticObject@@QAEXXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Update@StaticObject@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Update@StaticObject@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@StaticObject@@QAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@StaticObject@@QAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@StaticObject@@QAEXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@StaticObject@@QAEXXZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@StaticObject@@QAEXXZ$7
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?Update@StaticObject@@QAEXXZ
_TEXT	SEGMENT
tv181 = -192						; size = 4
tv178 = -192						; size = 4
tv175 = -192						; size = 4
tv173 = -192						; size = 4
tv170 = -192						; size = 4
tv183 = -188						; size = 4
tv182 = -188						; size = 4
tv157 = -188						; size = 4
tv143 = -188						; size = 4
tv87 = -188						; size = 4
$T93554 = -181						; size = 1
$T93555 = -180						; size = 12
$T93556 = -168						; size = 12
$T93557 = -153						; size = 1
$T93558 = -152						; size = 12
$T93559 = -140						; size = 12
$T93560 = -128						; size = 12
$T93561 = -116						; size = 12
$T93562 = -104						; size = 12
$T93563 = -92						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Update@StaticObject@@QAEXXZ PROC			; StaticObject::Update, COMDAT
; _this$ = ecx

; 661  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Update@StaticObject@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 180				; 000000b4H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 662  : 	if(this->RefreshRatePointer[0]!=0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3024]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@Update

; 663  : 		this->Mod=60.0f/this->RefreshRatePointer[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3024]
	fild	DWORD PTR [ecx]
	fdivr	QWORD PTR __real@404e000000000000
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+3012]

; 664  : 	else

	jmp	SHORT $LN3@Update
$LN4@Update:

; 665  : 		this->Mod=1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+3012]
$LN3@Update:

; 666  : 
; 667  : 	if(this->GetScalarAccelaration()!=0.0f)

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93555[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetScalarAccelaration@StaticObject@@QAE?AVVector3@@XZ ; StaticObject::GetScalarAccelaration
	mov	DWORD PTR tv157[ebp], eax
	mov	ecx, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv170[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv170[ebp]
	call	??9Vector3@@QAE_NM@Z			; Vector3::operator!=
	mov	BYTE PTR $T93554[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T93555[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	movzx	edx, BYTE PTR $T93554[ebp]
	test	edx, edx
	je	SHORT $LN2@Update

; 668  : 		this->ScalarVelocity*=this->ScalarAccelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3088				; 00000c10H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	lea	ecx, DWORD PTR $T93556[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3100				; 00000c1cH
	call	??XVector3@@QAE?AV0@V0@@Z		; Vector3::operator*=
	lea	ecx, DWORD PTR $T93556[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN2@Update:

; 669  : 	if(this->GetScalarVelocity()!=0.0f)

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T93558[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetScalarVelocity@StaticObject@@QAE?AVVector3@@XZ ; StaticObject::GetScalarVelocity
	mov	DWORD PTR tv143[ebp], eax
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv173[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv173[ebp]
	call	??9Vector3@@QAE_NM@Z			; Vector3::operator!=
	mov	BYTE PTR $T93557[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T93558[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	movzx	edx, BYTE PTR $T93557[ebp]
	test	edx, edx
	je	SHORT $LN1@Update

; 670  : 		this->ScaleObject(this->GetScalarVelocity());

	lea	eax, DWORD PTR $T93559[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetScalarVelocity@StaticObject@@QAE?AVVector3@@XZ ; StaticObject::GetScalarVelocity
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv175[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR tv175[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScaleObject@StaticObject@@QAEXVVector3@@@Z ; StaticObject::ScaleObject
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T93559[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN1@Update:

; 671  : 
; 672  : 	this->AngularVelocity+=this->AngularAccelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3040				; 00000be0H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	lea	ecx, DWORD PTR $T93560[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3052				; 00000becH
	call	??YVector3@@QAE?AV0@V0@@Z		; Vector3::operator+=
	lea	ecx, DWORD PTR $T93560[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 673  : 	this->RotateObject(this->GetAngularVelocity());

	lea	eax, DWORD PTR $T93561[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAngularVelocity@StaticObject@@QAE?AVVector3@@XZ ; StaticObject::GetAngularVelocity
	mov	DWORD PTR tv182[ebp], eax
	mov	ecx, DWORD PTR tv182[ebp]
	mov	DWORD PTR tv178[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR tv178[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateObject@StaticObject@@QAEXVVector3@@@Z ; StaticObject::RotateObject
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T93561[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 674  : 
; 675  : 	this->Velocity+=this->Accelaration;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 3028				; 00000bd4H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	lea	ecx, DWORD PTR $T93562[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 3124				; 00000c34H
	call	??YVector3@@QAE?AV0@V0@@Z		; Vector3::operator+=
	lea	ecx, DWORD PTR $T93562[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 676  : 	this->MoveObject(this->GetVelocity());

	lea	eax, DWORD PTR $T93563[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetVelocity@StaticObject@@QAE?AVVector3@@XZ ; StaticObject::GetVelocity
	mov	DWORD PTR tv183[ebp], eax
	mov	ecx, DWORD PTR tv183[ebp]
	mov	DWORD PTR tv181[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR tv181[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveObject@StaticObject@@QAEXVVector3@@@Z ; StaticObject::MoveObject
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T93563[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3

; 677  : 
; 678  : 	return;
; 679  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Update@StaticObject@@QAEXXZ$0:
	lea	ecx, DWORD PTR $T93555[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?Update@StaticObject@@QAEXXZ$2:
	lea	ecx, DWORD PTR $T93558[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?Update@StaticObject@@QAEXXZ$3:
	lea	ecx, DWORD PTR $T93559[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?Update@StaticObject@@QAEXXZ$5:
	lea	ecx, DWORD PTR $T93561[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$?Update@StaticObject@@QAEXXZ$7:
	lea	ecx, DWORD PTR $T93563[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__ehhandler$?Update@StaticObject@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-196]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Update@StaticObject@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Update@StaticObject@@QAEXXZ ENDP			; StaticObject::Update
END
