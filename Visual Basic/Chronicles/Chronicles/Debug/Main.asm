; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\Users\FireEmblem16\Documents\Visual Studio 2008\Projects\Chronicles\Chronicles\Source\Main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	?CompareStrings@@YA_NPAD0@Z			; CompareStrings
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /ZI
; File c:\users\fireemblem16\documents\visual studio 2008\projects\chronicles\chronicles\headers\functions.h
;	COMDAT ?CompareStrings@@YA_NPAD0@Z
_TEXT	SEGMENT
_i$90295 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?CompareStrings@@YA_NPAD0@Z PROC			; CompareStrings, COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 29   : 	if(strlen(a)!=strlen(b))

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	cmp	esi, eax
	je	SHORT $LN5@CompareStr

; 30   : 		return false;

	xor	al, al
	jmp	SHORT $LN6@CompareStr
$LN5@CompareStr:

; 31   : 
; 32   : 	for(int i=0;a[i]==b[i];i++)

	mov	DWORD PTR _i$90295[ebp], 0
	jmp	SHORT $LN4@CompareStr
$LN3@CompareStr:
	mov	eax, DWORD PTR _i$90295[ebp]
	add	eax, 1
	mov	DWORD PTR _i$90295[ebp], eax
$LN4@CompareStr:
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _i$90295[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _i$90295[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN2@CompareStr

; 33   : 		if(i==strlen(a)-1)

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	sub	eax, 1
	cmp	DWORD PTR _i$90295[ebp], eax
	jne	SHORT $LN1@CompareStr

; 34   : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@CompareStr
$LN1@CompareStr:

; 35   : 
; 36   : 	return false;

	jmp	SHORT $LN3@CompareStr
$LN2@CompareStr:
	xor	al, al
$LN6@CompareStr:

; 37   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CompareStrings@@YA_NPAD0@Z ENDP			; CompareStrings
_TEXT	ENDS
PUBLIC	??_C@_0N@FICAGCGB@Data?5?$DN?5false?$AA@	; `string'
PUBLIC	??_C@_0M@CCBFPEFB@Data?5?$DN?5true?$AA@		; `string'
PUBLIC	?ShowSomeData@@YAX_NH@Z				; ShowSomeData
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?dbText@@YAXHHPAD@Z:PROC			; dbText
EXTRN	?dbTextWidth@@YAHPAD@Z:PROC			; dbTextWidth
EXTRN	?dbScreenWidth@@YAHXZ:PROC			; dbScreenWidth
EXTRN	?dbTextHeight@@YAHPAD@Z:PROC			; dbTextHeight
EXTRN	?dbScreenHeight@@YAHXZ:PROC			; dbScreenHeight
;	COMDAT ??_C@_0N@FICAGCGB@Data?5?$DN?5false?$AA@
CONST	SEGMENT
??_C@_0N@FICAGCGB@Data?5?$DN?5false?$AA@ DB 'Data = false', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CCBFPEFB@Data?5?$DN?5true?$AA@
CONST	SEGMENT
??_C@_0M@CCBFPEFB@Data?5?$DN?5true?$AA@ DB 'Data = true', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?ShowSomeData@@YAX_NH@Z
_TEXT	SEGMENT
$T92425 = -72						; size = 4
_data$ = -4						; size = 4
_rawdata$ = 8						; size = 1
_num$ = 12						; size = 4
?ShowSomeData@@YAX_NH@Z PROC				; ShowSomeData, COMDAT

; 40   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi

; 41   : 	char* data;
; 42   : 
; 43   : 	if(rawdata)

	movzx	eax, BYTE PTR _rawdata$[ebp]
	test	eax, eax
	je	SHORT $LN2@ShowSomeDa

; 44   : 		data="Data = true";

	mov	DWORD PTR _data$[ebp], OFFSET ??_C@_0M@CCBFPEFB@Data?5?$DN?5true?$AA@

; 45   : 	else

	jmp	SHORT $LN1@ShowSomeDa
$LN2@ShowSomeDa:

; 46   : 		data="Data = false";

	mov	DWORD PTR _data$[ebp], OFFSET ??_C@_0N@FICAGCGB@Data?5?$DN?5false?$AA@
$LN1@ShowSomeDa:

; 47   : 
; 48   : 	dbText(dbScreenWidth()-20-dbTextWidth(data),dbScreenHeight()-40-dbTextHeight(data)*num,data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	?dbScreenHeight@@YAHXZ			; dbScreenHeight
	mov	esi, eax
	sub	esi, 40					; 00000028H
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	?dbTextHeight@@YAHPAD@Z			; dbTextHeight
	add	esp, 4
	imul	eax, DWORD PTR _num$[ebp]
	sub	esi, eax
	push	esi
	call	?dbScreenWidth@@YAHXZ			; dbScreenWidth
	mov	esi, eax
	sub	esi, 20					; 00000014H
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	?dbTextWidth@@YAHPAD@Z			; dbTextWidth
	add	esp, 4
	sub	esi, eax
	push	esi
	call	?dbText@@YAXHHPAD@Z			; dbText
	add	esp, 12					; 0000000cH

; 49   : 	
; 50   : 	delete data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR $T92425[ebp], eax
	mov	ecx, DWORD PTR $T92425[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 51   : 
; 52   : 	return;
; 53   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ShowSomeData@@YAX_NH@Z ENDP				; ShowSomeData
_TEXT	ENDS
PUBLIC	?ShowSomeData@@YAXPADH@Z			; ShowSomeData
; Function compile flags: /Odtp /ZI
;	COMDAT ?ShowSomeData@@YAXPADH@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
_num$ = 12						; size = 4
?ShowSomeData@@YAXPADH@Z PROC				; ShowSomeData, COMDAT

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 57   : 	dbText(dbScreenWidth()-20-dbTextWidth(data),dbScreenHeight()-40-dbTextHeight(data)*num,data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	?dbScreenHeight@@YAHXZ			; dbScreenHeight
	mov	esi, eax
	sub	esi, 40					; 00000028H
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	?dbTextHeight@@YAHPAD@Z			; dbTextHeight
	add	esp, 4
	imul	eax, DWORD PTR _num$[ebp]
	sub	esi, eax
	push	esi
	call	?dbScreenWidth@@YAHXZ			; dbScreenWidth
	mov	esi, eax
	sub	esi, 20					; 00000014H
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	?dbTextWidth@@YAHPAD@Z			; dbTextWidth
	add	esp, 4
	sub	esi, eax
	push	esi
	call	?dbText@@YAXHHPAD@Z			; dbText
	add	esp, 12					; 0000000cH

; 58   : 	
; 59   : 	return;
; 60   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ShowSomeData@@YAXPADH@Z ENDP				; ShowSomeData
_TEXT	ENDS
PUBLIC	??_C@_07DHCPEHKF@Data?5?$DN?5?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?ShowSomeData@@YAXMH@Z				; ShowSomeData
EXTRN	_strcat:PROC
EXTRN	?dbStr@@YAPADM@Z:PROC				; dbStr
EXTRN	_strcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
;	COMDAT ??_C@_07DHCPEHKF@Data?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_07DHCPEHKF@Data?5?$DN?5?$AA@ DB 'Data = ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?ShowSomeData@@YAXMH@Z
_TEXT	SEGMENT
_szFPS$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_data$ = 8						; size = 4
_num$ = 12						; size = 4
?ShowSomeData@@YAXMH@Z PROC				; ShowSomeData, COMDAT

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 64   : 	char szFPS[256]="";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _szFPS$[ebp], al
	push	255					; 000000ffH
	push	0
	lea	eax, DWORD PTR _szFPS$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 65   : 	strcpy(szFPS,"Data = ");

	push	OFFSET ??_C@_07DHCPEHKF@Data?5?$DN?5?$AA@
	lea	eax, DWORD PTR _szFPS$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 66   : 	strcat(szFPS,dbStr(data));

	push	ecx
	fld	DWORD PTR _data$[ebp]
	fstp	DWORD PTR [esp]
	call	?dbStr@@YAPADM@Z			; dbStr
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _szFPS$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 67   : 	dbText(dbScreenWidth()-20-dbTextWidth(szFPS),dbScreenHeight()-40-dbTextHeight(szFPS)*num,szFPS);

	lea	eax, DWORD PTR _szFPS$[ebp]
	push	eax
	call	?dbScreenHeight@@YAHXZ			; dbScreenHeight
	mov	esi, eax
	sub	esi, 40					; 00000028H
	lea	ecx, DWORD PTR _szFPS$[ebp]
	push	ecx
	call	?dbTextHeight@@YAHPAD@Z			; dbTextHeight
	add	esp, 4
	imul	eax, DWORD PTR _num$[ebp]
	sub	esi, eax
	push	esi
	call	?dbScreenWidth@@YAHXZ			; dbScreenWidth
	mov	esi, eax
	sub	esi, 20					; 00000014H
	lea	edx, DWORD PTR _szFPS$[ebp]
	push	edx
	call	?dbTextWidth@@YAHPAD@Z			; dbTextWidth
	add	esp, 4
	sub	esi, eax
	push	esi
	call	?dbText@@YAXHHPAD@Z			; dbText
	add	esp, 12					; 0000000cH

; 68   : 	
; 69   : 	return;
; 70   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ShowSomeData@@YAXMH@Z ENDP				; ShowSomeData
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ShowSomeData@@YAXHH@Z				; ShowSomeData
EXTRN	?dbStr@@YAPADH@Z:PROC				; dbStr
; Function compile flags: /Odtp /ZI
;	COMDAT ?ShowSomeData@@YAXHH@Z
_TEXT	SEGMENT
_szFPS$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_data$ = 8						; size = 4
_num$ = 12						; size = 4
?ShowSomeData@@YAXHH@Z PROC				; ShowSomeData, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 74   : 	char szFPS[256]="";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _szFPS$[ebp], al
	push	255					; 000000ffH
	push	0
	lea	eax, DWORD PTR _szFPS$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 75   : 	strcpy(szFPS,"Data = ");

	push	OFFSET ??_C@_07DHCPEHKF@Data?5?$DN?5?$AA@
	lea	eax, DWORD PTR _szFPS$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 76   : 	strcat(szFPS,dbStr(data));

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	?dbStr@@YAPADH@Z			; dbStr
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _szFPS$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 77   : 	dbText(dbScreenWidth()-20-dbTextWidth(szFPS),dbScreenHeight()-40-dbTextHeight(szFPS)*num,szFPS);

	lea	eax, DWORD PTR _szFPS$[ebp]
	push	eax
	call	?dbScreenHeight@@YAHXZ			; dbScreenHeight
	mov	esi, eax
	sub	esi, 40					; 00000028H
	lea	ecx, DWORD PTR _szFPS$[ebp]
	push	ecx
	call	?dbTextHeight@@YAHPAD@Z			; dbTextHeight
	add	esp, 4
	imul	eax, DWORD PTR _num$[ebp]
	sub	esi, eax
	push	esi
	call	?dbScreenWidth@@YAHXZ			; dbScreenWidth
	mov	esi, eax
	sub	esi, 20					; 00000014H
	lea	edx, DWORD PTR _szFPS$[ebp]
	push	edx
	call	?dbTextWidth@@YAHPAD@Z			; dbTextWidth
	add	esp, 4
	sub	esi, eax
	push	esi
	call	?dbText@@YAXHHPAD@Z			; dbText
	add	esp, 12					; 0000000cH

; 78   : 	
; 79   : 	return;
; 80   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?ShowSomeData@@YAXHH@Z ENDP				; ShowSomeData
_TEXT	ENDS
PUBLIC	??_GStaticObject@@QAEPAXI@Z			; StaticObject::`scalar deleting destructor'
PUBLIC	??_C@_08KCCGPEHE@Button?50?$AA@			; `string'
PUBLIC	??_C@_0BE@NIHNOEGI@Save?5Data?2Test?5File?$AA@	; `string'
PUBLIC	??_C@_05HPKPHHNI@Chest?$AA@			; `string'
PUBLIC	__real@be800000
PUBLIC	__real@00000000
PUBLIC	__real@42480000
PUBLIC	__real@3a83126f
PUBLIC	__real@40000000
PUBLIC	__real@3f800000
PUBLIC	__real@40400000
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f000000
PUBLIC	??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@		; `string'
PUBLIC	??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@		; `string'
PUBLIC	??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@		; `string'
PUBLIC	??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@		; `string'
PUBLIC	??_C@_01FHEEJDEE@A?$AA@				; `string'
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	??_C@_01ELNMCGJD@W?$AA@				; `string'
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	??_C@_0CC@KNBFDDOO@Cursors?2Cursor?5BlueGold?5Small?4pn@ ; `string'
PUBLIC	__real@3f8ccccd
PUBLIC	??_C@_0L@CJOIDFHO@Resources?2?$AA@		; `string'
PUBLIC	??_C@_0BN@IEPDBBDH@Chronicles?5of?5Mu?5Alpha?5Theta?$AA@ ; `string'
PUBLIC	?DarkGDK@@YAXXZ					; DarkGDK
EXTRN	?Sync@Window@@QAEXXZ:PROC			; Window::Sync
EXTRN	?Update@DeviceHandler@@QAEXXZ:PROC		; DeviceHandler::Update
EXTRN	?Update@KeyHandler@@QAEXXZ:PROC			; KeyHandler::Update
EXTRN	?Update@MouseHandler@@QAEXXZ:PROC		; MouseHandler::Update
EXTRN	?GetIsGenericInput@DeviceHandler@@QAE_NPADM@Z:PROC ; DeviceHandler::GetIsGenericInput
EXTRN	?IsPressed@KeyHandler@@QAE_NH@Z:PROC		; KeyHandler::IsPressed
EXTRN	?Update@StaticObject@@QAEXXZ:PROC		; StaticObject::Update
EXTRN	?LoopGDK@@YA_NXZ:PROC				; LoopGDK
EXTRN	?dbLoopObject@@YAXH@Z:PROC			; dbLoopObject
EXTRN	?dbPositionCamera@@YAXMMM@Z:PROC		; dbPositionCamera
EXTRN	?SetMouseBoundToCursor@MouseHandler@@QAEX_N@Z:PROC ; MouseHandler::SetMouseBoundToCursor
EXTRN	??0SaveFile@@QAE@PADE@Z:PROC			; SaveFile::SaveFile
EXTRN	??1Vector3@@QAE@XZ:PROC				; Vector3::~Vector3
EXTRN	??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z:PROC ; StaticObject::StaticObject
EXTRN	?GetRefreshPtr@Window@@QAEPAHXZ:PROC		; Window::GetRefreshPtr
EXTRN	??0Vector3@@QAE@MMM@Z:PROC			; Vector3::Vector3
EXTRN	??0Vector3@@QAE@HHH@Z:PROC			; Vector3::Vector3
EXTRN	??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMPAD111@Z:PROC ; DeviceHandler::DeviceHandler
EXTRN	??0KeyHandler@@QAE@PAVMouseHandler@@HHPAD111@Z:PROC ; KeyHandler::KeyHandler
EXTRN	??0MouseHandler@@QAE@_NPADPAVWindow@@M@Z:PROC	; MouseHandler::MouseHandler
EXTRN	??0Window@@QAE@H_N00HHPAD1@Z:PROC		; Window::Window
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT ??_C@_08KCCGPEHE@Button?50?$AA@
; File c:\users\fireemblem16\documents\visual studio 2008\projects\chronicles\chronicles\source\main.cpp
CONST	SEGMENT
??_C@_08KCCGPEHE@Button?50?$AA@ DB 'Button 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NIHNOEGI@Save?5Data?2Test?5File?$AA@
CONST	SEGMENT
??_C@_0BE@NIHNOEGI@Save?5Data?2Test?5File?$AA@ DB 'Save Data\Test File', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05HPKPHHNI@Chest?$AA@
CONST	SEGMENT
??_C@_05HPKPHHNI@Chest?$AA@ DB 'Chest', 00H		; `string'
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@
CONST	SEGMENT
??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@ DB 'JoyStickY Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@
CONST	SEGMENT
??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@ DB 'JoyStickX Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@
CONST	SEGMENT
??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@ DB 'JoyStickX Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@
CONST	SEGMENT
??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@ DB 'JoyStickY Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01FHEEJDEE@A?$AA@
CONST	SEGMENT
??_C@_01FHEEJDEE@A?$AA@ DB 'A', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ELNMCGJD@W?$AA@
CONST	SEGMENT
??_C@_01ELNMCGJD@W?$AA@ DB 'W', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KNBFDDOO@Cursors?2Cursor?5BlueGold?5Small?4pn@
CONST	SEGMENT
??_C@_0CC@KNBFDDOO@Cursors?2Cursor?5BlueGold?5Small?4pn@ DB 'Cursors\Curs'
	DB	'or BlueGold Small.png', 00H			; `string'
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT ??_C@_0L@CJOIDFHO@Resources?2?$AA@
CONST	SEGMENT
??_C@_0L@CJOIDFHO@Resources?2?$AA@ DB 'Resources\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IEPDBBDH@Chronicles?5of?5Mu?5Alpha?5Theta?$AA@
CONST	SEGMENT
??_C@_0BN@IEPDBBDH@Chronicles?5of?5Mu?5Alpha?5Theta?$AA@ DB 'Chronicles o'
	DB	'f Mu Alpha Theta', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?DarkGDK@@YAXXZ DD 019930522H
	DD	018H
	DD	FLAT:__unwindtable$?DarkGDK@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?DarkGDK@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$5
	DD	0eH
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$6
	DD	0fH
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$7
	DD	010H
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$8
	DD	011H
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$9
	DD	012H
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$10
	DD	013H
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$11
	DD	014H
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$12
	DD	015H
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DarkGDK@@YAXXZ$14
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ?DarkGDK@@YAXXZ
_TEXT	SEGMENT
tv236 = -348						; size = 4
tv359 = -344						; size = 4
tv400 = -340						; size = 4
tv354 = -336						; size = 4
tv398 = -332						; size = 4
tv349 = -328						; size = 4
tv396 = -324						; size = 4
tv344 = -320						; size = 4
tv394 = -316						; size = 4
tv339 = -312						; size = 4
tv392 = -308						; size = 4
tv334 = -304						; size = 4
tv390 = -300						; size = 4
tv329 = -296						; size = 4
tv388 = -292						; size = 4
tv324 = -288						; size = 4
tv386 = -284						; size = 4
tv287 = -280						; size = 4
tv384 = -276						; size = 4
tv277 = -276						; size = 4
tv245 = -276						; size = 4
tv152 = -276						; size = 4
tv136 = -276						; size = 4
tv90 = -276						; size = 4
tv79 = -276						; size = 4
$T92440 = -272						; size = 4
$T92441 = -268						; size = 4
$T92444 = -264						; size = 4
$T92445 = -260						; size = 4
$T92448 = -256						; size = 4
$T92449 = -252						; size = 4
$T92452 = -248						; size = 4
$T92453 = -244						; size = 4
$T92456 = -240						; size = 4
$T92457 = -236						; size = 4
$T92458 = -232						; size = 12
$T92459 = -220						; size = 12
$T92460 = -208						; size = 12
$T92461 = -196						; size = 12
$T92462 = -184						; size = 12
$T92463 = -172						; size = 12
$T92464 = -160						; size = 12
$T92465 = -148						; size = 12
$T92466 = -136						; size = 12
$T92469 = -124						; size = 4
$T92470 = -120						; size = 4
$T92473 = -116						; size = 4
$T92474 = -112						; size = 4
$T92482 = -108						; size = 4
_Save$ = -40						; size = 4
_Chest$ = -36						; size = 4
_Controller$ = -32					; size = 4
_KeyBoard$ = -28					; size = 4
_Mouse$ = -24						; size = 4
_GameWindow$ = -20					; size = 4
_gameplay$ = -14					; size = 1
_a$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
?DarkGDK@@YAXXZ PROC					; DarkGDK, COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DarkGDK@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T92482[ebp], 0

; 33   : 	bool a=true;

	mov	BYTE PTR _a$[ebp], 1

; 34   : 	bool gameplay=true;

	mov	BYTE PTR _gameplay$[ebp], 1

; 35   : 
; 36   : 	Window* GameWindow=new Window(60,false,true,false,0,0,"Resources\\","Chronicles of Mu Alpha Theta");

	push	68					; 00000044H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T92441[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T92441[ebp], 0
	je	SHORT $LN7@DarkGDK
	push	OFFSET ??_C@_0BN@IEPDBBDH@Chronicles?5of?5Mu?5Alpha?5Theta?$AA@
	push	OFFSET ??_C@_0L@CJOIDFHO@Resources?2?$AA@
	push	0
	push	0
	push	0
	push	1
	push	0
	push	60					; 0000003cH
	mov	ecx, DWORD PTR $T92441[ebp]
	call	??0Window@@QAE@H_N00HHPAD1@Z		; Window::Window
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN8@DarkGDK
$LN7@DarkGDK:
	mov	DWORD PTR tv79[ebp], 0
$LN8@DarkGDK:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T92440[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T92440[ebp]
	mov	DWORD PTR _GameWindow$[ebp], ecx

; 37   : 	MouseHandler* Mouse=new MouseHandler(true,"Cursors\\Cursor BlueGold Small.png",GameWindow,1.1f);

	push	548					; 00000224H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T92445[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T92445[ebp], 0
	je	SHORT $LN9@DarkGDK
	push	ecx
	fld	DWORD PTR __real@3f8ccccd
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _GameWindow$[ebp]
	push	eax
	push	OFFSET ??_C@_0CC@KNBFDDOO@Cursors?2Cursor?5BlueGold?5Small?4pn@
	push	1
	mov	ecx, DWORD PTR $T92445[ebp]
	call	??0MouseHandler@@QAE@_NPADPAVWindow@@M@Z ; MouseHandler::MouseHandler
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN10@DarkGDK
$LN9@DarkGDK:
	mov	DWORD PTR tv90[ebp], 0
$LN10@DarkGDK:
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR $T92444[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T92444[ebp]
	mov	DWORD PTR _Mouse$[ebp], edx

; 38   : 	KeyHandler* KeyBoard=new KeyHandler(Mouse,5,5,"A","D","W","S");

	push	4908					; 0000132cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T92449[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T92449[ebp], 0
	je	SHORT $LN11@DarkGDK
	push	OFFSET ??_C@_01CPLAODJH@S?$AA@
	push	OFFSET ??_C@_01ELNMCGJD@W?$AA@
	push	OFFSET ??_C@_01CKDDGHAB@D?$AA@
	push	OFFSET ??_C@_01FHEEJDEE@A?$AA@
	push	5
	push	5
	mov	eax, DWORD PTR _Mouse$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T92449[ebp]
	call	??0KeyHandler@@QAE@PAVMouseHandler@@HHPAD111@Z ; KeyHandler::KeyHandler
	mov	DWORD PTR tv136[ebp], eax
	jmp	SHORT $LN12@DarkGDK
$LN11@DarkGDK:
	mov	DWORD PTR tv136[ebp], 0
$LN12@DarkGDK:
	mov	ecx, DWORD PTR tv136[ebp]
	mov	DWORD PTR $T92448[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T92448[ebp]
	mov	DWORD PTR _KeyBoard$[ebp], edx

; 39   : 	DeviceHandler* Controller=new DeviceHandler(Mouse,5,5,0.5f,0.5f,"JoyStickY Max","JoyStickX Min","JoyStickX Max","JoyStickY Min");

	push	8848					; 00002290H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T92453[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T92453[ebp], 0
	je	SHORT $LN13@DarkGDK
	push	OFFSET ??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@
	push	OFFSET ??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@
	push	OFFSET ??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@
	push	OFFSET ??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	push	5
	push	5
	mov	eax, DWORD PTR _Mouse$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T92453[ebp]
	call	??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMPAD111@Z ; DeviceHandler::DeviceHandler
	mov	DWORD PTR tv152[ebp], eax
	jmp	SHORT $LN14@DarkGDK
$LN13@DarkGDK:
	mov	DWORD PTR tv152[ebp], 0
$LN14@DarkGDK:
	mov	ecx, DWORD PTR tv152[ebp]
	mov	DWORD PTR $T92452[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T92452[ebp]
	mov	DWORD PTR _Controller$[ebp], edx

; 40   : 	StaticObject* Chest=new StaticObject("Chest",true,GameWindow->GetRefreshPtr(),Vector3(-0.25f,0.0f,2.0f),Vector3(0,0,0),Vector3(50.0f,50.0f,50.0f),Vector3(0.001f,0.001f,0.001f),Vector3(0,0,0),Vector3(2.0f,1.0f,3.0f),Vector3(0,0,0),Vector3(0.99f,0.99f,0.99f),Vector3(0,0,0));

	push	3136					; 00000c40H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T92457[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T92457[ebp], 0
	je	$LN15@DarkGDK
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR $T92458[ebp]
	call	??0Vector3@@QAE@HHH@Z			; Vector3::Vector3
	mov	DWORD PTR tv384[ebp], eax
	mov	eax, DWORD PTR tv384[ebp]
	mov	DWORD PTR tv287[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR $T92482[ebp]
	or	ecx, 1
	mov	DWORD PTR $T92482[ebp], ecx
	mov	edx, DWORD PTR tv287[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	push	ecx
	fld	DWORD PTR __real@3f7d70a4
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3f7d70a4
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3f7d70a4
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T92459[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	DWORD PTR tv386[ebp], eax
	mov	eax, DWORD PTR tv386[ebp]
	mov	DWORD PTR tv324[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR $T92482[ebp]
	or	ecx, 2
	mov	DWORD PTR $T92482[ebp], ecx
	mov	edx, DWORD PTR tv324[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR $T92460[ebp]
	call	??0Vector3@@QAE@HHH@Z			; Vector3::Vector3
	mov	DWORD PTR tv388[ebp], eax
	mov	eax, DWORD PTR tv388[ebp]
	mov	DWORD PTR tv329[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR $T92482[ebp]
	or	ecx, 4
	mov	DWORD PTR $T92482[ebp], ecx
	mov	edx, DWORD PTR tv329[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	push	ecx
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T92461[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	DWORD PTR tv390[ebp], eax
	mov	eax, DWORD PTR tv390[ebp]
	mov	DWORD PTR tv334[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR $T92482[ebp]
	or	ecx, 8
	mov	DWORD PTR $T92482[ebp], ecx
	mov	edx, DWORD PTR tv334[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR $T92462[ebp]
	call	??0Vector3@@QAE@HHH@Z			; Vector3::Vector3
	mov	DWORD PTR tv392[ebp], eax
	mov	eax, DWORD PTR tv392[ebp]
	mov	DWORD PTR tv339[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR $T92482[ebp]
	or	ecx, 16					; 00000010H
	mov	DWORD PTR $T92482[ebp], ecx
	mov	edx, DWORD PTR tv339[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	push	ecx
	fld	DWORD PTR __real@3a83126f
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3a83126f
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3a83126f
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T92463[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	DWORD PTR tv394[ebp], eax
	mov	eax, DWORD PTR tv394[ebp]
	mov	DWORD PTR tv344[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR $T92482[ebp]
	or	ecx, 32					; 00000020H
	mov	DWORD PTR $T92482[ebp], ecx
	mov	edx, DWORD PTR tv344[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	push	ecx
	fld	DWORD PTR __real@42480000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@42480000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@42480000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T92464[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	DWORD PTR tv396[ebp], eax
	mov	eax, DWORD PTR tv396[ebp]
	mov	DWORD PTR tv349[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR $T92482[ebp]
	or	ecx, 64					; 00000040H
	mov	DWORD PTR $T92482[ebp], ecx
	mov	edx, DWORD PTR tv349[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR $T92465[ebp]
	call	??0Vector3@@QAE@HHH@Z			; Vector3::Vector3
	mov	DWORD PTR tv398[ebp], eax
	mov	eax, DWORD PTR tv398[ebp]
	mov	DWORD PTR tv354[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR $T92482[ebp]
	or	ecx, 128				; 00000080H
	mov	DWORD PTR $T92482[ebp], ecx
	mov	edx, DWORD PTR tv354[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	push	ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@be800000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T92466[ebp]
	call	??0Vector3@@QAE@MMM@Z			; Vector3::Vector3
	mov	DWORD PTR tv400[ebp], eax
	mov	eax, DWORD PTR tv400[ebp]
	mov	DWORD PTR tv359[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	ecx, DWORD PTR $T92482[ebp]
	or	ecx, 256				; 00000100H
	mov	DWORD PTR $T92482[ebp], ecx
	mov	edx, DWORD PTR tv359[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _GameWindow$[ebp]
	call	?GetRefreshPtr@Window@@QAEPAHXZ		; Window::GetRefreshPtr
	push	eax
	push	1
	push	OFFSET ??_C@_05HPKPHHNI@Chest?$AA@
	mov	ecx, DWORD PTR $T92457[ebp]
	call	??0StaticObject@@QAE@PAD_NPAHVVector3@@33333333@Z ; StaticObject::StaticObject
	mov	DWORD PTR tv236[ebp], eax
	jmp	SHORT $LN16@DarkGDK
$LN15@DarkGDK:
	mov	DWORD PTR tv236[ebp], 0
$LN16@DarkGDK:
	mov	eax, DWORD PTR tv236[ebp]
	mov	DWORD PTR $T92456[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 22		; 00000016H
	mov	ecx, DWORD PTR $T92456[ebp]
	mov	DWORD PTR _Chest$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 21		; 00000015H
	mov	edx, DWORD PTR $T92482[ebp]
	and	edx, 256				; 00000100H
	je	SHORT $LN44@DarkGDK
	and	DWORD PTR $T92482[ebp], -257		; fffffeffH
	lea	ecx, DWORD PTR $T92466[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN44@DarkGDK:
	mov	DWORD PTR __$EHRec$[ebp+8], 20		; 00000014H
	mov	eax, DWORD PTR $T92482[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN45@DarkGDK
	and	DWORD PTR $T92482[ebp], -129		; ffffff7fH
	lea	ecx, DWORD PTR $T92465[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN45@DarkGDK:
	mov	DWORD PTR __$EHRec$[ebp+8], 19		; 00000013H
	mov	ecx, DWORD PTR $T92482[ebp]
	and	ecx, 64					; 00000040H
	je	SHORT $LN46@DarkGDK
	and	DWORD PTR $T92482[ebp], -65		; ffffffbfH
	lea	ecx, DWORD PTR $T92464[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN46@DarkGDK:
	mov	DWORD PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	edx, DWORD PTR $T92482[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN47@DarkGDK
	and	DWORD PTR $T92482[ebp], -33		; ffffffdfH
	lea	ecx, DWORD PTR $T92463[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN47@DarkGDK:
	mov	DWORD PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	eax, DWORD PTR $T92482[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN48@DarkGDK
	and	DWORD PTR $T92482[ebp], -17		; ffffffefH
	lea	ecx, DWORD PTR $T92462[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN48@DarkGDK:
	mov	DWORD PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR $T92482[ebp]
	and	ecx, 8
	je	SHORT $LN49@DarkGDK
	and	DWORD PTR $T92482[ebp], -9		; fffffff7H
	lea	ecx, DWORD PTR $T92461[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN49@DarkGDK:
	mov	DWORD PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	edx, DWORD PTR $T92482[ebp]
	and	edx, 4
	je	SHORT $LN50@DarkGDK
	and	DWORD PTR $T92482[ebp], -5		; fffffffbH
	lea	ecx, DWORD PTR $T92460[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN50@DarkGDK:
	mov	DWORD PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	eax, DWORD PTR $T92482[ebp]
	and	eax, 2
	je	SHORT $LN51@DarkGDK
	and	DWORD PTR $T92482[ebp], -3		; fffffffdH
	lea	ecx, DWORD PTR $T92459[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN51@DarkGDK:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T92482[ebp]
	and	ecx, 1
	je	SHORT $LN52@DarkGDK
	and	DWORD PTR $T92482[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T92458[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN52@DarkGDK:

; 41   : 	//StaticObject* Chest2=new StaticObject("Box",true,GameWindow->GetRefreshPtr(),Vector3(-0.25f,0.0f,2.0f),Vector3(0,0,0),Vector3(50.0f,50.0f,50.0f));
; 42   : 	SaveFile* Save=new SaveFile("Save Data\\Test File",0xE2);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T92470[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 23		; 00000017H
	cmp	DWORD PTR $T92470[ebp], 0
	je	SHORT $LN17@DarkGDK
	push	226					; 000000e2H
	push	OFFSET ??_C@_0BE@NIHNOEGI@Save?5Data?2Test?5File?$AA@
	mov	ecx, DWORD PTR $T92470[ebp]
	call	??0SaveFile@@QAE@PADE@Z			; SaveFile::SaveFile
	mov	DWORD PTR tv245[ebp], eax
	jmp	SHORT $LN18@DarkGDK
$LN17@DarkGDK:
	mov	DWORD PTR tv245[ebp], 0
$LN18@DarkGDK:
	mov	eax, DWORD PTR tv245[ebp]
	mov	DWORD PTR $T92469[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T92469[ebp]
	mov	DWORD PTR _Save$[ebp], ecx

; 43   : 	Mouse->SetMouseBoundToCursor(false);

	push	0
	mov	ecx, DWORD PTR _Mouse$[ebp]
	call	?SetMouseBoundToCursor@MouseHandler@@QAEX_N@Z ; MouseHandler::SetMouseBoundToCursor

; 44   : //I can load objects here but it doesn't like to go through Chest2 but I can use the same object twice. Debug later.
; 45   : 	dbPositionCamera(0.0f,0.0f,0.0f);

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	call	?dbPositionCamera@@YAXMMM@Z		; dbPositionCamera
	add	esp, 12					; 0000000cH

; 46   : 
; 47   : 	dbLoopObject(1);

	push	1
	call	?dbLoopObject@@YAXH@Z			; dbLoopObject
	add	esp, 4

; 48   : 	dbLoopObject(2);

	push	2
	call	?dbLoopObject@@YAXH@Z			; dbLoopObject
	add	esp, 4
$LN4@DarkGDK:

; 49   : 	
; 50   : 	while(LoopGDK()&&gameplay)

	call	?LoopGDK@@YA_NXZ			; LoopGDK
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@DarkGDK
	movzx	eax, BYTE PTR _gameplay$[ebp]
	test	eax, eax
	je	SHORT $LN3@DarkGDK

; 51   : 	{
; 52   : 		Chest->Update();

	mov	ecx, DWORD PTR _Chest$[ebp]
	call	?Update@StaticObject@@QAEXXZ		; StaticObject::Update

; 53   : 		//Chest2->Update();
; 54   : 
; 55   : 		if(KeyBoard->IsPressed(0)||Controller->GetIsGenericInput("Button 0",0.5f))

	push	0
	mov	ecx, DWORD PTR _KeyBoard$[ebp]
	call	?IsPressed@KeyHandler@@QAE_NH@Z		; KeyHandler::IsPressed
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@DarkGDK
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_08KCCGPEHE@Button?50?$AA@
	mov	ecx, DWORD PTR _Controller$[ebp]
	call	?GetIsGenericInput@DeviceHandler@@QAE_NPADM@Z ; DeviceHandler::GetIsGenericInput
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@DarkGDK
$LN1@DarkGDK:

; 56   : 			gameplay=false;

	mov	BYTE PTR _gameplay$[ebp], 0
$LN2@DarkGDK:

; 57   : 
; 58   : 		Mouse->Update();

	mov	ecx, DWORD PTR _Mouse$[ebp]
	call	?Update@MouseHandler@@QAEXXZ		; MouseHandler::Update

; 59   : 		KeyBoard->Update();

	mov	ecx, DWORD PTR _KeyBoard$[ebp]
	call	?Update@KeyHandler@@QAEXXZ		; KeyHandler::Update

; 60   : 		Controller->Update();

	mov	ecx, DWORD PTR _Controller$[ebp]
	call	?Update@DeviceHandler@@QAEXXZ		; DeviceHandler::Update

; 61   : 		GameWindow->Sync();

	mov	ecx, DWORD PTR _GameWindow$[ebp]
	call	?Sync@Window@@QAEXXZ			; Window::Sync

; 62   : 	}

	jmp	SHORT $LN4@DarkGDK
$LN3@DarkGDK:

; 63   : 
; 64   : 	delete Chest;

	mov	eax, DWORD PTR _Chest$[ebp]
	mov	DWORD PTR $T92474[ebp], eax
	mov	ecx, DWORD PTR $T92474[ebp]
	mov	DWORD PTR $T92473[ebp], ecx
	cmp	DWORD PTR $T92473[ebp], 0
	je	SHORT $LN19@DarkGDK
	push	1
	mov	ecx, DWORD PTR $T92473[ebp]
	call	??_GStaticObject@@QAEPAXI@Z
	mov	DWORD PTR tv277[ebp], eax
	jmp	SHORT $LN20@DarkGDK
$LN19@DarkGDK:
	mov	DWORD PTR tv277[ebp], 0
$LN20@DarkGDK:

; 65   : 	//delete Chest2;
; 66   : 
; 67   : 	return;
; 68   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DarkGDK@@YAXXZ$0:
	mov	eax, DWORD PTR $T92441[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$1:
	mov	eax, DWORD PTR $T92445[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$2:
	mov	eax, DWORD PTR $T92449[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$3:
	mov	eax, DWORD PTR $T92453[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$4:
	mov	eax, DWORD PTR $T92457[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$5:
	mov	eax, DWORD PTR $T92482[ebp]
	and	eax, 1
	je	$LN27@DarkGDK
	and	DWORD PTR $T92482[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T92458[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN27@DarkGDK:
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$6:
	mov	eax, DWORD PTR $T92482[ebp]
	and	eax, 2
	je	$LN29@DarkGDK
	and	DWORD PTR $T92482[ebp], -3		; fffffffdH
	lea	ecx, DWORD PTR $T92459[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN29@DarkGDK:
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$7:
	mov	eax, DWORD PTR $T92482[ebp]
	and	eax, 4
	je	$LN31@DarkGDK
	and	DWORD PTR $T92482[ebp], -5		; fffffffbH
	lea	ecx, DWORD PTR $T92460[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN31@DarkGDK:
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$8:
	mov	eax, DWORD PTR $T92482[ebp]
	and	eax, 8
	je	$LN33@DarkGDK
	and	DWORD PTR $T92482[ebp], -9		; fffffff7H
	lea	ecx, DWORD PTR $T92461[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN33@DarkGDK:
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$9:
	mov	eax, DWORD PTR $T92482[ebp]
	and	eax, 16					; 00000010H
	je	$LN35@DarkGDK
	and	DWORD PTR $T92482[ebp], -17		; ffffffefH
	lea	ecx, DWORD PTR $T92462[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN35@DarkGDK:
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$10:
	mov	eax, DWORD PTR $T92482[ebp]
	and	eax, 32					; 00000020H
	je	$LN37@DarkGDK
	and	DWORD PTR $T92482[ebp], -33		; ffffffdfH
	lea	ecx, DWORD PTR $T92463[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN37@DarkGDK:
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$11:
	mov	eax, DWORD PTR $T92482[ebp]
	and	eax, 64					; 00000040H
	je	$LN39@DarkGDK
	and	DWORD PTR $T92482[ebp], -65		; ffffffbfH
	lea	ecx, DWORD PTR $T92464[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN39@DarkGDK:
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$12:
	mov	eax, DWORD PTR $T92482[ebp]
	and	eax, 128				; 00000080H
	je	$LN41@DarkGDK
	and	DWORD PTR $T92482[ebp], -129		; ffffff7fH
	lea	ecx, DWORD PTR $T92465[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN41@DarkGDK:
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$13:
	mov	eax, DWORD PTR $T92482[ebp]
	and	eax, 256				; 00000100H
	je	$LN43@DarkGDK
	and	DWORD PTR $T92482[ebp], -257		; fffffeffH
	lea	ecx, DWORD PTR $T92466[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN43@DarkGDK:
	ret	0
__unwindfunclet$?DarkGDK@@YAXXZ$14:
	mov	eax, DWORD PTR $T92470[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?DarkGDK@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-352]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DarkGDK@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DarkGDK@@YAXXZ ENDP					; DarkGDK
EXTRN	??1StaticObject@@QAE@XZ:PROC			; StaticObject::~StaticObject
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GStaticObject@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GStaticObject@@QAEPAXI@Z PROC			; StaticObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1StaticObject@@QAE@XZ			; StaticObject::~StaticObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GStaticObject@@QAEPAXI@Z ENDP			; StaticObject::`scalar deleting destructor'
_TEXT	ENDS
END
