; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\Users\FireEmblem16\Documents\Visual Studio 2008\Projects\Chronicles\Chronicles\Source\Input.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	__real@3f800000
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??0MouseHandler@@QAE@_NPADPAVWindow@@M@Z	; MouseHandler::MouseHandler
EXTRN	?dbMouseZ@@YAHXZ:PROC				; dbMouseZ
EXTRN	?dbMouseY@@YAHXZ:PROC				; dbMouseY
EXTRN	?dbMouseX@@YAHXZ:PROC				; dbMouseX
EXTRN	?dbHideMouse@@YAXXZ:PROC			; dbHideMouse
EXTRN	?dbShowMouse@@YAXXZ:PROC			; dbShowMouse
EXTRN	?dbGetImageWidth@@YAHH@Z:PROC			; dbGetImageWidth
EXTRN	?dbGetImageHeight@@YAHH@Z:PROC			; dbGetImageHeight
EXTRN	?dbLoadImage@@YAXPADHH@Z:PROC			; dbLoadImage
EXTRN	?dbImageExist@@YAHH@Z:PROC			; dbImageExist
EXTRN	?dbLoadImage@@YAXPADH@Z:PROC			; dbLoadImage
EXTRN	?dbFileExist@@YAHPAD@Z:PROC			; dbFileExist
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
; File c:\users\fireemblem16\documents\visual studio 2008\projects\chronicles\chronicles\source\input.cpp
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0MouseHandler@@QAE@_NPADPAVWindow@@M@Z
_TEXT	SEGMENT
_i$90822 = -12						; size = 4
_i$90818 = -8						; size = 4
_this$ = -4						; size = 4
_SeeMouse$ = 8						; size = 1
_MouseCursor$ = 12					; size = 4
_Win$ = 16						; size = 4
_Speeder$ = 20						; size = 4
??0MouseHandler@@QAE@_NPADPAVWindow@@M@Z PROC		; MouseHandler::MouseHandler, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   : 	this->ShowMouse=SeeMouse;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 4d 08	 mov	 cl, BYTE PTR _SeeMouse$[ebp]
  00012	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 24   : 	this->CursorName=MouseCursor;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _MouseCursor$[ebp]
  0001b	89 88 94 01 00
	00		 mov	 DWORD PTR [eax+404], ecx

; 25   : 	this->CurrentWindow=Win;

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _Win$[ebp]
  00027	89 88 20 02 00
	00		 mov	 DWORD PTR [eax+544], ecx

; 26   : 	this->BindMouseToPosition=true;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c6 00 01	 mov	 BYTE PTR [eax], 1

; 27   : 
; 28   : 	if(this->CursorName!="")

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	81 b8 94 01 00
	00 00 00 00 00	 cmp	 DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00040	74 0e		 je	 SHORT $LN16@MouseHandl

; 29   : 		this->Multiplier=Speeder;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	d9 45 14	 fld	 DWORD PTR _Speeder$[ebp]
  00048	d9 98 98 01 00
	00		 fstp	 DWORD PTR [eax+408]

; 30   : 	else

  0004e	eb 0b		 jmp	 SHORT $LN15@MouseHandl
$LN16@MouseHandl:

; 31   : 		this->Multiplier=1.0f;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	d9 e8		 fld1
  00055	d9 98 98 01 00
	00		 fstp	 DWORD PTR [eax+408]
$LN15@MouseHandl:

; 32   : 
; 33   : 	for(int i=0;i<100;i++)

  0005b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$90818[ebp], 0
  00062	eb 09		 jmp	 SHORT $LN14@MouseHandl
$LN13@MouseHandl:
  00064	8b 45 f8	 mov	 eax, DWORD PTR _i$90818[ebp]
  00067	83 c0 01	 add	 eax, 1
  0006a	89 45 f8	 mov	 DWORD PTR _i$90818[ebp], eax
$LN14@MouseHandl:
  0006d	83 7d f8 64	 cmp	 DWORD PTR _i$90818[ebp], 100 ; 00000064H
  00071	7d 30		 jge	 SHORT $LN12@MouseHandl

; 34   : 	{
; 35   : 		this->LeftClick[i]=false;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00076	03 45 f8	 add	 eax, DWORD PTR _i$90818[ebp]
  00079	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 36   : 		this->RightClick[i]=false;

  0007d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00080	03 45 f8	 add	 eax, DWORD PTR _i$90818[ebp]
  00083	c6 80 2e 01 00
	00 00		 mov	 BYTE PTR [eax+302], 0

; 37   : 		this->MouseButton3[i]=false;

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	03 45 f8	 add	 eax, DWORD PTR _i$90818[ebp]
  00090	c6 40 66 00	 mov	 BYTE PTR [eax+102], 0

; 38   : 		this->MouseButton4[i]=false;

  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	03 45 f8	 add	 eax, DWORD PTR _i$90818[ebp]
  0009a	c6 80 ca 00 00
	00 00		 mov	 BYTE PTR [eax+202], 0

; 39   : 	}

  000a1	eb c1		 jmp	 SHORT $LN13@MouseHandl
$LN12@MouseHandl:

; 40   : 
; 41   : 	for(int i=0;i<10;i++)

  000a3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$90822[ebp], 0
  000aa	eb 09		 jmp	 SHORT $LN11@MouseHandl
$LN10@MouseHandl:
  000ac	8b 45 f4	 mov	 eax, DWORD PTR _i$90822[ebp]
  000af	83 c0 01	 add	 eax, 1
  000b2	89 45 f4	 mov	 DWORD PTR _i$90822[ebp], eax
$LN11@MouseHandl:
  000b5	83 7d f4 0a	 cmp	 DWORD PTR _i$90822[ebp], 10 ; 0000000aH
  000b9	7d 35		 jge	 SHORT $LN9@MouseHandl

; 42   : 	{
; 43   : 		this->MousePosX[i]=0;

  000bb	8b 45 f4	 mov	 eax, DWORD PTR _i$90822[ebp]
  000be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	c7 84 81 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+424], 0

; 44   : 		this->MousePosY[i]=0;

  000cc	8b 45 f4	 mov	 eax, DWORD PTR _i$90822[ebp]
  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	c7 84 81 d0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+464], 0

; 45   : 		this->MousePosZ[i]=0;

  000dd	8b 45 f4	 mov	 eax, DWORD PTR _i$90822[ebp]
  000e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e3	c7 84 81 f8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+504], 0

; 46   : 	}

  000ee	eb bc		 jmp	 SHORT $LN10@MouseHandl
$LN9@MouseHandl:

; 47   : 
; 48   : 	if(this->CursorName!="")

  000f0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f3	81 b8 94 01 00
	00 00 00 00 00	 cmp	 DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@
  000fd	0f 84 f6 00 00
	00		 je	 $LN3@MouseHandl

; 49   : 	{
; 50   : 		if(dbFileExist(this->CursorName)==1)

  00103	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00106	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  0010c	51		 push	 ecx
  0010d	e8 00 00 00 00	 call	 ?dbFileExist@@YAHPAD@Z	; dbFileExist
  00112	83 c4 04	 add	 esp, 4
  00115	83 f8 01	 cmp	 eax, 1
  00118	0f 85 a7 00 00
	00		 jne	 $LN7@MouseHandl

; 51   : 		{
; 52   : 			dbLoadImage(this->CursorName,1);

  0011e	6a 01		 push	 1
  00120	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00123	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  00129	51		 push	 ecx
  0012a	e8 00 00 00 00	 call	 ?dbLoadImage@@YAXPADH@Z	; dbLoadImage
  0012f	83 c4 08	 add	 esp, 8

; 53   : 			for(this->CursorImage=1;dbImageExist(this->CursorImage)==1;this->CursorImage++);

  00132	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00135	c7 80 a0 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+416], 1
  0013f	eb 15		 jmp	 SHORT $LN6@MouseHandl
$LN5@MouseHandl:
  00141	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00144	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  0014a	83 c1 01	 add	 ecx, 1
  0014d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00150	89 8a a0 01 00
	00		 mov	 DWORD PTR [edx+416], ecx
$LN6@MouseHandl:
  00156	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00159	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  0015f	51		 push	 ecx
  00160	e8 00 00 00 00	 call	 ?dbImageExist@@YAHH@Z	; dbImageExist
  00165	83 c4 04	 add	 esp, 4
  00168	83 f8 01	 cmp	 eax, 1
  0016b	75 02		 jne	 SHORT $LN4@MouseHandl
  0016d	eb d2		 jmp	 SHORT $LN5@MouseHandl
$LN4@MouseHandl:

; 54   : 			dbLoadImage(this->CursorName,this->CursorImage,1);

  0016f	6a 01		 push	 1
  00171	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00174	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  0017a	51		 push	 ecx
  0017b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0017e	8b 82 94 01 00
	00		 mov	 eax, DWORD PTR [edx+404]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?dbLoadImage@@YAXPADHH@Z ; dbLoadImage
  0018a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 
; 56   : 			this->CursorHeight=dbGetImageHeight(this->CursorImage);

  0018d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00190	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  00196	51		 push	 ecx
  00197	e8 00 00 00 00	 call	 ?dbGetImageHeight@@YAHH@Z ; dbGetImageHeight
  0019c	83 c4 04	 add	 esp, 4
  0019f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a2	89 82 9c 01 00
	00		 mov	 DWORD PTR [edx+412], eax

; 57   : 			this->CursorWidth=dbGetImageWidth(this->CursorImage);

  001a8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ab	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  001b1	51		 push	 ecx
  001b2	e8 00 00 00 00	 call	 ?dbGetImageWidth@@YAHH@Z ; dbGetImageWidth
  001b7	83 c4 04	 add	 esp, 4
  001ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001bd	89 82 a4 01 00
	00		 mov	 DWORD PTR [edx+420], eax

; 58   : 		}
; 59   : 		else

  001c3	eb 34		 jmp	 SHORT $LN3@MouseHandl
$LN7@MouseHandl:

; 60   : 		{
; 61   : 			this->CursorName="";

  001c5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c8	c7 80 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@

; 62   : 			this->CursorImage=0;

  001d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001d5	c7 80 a0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+416], 0

; 63   : 			this->CursorHeight=0;

  001df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001e2	c7 80 9c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+412], 0

; 64   : 			this->CursorWidth=0;

  001ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ef	c7 80 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+420], 0
$LN3@MouseHandl:

; 65   : 		}
; 66   : 	}
; 67   : 
; 68   : 	if(this->ShowMouse&&this->CursorName=="")

  001f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001fc	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00200	85 c9		 test	 ecx, ecx
  00202	74 16		 je	 SHORT $LN2@MouseHandl
  00204	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00207	81 b8 94 01 00
	00 00 00 00 00	 cmp	 DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00211	75 07		 jne	 SHORT $LN2@MouseHandl

; 69   : 		dbShowMouse();

  00213	e8 00 00 00 00	 call	 ?dbShowMouse@@YAXXZ	; dbShowMouse

; 70   : 	else

  00218	eb 05		 jmp	 SHORT $LN1@MouseHandl
$LN2@MouseHandl:

; 71   : 		dbHideMouse();

  0021a	e8 00 00 00 00	 call	 ?dbHideMouse@@YAXXZ	; dbHideMouse
$LN1@MouseHandl:

; 72   : 
; 73   : 	this->MousePosX[0]=dbMouseX();

  0021f	e8 00 00 00 00	 call	 ?dbMouseX@@YAHXZ	; dbMouseX
  00224	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00227	89 81 a8 01 00
	00		 mov	 DWORD PTR [ecx+424], eax

; 74   : 	this->MousePosY[0]=dbMouseY();

  0022d	e8 00 00 00 00	 call	 ?dbMouseY@@YAHXZ	; dbMouseY
  00232	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00235	89 81 d0 01 00
	00		 mov	 DWORD PTR [ecx+464], eax

; 75   : 	this->MousePosZ[0]=dbMouseZ();

  0023b	e8 00 00 00 00	 call	 ?dbMouseZ@@YAHXZ	; dbMouseZ
  00240	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00243	89 81 f8 01 00
	00		 mov	 DWORD PTR [ecx+504], eax

; 76   : 
; 77   : 	return;
; 78   : }

  00249	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0024c	5f		 pop	 edi
  0024d	5e		 pop	 esi
  0024e	5b		 pop	 ebx
  0024f	8b e5		 mov	 esp, ebp
  00251	5d		 pop	 ebp
  00252	c2 10 00	 ret	 16			; 00000010H
??0MouseHandler@@QAE@_NPADPAVWindow@@M@Z ENDP		; MouseHandler::MouseHandler
_TEXT	ENDS
PUBLIC	??_GWindow@@QAEPAXI@Z				; Window::`scalar deleting destructor'
PUBLIC	??1MouseHandler@@QAE@XZ				; MouseHandler::~MouseHandler
EXTRN	?dbDeleteImage@@YAXH@Z:PROC			; dbDeleteImage
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??1MouseHandler@@QAE@XZ
_TEXT	SEGMENT
tv71 = -84						; size = 4
$T94164 = -80						; size = 4
$T94165 = -76						; size = 4
$T94166 = -72						; size = 4
_this$ = -4						; size = 4
??1MouseHandler@@QAE@XZ PROC				; MouseHandler::~MouseHandler, COMDAT
; _this$ = ecx

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 	delete this->CursorName;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  00015	89 4d b0	 mov	 DWORD PTR $T94164[ebp], ecx
  00018	8b 55 b0	 mov	 edx, DWORD PTR $T94164[ebp]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00021	83 c4 04	 add	 esp, 4

; 82   : 	delete this->CurrentWindow;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 88 20 02 00
	00		 mov	 ecx, DWORD PTR [eax+544]
  0002d	89 4d b8	 mov	 DWORD PTR $T94166[ebp], ecx
  00030	8b 55 b8	 mov	 edx, DWORD PTR $T94166[ebp]
  00033	89 55 b4	 mov	 DWORD PTR $T94165[ebp], edx
  00036	83 7d b4 00	 cmp	 DWORD PTR $T94165[ebp], 0
  0003a	74 0f		 je	 SHORT $LN3@MouseHandl@2
  0003c	6a 01		 push	 1
  0003e	8b 4d b4	 mov	 ecx, DWORD PTR $T94165[ebp]
  00041	e8 00 00 00 00	 call	 ??_GWindow@@QAEPAXI@Z
  00046	89 45 ac	 mov	 DWORD PTR tv71[ebp], eax
  00049	eb 07		 jmp	 SHORT $LN4@MouseHandl@2
$LN3@MouseHandl@2:
  0004b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN4@MouseHandl@2:

; 83   : 	dbDeleteImage(this->CursorImage);

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?dbDeleteImage@@YAXH@Z	; dbDeleteImage
  00061	83 c4 04	 add	 esp, 4

; 84   : 
; 85   : 	return;
; 86   : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
??1MouseHandler@@QAE@XZ ENDP				; MouseHandler::~MouseHandler
_TEXT	ENDS
EXTRN	??1Window@@QAE@XZ:PROC				; Window::~Window
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GWindow@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GWindow@@QAEPAXI@Z PROC				; Window::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1Window@@QAE@XZ	; Window::~Window
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GWindow@@QAEPAXI@Z ENDP				; Window::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Button3Click@MouseHandler@@QAE_NXZ		; MouseHandler::Button3Click
; Function compile flags: /Odtp /ZI
;	COMDAT ?Button3Click@MouseHandler@@QAE_NXZ
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
?Button3Click@MouseHandler@@QAE_NXZ PROC		; MouseHandler::Button3Click, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   : 	return (!this->MouseButton3[0]&&this->MouseButton3[1]);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 48 66	 movzx	 ecx, BYTE PTR [eax+102]
  00013	85 c9		 test	 ecx, ecx
  00015	75 14		 jne	 SHORT $LN3@Button3Cli
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	0f b6 42 67	 movzx	 eax, BYTE PTR [edx+103]
  0001e	85 c0		 test	 eax, eax
  00020	74 09		 je	 SHORT $LN3@Button3Cli
  00022	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  00029	eb 07		 jmp	 SHORT $LN4@Button3Cli
$LN3@Button3Cli:
  0002b	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN4@Button3Cli:
  00032	8a 45 b8	 mov	 al, BYTE PTR tv72[ebp]

; 90   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Button3Click@MouseHandler@@QAE_NXZ ENDP		; MouseHandler::Button3Click
_TEXT	ENDS
PUBLIC	?Button3DoubleClick@MouseHandler@@QAE_NH@Z	; MouseHandler::Button3DoubleClick
; Function compile flags: /Odtp /ZI
;	COMDAT ?Button3DoubleClick@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_index2$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_MaximumLag$ = 8					; size = 4
?Button3DoubleClick@MouseHandler@@QAE_NH@Z PROC		; MouseHandler::Button3DoubleClick, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 93   : 	if(MaximumLag>96)

  0000c	83 7d 08 60	 cmp	 DWORD PTR _MaximumLag$[ebp], 96 ; 00000060H
  00010	7e 07		 jle	 SHORT $LN10@Button3Dou

; 94   : 		return false;

  00012	32 c0		 xor	 al, al
  00014	e9 9f 00 00 00	 jmp	 $LN11@Button3Dou
$LN10@Button3Dou:

; 95   : 
; 96   : 	int index=1;

  00019	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _index$[ebp], 1

; 97   : 	int index2;
; 98   : 
; 99   : 	if(this->MouseButton3[0]&&!this->MouseButton3[1])

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	0f b6 48 66	 movzx	 ecx, BYTE PTR [eax+102]
  00027	85 c9		 test	 ecx, ecx
  00029	74 0f		 je	 SHORT $LN9@Button3Dou
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	0f b6 48 67	 movzx	 ecx, BYTE PTR [eax+103]
  00032	85 c9		 test	 ecx, ecx
  00034	75 04		 jne	 SHORT $LN9@Button3Dou

; 100  : 		return false;

  00036	32 c0		 xor	 al, al
  00038	eb 7e		 jmp	 SHORT $LN11@Button3Dou
$LN9@Button3Dou:

; 101  : 
; 102  : 	for(index2=index-1;this->MouseButton3[index]&&index-index2<=MaximumLag;index++);

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0003d	83 e8 01	 sub	 eax, 1
  00040	89 45 f4	 mov	 DWORD PTR _index2$[ebp], eax
  00043	eb 09		 jmp	 SHORT $LN8@Button3Dou
$LN7@Button3Dou:
  00045	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00048	83 c0 01	 add	 eax, 1
  0004b	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax
$LN8@Button3Dou:
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	03 45 f8	 add	 eax, DWORD PTR _index$[ebp]
  00054	0f b6 48 66	 movzx	 ecx, BYTE PTR [eax+102]
  00058	85 c9		 test	 ecx, ecx
  0005a	74 0d		 je	 SHORT $LN6@Button3Dou
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0005f	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  00062	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  00065	7f 02		 jg	 SHORT $LN6@Button3Dou
  00067	eb dc		 jmp	 SHORT $LN7@Button3Dou
$LN6@Button3Dou:

; 103  : 
; 104  : 	if(index-index2>MaximumLag)

  00069	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0006c	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  0006f	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  00072	7e 04		 jle	 SHORT $LN5@Button3Dou

; 105  : 		return false;

  00074	32 c0		 xor	 al, al
  00076	eb 40		 jmp	 SHORT $LN11@Button3Dou
$LN5@Button3Dou:

; 106  : 
; 107  : 	for(index2=index-1;!this->MouseButton3[index]&&index-index2<=MaximumLag;index++);

  00078	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0007b	83 e8 01	 sub	 eax, 1
  0007e	89 45 f4	 mov	 DWORD PTR _index2$[ebp], eax
  00081	eb 09		 jmp	 SHORT $LN4@Button3Dou
$LN3@Button3Dou:
  00083	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00086	83 c0 01	 add	 eax, 1
  00089	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax
$LN4@Button3Dou:
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	03 45 f8	 add	 eax, DWORD PTR _index$[ebp]
  00092	0f b6 48 66	 movzx	 ecx, BYTE PTR [eax+102]
  00096	85 c9		 test	 ecx, ecx
  00098	75 0d		 jne	 SHORT $LN2@Button3Dou
  0009a	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0009d	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  000a0	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  000a3	7f 02		 jg	 SHORT $LN2@Button3Dou
  000a5	eb dc		 jmp	 SHORT $LN3@Button3Dou
$LN2@Button3Dou:

; 108  : 
; 109  : 	if(index-index2>MaximumLag)

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  000aa	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  000ad	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  000b0	7e 04		 jle	 SHORT $LN1@Button3Dou

; 110  : 		return false;

  000b2	32 c0		 xor	 al, al
  000b4	eb 02		 jmp	 SHORT $LN11@Button3Dou
$LN1@Button3Dou:

; 111  : 
; 112  : 	return true;

  000b6	b0 01		 mov	 al, 1
$LN11@Button3Dou:

; 113  : }

  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 04 00	 ret	 4
?Button3DoubleClick@MouseHandler@@QAE_NH@Z ENDP		; MouseHandler::Button3DoubleClick
_TEXT	ENDS
PUBLIC	?Button3HoldFor@MouseHandler@@QAE_NH@Z		; MouseHandler::Button3HoldFor
; Function compile flags: /Odtp /ZI
;	COMDAT ?Button3HoldFor@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_i$90868 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Button3HoldFor@MouseHandler@@QAE_NH@Z PROC		; MouseHandler::Button3HoldFor, COMDAT
; _this$ = ecx

; 115  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 116  : 	if(length>100)

  0000c	83 7d 08 64	 cmp	 DWORD PTR _length$[ebp], 100 ; 00000064H
  00010	7e 07		 jle	 SHORT $LN5@Button3Hol

; 117  : 		length=100;

  00012	c7 45 08 64 00
	00 00		 mov	 DWORD PTR _length$[ebp], 100 ; 00000064H
$LN5@Button3Hol:

; 118  : 
; 119  : 	for(int i=0;this->MouseButton3[i];i++)

  00019	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$90868[ebp], 0
  00020	eb 09		 jmp	 SHORT $LN4@Button3Hol
$LN3@Button3Hol:
  00022	8b 45 f8	 mov	 eax, DWORD PTR _i$90868[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 f8	 mov	 DWORD PTR _i$90868[ebp], eax
$LN4@Button3Hol:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	03 45 f8	 add	 eax, DWORD PTR _i$90868[ebp]
  00031	0f b6 48 66	 movzx	 ecx, BYTE PTR [eax+102]
  00035	85 c9		 test	 ecx, ecx
  00037	74 11		 je	 SHORT $LN2@Button3Hol

; 120  : 		if(i==length-1)

  00039	8b 45 08	 mov	 eax, DWORD PTR _length$[ebp]
  0003c	83 e8 01	 sub	 eax, 1
  0003f	39 45 f8	 cmp	 DWORD PTR _i$90868[ebp], eax
  00042	75 04		 jne	 SHORT $LN1@Button3Hol

; 121  : 			return true;

  00044	b0 01		 mov	 al, 1
  00046	eb 04		 jmp	 SHORT $LN6@Button3Hol
$LN1@Button3Hol:

; 122  : 
; 123  : 	return false;

  00048	eb d8		 jmp	 SHORT $LN3@Button3Hol
$LN2@Button3Hol:
  0004a	32 c0		 xor	 al, al
$LN6@Button3Hol:

; 124  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?Button3HoldFor@MouseHandler@@QAE_NH@Z ENDP		; MouseHandler::Button3HoldFor
_TEXT	ENDS
PUBLIC	?Button4Click@MouseHandler@@QAE_NXZ		; MouseHandler::Button4Click
; Function compile flags: /Odtp /ZI
;	COMDAT ?Button4Click@MouseHandler@@QAE_NXZ
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
?Button4Click@MouseHandler@@QAE_NXZ PROC		; MouseHandler::Button4Click, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 127  : 	return (!this->MouseButton4[0]&&this->MouseButton4[1]);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 88 ca 00
	00 00		 movzx	 ecx, BYTE PTR [eax+202]
  00016	85 c9		 test	 ecx, ecx
  00018	75 17		 jne	 SHORT $LN3@Button4Cli
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	0f b6 82 cb 00
	00 00		 movzx	 eax, BYTE PTR [edx+203]
  00024	85 c0		 test	 eax, eax
  00026	74 09		 je	 SHORT $LN3@Button4Cli
  00028	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  0002f	eb 07		 jmp	 SHORT $LN4@Button4Cli
$LN3@Button4Cli:
  00031	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN4@Button4Cli:
  00038	8a 45 b8	 mov	 al, BYTE PTR tv72[ebp]

; 128  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?Button4Click@MouseHandler@@QAE_NXZ ENDP		; MouseHandler::Button4Click
_TEXT	ENDS
PUBLIC	?Button4DoubleClick@MouseHandler@@QAE_NH@Z	; MouseHandler::Button4DoubleClick
; Function compile flags: /Odtp /ZI
;	COMDAT ?Button4DoubleClick@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_index2$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_MaximumLag$ = 8					; size = 4
?Button4DoubleClick@MouseHandler@@QAE_NH@Z PROC		; MouseHandler::Button4DoubleClick, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 131  : 	if(MaximumLag>96)

  0000c	83 7d 08 60	 cmp	 DWORD PTR _MaximumLag$[ebp], 96 ; 00000060H
  00010	7e 07		 jle	 SHORT $LN10@Button4Dou

; 132  : 		return false;

  00012	32 c0		 xor	 al, al
  00014	e9 ae 00 00 00	 jmp	 $LN11@Button4Dou
$LN10@Button4Dou:

; 133  : 
; 134  : 	int index=1;

  00019	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _index$[ebp], 1

; 135  : 	int index2;
; 136  : 
; 137  : 	if(this->MouseButton4[0]&&!this->MouseButton4[1])

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	0f b6 88 ca 00
	00 00		 movzx	 ecx, BYTE PTR [eax+202]
  0002a	85 c9		 test	 ecx, ecx
  0002c	74 15		 je	 SHORT $LN9@Button4Dou
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	0f b6 88 cb 00
	00 00		 movzx	 ecx, BYTE PTR [eax+203]
  00038	85 c9		 test	 ecx, ecx
  0003a	75 07		 jne	 SHORT $LN9@Button4Dou

; 138  : 		return false;

  0003c	32 c0		 xor	 al, al
  0003e	e9 84 00 00 00	 jmp	 $LN11@Button4Dou
$LN9@Button4Dou:

; 139  : 
; 140  : 	for(index2=index-1;this->MouseButton4[index]&&index-index2<=MaximumLag;index++);

  00043	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00046	83 e8 01	 sub	 eax, 1
  00049	89 45 f4	 mov	 DWORD PTR _index2$[ebp], eax
  0004c	eb 09		 jmp	 SHORT $LN8@Button4Dou
$LN7@Button4Dou:
  0004e	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00051	83 c0 01	 add	 eax, 1
  00054	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax
$LN8@Button4Dou:
  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	03 45 f8	 add	 eax, DWORD PTR _index$[ebp]
  0005d	0f b6 88 ca 00
	00 00		 movzx	 ecx, BYTE PTR [eax+202]
  00064	85 c9		 test	 ecx, ecx
  00066	74 0d		 je	 SHORT $LN6@Button4Dou
  00068	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0006b	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  0006e	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  00071	7f 02		 jg	 SHORT $LN6@Button4Dou
  00073	eb d9		 jmp	 SHORT $LN7@Button4Dou
$LN6@Button4Dou:

; 141  : 
; 142  : 	if(index-index2>MaximumLag)

  00075	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00078	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  0007b	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  0007e	7e 04		 jle	 SHORT $LN5@Button4Dou

; 143  : 		return false;

  00080	32 c0		 xor	 al, al
  00082	eb 43		 jmp	 SHORT $LN11@Button4Dou
$LN5@Button4Dou:

; 144  : 
; 145  : 	for(index2=index-1;!this->MouseButton4[index]&&index-index2<=MaximumLag;index++);

  00084	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00087	83 e8 01	 sub	 eax, 1
  0008a	89 45 f4	 mov	 DWORD PTR _index2$[ebp], eax
  0008d	eb 09		 jmp	 SHORT $LN4@Button4Dou
$LN3@Button4Dou:
  0008f	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00092	83 c0 01	 add	 eax, 1
  00095	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax
$LN4@Button4Dou:
  00098	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	03 45 f8	 add	 eax, DWORD PTR _index$[ebp]
  0009e	0f b6 88 ca 00
	00 00		 movzx	 ecx, BYTE PTR [eax+202]
  000a5	85 c9		 test	 ecx, ecx
  000a7	75 0d		 jne	 SHORT $LN2@Button4Dou
  000a9	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  000ac	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  000af	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  000b2	7f 02		 jg	 SHORT $LN2@Button4Dou
  000b4	eb d9		 jmp	 SHORT $LN3@Button4Dou
$LN2@Button4Dou:

; 146  : 
; 147  : 	if(index-index2>MaximumLag)

  000b6	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  000b9	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  000bc	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  000bf	7e 04		 jle	 SHORT $LN1@Button4Dou

; 148  : 		return false;

  000c1	32 c0		 xor	 al, al
  000c3	eb 02		 jmp	 SHORT $LN11@Button4Dou
$LN1@Button4Dou:

; 149  : 
; 150  : 	return true;

  000c5	b0 01		 mov	 al, 1
$LN11@Button4Dou:

; 151  : }

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 04 00	 ret	 4
?Button4DoubleClick@MouseHandler@@QAE_NH@Z ENDP		; MouseHandler::Button4DoubleClick
_TEXT	ENDS
PUBLIC	?Button4HoldFor@MouseHandler@@QAE_NH@Z		; MouseHandler::Button4HoldFor
; Function compile flags: /Odtp /ZI
;	COMDAT ?Button4HoldFor@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_i$90897 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Button4HoldFor@MouseHandler@@QAE_NH@Z PROC		; MouseHandler::Button4HoldFor, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 	if(length>100)

  0000c	83 7d 08 64	 cmp	 DWORD PTR _length$[ebp], 100 ; 00000064H
  00010	7e 07		 jle	 SHORT $LN5@Button4Hol

; 155  : 		length=100;

  00012	c7 45 08 64 00
	00 00		 mov	 DWORD PTR _length$[ebp], 100 ; 00000064H
$LN5@Button4Hol:

; 156  : 
; 157  : 	for(int i=0;this->MouseButton4[i];i++)

  00019	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$90897[ebp], 0
  00020	eb 09		 jmp	 SHORT $LN4@Button4Hol
$LN3@Button4Hol:
  00022	8b 45 f8	 mov	 eax, DWORD PTR _i$90897[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 f8	 mov	 DWORD PTR _i$90897[ebp], eax
$LN4@Button4Hol:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	03 45 f8	 add	 eax, DWORD PTR _i$90897[ebp]
  00031	0f b6 88 ca 00
	00 00		 movzx	 ecx, BYTE PTR [eax+202]
  00038	85 c9		 test	 ecx, ecx
  0003a	74 11		 je	 SHORT $LN2@Button4Hol

; 158  : 		if(i==length-1)

  0003c	8b 45 08	 mov	 eax, DWORD PTR _length$[ebp]
  0003f	83 e8 01	 sub	 eax, 1
  00042	39 45 f8	 cmp	 DWORD PTR _i$90897[ebp], eax
  00045	75 04		 jne	 SHORT $LN1@Button4Hol

; 159  : 			return true;

  00047	b0 01		 mov	 al, 1
  00049	eb 04		 jmp	 SHORT $LN6@Button4Hol
$LN1@Button4Hol:

; 160  : 
; 161  : 	return false;

  0004b	eb d5		 jmp	 SHORT $LN3@Button4Hol
$LN2@Button4Hol:
  0004d	32 c0		 xor	 al, al
$LN6@Button4Hol:

; 162  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?Button4HoldFor@MouseHandler@@QAE_NH@Z ENDP		; MouseHandler::Button4HoldFor
_TEXT	ENDS
PUBLIC	?GetMouseBoundToPosition@MouseHandler@@QAE_NXZ	; MouseHandler::GetMouseBoundToPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMouseBoundToPosition@MouseHandler@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseBoundToPosition@MouseHandler@@QAE_NXZ PROC	; MouseHandler::GetMouseBoundToPosition, COMDAT
; _this$ = ecx

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 165  : 	return this->BindMouseToPosition;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 00		 mov	 al, BYTE PTR [eax]

; 166  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetMouseBoundToPosition@MouseHandler@@QAE_NXZ ENDP	; MouseHandler::GetMouseBoundToPosition
_TEXT	ENDS
PUBLIC	?MouseRightClick@MouseHandler@@QAE_NXZ		; MouseHandler::MouseRightClick
PUBLIC	?MouseLeftClick@MouseHandler@@QAE_NXZ		; MouseHandler::MouseLeftClick
PUBLIC	?IsClicked@MouseHandler@@QAE_NH@Z		; MouseHandler::IsClicked
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsClicked@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Button$ = 8						; size = 4
?IsClicked@MouseHandler@@QAE_NH@Z PROC			; MouseHandler::IsClicked, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 169  : 	switch(Button)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Button$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00015	83 e9 01	 sub	 ecx, 1
  00018	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  0001b	83 7d b8 03	 cmp	 DWORD PTR tv64[ebp], 3
  0001f	77 3a		 ja	 SHORT $LN1@IsClicked
  00021	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  00024	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN10@IsClicked[edx*4]
$LN5@IsClicked:

; 170  : 	{
; 171  : 	case 1:
; 172  : 		return this->MouseLeftClick();

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?MouseLeftClick@MouseHandler@@QAE_NXZ ; MouseHandler::MouseLeftClick
  00033	eb 2c		 jmp	 SHORT $LN8@IsClicked

; 173  : 		break;

  00035	eb 28		 jmp	 SHORT $LN6@IsClicked
$LN4@IsClicked:

; 174  : 	case 2:
; 175  : 		return this->MouseRightClick();

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?MouseRightClick@MouseHandler@@QAE_NXZ ; MouseHandler::MouseRightClick
  0003f	eb 20		 jmp	 SHORT $LN8@IsClicked

; 176  : 		break;

  00041	eb 1c		 jmp	 SHORT $LN6@IsClicked
$LN3@IsClicked:

; 177  : 	case 3:
; 178  : 		return this->Button3Click();

  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?Button3Click@MouseHandler@@QAE_NXZ ; MouseHandler::Button3Click
  0004b	eb 14		 jmp	 SHORT $LN8@IsClicked

; 179  : 		break;

  0004d	eb 10		 jmp	 SHORT $LN6@IsClicked
$LN2@IsClicked:

; 180  : 	case 4:
; 181  : 		return this->Button4Click();

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?Button4Click@MouseHandler@@QAE_NXZ ; MouseHandler::Button4Click
  00057	eb 08		 jmp	 SHORT $LN8@IsClicked

; 182  : 		break;

  00059	eb 04		 jmp	 SHORT $LN6@IsClicked
$LN1@IsClicked:

; 183  : 	default:
; 184  : 		return false;

  0005b	32 c0		 xor	 al, al
  0005d	eb 02		 jmp	 SHORT $LN8@IsClicked
$LN6@IsClicked:

; 185  : 		break;
; 186  : 	}
; 187  : 
; 188  : 	return false;

  0005f	32 c0		 xor	 al, al
$LN8@IsClicked:

; 189  : }

  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
  0006a	8b ff		 npad	 2
$LN10@IsClicked:
  0006c	00 00 00 00	 DD	 $LN5@IsClicked
  00070	00 00 00 00	 DD	 $LN4@IsClicked
  00074	00 00 00 00	 DD	 $LN3@IsClicked
  00078	00 00 00 00	 DD	 $LN2@IsClicked
?IsClicked@MouseHandler@@QAE_NH@Z ENDP			; MouseHandler::IsClicked
_TEXT	ENDS
PUBLIC	?MouseRightDoubleClick@MouseHandler@@QAE_NH@Z	; MouseHandler::MouseRightDoubleClick
PUBLIC	?MouseLeftDoubleClick@MouseHandler@@QAE_NH@Z	; MouseHandler::MouseLeftDoubleClick
PUBLIC	?IsDoubleClicked@MouseHandler@@QAE_NHH@Z	; MouseHandler::IsDoubleClicked
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsDoubleClicked@MouseHandler@@QAE_NHH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Button$ = 8						; size = 4
_MaximumLag$ = 12					; size = 4
?IsDoubleClicked@MouseHandler@@QAE_NHH@Z PROC		; MouseHandler::IsDoubleClicked, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 192  : 	switch(Button)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Button$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00015	83 e9 01	 sub	 ecx, 1
  00018	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  0001b	83 7d b8 03	 cmp	 DWORD PTR tv64[ebp], 3
  0001f	77 4a		 ja	 SHORT $LN1@IsDoubleCl
  00021	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  00024	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN10@IsDoubleCl[edx*4]
$LN5@IsDoubleCl:

; 193  : 	{
; 194  : 	case 1:
; 195  : 		return this->MouseLeftDoubleClick(MaximumLag);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR _MaximumLag$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?MouseLeftDoubleClick@MouseHandler@@QAE_NH@Z ; MouseHandler::MouseLeftDoubleClick
  00037	eb 38		 jmp	 SHORT $LN8@IsDoubleCl

; 196  : 		break;

  00039	eb 34		 jmp	 SHORT $LN6@IsDoubleCl
$LN4@IsDoubleCl:

; 197  : 	case 2:
; 198  : 		return this->MouseRightDoubleClick(MaximumLag);

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _MaximumLag$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?MouseRightDoubleClick@MouseHandler@@QAE_NH@Z ; MouseHandler::MouseRightDoubleClick
  00047	eb 28		 jmp	 SHORT $LN8@IsDoubleCl

; 199  : 		break;

  00049	eb 24		 jmp	 SHORT $LN6@IsDoubleCl
$LN3@IsDoubleCl:

; 200  : 	case 3:
; 201  : 		return this->Button3DoubleClick(MaximumLag);

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _MaximumLag$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?Button3DoubleClick@MouseHandler@@QAE_NH@Z ; MouseHandler::Button3DoubleClick
  00057	eb 18		 jmp	 SHORT $LN8@IsDoubleCl

; 202  : 		break;

  00059	eb 14		 jmp	 SHORT $LN6@IsDoubleCl
$LN2@IsDoubleCl:

; 203  : 	case 4:
; 204  : 		return this->Button4DoubleClick(MaximumLag);

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _MaximumLag$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?Button4DoubleClick@MouseHandler@@QAE_NH@Z ; MouseHandler::Button4DoubleClick
  00067	eb 08		 jmp	 SHORT $LN8@IsDoubleCl

; 205  : 		break;

  00069	eb 04		 jmp	 SHORT $LN6@IsDoubleCl
$LN1@IsDoubleCl:

; 206  : 	default:
; 207  : 		return false;

  0006b	32 c0		 xor	 al, al
  0006d	eb 02		 jmp	 SHORT $LN8@IsDoubleCl
$LN6@IsDoubleCl:

; 208  : 		break;
; 209  : 	}
; 210  : 
; 211  : 	return false;

  0006f	32 c0		 xor	 al, al
$LN8@IsDoubleCl:

; 212  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
  0007a	8b ff		 npad	 2
$LN10@IsDoubleCl:
  0007c	00 00 00 00	 DD	 $LN5@IsDoubleCl
  00080	00 00 00 00	 DD	 $LN4@IsDoubleCl
  00084	00 00 00 00	 DD	 $LN3@IsDoubleCl
  00088	00 00 00 00	 DD	 $LN2@IsDoubleCl
?IsDoubleClicked@MouseHandler@@QAE_NHH@Z ENDP		; MouseHandler::IsDoubleClicked
_TEXT	ENDS
PUBLIC	?MouseRightHoldFor@MouseHandler@@QAE_NH@Z	; MouseHandler::MouseRightHoldFor
PUBLIC	?MouseLeftHoldFor@MouseHandler@@QAE_NH@Z	; MouseHandler::MouseLeftHoldFor
PUBLIC	?IsHoldFor@MouseHandler@@QAE_NHH@Z		; MouseHandler::IsHoldFor
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsHoldFor@MouseHandler@@QAE_NHH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Button$ = 8						; size = 4
_Length$ = 12						; size = 4
?IsHoldFor@MouseHandler@@QAE_NHH@Z PROC			; MouseHandler::IsHoldFor, COMDAT
; _this$ = ecx

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 215  : 	switch(Button)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Button$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00015	83 e9 01	 sub	 ecx, 1
  00018	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  0001b	83 7d b8 03	 cmp	 DWORD PTR tv64[ebp], 3
  0001f	77 4a		 ja	 SHORT $LN1@IsHoldFor
  00021	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  00024	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN10@IsHoldFor[edx*4]
$LN5@IsHoldFor:

; 216  : 	{
; 217  : 	case 1:
; 218  : 		return this->MouseLeftHoldFor(Length);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR _Length$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?MouseLeftHoldFor@MouseHandler@@QAE_NH@Z ; MouseHandler::MouseLeftHoldFor
  00037	eb 38		 jmp	 SHORT $LN8@IsHoldFor

; 219  : 		break;

  00039	eb 34		 jmp	 SHORT $LN6@IsHoldFor
$LN4@IsHoldFor:

; 220  : 	case 2:
; 221  : 		return this->MouseRightHoldFor(Length);

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _Length$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?MouseRightHoldFor@MouseHandler@@QAE_NH@Z ; MouseHandler::MouseRightHoldFor
  00047	eb 28		 jmp	 SHORT $LN8@IsHoldFor

; 222  : 		break;

  00049	eb 24		 jmp	 SHORT $LN6@IsHoldFor
$LN3@IsHoldFor:

; 223  : 	case 3:
; 224  : 		return this->Button3HoldFor(Length);

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _Length$[ebp]
  0004e	50		 push	 eax
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?Button3HoldFor@MouseHandler@@QAE_NH@Z ; MouseHandler::Button3HoldFor
  00057	eb 18		 jmp	 SHORT $LN8@IsHoldFor

; 225  : 		break;

  00059	eb 14		 jmp	 SHORT $LN6@IsHoldFor
$LN2@IsHoldFor:

; 226  : 	case 4:
; 227  : 		return this->Button4HoldFor(Length);

  0005b	8b 45 0c	 mov	 eax, DWORD PTR _Length$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?Button4HoldFor@MouseHandler@@QAE_NH@Z ; MouseHandler::Button4HoldFor
  00067	eb 08		 jmp	 SHORT $LN8@IsHoldFor

; 228  : 		break;

  00069	eb 04		 jmp	 SHORT $LN6@IsHoldFor
$LN1@IsHoldFor:

; 229  : 	default:
; 230  : 		return false;

  0006b	32 c0		 xor	 al, al
  0006d	eb 02		 jmp	 SHORT $LN8@IsHoldFor
$LN6@IsHoldFor:

; 231  : 		break;
; 232  : 	}
; 233  : 
; 234  : 	return false;

  0006f	32 c0		 xor	 al, al
$LN8@IsHoldFor:

; 235  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
  0007a	8b ff		 npad	 2
$LN10@IsHoldFor:
  0007c	00 00 00 00	 DD	 $LN5@IsHoldFor
  00080	00 00 00 00	 DD	 $LN4@IsHoldFor
  00084	00 00 00 00	 DD	 $LN3@IsHoldFor
  00088	00 00 00 00	 DD	 $LN2@IsHoldFor
?IsHoldFor@MouseHandler@@QAE_NHH@Z ENDP			; MouseHandler::IsHoldFor
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?MouseLeftClick@MouseHandler@@QAE_NXZ
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
?MouseLeftClick@MouseHandler@@QAE_NXZ PROC		; MouseHandler::MouseLeftClick, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 238  : 	return (!this->LeftClick[0]&&this->LeftClick[1]);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00013	85 c9		 test	 ecx, ecx
  00015	75 14		 jne	 SHORT $LN3@MouseLeftC
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  0001e	85 c0		 test	 eax, eax
  00020	74 09		 je	 SHORT $LN3@MouseLeftC
  00022	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  00029	eb 07		 jmp	 SHORT $LN4@MouseLeftC
$LN3@MouseLeftC:
  0002b	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN4@MouseLeftC:
  00032	8a 45 b8	 mov	 al, BYTE PTR tv72[ebp]

; 239  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?MouseLeftClick@MouseHandler@@QAE_NXZ ENDP		; MouseHandler::MouseLeftClick
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?MouseLeftDoubleClick@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_index2$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_MaximumLag$ = 8					; size = 4
?MouseLeftDoubleClick@MouseHandler@@QAE_NH@Z PROC	; MouseHandler::MouseLeftDoubleClick, COMDAT
; _this$ = ecx

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 242  : 	if(MaximumLag>96)

  0000c	83 7d 08 60	 cmp	 DWORD PTR _MaximumLag$[ebp], 96 ; 00000060H
  00010	7e 07		 jle	 SHORT $LN11@MouseLeftD

; 243  : 		return false;

  00012	32 c0		 xor	 al, al
  00014	e9 9f 00 00 00	 jmp	 $LN12@MouseLeftD
$LN11@MouseLeftD:

; 244  : 
; 245  : 	int index=1;

  00019	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _index$[ebp], 1

; 246  : 	int index2;
; 247  : 
; 248  : 	if(this->LeftClick[0]||!this->LeftClick[1])

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00027	85 c9		 test	 ecx, ecx
  00029	75 0b		 jne	 SHORT $LN9@MouseLeftD
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  00032	85 c9		 test	 ecx, ecx
  00034	75 04		 jne	 SHORT $LN10@MouseLeftD
$LN9@MouseLeftD:

; 249  : 		return false;

  00036	32 c0		 xor	 al, al
  00038	eb 7e		 jmp	 SHORT $LN12@MouseLeftD
$LN10@MouseLeftD:

; 250  : 
; 251  : 	for(index2=index-1;this->LeftClick[index]&&index-index2<=MaximumLag;index++);

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0003d	83 e8 01	 sub	 eax, 1
  00040	89 45 f4	 mov	 DWORD PTR _index2$[ebp], eax
  00043	eb 09		 jmp	 SHORT $LN8@MouseLeftD
$LN7@MouseLeftD:
  00045	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00048	83 c0 01	 add	 eax, 1
  0004b	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax
$LN8@MouseLeftD:
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	03 45 f8	 add	 eax, DWORD PTR _index$[ebp]
  00054	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00058	85 c9		 test	 ecx, ecx
  0005a	74 0d		 je	 SHORT $LN6@MouseLeftD
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0005f	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  00062	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  00065	7f 02		 jg	 SHORT $LN6@MouseLeftD
  00067	eb dc		 jmp	 SHORT $LN7@MouseLeftD
$LN6@MouseLeftD:

; 252  : 
; 253  : 	if(index-index2>MaximumLag)

  00069	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0006c	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  0006f	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  00072	7e 04		 jle	 SHORT $LN5@MouseLeftD

; 254  : 		return false;

  00074	32 c0		 xor	 al, al
  00076	eb 40		 jmp	 SHORT $LN12@MouseLeftD
$LN5@MouseLeftD:

; 255  : 
; 256  : 	for(index2=index-1;!this->LeftClick[index]&&index-index2<=MaximumLag;index++);

  00078	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0007b	83 e8 01	 sub	 eax, 1
  0007e	89 45 f4	 mov	 DWORD PTR _index2$[ebp], eax
  00081	eb 09		 jmp	 SHORT $LN4@MouseLeftD
$LN3@MouseLeftD:
  00083	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00086	83 c0 01	 add	 eax, 1
  00089	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax
$LN4@MouseLeftD:
  0008c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	03 45 f8	 add	 eax, DWORD PTR _index$[ebp]
  00092	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00096	85 c9		 test	 ecx, ecx
  00098	75 0d		 jne	 SHORT $LN2@MouseLeftD
  0009a	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0009d	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  000a0	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  000a3	7f 02		 jg	 SHORT $LN2@MouseLeftD
  000a5	eb dc		 jmp	 SHORT $LN3@MouseLeftD
$LN2@MouseLeftD:

; 257  : 
; 258  : 	if(index-index2>MaximumLag)

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  000aa	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  000ad	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  000b0	7e 04		 jle	 SHORT $LN1@MouseLeftD

; 259  : 		return false;

  000b2	32 c0		 xor	 al, al
  000b4	eb 02		 jmp	 SHORT $LN12@MouseLeftD
$LN1@MouseLeftD:

; 260  : 
; 261  : 	return true;

  000b6	b0 01		 mov	 al, 1
$LN12@MouseLeftD:

; 262  : }

  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 04 00	 ret	 4
?MouseLeftDoubleClick@MouseHandler@@QAE_NH@Z ENDP	; MouseHandler::MouseLeftDoubleClick
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?MouseLeftHoldFor@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_i$90971 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?MouseLeftHoldFor@MouseHandler@@QAE_NH@Z PROC		; MouseHandler::MouseLeftHoldFor, COMDAT
; _this$ = ecx

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 265  : 	if(length>100)

  0000c	83 7d 08 64	 cmp	 DWORD PTR _length$[ebp], 100 ; 00000064H
  00010	7e 07		 jle	 SHORT $LN5@MouseLeftH

; 266  : 		length=100;

  00012	c7 45 08 64 00
	00 00		 mov	 DWORD PTR _length$[ebp], 100 ; 00000064H
$LN5@MouseLeftH:

; 267  : 
; 268  : 	for(int i=0;this->LeftClick[i];i++)

  00019	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$90971[ebp], 0
  00020	eb 09		 jmp	 SHORT $LN4@MouseLeftH
$LN3@MouseLeftH:
  00022	8b 45 f8	 mov	 eax, DWORD PTR _i$90971[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 f8	 mov	 DWORD PTR _i$90971[ebp], eax
$LN4@MouseLeftH:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	03 45 f8	 add	 eax, DWORD PTR _i$90971[ebp]
  00031	0f b6 48 02	 movzx	 ecx, BYTE PTR [eax+2]
  00035	85 c9		 test	 ecx, ecx
  00037	74 11		 je	 SHORT $LN2@MouseLeftH

; 269  : 		if(i==length-1)

  00039	8b 45 08	 mov	 eax, DWORD PTR _length$[ebp]
  0003c	83 e8 01	 sub	 eax, 1
  0003f	39 45 f8	 cmp	 DWORD PTR _i$90971[ebp], eax
  00042	75 04		 jne	 SHORT $LN1@MouseLeftH

; 270  : 			return true;

  00044	b0 01		 mov	 al, 1
  00046	eb 04		 jmp	 SHORT $LN6@MouseLeftH
$LN1@MouseLeftH:

; 271  : 
; 272  : 	return false;

  00048	eb d8		 jmp	 SHORT $LN3@MouseLeftH
$LN2@MouseLeftH:
  0004a	32 c0		 xor	 al, al
$LN6@MouseLeftH:

; 273  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?MouseLeftHoldFor@MouseHandler@@QAE_NH@Z ENDP		; MouseHandler::MouseLeftHoldFor
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?MouseRightClick@MouseHandler@@QAE_NXZ
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
?MouseRightClick@MouseHandler@@QAE_NXZ PROC		; MouseHandler::MouseRightClick, COMDAT
; _this$ = ecx

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 276  : 	return (!this->RightClick[0]&&this->RightClick[1]);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 88 2e 01
	00 00		 movzx	 ecx, BYTE PTR [eax+302]
  00016	85 c9		 test	 ecx, ecx
  00018	75 17		 jne	 SHORT $LN3@MouseRight
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	0f b6 82 2f 01
	00 00		 movzx	 eax, BYTE PTR [edx+303]
  00024	85 c0		 test	 eax, eax
  00026	74 09		 je	 SHORT $LN3@MouseRight
  00028	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  0002f	eb 07		 jmp	 SHORT $LN4@MouseRight
$LN3@MouseRight:
  00031	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN4@MouseRight:
  00038	8a 45 b8	 mov	 al, BYTE PTR tv72[ebp]

; 277  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?MouseRightClick@MouseHandler@@QAE_NXZ ENDP		; MouseHandler::MouseRightClick
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?MouseRightDoubleClick@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_index2$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_MaximumLag$ = 8					; size = 4
?MouseRightDoubleClick@MouseHandler@@QAE_NH@Z PROC	; MouseHandler::MouseRightDoubleClick, COMDAT
; _this$ = ecx

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 280  : 	if(MaximumLag>96)

  0000c	83 7d 08 60	 cmp	 DWORD PTR _MaximumLag$[ebp], 96 ; 00000060H
  00010	7e 07		 jle	 SHORT $LN11@MouseRight@2

; 281  : 		return false;

  00012	32 c0		 xor	 al, al
  00014	e9 ae 00 00 00	 jmp	 $LN12@MouseRight@2
$LN11@MouseRight@2:

; 282  : 
; 283  : 	int index=1;

  00019	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _index$[ebp], 1

; 284  : 	int index2;
; 285  : 
; 286  : 	if(this->RightClick[0]||!this->RightClick[1])

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	0f b6 88 2e 01
	00 00		 movzx	 ecx, BYTE PTR [eax+302]
  0002a	85 c9		 test	 ecx, ecx
  0002c	75 0e		 jne	 SHORT $LN9@MouseRight@2
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	0f b6 88 2f 01
	00 00		 movzx	 ecx, BYTE PTR [eax+303]
  00038	85 c9		 test	 ecx, ecx
  0003a	75 07		 jne	 SHORT $LN10@MouseRight@2
$LN9@MouseRight@2:

; 287  : 		return false;

  0003c	32 c0		 xor	 al, al
  0003e	e9 84 00 00 00	 jmp	 $LN12@MouseRight@2
$LN10@MouseRight@2:

; 288  : 
; 289  : 	for(index2=index-1;this->RightClick[index]&&index-index2<=MaximumLag;index++);

  00043	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00046	83 e8 01	 sub	 eax, 1
  00049	89 45 f4	 mov	 DWORD PTR _index2$[ebp], eax
  0004c	eb 09		 jmp	 SHORT $LN8@MouseRight@2
$LN7@MouseRight@2:
  0004e	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00051	83 c0 01	 add	 eax, 1
  00054	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax
$LN8@MouseRight@2:
  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	03 45 f8	 add	 eax, DWORD PTR _index$[ebp]
  0005d	0f b6 88 2e 01
	00 00		 movzx	 ecx, BYTE PTR [eax+302]
  00064	85 c9		 test	 ecx, ecx
  00066	74 0d		 je	 SHORT $LN6@MouseRight@2
  00068	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  0006b	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  0006e	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  00071	7f 02		 jg	 SHORT $LN6@MouseRight@2
  00073	eb d9		 jmp	 SHORT $LN7@MouseRight@2
$LN6@MouseRight@2:

; 290  : 
; 291  : 	if(index-index2>MaximumLag)

  00075	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00078	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  0007b	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  0007e	7e 04		 jle	 SHORT $LN5@MouseRight@2

; 292  : 		return false;

  00080	32 c0		 xor	 al, al
  00082	eb 43		 jmp	 SHORT $LN12@MouseRight@2
$LN5@MouseRight@2:

; 293  : 
; 294  : 	for(index2=index-1;!this->RightClick[index]&&index-index2<=MaximumLag;index++);

  00084	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00087	83 e8 01	 sub	 eax, 1
  0008a	89 45 f4	 mov	 DWORD PTR _index2$[ebp], eax
  0008d	eb 09		 jmp	 SHORT $LN4@MouseRight@2
$LN3@MouseRight@2:
  0008f	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  00092	83 c0 01	 add	 eax, 1
  00095	89 45 f8	 mov	 DWORD PTR _index$[ebp], eax
$LN4@MouseRight@2:
  00098	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	03 45 f8	 add	 eax, DWORD PTR _index$[ebp]
  0009e	0f b6 88 2e 01
	00 00		 movzx	 ecx, BYTE PTR [eax+302]
  000a5	85 c9		 test	 ecx, ecx
  000a7	75 0d		 jne	 SHORT $LN2@MouseRight@2
  000a9	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  000ac	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  000af	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  000b2	7f 02		 jg	 SHORT $LN2@MouseRight@2
  000b4	eb d9		 jmp	 SHORT $LN3@MouseRight@2
$LN2@MouseRight@2:

; 295  : 
; 296  : 	if(index-index2>MaximumLag)

  000b6	8b 45 f8	 mov	 eax, DWORD PTR _index$[ebp]
  000b9	2b 45 f4	 sub	 eax, DWORD PTR _index2$[ebp]
  000bc	3b 45 08	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  000bf	7e 04		 jle	 SHORT $LN1@MouseRight@2

; 297  : 		return false;

  000c1	32 c0		 xor	 al, al
  000c3	eb 02		 jmp	 SHORT $LN12@MouseRight@2
$LN1@MouseRight@2:

; 298  : 
; 299  : 	return true;

  000c5	b0 01		 mov	 al, 1
$LN12@MouseRight@2:

; 300  : }

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 04 00	 ret	 4
?MouseRightDoubleClick@MouseHandler@@QAE_NH@Z ENDP	; MouseHandler::MouseRightDoubleClick
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?MouseRightHoldFor@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_i$91001 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?MouseRightHoldFor@MouseHandler@@QAE_NH@Z PROC		; MouseHandler::MouseRightHoldFor, COMDAT
; _this$ = ecx

; 302  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 303  : 	if(length>100)

  0000c	83 7d 08 64	 cmp	 DWORD PTR _length$[ebp], 100 ; 00000064H
  00010	7e 07		 jle	 SHORT $LN5@MouseRight@3

; 304  : 		length=100;

  00012	c7 45 08 64 00
	00 00		 mov	 DWORD PTR _length$[ebp], 100 ; 00000064H
$LN5@MouseRight@3:

; 305  : 
; 306  : 	for(int i=0;this->RightClick[i];i++)

  00019	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$91001[ebp], 0
  00020	eb 09		 jmp	 SHORT $LN4@MouseRight@3
$LN3@MouseRight@3:
  00022	8b 45 f8	 mov	 eax, DWORD PTR _i$91001[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 f8	 mov	 DWORD PTR _i$91001[ebp], eax
$LN4@MouseRight@3:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	03 45 f8	 add	 eax, DWORD PTR _i$91001[ebp]
  00031	0f b6 88 2e 01
	00 00		 movzx	 ecx, BYTE PTR [eax+302]
  00038	85 c9		 test	 ecx, ecx
  0003a	74 11		 je	 SHORT $LN2@MouseRight@3

; 307  : 		if(i==length-1)

  0003c	8b 45 08	 mov	 eax, DWORD PTR _length$[ebp]
  0003f	83 e8 01	 sub	 eax, 1
  00042	39 45 f8	 cmp	 DWORD PTR _i$91001[ebp], eax
  00045	75 04		 jne	 SHORT $LN1@MouseRight@3

; 308  : 			return true;

  00047	b0 01		 mov	 al, 1
  00049	eb 04		 jmp	 SHORT $LN6@MouseRight@3
$LN1@MouseRight@3:

; 309  : 
; 310  : 	return false;

  0004b	eb d5		 jmp	 SHORT $LN3@MouseRight@3
$LN2@MouseRight@3:
  0004d	32 c0		 xor	 al, al
$LN6@MouseRight@3:

; 311  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?MouseRightHoldFor@MouseHandler@@QAE_NH@Z ENDP		; MouseHandler::MouseRightHoldFor
_TEXT	ENDS
PUBLIC	?GetCursorName@MouseHandler@@QAEPADXZ		; MouseHandler::GetCursorName
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCursorName@MouseHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorName@MouseHandler@@QAEPADXZ PROC		; MouseHandler::GetCursorName, COMDAT
; _this$ = ecx

; 313  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 314  : 	return this->CursorName;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 94 01 00
	00		 mov	 eax, DWORD PTR [eax+404]

; 315  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetCursorName@MouseHandler@@QAEPADXZ ENDP		; MouseHandler::GetCursorName
_TEXT	ENDS
PUBLIC	??_C@_0BF@KEPEKHJ@Mouse?5Button?54?5Click?$AA@	; `string'
PUBLIC	??_C@_0BF@IKEDGA@Mouse?5Button?53?5Click?$AA@	; `string'
PUBLIC	??_C@_0M@BDGMFCOP@Right?5Click?$AA@		; `string'
PUBLIC	??_C@_0L@OIICMJMF@Left?5Click?$AA@		; `string'
PUBLIC	?GetFirstClick$@MouseHandler@@QAEPADXZ		; MouseHandler::GetFirstClick$
;	COMDAT ??_C@_0BF@KEPEKHJ@Mouse?5Button?54?5Click?$AA@
CONST	SEGMENT
??_C@_0BF@KEPEKHJ@Mouse?5Button?54?5Click?$AA@ DB 'Mouse Button 4 Click', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IKEDGA@Mouse?5Button?53?5Click?$AA@
CONST	SEGMENT
??_C@_0BF@IKEDGA@Mouse?5Button?53?5Click?$AA@ DB 'Mouse Button 3 Click', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BDGMFCOP@Right?5Click?$AA@
CONST	SEGMENT
??_C@_0M@BDGMFCOP@Right?5Click?$AA@ DB 'Right Click', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OIICMJMF@Left?5Click?$AA@
CONST	SEGMENT
??_C@_0L@OIICMJMF@Left?5Click?$AA@ DB 'Left Click', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?GetFirstClick$@MouseHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstClick$@MouseHandler@@QAEPADXZ PROC		; MouseHandler::GetFirstClick$, COMDAT
; _this$ = ecx

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 318  : 	if(this->MouseLeftClick())

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?MouseLeftClick@MouseHandler@@QAE_NXZ ; MouseHandler::MouseLeftClick
  00014	0f b6 c0	 movzx	 eax, al
  00017	85 c0		 test	 eax, eax
  00019	74 09		 je	 SHORT $LN8@GetFirstCl

; 319  : 		return "Left Click";

  0001b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@OIICMJMF@Left?5Click?$AA@
  00020	eb 4f		 jmp	 SHORT $LN9@GetFirstCl
  00022	eb 4d		 jmp	 SHORT $LN9@GetFirstCl
$LN8@GetFirstCl:

; 320  : 	else if(this->MouseRightClick())

  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?MouseRightClick@MouseHandler@@QAE_NXZ ; MouseHandler::MouseRightClick
  0002c	0f b6 c0	 movzx	 eax, al
  0002f	85 c0		 test	 eax, eax
  00031	74 09		 je	 SHORT $LN6@GetFirstCl

; 321  : 		return "Right Click";

  00033	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@BDGMFCOP@Right?5Click?$AA@
  00038	eb 37		 jmp	 SHORT $LN9@GetFirstCl
  0003a	eb 35		 jmp	 SHORT $LN9@GetFirstCl
$LN6@GetFirstCl:

; 322  : 	else if(this->Button3Click())

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?Button3Click@MouseHandler@@QAE_NXZ ; MouseHandler::Button3Click
  00044	0f b6 c0	 movzx	 eax, al
  00047	85 c0		 test	 eax, eax
  00049	74 09		 je	 SHORT $LN4@GetFirstCl

; 323  : 		return "Mouse Button 3 Click";

  0004b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@IKEDGA@Mouse?5Button?53?5Click?$AA@
  00050	eb 1f		 jmp	 SHORT $LN9@GetFirstCl
  00052	eb 1d		 jmp	 SHORT $LN9@GetFirstCl
$LN4@GetFirstCl:

; 324  : 	else if(this->Button4Click())

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?Button4Click@MouseHandler@@QAE_NXZ ; MouseHandler::Button4Click
  0005c	0f b6 c0	 movzx	 eax, al
  0005f	85 c0		 test	 eax, eax
  00061	74 09		 je	 SHORT $LN2@GetFirstCl

; 325  : 		return "Mouse Button 4 Click";

  00063	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@KEPEKHJ@Mouse?5Button?54?5Click?$AA@
  00068	eb 07		 jmp	 SHORT $LN9@GetFirstCl

; 326  : 	else

  0006a	eb 05		 jmp	 SHORT $LN9@GetFirstCl
$LN2@GetFirstCl:

; 327  : 		return "";

  0006c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN9@GetFirstCl:

; 328  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
?GetFirstClick$@MouseHandler@@QAEPADXZ ENDP		; MouseHandler::GetFirstClick$
_TEXT	ENDS
PUBLIC	?GetMultiplier@MouseHandler@@QAEMXZ		; MouseHandler::GetMultiplier
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMultiplier@MouseHandler@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMultiplier@MouseHandler@@QAEMXZ PROC		; MouseHandler::GetMultiplier, COMDAT
; _this$ = ecx

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 331  : 	return this->Multiplier;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	d9 80 98 01 00
	00		 fld	 DWORD PTR [eax+408]

; 332  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetMultiplier@MouseHandler@@QAEMXZ ENDP		; MouseHandler::GetMultiplier
_TEXT	ENDS
PUBLIC	?GetCursorHeight@MouseHandler@@QAEHXZ		; MouseHandler::GetCursorHeight
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCursorHeight@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorHeight@MouseHandler@@QAEHXZ PROC		; MouseHandler::GetCursorHeight, COMDAT
; _this$ = ecx

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 	return this->CursorHeight;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 9c 01 00
	00		 mov	 eax, DWORD PTR [eax+412]

; 336  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetCursorHeight@MouseHandler@@QAEHXZ ENDP		; MouseHandler::GetCursorHeight
_TEXT	ENDS
PUBLIC	?GetCursorImage@MouseHandler@@QAEHXZ		; MouseHandler::GetCursorImage
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCursorImage@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorImage@MouseHandler@@QAEHXZ PROC		; MouseHandler::GetCursorImage, COMDAT
; _this$ = ecx

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 339  : 	return this->CursorImage;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 a0 01 00
	00		 mov	 eax, DWORD PTR [eax+416]

; 340  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetCursorImage@MouseHandler@@QAEHXZ ENDP		; MouseHandler::GetCursorImage
_TEXT	ENDS
PUBLIC	?GetCursorWidth@MouseHandler@@QAEHXZ		; MouseHandler::GetCursorWidth
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCursorWidth@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorWidth@MouseHandler@@QAEHXZ PROC		; MouseHandler::GetCursorWidth, COMDAT
; _this$ = ecx

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 343  : 	return this->CursorWidth;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 a4 01 00
	00		 mov	 eax, DWORD PTR [eax+420]

; 344  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetCursorWidth@MouseHandler@@QAEHXZ ENDP		; MouseHandler::GetCursorWidth
_TEXT	ENDS
PUBLIC	?GetFirstClick@MouseHandler@@QAEHXZ		; MouseHandler::GetFirstClick
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetFirstClick@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstClick@MouseHandler@@QAEHXZ PROC		; MouseHandler::GetFirstClick, COMDAT
; _this$ = ecx

; 346  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 347  : 	if(this->MouseLeftClick())

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?MouseLeftClick@MouseHandler@@QAE_NXZ ; MouseHandler::MouseLeftClick
  00014	0f b6 c0	 movzx	 eax, al
  00017	85 c0		 test	 eax, eax
  00019	74 09		 je	 SHORT $LN8@GetFirstCl@2

; 348  : 		return 1;

  0001b	b8 01 00 00 00	 mov	 eax, 1
  00020	eb 4d		 jmp	 SHORT $LN9@GetFirstCl@2
  00022	eb 4b		 jmp	 SHORT $LN9@GetFirstCl@2
$LN8@GetFirstCl@2:

; 349  : 	else if(this->MouseRightClick())

  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?MouseRightClick@MouseHandler@@QAE_NXZ ; MouseHandler::MouseRightClick
  0002c	0f b6 c0	 movzx	 eax, al
  0002f	85 c0		 test	 eax, eax
  00031	74 09		 je	 SHORT $LN6@GetFirstCl@2

; 350  : 		return 2;

  00033	b8 02 00 00 00	 mov	 eax, 2
  00038	eb 35		 jmp	 SHORT $LN9@GetFirstCl@2
  0003a	eb 33		 jmp	 SHORT $LN9@GetFirstCl@2
$LN6@GetFirstCl@2:

; 351  : 	else if(this->Button3Click())

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?Button3Click@MouseHandler@@QAE_NXZ ; MouseHandler::Button3Click
  00044	0f b6 c0	 movzx	 eax, al
  00047	85 c0		 test	 eax, eax
  00049	74 09		 je	 SHORT $LN4@GetFirstCl@2

; 352  : 		return 3;

  0004b	b8 03 00 00 00	 mov	 eax, 3
  00050	eb 1d		 jmp	 SHORT $LN9@GetFirstCl@2
  00052	eb 1b		 jmp	 SHORT $LN9@GetFirstCl@2
$LN4@GetFirstCl@2:

; 353  : 	else if(this->Button4Click())

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?Button4Click@MouseHandler@@QAE_NXZ ; MouseHandler::Button4Click
  0005c	0f b6 c0	 movzx	 eax, al
  0005f	85 c0		 test	 eax, eax
  00061	74 09		 je	 SHORT $LN2@GetFirstCl@2

; 354  : 		return 4;

  00063	b8 04 00 00 00	 mov	 eax, 4
  00068	eb 05		 jmp	 SHORT $LN9@GetFirstCl@2

; 355  : 	else

  0006a	eb 03		 jmp	 SHORT $LN9@GetFirstCl@2
$LN2@GetFirstCl@2:

; 356  : 		return -1;

  0006c	83 c8 ff	 or	 eax, -1
$LN9@GetFirstCl@2:

; 357  : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?GetFirstClick@MouseHandler@@QAEHXZ ENDP		; MouseHandler::GetFirstClick
_TEXT	ENDS
PUBLIC	?MouseXPos@MouseHandler@@QAEHXZ			; MouseHandler::MouseXPos
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseXPos@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseXPos@MouseHandler@@QAEHXZ PROC			; MouseHandler::MouseXPos, COMDAT
; _this$ = ecx

; 359  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 360  : 	return this->MousePosX[0];

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 a8 01 00
	00		 mov	 eax, DWORD PTR [eax+424]

; 361  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?MouseXPos@MouseHandler@@QAEHXZ ENDP			; MouseHandler::MouseXPos
_TEXT	ENDS
PUBLIC	?MouseYPos@MouseHandler@@QAEHXZ			; MouseHandler::MouseYPos
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseYPos@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseYPos@MouseHandler@@QAEHXZ PROC			; MouseHandler::MouseYPos, COMDAT
; _this$ = ecx

; 363  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 364  : 	return this->MousePosY[0];

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 d0 01 00
	00		 mov	 eax, DWORD PTR [eax+464]

; 365  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?MouseYPos@MouseHandler@@QAEHXZ ENDP			; MouseHandler::MouseYPos
_TEXT	ENDS
PUBLIC	?MouseZPos@MouseHandler@@QAEHXZ			; MouseHandler::MouseZPos
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseZPos@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseZPos@MouseHandler@@QAEHXZ PROC			; MouseHandler::MouseZPos, COMDAT
; _this$ = ecx

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 368  : 	return this->MousePosZ[0];

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 f8 01 00
	00		 mov	 eax, DWORD PTR [eax+504]

; 369  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?MouseZPos@MouseHandler@@QAEHXZ ENDP			; MouseHandler::MouseZPos
_TEXT	ENDS
PUBLIC	?SetMouseView@MouseHandler@@QAEX_N@Z		; MouseHandler::SetMouseView
PUBLIC	?SetCursorPosition@MouseHandler@@QAEXHHH@Z	; MouseHandler::SetCursorPosition
PUBLIC	?ApplyToApp@MouseHandler@@QAEXXZ		; MouseHandler::ApplyToApp
; Function compile flags: /Odtp /ZI
;	COMDAT ?ApplyToApp@MouseHandler@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ApplyToApp@MouseHandler@@QAEXXZ PROC			; MouseHandler::ApplyToApp, COMDAT
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 372  : 	this->SetCursorPosition(this->MousePosX[0],this->MousePosY[0],this->MousePosX[0]);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 a8 01 00
	00		 mov	 ecx, DWORD PTR [eax+424]
  00015	51		 push	 ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  0001f	50		 push	 eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 91 a8 01 00
	00		 mov	 edx, DWORD PTR [ecx+424]
  00029	52		 push	 edx
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?SetCursorPosition@MouseHandler@@QAEXHHH@Z ; MouseHandler::SetCursorPosition

; 373  : 	this->SetMouseView(this->ShowMouse);

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00039	51		 push	 ecx
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?SetMouseView@MouseHandler@@QAEX_N@Z ; MouseHandler::SetMouseView

; 374  : 
; 375  : 	return;
; 376  : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?ApplyToApp@MouseHandler@@QAEXXZ ENDP			; MouseHandler::ApplyToApp
_TEXT	ENDS
PUBLIC	?MoveMouse@MouseHandler@@QAEXHHH@Z		; MouseHandler::MoveMouse
EXTRN	?dbPositionMouse@@YAXHH@Z:PROC			; dbPositionMouse
; Function compile flags: /Odtp /ZI
;	COMDAT ?MoveMouse@MouseHandler@@QAEXHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
?MoveMouse@MouseHandler@@QAEXHHH@Z PROC			; MouseHandler::MoveMouse, COMDAT
; _this$ = ecx

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 379  : 	if(this->CursorName!="")

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	81 b8 94 01 00
	00 00 00 00 00	 cmp	 DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00019	74 65		 je	 SHORT $LN3@MoveMouse

; 380  : 	{
; 381  : 		this->MousePosX[0]+=X;

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 88 a8 01 00
	00		 mov	 ecx, DWORD PTR [eax+424]
  00024	03 4d 08	 add	 ecx, DWORD PTR _X$[ebp]
  00027	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	89 8a a8 01 00
	00		 mov	 DWORD PTR [edx+424], ecx

; 382  : 		this->MousePosY[0]+=Y;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00039	03 4d 0c	 add	 ecx, DWORD PTR _Y$[ebp]
  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	89 8a d0 01 00
	00		 mov	 DWORD PTR [edx+464], ecx

; 383  : 		this->MousePosZ[0]+=Z;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 88 f8 01 00
	00		 mov	 ecx, DWORD PTR [eax+504]
  0004e	03 4d 10	 add	 ecx, DWORD PTR _Z$[ebp]
  00051	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00054	89 8a f8 01 00
	00		 mov	 DWORD PTR [edx+504], ecx

; 384  : 
; 385  : 		if(this->BindMouseToPosition)

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00060	85 c9		 test	 ecx, ecx
  00062	74 1c		 je	 SHORT $LN3@MoveMouse

; 386  : 			dbPositionMouse(this->MousePosX[0],this->MousePosY[0]);

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  0006d	51		 push	 ecx
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00071	8b 82 a8 01 00
	00		 mov	 eax, DWORD PTR [edx+424]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?dbPositionMouse@@YAXHH@Z ; dbPositionMouse
  0007d	83 c4 08	 add	 esp, 8
$LN3@MoveMouse:

; 387  : 	}
; 388  : 
; 389  : 	return;
; 390  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 0c 00	 ret	 12			; 0000000cH
?MoveMouse@MouseHandler@@QAEXHHH@Z ENDP			; MouseHandler::MoveMouse
_TEXT	ENDS
PUBLIC	?SetCursorFile@MouseHandler@@QAEXPAD@Z		; MouseHandler::SetCursorFile
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetCursorFile@MouseHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?SetCursorFile@MouseHandler@@QAEXPAD@Z PROC		; MouseHandler::SetCursorFile, COMDAT
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 393  : 	if(dbFileExist(name)==1)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _name$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?dbFileExist@@YAHPAD@Z	; dbFileExist
  00015	83 c4 04	 add	 esp, 4
  00018	83 f8 01	 cmp	 eax, 1
  0001b	75 7e		 jne	 SHORT $LN3@SetCursorF

; 394  : 	{
; 395  : 		this->CursorName=name;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  00023	89 88 94 01 00
	00		 mov	 DWORD PTR [eax+404], ecx

; 396  : 
; 397  : 		dbDeleteImage(this->CursorImage);

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?dbDeleteImage@@YAXH@Z	; dbDeleteImage
  00038	83 c4 04	 add	 esp, 4

; 398  : 		dbLoadImage(this->CursorName,this->CursorImage);

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  00044	51		 push	 ecx
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 82 94 01 00
	00		 mov	 eax, DWORD PTR [edx+404]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?dbLoadImage@@YAXPADH@Z	; dbLoadImage
  00054	83 c4 08	 add	 esp, 8

; 399  : 		dbHideMouse();

  00057	e8 00 00 00 00	 call	 ?dbHideMouse@@YAXXZ	; dbHideMouse

; 400  : 
; 401  : 		this->CursorHeight=dbGetImageHeight(this->CursorImage);

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?dbGetImageHeight@@YAHH@Z ; dbGetImageHeight
  0006b	83 c4 04	 add	 esp, 4
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00071	89 82 9c 01 00
	00		 mov	 DWORD PTR [edx+412], eax

; 402  : 		this->CursorWidth=dbGetImageWidth(this->CursorImage);

  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ?dbGetImageWidth@@YAHH@Z ; dbGetImageWidth
  00086	83 c4 04	 add	 esp, 4
  00089	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008c	89 82 a4 01 00
	00		 mov	 DWORD PTR [edx+420], eax

; 403  : 		this->ShowMouse=true;

  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1
  00099	eb 33		 jmp	 SHORT $LN4@SetCursorF
$LN3@SetCursorF:

; 404  : 	}
; 405  : 	else if(name=="")

  0009b	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _name$[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
  000a2	75 2a		 jne	 SHORT $LN4@SetCursorF

; 406  : 	{
; 407  : 		this->CursorName=name;

  000a4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  000aa	89 88 94 01 00
	00		 mov	 DWORD PTR [eax+404], ecx

; 408  : 		this->ShowMouse=true;

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1

; 409  : 
; 410  : 		dbDeleteImage(this->CursorImage);

  000b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ba	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 ?dbDeleteImage@@YAXH@Z	; dbDeleteImage
  000c6	83 c4 04	 add	 esp, 4

; 411  : 		dbShowMouse();

  000c9	e8 00 00 00 00	 call	 ?dbShowMouse@@YAXXZ	; dbShowMouse
$LN4@SetCursorF:

; 412  : 	}
; 413  : 
; 414  : 	return;
; 415  : }

  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
?SetCursorFile@MouseHandler@@QAEXPAD@Z ENDP		; MouseHandler::SetCursorFile
_TEXT	ENDS
PUBLIC	?SetCursorImage@MouseHandler@@QAEXH@Z		; MouseHandler::SetCursorImage
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetCursorImage@MouseHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_img$ = 8						; size = 4
?SetCursorImage@MouseHandler@@QAEXH@Z PROC		; MouseHandler::SetCursorImage, COMDAT
; _this$ = ecx

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 418  : 	this->CursorImage=img;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _img$[ebp]
  00012	89 88 a0 01 00
	00		 mov	 DWORD PTR [eax+416], ecx

; 419  : 
; 420  : 	return;
; 421  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetCursorImage@MouseHandler@@QAEXH@Z ENDP		; MouseHandler::SetCursorImage
_TEXT	ENDS
PUBLIC	?SetCursorPosition@MouseHandler@@QAEXHH@Z	; MouseHandler::SetCursorPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetCursorPosition@MouseHandler@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
?SetCursorPosition@MouseHandler@@QAEXHH@Z PROC		; MouseHandler::SetCursorPosition, COMDAT
; _this$ = ecx

; 423  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 424  : 	dbPositionMouse(X,Y);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _Y$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _X$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ?dbPositionMouse@@YAXHH@Z ; dbPositionMouse
  00019	83 c4 08	 add	 esp, 8

; 425  : 
; 426  : 	this->MousePosX[0]=X;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _X$[ebp]
  00022	89 88 a8 01 00
	00		 mov	 DWORD PTR [eax+424], ecx

; 427  : 	this->MousePosY[0]=Y;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _Y$[ebp]
  0002e	89 88 d0 01 00
	00		 mov	 DWORD PTR [eax+464], ecx

; 428  : 
; 429  : 	return;
; 430  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?SetCursorPosition@MouseHandler@@QAEXHH@Z ENDP		; MouseHandler::SetCursorPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetCursorPosition@MouseHandler@@QAEXHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
?SetCursorPosition@MouseHandler@@QAEXHHH@Z PROC		; MouseHandler::SetCursorPosition, COMDAT
; _this$ = ecx

; 432  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 433  : 	dbPositionMouse(X,Y);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _Y$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _X$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ?dbPositionMouse@@YAXHH@Z ; dbPositionMouse
  00019	83 c4 08	 add	 esp, 8

; 434  : 
; 435  : 	this->MousePosX[0]=X;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _X$[ebp]
  00022	89 88 a8 01 00
	00		 mov	 DWORD PTR [eax+424], ecx

; 436  : 	this->MousePosY[0]=Y;

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _Y$[ebp]
  0002e	89 88 d0 01 00
	00		 mov	 DWORD PTR [eax+464], ecx

; 437  : 	this->MousePosZ[0]=Z;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 4d 10	 mov	 ecx, DWORD PTR _Z$[ebp]
  0003a	89 88 f8 01 00
	00		 mov	 DWORD PTR [eax+504], ecx

; 438  : 
; 439  : 	return;
; 440  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?SetCursorPosition@MouseHandler@@QAEXHHH@Z ENDP		; MouseHandler::SetCursorPosition
_TEXT	ENDS
PUBLIC	?SetMouseBoundToCursor@MouseHandler@@QAEX_N@Z	; MouseHandler::SetMouseBoundToCursor
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouseBoundToCursor@MouseHandler@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Binding$ = 8						; size = 1
?SetMouseBoundToCursor@MouseHandler@@QAEX_N@Z PROC	; MouseHandler::SetMouseBoundToCursor, COMDAT
; _this$ = ecx

; 442  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 443  : 	this->BindMouseToPosition=Binding;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 4d 08	 mov	 cl, BYTE PTR _Binding$[ebp]
  00012	88 08		 mov	 BYTE PTR [eax], cl

; 444  : 
; 445  : 	return;
; 446  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?SetMouseBoundToCursor@MouseHandler@@QAEX_N@Z ENDP	; MouseHandler::SetMouseBoundToCursor
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetMouseView@MouseHandler@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_view$ = 8						; size = 1
?SetMouseView@MouseHandler@@QAEX_N@Z PROC		; MouseHandler::SetMouseView, COMDAT
; _this$ = ecx

; 448  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 449  : 	this->ShowMouse=view;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 4d 08	 mov	 cl, BYTE PTR _view$[ebp]
  00012	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 450  : 
; 451  : 	if(this->ShowMouse&&this->CursorName=="")

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 16		 je	 SHORT $LN2@SetMouseVi
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	81 b8 94 01 00
	00 00 00 00 00	 cmp	 DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@
  0002d	75 07		 jne	 SHORT $LN2@SetMouseVi

; 452  : 		dbShowMouse();

  0002f	e8 00 00 00 00	 call	 ?dbShowMouse@@YAXXZ	; dbShowMouse

; 453  : 	else

  00034	eb 05		 jmp	 SHORT $LN3@SetMouseVi
$LN2@SetMouseVi:

; 454  : 		dbHideMouse();

  00036	e8 00 00 00 00	 call	 ?dbHideMouse@@YAXXZ	; dbHideMouse
$LN3@SetMouseVi:

; 455  : 
; 456  : 	return;
; 457  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?SetMouseView@MouseHandler@@QAEX_N@Z ENDP		; MouseHandler::SetMouseView
_TEXT	ENDS
PUBLIC	?SetMultiplier@MouseHandler@@QAEXM@Z		; MouseHandler::SetMultiplier
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMultiplier@MouseHandler@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Speeder$ = 8						; size = 4
?SetMultiplier@MouseHandler@@QAEXM@Z PROC		; MouseHandler::SetMultiplier, COMDAT
; _this$ = ecx

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 460  : 	this->Multiplier=Speeder;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR _Speeder$[ebp]
  00012	d9 98 98 01 00
	00		 fstp	 DWORD PTR [eax+408]

; 461  : 
; 462  : 	return;
; 463  : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetMultiplier@MouseHandler@@QAEXM@Z ENDP		; MouseHandler::SetMultiplier
_TEXT	ENDS
PUBLIC	?Update@MouseHandler@@QAEXXZ			; MouseHandler::Update
EXTRN	?dbPasteImage@@YAXHHH@Z:PROC			; dbPasteImage
EXTRN	?dbMouseClick@@YAHXZ:PROC			; dbMouseClick
EXTRN	?GetCurrentHeight@Window@@QAEHXZ:PROC		; Window::GetCurrentHeight
EXTRN	?GetCurrentWidth@Window@@QAEHXZ:PROC		; Window::GetCurrentWidth
EXTRN	?dbMouseMoveZ@@YAHXZ:PROC			; dbMouseMoveZ
EXTRN	?dbMouseMoveY@@YAHXZ:PROC			; dbMouseMoveY
EXTRN	?dbMouseMoveX@@YAHXZ:PROC			; dbMouseMoveX
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?Update@MouseHandler@@QAEXXZ
_TEXT	SEGMENT
tv320 = -92						; size = 4
tv310 = -92						; size = 4
tv300 = -92						; size = 4
tv386 = -88						; size = 8
tv384 = -88						; size = 8
tv382 = -88						; size = 8
_MouseClickValue$ = -16					; size = 4
_i$91110 = -12						; size = 4
_i$91106 = -8						; size = 4
_this$ = -4						; size = 4
?Update@MouseHandler@@QAEXXZ PROC			; MouseHandler::Update, COMDAT
; _this$ = ecx

; 465  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 466  : 	for(int i=99;i>=0;i--)

  0000c	c7 45 f8 63 00
	00 00		 mov	 DWORD PTR _i$91106[ebp], 99 ; 00000063H
  00013	eb 09		 jmp	 SHORT $LN22@Update
$LN21@Update:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$91106[ebp]
  00018	83 e8 01	 sub	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$91106[ebp], eax
$LN22@Update:
  0001e	83 7d f8 00	 cmp	 DWORD PTR _i$91106[ebp], 0
  00022	7c 56		 jl	 SHORT $LN20@Update

; 467  : 	{
; 468  : 		this->LeftClick[i]=this->LeftClick[i-1];

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	03 45 f8	 add	 eax, DWORD PTR _i$91106[ebp]
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	03 4d f8	 add	 ecx, DWORD PTR _i$91106[ebp]
  00030	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00033	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 469  : 		this->RightClick[i]=this->RightClick[i-1];

  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	03 45 f8	 add	 eax, DWORD PTR _i$91106[ebp]
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	03 4d f8	 add	 ecx, DWORD PTR _i$91106[ebp]
  00042	8a 91 2d 01 00
	00		 mov	 dl, BYTE PTR [ecx+301]
  00048	88 90 2e 01 00
	00		 mov	 BYTE PTR [eax+302], dl

; 470  : 		this->MouseButton3[i]=this->MouseButton3[i-1];

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	03 45 f8	 add	 eax, DWORD PTR _i$91106[ebp]
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	03 4d f8	 add	 ecx, DWORD PTR _i$91106[ebp]
  0005a	8a 51 65	 mov	 dl, BYTE PTR [ecx+101]
  0005d	88 50 66	 mov	 BYTE PTR [eax+102], dl

; 471  : 		this->MouseButton4[i]=this->MouseButton4[i-1];

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	03 45 f8	 add	 eax, DWORD PTR _i$91106[ebp]
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	03 4d f8	 add	 ecx, DWORD PTR _i$91106[ebp]
  0006c	8a 91 c9 00 00
	00		 mov	 dl, BYTE PTR [ecx+201]
  00072	88 90 ca 00 00
	00		 mov	 BYTE PTR [eax+202], dl

; 472  : 	}

  00078	eb 9b		 jmp	 SHORT $LN21@Update
$LN20@Update:

; 473  : 
; 474  : 	for(int i=9;i>=0;i--)

  0007a	c7 45 f4 09 00
	00 00		 mov	 DWORD PTR _i$91110[ebp], 9
  00081	eb 09		 jmp	 SHORT $LN19@Update
$LN18@Update:
  00083	8b 45 f4	 mov	 eax, DWORD PTR _i$91110[ebp]
  00086	83 e8 01	 sub	 eax, 1
  00089	89 45 f4	 mov	 DWORD PTR _i$91110[ebp], eax
$LN19@Update:
  0008c	83 7d f4 00	 cmp	 DWORD PTR _i$91110[ebp], 0
  00090	7c 50		 jl	 SHORT $LN17@Update

; 475  : 	{
; 476  : 		this->MousePosX[i]=this->MousePosX[i-1];

  00092	8b 45 f4	 mov	 eax, DWORD PTR _i$91110[ebp]
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	8b 55 f4	 mov	 edx, DWORD PTR _i$91110[ebp]
  0009b	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0009e	8b 94 96 a4 01
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+420]
  000a5	89 94 81 a8 01
	00 00		 mov	 DWORD PTR [ecx+eax*4+424], edx

; 477  : 		this->MousePosY[i]=this->MousePosY[i-1];

  000ac	8b 45 f4	 mov	 eax, DWORD PTR _i$91110[ebp]
  000af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b2	8b 55 f4	 mov	 edx, DWORD PTR _i$91110[ebp]
  000b5	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  000b8	8b 94 96 cc 01
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+460]
  000bf	89 94 81 d0 01
	00 00		 mov	 DWORD PTR [ecx+eax*4+464], edx

; 478  : 		this->MousePosZ[i]=this->MousePosZ[i-1];

  000c6	8b 45 f4	 mov	 eax, DWORD PTR _i$91110[ebp]
  000c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	8b 55 f4	 mov	 edx, DWORD PTR _i$91110[ebp]
  000cf	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  000d2	8b 94 96 f4 01
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+500]
  000d9	89 94 81 f8 01
	00 00		 mov	 DWORD PTR [ecx+eax*4+504], edx

; 479  : 	}

  000e0	eb a1		 jmp	 SHORT $LN18@Update
$LN17@Update:

; 480  : 
; 481  : 	this->MousePosX[0]=this->MousePosX[1]+dbMouseMoveX()*this->Multiplier;

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	db 80 ac 01 00
	00		 fild	 DWORD PTR [eax+428]
  000eb	dd 5d a8	 fstp	 QWORD PTR tv382[ebp]
  000ee	e8 00 00 00 00	 call	 ?dbMouseMoveX@@YAHXZ	; dbMouseMoveX
  000f3	89 45 a4	 mov	 DWORD PTR tv300[ebp], eax
  000f6	db 45 a4	 fild	 DWORD PTR tv300[ebp]
  000f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	d8 89 98 01 00
	00		 fmul	 DWORD PTR [ecx+408]
  00102	dc 45 a8	 fadd	 QWORD PTR tv382[ebp]
  00105	e8 00 00 00 00	 call	 __ftol2_sse
  0010a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0010d	89 82 a8 01 00
	00		 mov	 DWORD PTR [edx+424], eax

; 482  : 	this->MousePosY[0]=this->MousePosY[1]+dbMouseMoveY()*this->Multiplier;

  00113	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00116	db 80 d4 01 00
	00		 fild	 DWORD PTR [eax+468]
  0011c	dd 5d a8	 fstp	 QWORD PTR tv384[ebp]
  0011f	e8 00 00 00 00	 call	 ?dbMouseMoveY@@YAHXZ	; dbMouseMoveY
  00124	89 45 a4	 mov	 DWORD PTR tv310[ebp], eax
  00127	db 45 a4	 fild	 DWORD PTR tv310[ebp]
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	d8 89 98 01 00
	00		 fmul	 DWORD PTR [ecx+408]
  00133	dc 45 a8	 fadd	 QWORD PTR tv384[ebp]
  00136	e8 00 00 00 00	 call	 __ftol2_sse
  0013b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0013e	89 82 d0 01 00
	00		 mov	 DWORD PTR [edx+464], eax

; 483  : 	this->MousePosZ[0]=this->MousePosZ[1]+dbMouseMoveZ()*this->Multiplier;

  00144	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00147	db 80 fc 01 00
	00		 fild	 DWORD PTR [eax+508]
  0014d	dd 5d a8	 fstp	 QWORD PTR tv386[ebp]
  00150	e8 00 00 00 00	 call	 ?dbMouseMoveZ@@YAHXZ	; dbMouseMoveZ
  00155	89 45 a4	 mov	 DWORD PTR tv320[ebp], eax
  00158	db 45 a4	 fild	 DWORD PTR tv320[ebp]
  0015b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	d8 89 98 01 00
	00		 fmul	 DWORD PTR [ecx+408]
  00164	dc 45 a8	 fadd	 QWORD PTR tv386[ebp]
  00167	e8 00 00 00 00	 call	 __ftol2_sse
  0016c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0016f	89 82 f8 01 00
	00		 mov	 DWORD PTR [edx+504], eax

; 484  : 	
; 485  : 	if(MousePosX[0]<0)

  00175	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00178	83 b8 a8 01 00
	00 00		 cmp	 DWORD PTR [eax+424], 0
  0017f	7d 0d		 jge	 SHORT $LN16@Update

; 486  : 		MousePosX[0]=0;

  00181	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00184	c7 80 a8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+424], 0
$LN16@Update:

; 487  : 	if(MousePosX[0]>this->CurrentWindow->GetCurrentWidth())

  0018e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00191	8b 88 20 02 00
	00		 mov	 ecx, DWORD PTR [eax+544]
  00197	e8 00 00 00 00	 call	 ?GetCurrentWidth@Window@@QAEHXZ ; Window::GetCurrentWidth
  0019c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0019f	39 81 a8 01 00
	00		 cmp	 DWORD PTR [ecx+424], eax
  001a5	7e 17		 jle	 SHORT $LN15@Update

; 488  : 		MousePosX[0]=this->CurrentWindow->GetCurrentWidth();

  001a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001aa	8b 88 20 02 00
	00		 mov	 ecx, DWORD PTR [eax+544]
  001b0	e8 00 00 00 00	 call	 ?GetCurrentWidth@Window@@QAEHXZ ; Window::GetCurrentWidth
  001b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b8	89 81 a8 01 00
	00		 mov	 DWORD PTR [ecx+424], eax
$LN15@Update:

; 489  : 	if(MousePosY[0]<0)

  001be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c1	83 b8 d0 01 00
	00 00		 cmp	 DWORD PTR [eax+464], 0
  001c8	7d 0d		 jge	 SHORT $LN14@Update

; 490  : 		MousePosY[0]=0;

  001ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001cd	c7 80 d0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+464], 0
$LN14@Update:

; 491  : 	if(MousePosY[0]>this->CurrentWindow->GetCurrentHeight())

  001d7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001da	8b 88 20 02 00
	00		 mov	 ecx, DWORD PTR [eax+544]
  001e0	e8 00 00 00 00	 call	 ?GetCurrentHeight@Window@@QAEHXZ ; Window::GetCurrentHeight
  001e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e8	39 81 d0 01 00
	00		 cmp	 DWORD PTR [ecx+464], eax
  001ee	7e 17		 jle	 SHORT $LN13@Update

; 492  : 		MousePosY[0]=this->CurrentWindow->GetCurrentHeight();

  001f0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001f3	8b 88 20 02 00
	00		 mov	 ecx, DWORD PTR [eax+544]
  001f9	e8 00 00 00 00	 call	 ?GetCurrentHeight@Window@@QAEHXZ ; Window::GetCurrentHeight
  001fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00201	89 81 d0 01 00
	00		 mov	 DWORD PTR [ecx+464], eax
$LN13@Update:

; 493  : 
; 494  : 	if(this->MousePosZ[0]>100)

  00207	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0020a	83 b8 f8 01 00
	00 64		 cmp	 DWORD PTR [eax+504], 100 ; 00000064H
  00211	7e 0f		 jle	 SHORT $LN12@Update

; 495  : 		this->MousePosZ[0]=100;

  00213	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00216	c7 80 f8 01 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+504], 100 ; 00000064H
  00220	eb 19		 jmp	 SHORT $LN10@Update
$LN12@Update:

; 496  : 	else if(this->MousePosZ[0]<0)

  00222	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00225	83 b8 f8 01 00
	00 00		 cmp	 DWORD PTR [eax+504], 0
  0022c	7d 0d		 jge	 SHORT $LN10@Update

; 497  : 		this->MousePosZ[0]=0;

  0022e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00231	c7 80 f8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+504], 0
$LN10@Update:

; 498  : 	
; 499  : 	int MouseClickValue=dbMouseClick();

  0023b	e8 00 00 00 00	 call	 ?dbMouseClick@@YAHXZ	; dbMouseClick
  00240	89 45 f0	 mov	 DWORD PTR _MouseClickValue$[ebp], eax

; 500  : 
; 501  : 	if(MouseClickValue>=8)

  00243	83 7d f0 08	 cmp	 DWORD PTR _MouseClickValue$[ebp], 8
  00247	7c 15		 jl	 SHORT $LN9@Update

; 502  : 	{
; 503  : 		this->MouseButton4[0]=true;

  00249	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0024c	c6 80 ca 00 00
	00 01		 mov	 BYTE PTR [eax+202], 1

; 504  : 		MouseClickValue-=8;

  00253	8b 45 f0	 mov	 eax, DWORD PTR _MouseClickValue$[ebp]
  00256	83 e8 08	 sub	 eax, 8
  00259	89 45 f0	 mov	 DWORD PTR _MouseClickValue$[ebp], eax

; 505  : 	}
; 506  : 	else

  0025c	eb 0a		 jmp	 SHORT $LN8@Update
$LN9@Update:

; 507  : 		this->MouseButton4[0]=false;

  0025e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00261	c6 80 ca 00 00
	00 00		 mov	 BYTE PTR [eax+202], 0
$LN8@Update:

; 508  : 	if(MouseClickValue>=4)

  00268	83 7d f0 04	 cmp	 DWORD PTR _MouseClickValue$[ebp], 4
  0026c	7c 12		 jl	 SHORT $LN7@Update

; 509  : 	{
; 510  : 		this->MouseButton3[0]=true;

  0026e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00271	c6 40 66 01	 mov	 BYTE PTR [eax+102], 1

; 511  : 		MouseClickValue-=4;

  00275	8b 45 f0	 mov	 eax, DWORD PTR _MouseClickValue$[ebp]
  00278	83 e8 04	 sub	 eax, 4
  0027b	89 45 f0	 mov	 DWORD PTR _MouseClickValue$[ebp], eax

; 512  : 	}
; 513  : 	else

  0027e	eb 07		 jmp	 SHORT $LN6@Update
$LN7@Update:

; 514  : 		this->MouseButton3[0]=false;

  00280	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00283	c6 40 66 00	 mov	 BYTE PTR [eax+102], 0
$LN6@Update:

; 515  : 	if(MouseClickValue>=2)

  00287	83 7d f0 02	 cmp	 DWORD PTR _MouseClickValue$[ebp], 2
  0028b	7c 15		 jl	 SHORT $LN5@Update

; 516  : 	{
; 517  : 		this->RightClick[0]=true;

  0028d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00290	c6 80 2e 01 00
	00 01		 mov	 BYTE PTR [eax+302], 1

; 518  : 		MouseClickValue-=2;

  00297	8b 45 f0	 mov	 eax, DWORD PTR _MouseClickValue$[ebp]
  0029a	83 e8 02	 sub	 eax, 2
  0029d	89 45 f0	 mov	 DWORD PTR _MouseClickValue$[ebp], eax

; 519  : 	}
; 520  : 	else

  002a0	eb 0a		 jmp	 SHORT $LN4@Update
$LN5@Update:

; 521  : 		this->RightClick[0]=false;

  002a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a5	c6 80 2e 01 00
	00 00		 mov	 BYTE PTR [eax+302], 0
$LN4@Update:

; 522  : 	if(MouseClickValue==1)

  002ac	83 7d f0 01	 cmp	 DWORD PTR _MouseClickValue$[ebp], 1
  002b0	75 12		 jne	 SHORT $LN3@Update

; 523  : 	{
; 524  : 		this->LeftClick[0]=true;

  002b2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b5	c6 40 02 01	 mov	 BYTE PTR [eax+2], 1

; 525  : 		MouseClickValue--;

  002b9	8b 45 f0	 mov	 eax, DWORD PTR _MouseClickValue$[ebp]
  002bc	83 e8 01	 sub	 eax, 1
  002bf	89 45 f0	 mov	 DWORD PTR _MouseClickValue$[ebp], eax

; 526  : 	}
; 527  : 	else

  002c2	eb 07		 jmp	 SHORT $LN2@Update
$LN3@Update:

; 528  : 		this->LeftClick[0]=false;

  002c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002c7	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0
$LN2@Update:

; 529  : 
; 530  : 	if(this->ShowMouse&&this->CursorName!="")

  002cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002ce	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  002d2	85 c9		 test	 ecx, ecx
  002d4	74 55		 je	 SHORT $LN1@Update
  002d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d9	81 b8 94 01 00
	00 00 00 00 00	 cmp	 DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@
  002e3	74 46		 je	 SHORT $LN1@Update

; 531  : 		dbPasteImage(this->CursorImage,this->MousePosX[0]-this->CursorWidth/2,this->MousePosY[0]-this->CursorHeight/2);

  002e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002e8	8b 80 9c 01 00
	00		 mov	 eax, DWORD PTR [eax+412]
  002ee	99		 cdq
  002ef	2b c2		 sub	 eax, edx
  002f1	d1 f8		 sar	 eax, 1
  002f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f6	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  002fc	2b d0		 sub	 edx, eax
  002fe	52		 push	 edx
  002ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00302	8b 80 a4 01 00
	00		 mov	 eax, DWORD PTR [eax+420]
  00308	99		 cdq
  00309	2b c2		 sub	 eax, edx
  0030b	d1 f8		 sar	 eax, 1
  0030d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00310	8b 91 a8 01 00
	00		 mov	 edx, DWORD PTR [ecx+424]
  00316	2b d0		 sub	 edx, eax
  00318	52		 push	 edx
  00319	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0031c	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  00322	51		 push	 ecx
  00323	e8 00 00 00 00	 call	 ?dbPasteImage@@YAXHHH@Z	; dbPasteImage
  00328	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Update:

; 532  : 
; 533  : 	return;
; 534  : }

  0032b	5f		 pop	 edi
  0032c	5e		 pop	 esi
  0032d	5b		 pop	 ebx
  0032e	8b e5		 mov	 esp, ebp
  00330	5d		 pop	 ebp
  00331	c3		 ret	 0
?Update@MouseHandler@@QAEXXZ ENDP			; MouseHandler::Update
_TEXT	ENDS
PUBLIC	??_C@_05FOLLILPC@Thing?$AA@			; `string'
PUBLIC	??_C@_0O@IDKBPDPO@Right?5Windows?$AA@		; `string'
PUBLIC	??_C@_0N@ILBHIOPE@Left?5Windows?$AA@		; `string'
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	??_C@_06CPFCODOD@Insert?$AA@			; `string'
PUBLIC	??_C@_09IOIDGKNA@Page?5Down?$AA@		; `string'
PUBLIC	??_C@_04FNCLCJMC@Down?$AA@			; `string'
PUBLIC	??_C@_03DBKJMAGF@End?$AA@			; `string'
PUBLIC	??_C@_05DADPALEM@Right?$AA@			; `string'
PUBLIC	??_C@_04KPCPLBPL@Left?$AA@			; `string'
PUBLIC	??_C@_07EDGDGJEN@Page?5Up?$AA@			; `string'
PUBLIC	??_C@_02EFPGLDEA@Up?$AA@			; `string'
PUBLIC	??_C@_04GKJODLKO@Home?$AA@			; `string'
PUBLIC	??_C@_05EMFLFCNO@Break?$AA@			; `string'
PUBLIC	??_C@_05PEDNBBBD@Pause?$AA@			; `string'
PUBLIC	??_C@_09ELGHIMBO@Right?5Alt?$AA@		; `string'
PUBLIC	??_C@_0N@CHCLIIDE@Print?5Screen?$AA@		; `string'
PUBLIC	??_C@_05IAKEFGOE@?1?5Num?$AA@			; `string'
PUBLIC	??_C@_0M@LHBLIFBA@Function?5F3?$AA@		; `string'
PUBLIC	??_C@_0O@FHMBNID@Right?5Control?$AA@		; `string'
PUBLIC	??_C@_03KIBNPMNE@F12?$AA@			; `string'
PUBLIC	??_C@_03IDDAKPBH@F11?$AA@			; `string'
PUBLIC	??_C@_05BAHDBLKA@SysRq?$AA@			; `string'
PUBLIC	??_C@_05LAFLDKON@Num?5?4?$AA@			; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_01EKENIIDA@3?$AA@				; `string'
PUBLIC	??_C@_01FDFGLJHB@2?$AA@				; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL?$AA@			; `string'
PUBLIC	??_C@_01DHDKHMHF@6?$AA@				; `string'
PUBLIC	??_C@_01BMBHCPLG@5?$AA@				; `string'
PUBLIC	??_C@_01FAMBOPH@4?$AA@				; `string'
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_01LAKCGALK@9?$AA@				; `string'
PUBLIC	??_C@_01KJLJFBPL@8?$AA@				; `string'
PUBLIC	??_C@_01COCBENDE@7?$AA@				; `string'
PUBLIC	??_C@_08DEAFBBCL@Num?5Lock?$AA@			; `string'
PUBLIC	??_C@_03JKCLJOFG@F10?$AA@			; `string'
PUBLIC	??_C@_02HKCNFKCF@F9?$AA@			; `string'
PUBLIC	??_C@_02GDDGGLGE@F8?$AA@			; `string'
PUBLIC	??_C@_02OEKOHHKL@F7?$AA@			; `string'
PUBLIC	??_C@_02PNLFEGOK@F6?$AA@			; `string'
PUBLIC	??_C@_02NGJIBFCJ@F5?$AA@			; `string'
PUBLIC	??_C@_02MPIDCEGI@F4?$AA@			; `string'
PUBLIC	??_C@_02IAMCLCKP@F3?$AA@			; `string'
PUBLIC	??_C@_02JJNJIDOO@F2?$AA@			; `string'
PUBLIC	??_C@_02LCPENACN@F1?$AA@			; `string'
PUBLIC	??_C@_09GGECHFNF@Caps?5Lock?$AA@		; `string'
PUBLIC	??_C@_05OMHELODH@Space?$AA@			; `string'
PUBLIC	??_C@_08CJHJBNHP@Left?5Alt?$AA@			; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK?$AA@			; `string'
PUBLIC	??_C@_0M@COKLDKMB@Right?5Shift?$AA@		; `string'
PUBLIC	??_C@_01KMDKNFGN@?1?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	??_C@_01NANMIPIL@N?$AA@				; `string'
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	??_C@_01FCMHBHNC@V?$AA@				; `string'
PUBLIC	??_C@_01GFHCPBMG@C?$AA@				; `string'
PUBLIC	??_C@_01MMEEDKFM@X?$AA@				; `string'
PUBLIC	??_C@_01POHCFINO@Z?$AA@				; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_0L@NFEFKBOL@Left?5Shift?$AA@		; `string'
PUBLIC	??_C@_01NLNLIGKH@?$GA?$AA@			; `string'
PUBLIC	??_C@_01GEODFPGF@?8?$AA@			; `string'
PUBLIC	??_C@_01ICJEACDI@?$DL?$AA@			; `string'
PUBLIC	??_C@_01OCOKONAJ@L?$AA@				; `string'
PUBLIC	??_C@_01KNKLHLMO@K?$AA@				; `string'
PUBLIC	??_C@_01LELAEKIP@J?$AA@				; `string'
PUBLIC	??_C@_01IGIGCIAN@H?$AA@				; `string'
PUBLIC	??_C@_01BBODEMC@G?$AA@				; `string'
PUBLIC	??_C@_01BIAFAFID@F?$AA@				; `string'
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	??_C@_01FHEEJDEE@A?$AA@				; `string'
PUBLIC	??_C@_0N@NMKGAIJ@Left?5Control?$AA@		; `string'
PUBLIC	??_C@_0M@ICALLIHK@Right?5Enter?$AA@		; `string'
PUBLIC	??_C@_01LBDDMOBJ@?$FN?$AA@			; `string'
PUBLIC	??_C@_01OHGJGJJP@?$FL?$AA@			; `string'
PUBLIC	??_C@_01EJNLAFE@P?$AA@				; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_01JPJNBJEM@I?$AA@				; `string'
PUBLIC	??_C@_01HJOKEEBB@U?$AA@				; `string'
PUBLIC	??_C@_01NFFPALBN@Y?$AA@				; `string'
PUBLIC	??_C@_01GAPBHFFA@T?$AA@				; `string'
PUBLIC	??_C@_01DGKLNCNG@R?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	??_C@_01ELNMCGJD@W?$AA@				; `string'
PUBLIC	??_C@_01BNIGIBBF@Q?$AA@				; `string'
PUBLIC	??_C@_03IEAKBACE@Tab?$AA@			; `string'
PUBLIC	??_C@_09LPBCIPOJ@Backspace?$AA@			; `string'
PUBLIC	??_C@_05MLOMHBGD@?$DN?5Key?$AA@			; `string'
PUBLIC	??_C@_05MIDKHDPI@?9?5Key?$AA@			; `string'
PUBLIC	??_C@_05HHHCGCLN@0?5Key?$AA@			; `string'
PUBLIC	??_C@_05FAHNDDHF@9?5Key?$AA@			; `string'
PUBLIC	??_C@_05JLCBOANA@8?5Key?$AA@			; `string'
PUBLIC	??_C@_05GKHHFCAF@7?5Key?$AA@			; `string'
PUBLIC	??_C@_05KBCLIBKA@6?5Key?$AA@			; `string'
PUBLIC	??_C@_05CHLPPDAO@5?5Key?$AA@			; `string'
PUBLIC	??_C@_05OMODCAKL@4?5Key?$AA@			; `string'
PUBLIC	??_C@_05PBOGBABD@3?5Key?$AA@			; `string'
PUBLIC	??_C@_05DKLKMDLG@2?5Key?$AA@			; `string'
PUBLIC	??_C@_05LMCOLBBI@1?5Key?$AA@			; `string'
PUBLIC	??_C@_06OIGFGPHJ@Escape?$AA@			; `string'
PUBLIC	??_C@_08OFADHOMM@Null?5Key?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	??0KeyHandler@@QAE@XZ				; KeyHandler::KeyHandler
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_05FOLLILPC@Thing?$AA@
CONST	SEGMENT
??_C@_05FOLLILPC@Thing?$AA@ DB 'Thing', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@
CONST	SEGMENT
??_C@_0O@IDKBPDPO@Right?5Windows?$AA@ DB 'Right Windows', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@
CONST	SEGMENT
??_C@_0N@ILBHIOPE@Left?5Windows?$AA@ DB 'Left Windows', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPFCODOD@Insert?$AA@
CONST	SEGMENT
??_C@_06CPFCODOD@Insert?$AA@ DB 'Insert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOIDGKNA@Page?5Down?$AA@
CONST	SEGMENT
??_C@_09IOIDGKNA@Page?5Down?$AA@ DB 'Page Down', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNCLCJMC@Down?$AA@
CONST	SEGMENT
??_C@_04FNCLCJMC@Down?$AA@ DB 'Down', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DBKJMAGF@End?$AA@
CONST	SEGMENT
??_C@_03DBKJMAGF@End?$AA@ DB 'End', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DADPALEM@Right?$AA@
CONST	SEGMENT
??_C@_05DADPALEM@Right?$AA@ DB 'Right', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KPCPLBPL@Left?$AA@
CONST	SEGMENT
??_C@_04KPCPLBPL@Left?$AA@ DB 'Left', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDGDGJEN@Page?5Up?$AA@
CONST	SEGMENT
??_C@_07EDGDGJEN@Page?5Up?$AA@ DB 'Page Up', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02EFPGLDEA@Up?$AA@
CONST	SEGMENT
??_C@_02EFPGLDEA@Up?$AA@ DB 'Up', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GKJODLKO@Home?$AA@
CONST	SEGMENT
??_C@_04GKJODLKO@Home?$AA@ DB 'Home', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMFLFCNO@Break?$AA@
CONST	SEGMENT
??_C@_05EMFLFCNO@Break?$AA@ DB 'Break', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PEDNBBBD@Pause?$AA@
CONST	SEGMENT
??_C@_05PEDNBBBD@Pause?$AA@ DB 'Pause', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09ELGHIMBO@Right?5Alt?$AA@
CONST	SEGMENT
??_C@_09ELGHIMBO@Right?5Alt?$AA@ DB 'Right Alt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@
CONST	SEGMENT
??_C@_0N@CHCLIIDE@Print?5Screen?$AA@ DB 'Print Screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IAKEFGOE@?1?5Num?$AA@
CONST	SEGMENT
??_C@_05IAKEFGOE@?1?5Num?$AA@ DB '/ Num', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LHBLIFBA@Function?5F3?$AA@
CONST	SEGMENT
??_C@_0M@LHBLIFBA@Function?5F3?$AA@ DB 'Function F3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHMBNID@Right?5Control?$AA@
CONST	SEGMENT
??_C@_0O@FHMBNID@Right?5Control?$AA@ DB 'Right Control', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIBNPMNE@F12?$AA@
CONST	SEGMENT
??_C@_03KIBNPMNE@F12?$AA@ DB 'F12', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IDDAKPBH@F11?$AA@
CONST	SEGMENT
??_C@_03IDDAKPBH@F11?$AA@ DB 'F11', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BAHDBLKA@SysRq?$AA@
CONST	SEGMENT
??_C@_05BAHDBLKA@SysRq?$AA@ DB 'SysRq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAFLDKON@Num?5?4?$AA@
CONST	SEGMENT
??_C@_05LAFLDKON@Num?5?4?$AA@ DB 'Num .', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3?$AA@
CONST	SEGMENT
??_C@_01EKENIIDA@3?$AA@ DB '3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FDFGLJHB@2?$AA@
CONST	SEGMENT
??_C@_01FDFGLJHB@2?$AA@ DB '2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL?$AA@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL?$AA@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DHDKHMHF@6?$AA@
CONST	SEGMENT
??_C@_01DHDKHMHF@6?$AA@ DB '6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BMBHCPLG@5?$AA@
CONST	SEGMENT
??_C@_01BMBHCPLG@5?$AA@ DB '5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FAMBOPH@4?$AA@
CONST	SEGMENT
??_C@_01FAMBOPH@4?$AA@ DB '4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LAKCGALK@9?$AA@
CONST	SEGMENT
??_C@_01LAKCGALK@9?$AA@ DB '9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KJLJFBPL@8?$AA@
CONST	SEGMENT
??_C@_01KJLJFBPL@8?$AA@ DB '8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01COCBENDE@7?$AA@
CONST	SEGMENT
??_C@_01COCBENDE@7?$AA@ DB '7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DEAFBBCL@Num?5Lock?$AA@
CONST	SEGMENT
??_C@_08DEAFBBCL@Num?5Lock?$AA@ DB 'Num Lock', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JKCLJOFG@F10?$AA@
CONST	SEGMENT
??_C@_03JKCLJOFG@F10?$AA@ DB 'F10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HKCNFKCF@F9?$AA@
CONST	SEGMENT
??_C@_02HKCNFKCF@F9?$AA@ DB 'F9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GDDGGLGE@F8?$AA@
CONST	SEGMENT
??_C@_02GDDGGLGE@F8?$AA@ DB 'F8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OEKOHHKL@F7?$AA@
CONST	SEGMENT
??_C@_02OEKOHHKL@F7?$AA@ DB 'F7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PNLFEGOK@F6?$AA@
CONST	SEGMENT
??_C@_02PNLFEGOK@F6?$AA@ DB 'F6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NGJIBFCJ@F5?$AA@
CONST	SEGMENT
??_C@_02NGJIBFCJ@F5?$AA@ DB 'F5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MPIDCEGI@F4?$AA@
CONST	SEGMENT
??_C@_02MPIDCEGI@F4?$AA@ DB 'F4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAMCLCKP@F3?$AA@
CONST	SEGMENT
??_C@_02IAMCLCKP@F3?$AA@ DB 'F3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JJNJIDOO@F2?$AA@
CONST	SEGMENT
??_C@_02JJNJIDOO@F2?$AA@ DB 'F2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LCPENACN@F1?$AA@
CONST	SEGMENT
??_C@_02LCPENACN@F1?$AA@ DB 'F1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGECHFNF@Caps?5Lock?$AA@
CONST	SEGMENT
??_C@_09GGECHFNF@Caps?5Lock?$AA@ DB 'Caps Lock', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OMHELODH@Space?$AA@
CONST	SEGMENT
??_C@_05OMHELODH@Space?$AA@ DB 'Space', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CJHJBNHP@Left?5Alt?$AA@
CONST	SEGMENT
??_C@_08CJHJBNHP@Left?5Alt?$AA@ DB 'Left Alt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK?$AA@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK?$AA@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@COKLDKMB@Right?5Shift?$AA@
CONST	SEGMENT
??_C@_0M@COKLDKMB@Right?5Shift?$AA@ DB 'Right Shift', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1?$AA@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1?$AA@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NANMIPIL@N?$AA@
CONST	SEGMENT
??_C@_01NANMIPIL@N?$AA@ DB 'N', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FCMHBHNC@V?$AA@
CONST	SEGMENT
??_C@_01FCMHBHNC@V?$AA@ DB 'V', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT
??_C@_01GFHCPBMG@C?$AA@ DB 'C', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT
??_C@_01MMEEDKFM@X?$AA@ DB 'X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT
??_C@_01POHCFINO@Z?$AA@ DB 'Z', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@
CONST	SEGMENT
??_C@_0L@NFEFKBOL@Left?5Shift?$AA@ DB 'Left Shift', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NLNLIGKH@?$GA?$AA@
CONST	SEGMENT
??_C@_01NLNLIGKH@?$GA?$AA@ DB '`', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GEODFPGF@?8?$AA@
CONST	SEGMENT
??_C@_01GEODFPGF@?8?$AA@ DB '''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ICJEACDI@?$DL?$AA@
CONST	SEGMENT
??_C@_01ICJEACDI@?$DL?$AA@ DB ';', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L?$AA@
CONST	SEGMENT
??_C@_01OCOKONAJ@L?$AA@ DB 'L', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KNKLHLMO@K?$AA@
CONST	SEGMENT
??_C@_01KNKLHLMO@K?$AA@ DB 'K', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LELAEKIP@J?$AA@
CONST	SEGMENT
??_C@_01LELAEKIP@J?$AA@ DB 'J', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IGIGCIAN@H?$AA@
CONST	SEGMENT
??_C@_01IGIGCIAN@H?$AA@ DB 'H', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BBODEMC@G?$AA@
CONST	SEGMENT
??_C@_01BBODEMC@G?$AA@ DB 'G', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BIAFAFID@F?$AA@
CONST	SEGMENT
??_C@_01BIAFAFID@F?$AA@ DB 'F', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FHEEJDEE@A?$AA@
CONST	SEGMENT
??_C@_01FHEEJDEE@A?$AA@ DB 'A', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMKGAIJ@Left?5Control?$AA@
CONST	SEGMENT
??_C@_0N@NMKGAIJ@Left?5Control?$AA@ DB 'Left Control', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
CONST	SEGMENT
??_C@_0M@ICALLIHK@Right?5Enter?$AA@ DB 'Right Enter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN?$AA@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN?$AA@ DB ']', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OHGJGJJP@?$FL?$AA@
CONST	SEGMENT
??_C@_01OHGJGJJP@?$FL?$AA@ DB '[', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EJNLAFE@P?$AA@
CONST	SEGMENT
??_C@_01EJNLAFE@P?$AA@ DB 'P', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JPJNBJEM@I?$AA@
CONST	SEGMENT
??_C@_01JPJNBJEM@I?$AA@ DB 'I', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HJOKEEBB@U?$AA@
CONST	SEGMENT
??_C@_01HJOKEEBB@U?$AA@ DB 'U', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT
??_C@_01NFFPALBN@Y?$AA@ DB 'Y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GAPBHFFA@T?$AA@
CONST	SEGMENT
??_C@_01GAPBHFFA@T?$AA@ DB 'T', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DGKLNCNG@R?$AA@
CONST	SEGMENT
??_C@_01DGKLNCNG@R?$AA@ DB 'R', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ELNMCGJD@W?$AA@
CONST	SEGMENT
??_C@_01ELNMCGJD@W?$AA@ DB 'W', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BNIGIBBF@Q?$AA@
CONST	SEGMENT
??_C@_01BNIGIBBF@Q?$AA@ DB 'Q', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IEAKBACE@Tab?$AA@
CONST	SEGMENT
??_C@_03IEAKBACE@Tab?$AA@ DB 'Tab', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPBCIPOJ@Backspace?$AA@
CONST	SEGMENT
??_C@_09LPBCIPOJ@Backspace?$AA@ DB 'Backspace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLOMHBGD@?$DN?5Key?$AA@
CONST	SEGMENT
??_C@_05MLOMHBGD@?$DN?5Key?$AA@ DB '= Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIDKHDPI@?9?5Key?$AA@
CONST	SEGMENT
??_C@_05MIDKHDPI@?9?5Key?$AA@ DB '- Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HHHCGCLN@0?5Key?$AA@
CONST	SEGMENT
??_C@_05HHHCGCLN@0?5Key?$AA@ DB '0 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAHNDDHF@9?5Key?$AA@
CONST	SEGMENT
??_C@_05FAHNDDHF@9?5Key?$AA@ DB '9 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLCBOANA@8?5Key?$AA@
CONST	SEGMENT
??_C@_05JLCBOANA@8?5Key?$AA@ DB '8 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GKHHFCAF@7?5Key?$AA@
CONST	SEGMENT
??_C@_05GKHHFCAF@7?5Key?$AA@ DB '7 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KBCLIBKA@6?5Key?$AA@
CONST	SEGMENT
??_C@_05KBCLIBKA@6?5Key?$AA@ DB '6 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CHLPPDAO@5?5Key?$AA@
CONST	SEGMENT
??_C@_05CHLPPDAO@5?5Key?$AA@ DB '5 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OMODCAKL@4?5Key?$AA@
CONST	SEGMENT
??_C@_05OMODCAKL@4?5Key?$AA@ DB '4 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PBOGBABD@3?5Key?$AA@
CONST	SEGMENT
??_C@_05PBOGBABD@3?5Key?$AA@ DB '3 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DKLKMDLG@2?5Key?$AA@
CONST	SEGMENT
??_C@_05DKLKMDLG@2?5Key?$AA@ DB '2 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LMCOLBBI@1?5Key?$AA@
CONST	SEGMENT
??_C@_05LMCOLBBI@1?5Key?$AA@ DB '1 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIGFGPHJ@Escape?$AA@
CONST	SEGMENT
??_C@_06OIGFGPHJ@Escape?$AA@ DB 'Escape', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OFADHOMM@Null?5Key?$AA@
CONST	SEGMENT
??_C@_08OFADHOMM@Null?5Key?$AA@ DB 'Null Key', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0KeyHandler@@QAE@XZ
_TEXT	SEGMENT
_i$91249 = -3620					; size = 4
_j$91245 = -3616					; size = 4
_i$91241 = -3612					; size = 4
_Temp$ = -3608						; size = 3598
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??0KeyHandler@@QAE@XZ PROC				; KeyHandler::KeyHandler, COMDAT
; _this$ = ecx

; 539  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 0e 00
	00		 sub	 esp, 3684		; 00000e64H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 540  : 	char Temp[257][14]={"Null Key","Escape","1 Key","2 Key","3 Key","4 Key","5 Key","6 Key","7 Key","8 Key","9 Key","0 Key","- Key","= Key","Backspace","Tab","Q",

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08OFADHOMM@Null?5Key?$AA@
  0001e	89 85 e8 f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp], eax
  00024	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_08OFADHOMM@Null?5Key?$AA@+4
  0002a	89 8d ec f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+4], ecx
  00030	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR ??_C@_08OFADHOMM@Null?5Key?$AA@+8
  00036	88 95 f0 f1 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+8], dl
  0003c	33 c0		 xor	 eax, eax
  0003e	89 85 f1 f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+9], eax
  00044	88 85 f5 f1 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+13], al
  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06OIGFGPHJ@Escape?$AA@
  0004f	89 85 f6 f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+14], eax
  00055	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06OIGFGPHJ@Escape?$AA@+4
  0005c	66 89 8d fa f1
	ff ff		 mov	 WORD PTR _Temp$[ebp+18], cx
  00063	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06OIGFGPHJ@Escape?$AA@+6
  00069	88 95 fc f1 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+20], dl
  0006f	33 c0		 xor	 eax, eax
  00071	89 85 fd f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+21], eax
  00077	66 89 85 01 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+25], ax
  0007e	88 85 03 f2 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+27], al
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05LMCOLBBI@1?5Key?$AA@
  00089	89 85 04 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+28], eax
  0008f	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05LMCOLBBI@1?5Key?$AA@+4
  00096	66 89 8d 08 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+32], cx
  0009d	33 c0		 xor	 eax, eax
  0009f	89 85 0a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+34], eax
  000a5	89 85 0e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+38], eax
  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05DKLKMDLG@2?5Key?$AA@
  000b0	89 85 12 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+42], eax
  000b6	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05DKLKMDLG@2?5Key?$AA@+4
  000bd	66 89 8d 16 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+46], cx
  000c4	33 c0		 xor	 eax, eax
  000c6	89 85 18 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+48], eax
  000cc	89 85 1c f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+52], eax
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05PBOGBABD@3?5Key?$AA@
  000d7	89 85 20 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+56], eax
  000dd	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05PBOGBABD@3?5Key?$AA@+4
  000e4	66 89 8d 24 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+60], cx
  000eb	33 c0		 xor	 eax, eax
  000ed	89 85 26 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+62], eax
  000f3	89 85 2a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+66], eax
  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05OMODCAKL@4?5Key?$AA@
  000fe	89 85 2e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+70], eax
  00104	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05OMODCAKL@4?5Key?$AA@+4
  0010b	66 89 8d 32 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+74], cx
  00112	33 c0		 xor	 eax, eax
  00114	89 85 34 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+76], eax
  0011a	89 85 38 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+80], eax
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05CHLPPDAO@5?5Key?$AA@
  00125	89 85 3c f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+84], eax
  0012b	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05CHLPPDAO@5?5Key?$AA@+4
  00132	66 89 8d 40 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+88], cx
  00139	33 c0		 xor	 eax, eax
  0013b	89 85 42 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+90], eax
  00141	89 85 46 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+94], eax
  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05KBCLIBKA@6?5Key?$AA@
  0014c	89 85 4a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+98], eax
  00152	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05KBCLIBKA@6?5Key?$AA@+4
  00159	66 89 8d 4e f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+102], cx
  00160	33 c0		 xor	 eax, eax
  00162	89 85 50 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+104], eax
  00168	89 85 54 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+108], eax
  0016e	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05GKHHFCAF@7?5Key?$AA@
  00173	89 85 58 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+112], eax
  00179	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05GKHHFCAF@7?5Key?$AA@+4
  00180	66 89 8d 5c f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+116], cx
  00187	33 c0		 xor	 eax, eax
  00189	89 85 5e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+118], eax
  0018f	89 85 62 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+122], eax
  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05JLCBOANA@8?5Key?$AA@
  0019a	89 85 66 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+126], eax
  001a0	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05JLCBOANA@8?5Key?$AA@+4
  001a7	66 89 8d 6a f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+130], cx
  001ae	33 c0		 xor	 eax, eax
  001b0	89 85 6c f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+132], eax
  001b6	89 85 70 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+136], eax
  001bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05FAHNDDHF@9?5Key?$AA@
  001c1	89 85 74 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+140], eax
  001c7	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05FAHNDDHF@9?5Key?$AA@+4
  001ce	66 89 8d 78 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+144], cx
  001d5	33 c0		 xor	 eax, eax
  001d7	89 85 7a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+146], eax
  001dd	89 85 7e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+150], eax
  001e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05HHHCGCLN@0?5Key?$AA@
  001e8	89 85 82 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+154], eax
  001ee	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05HHHCGCLN@0?5Key?$AA@+4
  001f5	66 89 8d 86 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+158], cx
  001fc	33 c0		 xor	 eax, eax
  001fe	89 85 88 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+160], eax
  00204	89 85 8c f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+164], eax
  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05MIDKHDPI@?9?5Key?$AA@
  0020f	89 85 90 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+168], eax
  00215	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05MIDKHDPI@?9?5Key?$AA@+4
  0021c	66 89 8d 94 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+172], cx
  00223	33 c0		 xor	 eax, eax
  00225	89 85 96 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+174], eax
  0022b	89 85 9a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+178], eax
  00231	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05MLOMHBGD@?$DN?5Key?$AA@
  00236	89 85 9e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+182], eax
  0023c	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05MLOMHBGD@?$DN?5Key?$AA@+4
  00243	66 89 8d a2 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+186], cx
  0024a	33 c0		 xor	 eax, eax
  0024c	89 85 a4 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+188], eax
  00252	89 85 a8 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+192], eax
  00258	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@
  0025d	89 85 ac f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+196], eax
  00263	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@+4
  00269	89 8d b0 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+200], ecx
  0026f	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@+8
  00276	66 89 95 b4 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+204], dx
  0027d	33 c0		 xor	 eax, eax
  0027f	89 85 b6 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+206], eax
  00285	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03IEAKBACE@Tab?$AA@
  0028a	89 85 ba f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+210], eax
  00290	33 c0		 xor	 eax, eax
  00292	89 85 be f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+214], eax
  00298	89 85 c2 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+218], eax
  0029e	66 89 85 c6 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+222], ax
  002a5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BNIGIBBF@Q?$AA@
  002ab	66 89 85 c8 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+224], ax
  002b2	33 c0		 xor	 eax, eax
  002b4	89 85 ca f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+226], eax
  002ba	89 85 ce f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+230], eax
  002c0	89 85 d2 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+234], eax

; 541  : 				  "W","E","R","T","Y","U","I","O","P","[","]","Right Enter","Left Control","A","S","D",

  002c6	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01ELNMCGJD@W?$AA@
  002cc	66 89 85 d6 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+238], ax
  002d3	33 c0		 xor	 eax, eax
  002d5	89 85 d8 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+240], eax
  002db	89 85 dc f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+244], eax
  002e1	89 85 e0 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+248], eax
  002e7	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01DDCIFGEA@E?$AA@
  002ed	66 89 85 e4 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+252], ax
  002f4	33 c0		 xor	 eax, eax
  002f6	89 85 e6 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+254], eax
  002fc	89 85 ea f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+258], eax
  00302	89 85 ee f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+262], eax
  00308	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01DGKLNCNG@R?$AA@
  0030e	66 89 85 f2 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+266], ax
  00315	33 c0		 xor	 eax, eax
  00317	89 85 f4 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+268], eax
  0031d	89 85 f8 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+272], eax
  00323	89 85 fc f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+276], eax
  00329	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01GAPBHFFA@T?$AA@
  0032f	66 89 85 00 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+280], ax
  00336	33 c0		 xor	 eax, eax
  00338	89 85 02 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+282], eax
  0033e	89 85 06 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+286], eax
  00344	89 85 0a f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+290], eax
  0034a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01NFFPALBN@Y?$AA@
  00350	66 89 85 0e f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+294], ax
  00357	33 c0		 xor	 eax, eax
  00359	89 85 10 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+296], eax
  0035f	89 85 14 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+300], eax
  00365	89 85 18 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+304], eax
  0036b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01HJOKEEBB@U?$AA@
  00371	66 89 85 1c f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+308], ax
  00378	33 c0		 xor	 eax, eax
  0037a	89 85 1e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+310], eax
  00380	89 85 22 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+314], eax
  00386	89 85 26 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+318], eax
  0038c	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01JPJNBJEM@I?$AA@
  00392	66 89 85 2a f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+322], ax
  00399	33 c0		 xor	 eax, eax
  0039b	89 85 2c f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+324], eax
  003a1	89 85 30 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+328], eax
  003a7	89 85 34 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+332], eax
  003ad	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01MJMHLOMK@O?$AA@
  003b3	66 89 85 38 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+336], ax
  003ba	33 c0		 xor	 eax, eax
  003bc	89 85 3a f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+338], eax
  003c2	89 85 3e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+342], eax
  003c8	89 85 42 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+346], eax
  003ce	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01EJNLAFE@P?$AA@
  003d4	66 89 85 46 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+350], ax
  003db	33 c0		 xor	 eax, eax
  003dd	89 85 48 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+352], eax
  003e3	89 85 4c f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+356], eax
  003e9	89 85 50 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+360], eax
  003ef	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01OHGJGJJP@?$FL?$AA@
  003f5	66 89 85 54 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+364], ax
  003fc	33 c0		 xor	 eax, eax
  003fe	89 85 56 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+366], eax
  00404	89 85 5a f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+370], eax
  0040a	89 85 5e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+374], eax
  00410	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
  00416	66 89 85 62 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+378], ax
  0041d	33 c0		 xor	 eax, eax
  0041f	89 85 64 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+380], eax
  00425	89 85 68 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+384], eax
  0042b	89 85 6c f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+388], eax
  00431	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
  00436	89 85 70 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+392], eax
  0043c	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+4
  00442	89 8d 74 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+396], ecx
  00448	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+8
  0044e	89 95 78 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+400], edx
  00454	33 c0		 xor	 eax, eax
  00456	66 89 85 7c f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+404], ax
  0045d	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@
  00462	89 85 7e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+406], eax
  00468	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+4
  0046e	89 8d 82 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+410], ecx
  00474	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+8
  0047a	89 95 86 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+414], edx
  00480	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+12
  00485	88 85 8a f3 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+418], al
  0048b	33 c0		 xor	 eax, eax
  0048d	88 85 8b f3 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+419], al
  00493	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01FHEEJDEE@A?$AA@
  00499	66 89 85 8c f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+420], ax
  004a0	33 c0		 xor	 eax, eax
  004a2	89 85 8e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+422], eax
  004a8	89 85 92 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+426], eax
  004ae	89 85 96 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+430], eax
  004b4	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01CPLAODJH@S?$AA@
  004ba	66 89 85 9a f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+434], ax
  004c1	33 c0		 xor	 eax, eax
  004c3	89 85 9c f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+436], eax
  004c9	89 85 a0 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+440], eax
  004cf	89 85 a4 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+444], eax
  004d5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01CKDDGHAB@D?$AA@
  004db	66 89 85 a8 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+448], ax
  004e2	33 c0		 xor	 eax, eax
  004e4	89 85 aa f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+450], eax
  004ea	89 85 ae f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+454], eax
  004f0	89 85 b2 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+458], eax

; 542  : 				  "F","G","H","J","K","L",";","\'","`","Left Shift","\\","Z","X","C","V","B",

  004f6	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BIAFAFID@F?$AA@
  004fc	66 89 85 b6 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+462], ax
  00503	33 c0		 xor	 eax, eax
  00505	89 85 b8 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+464], eax
  0050b	89 85 bc f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+468], eax
  00511	89 85 c0 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+472], eax
  00517	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BBODEMC@G?$AA@
  0051d	66 89 85 c4 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+476], ax
  00524	33 c0		 xor	 eax, eax
  00526	89 85 c6 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+478], eax
  0052c	89 85 ca f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+482], eax
  00532	89 85 ce f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+486], eax
  00538	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01IGIGCIAN@H?$AA@
  0053e	66 89 85 d2 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+490], ax
  00545	33 c0		 xor	 eax, eax
  00547	89 85 d4 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+492], eax
  0054d	89 85 d8 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+496], eax
  00553	89 85 dc f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+500], eax
  00559	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01LELAEKIP@J?$AA@
  0055f	66 89 85 e0 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+504], ax
  00566	33 c0		 xor	 eax, eax
  00568	89 85 e2 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+506], eax
  0056e	89 85 e6 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+510], eax
  00574	89 85 ea f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+514], eax
  0057a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KNKLHLMO@K?$AA@
  00580	66 89 85 ee f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+518], ax
  00587	33 c0		 xor	 eax, eax
  00589	89 85 f0 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+520], eax
  0058f	89 85 f4 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+524], eax
  00595	89 85 f8 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+528], eax
  0059b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01OCOKONAJ@L?$AA@
  005a1	66 89 85 fc f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+532], ax
  005a8	33 c0		 xor	 eax, eax
  005aa	89 85 fe f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+534], eax
  005b0	89 85 02 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+538], eax
  005b6	89 85 06 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+542], eax
  005bc	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01ICJEACDI@?$DL?$AA@
  005c2	66 89 85 0a f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+546], ax
  005c9	33 c0		 xor	 eax, eax
  005cb	89 85 0c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+548], eax
  005d1	89 85 10 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+552], eax
  005d7	89 85 14 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+556], eax
  005dd	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01GEODFPGF@?8?$AA@
  005e3	66 89 85 18 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+560], ax
  005ea	33 c0		 xor	 eax, eax
  005ec	89 85 1a f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+562], eax
  005f2	89 85 1e f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+566], eax
  005f8	89 85 22 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+570], eax
  005fe	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01NLNLIGKH@?$GA?$AA@
  00604	66 89 85 26 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+574], ax
  0060b	33 c0		 xor	 eax, eax
  0060d	89 85 28 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+576], eax
  00613	89 85 2c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+580], eax
  00619	89 85 30 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+584], eax
  0061f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@
  00624	89 85 34 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+588], eax
  0062a	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+4
  00630	89 8d 38 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+592], ecx
  00636	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+8
  0063d	66 89 95 3c f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+596], dx
  00644	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+10
  00649	88 85 3e f4 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+598], al
  0064f	33 c0		 xor	 eax, eax
  00651	66 89 85 3f f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+599], ax
  00658	88 85 41 f4 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+601], al
  0065e	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  00664	66 89 85 42 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+602], ax
  0066b	33 c0		 xor	 eax, eax
  0066d	89 85 44 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+604], eax
  00673	89 85 48 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+608], eax
  00679	89 85 4c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+612], eax
  0067f	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01POHCFINO@Z?$AA@
  00685	66 89 85 50 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+616], ax
  0068c	33 c0		 xor	 eax, eax
  0068e	89 85 52 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+618], eax
  00694	89 85 56 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+622], eax
  0069a	89 85 5a f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+626], eax
  006a0	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01MMEEDKFM@X?$AA@
  006a6	66 89 85 5e f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+630], ax
  006ad	33 c0		 xor	 eax, eax
  006af	89 85 60 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+632], eax
  006b5	89 85 64 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+636], eax
  006bb	89 85 68 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+640], eax
  006c1	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01GFHCPBMG@C?$AA@
  006c7	66 89 85 6c f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+644], ax
  006ce	33 c0		 xor	 eax, eax
  006d0	89 85 6e f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+646], eax
  006d6	89 85 72 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+650], eax
  006dc	89 85 76 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+654], eax
  006e2	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01FCMHBHNC@V?$AA@
  006e8	66 89 85 7a f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+658], ax
  006ef	33 c0		 xor	 eax, eax
  006f1	89 85 7c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+660], eax
  006f7	89 85 80 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+664], eax
  006fd	89 85 84 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+668], eax
  00703	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01HMGJMAIH@B?$AA@
  00709	66 89 85 88 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+672], ax
  00710	33 c0		 xor	 eax, eax
  00712	89 85 8a f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+674], eax
  00718	89 85 8e f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+678], eax
  0071e	89 85 92 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+682], eax

; 543  : 				  "N","M",",",".","/","Right Shift","*","Left Alt","Space","Caps Lock","F1","F2","F3","F4","F5","F6",

  00724	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01NANMIPIL@N?$AA@
  0072a	66 89 85 96 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+686], ax
  00731	33 c0		 xor	 eax, eax
  00733	89 85 98 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+688], eax
  00739	89 85 9c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+692], eax
  0073f	89 85 a0 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+696], eax
  00745	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01PLPBNMEI@M?$AA@
  0074b	66 89 85 a4 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+700], ax
  00752	33 c0		 xor	 eax, eax
  00754	89 85 a6 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+702], eax
  0075a	89 85 aa f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+706], eax
  00760	89 85 ae f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+710], eax
  00766	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
  0076c	66 89 85 b2 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+714], ax
  00773	33 c0		 xor	 eax, eax
  00775	89 85 b4 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+716], eax
  0077b	89 85 b8 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+720], eax
  00781	89 85 bc f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+724], eax
  00787	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01LFCBOECM@?4?$AA@
  0078d	66 89 85 c0 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+728], ax
  00794	33 c0		 xor	 eax, eax
  00796	89 85 c2 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+730], eax
  0079c	89 85 c6 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+734], eax
  007a2	89 85 ca f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+738], eax
  007a8	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KMDKNFGN@?1?$AA@
  007ae	66 89 85 ce f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+742], ax
  007b5	33 c0		 xor	 eax, eax
  007b7	89 85 d0 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+744], eax
  007bd	89 85 d4 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+748], eax
  007c3	89 85 d8 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+752], eax
  007c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@
  007ce	89 85 dc f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+756], eax
  007d4	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@+4
  007da	89 8d e0 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+760], ecx
  007e0	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@+8
  007e6	89 95 e4 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+764], edx
  007ec	33 c0		 xor	 eax, eax
  007ee	66 89 85 e8 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+768], ax
  007f5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01NBENCBCI@?$CK?$AA@
  007fb	66 89 85 ea f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+770], ax
  00802	33 c0		 xor	 eax, eax
  00804	89 85 ec f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+772], eax
  0080a	89 85 f0 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+776], eax
  00810	89 85 f4 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+780], eax
  00816	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@
  0081b	89 85 f8 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+784], eax
  00821	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@+4
  00827	89 8d fc f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+788], ecx
  0082d	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@+8
  00833	88 95 00 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+792], dl
  00839	33 c0		 xor	 eax, eax
  0083b	89 85 01 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+793], eax
  00841	88 85 05 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+797], al
  00847	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05OMHELODH@Space?$AA@
  0084c	89 85 06 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+798], eax
  00852	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05OMHELODH@Space?$AA@+4
  00859	66 89 8d 0a f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+802], cx
  00860	33 c0		 xor	 eax, eax
  00862	89 85 0c f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+804], eax
  00868	89 85 10 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+808], eax
  0086e	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@
  00873	89 85 14 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+812], eax
  00879	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@+4
  0087f	89 8d 18 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+816], ecx
  00885	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@+8
  0088c	66 89 95 1c f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+820], dx
  00893	33 c0		 xor	 eax, eax
  00895	89 85 1e f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+822], eax
  0089b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02LCPENACN@F1?$AA@
  008a1	66 89 85 22 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+826], ax
  008a8	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02LCPENACN@F1?$AA@+2
  008ae	88 8d 24 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+828], cl
  008b4	33 c0		 xor	 eax, eax
  008b6	89 85 25 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+829], eax
  008bc	89 85 29 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+833], eax
  008c2	66 89 85 2d f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+837], ax
  008c9	88 85 2f f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+839], al
  008cf	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02JJNJIDOO@F2?$AA@
  008d5	66 89 85 30 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+840], ax
  008dc	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02JJNJIDOO@F2?$AA@+2
  008e2	88 8d 32 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+842], cl
  008e8	33 c0		 xor	 eax, eax
  008ea	89 85 33 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+843], eax
  008f0	89 85 37 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+847], eax
  008f6	66 89 85 3b f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+851], ax
  008fd	88 85 3d f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+853], al
  00903	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02IAMCLCKP@F3?$AA@
  00909	66 89 85 3e f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+854], ax
  00910	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02IAMCLCKP@F3?$AA@+2
  00916	88 8d 40 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+856], cl
  0091c	33 c0		 xor	 eax, eax
  0091e	89 85 41 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+857], eax
  00924	89 85 45 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+861], eax
  0092a	66 89 85 49 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+865], ax
  00931	88 85 4b f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+867], al
  00937	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02MPIDCEGI@F4?$AA@
  0093d	66 89 85 4c f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+868], ax
  00944	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02MPIDCEGI@F4?$AA@+2
  0094a	88 8d 4e f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+870], cl
  00950	33 c0		 xor	 eax, eax
  00952	89 85 4f f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+871], eax
  00958	89 85 53 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+875], eax
  0095e	66 89 85 57 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+879], ax
  00965	88 85 59 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+881], al
  0096b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02NGJIBFCJ@F5?$AA@
  00971	66 89 85 5a f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+882], ax
  00978	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02NGJIBFCJ@F5?$AA@+2
  0097e	88 8d 5c f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+884], cl
  00984	33 c0		 xor	 eax, eax
  00986	89 85 5d f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+885], eax
  0098c	89 85 61 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+889], eax
  00992	66 89 85 65 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+893], ax
  00999	88 85 67 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+895], al
  0099f	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02PNLFEGOK@F6?$AA@
  009a5	66 89 85 68 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+896], ax
  009ac	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02PNLFEGOK@F6?$AA@+2
  009b2	88 8d 6a f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+898], cl
  009b8	33 c0		 xor	 eax, eax
  009ba	89 85 6b f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+899], eax
  009c0	89 85 6f f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+903], eax
  009c6	66 89 85 73 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+907], ax
  009cd	88 85 75 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+909], al

; 544  : 				  "F7","F8","F9","F10","Num Lock","","7","8","9","-","4","5","6","+","1","2",

  009d3	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02OEKOHHKL@F7?$AA@
  009d9	66 89 85 76 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+910], ax
  009e0	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02OEKOHHKL@F7?$AA@+2
  009e6	88 8d 78 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+912], cl
  009ec	33 c0		 xor	 eax, eax
  009ee	89 85 79 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+913], eax
  009f4	89 85 7d f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+917], eax
  009fa	66 89 85 81 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+921], ax
  00a01	88 85 83 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+923], al
  00a07	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02GDDGGLGE@F8?$AA@
  00a0d	66 89 85 84 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+924], ax
  00a14	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02GDDGGLGE@F8?$AA@+2
  00a1a	88 8d 86 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+926], cl
  00a20	33 c0		 xor	 eax, eax
  00a22	89 85 87 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+927], eax
  00a28	89 85 8b f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+931], eax
  00a2e	66 89 85 8f f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+935], ax
  00a35	88 85 91 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+937], al
  00a3b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02HKCNFKCF@F9?$AA@
  00a41	66 89 85 92 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+938], ax
  00a48	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02HKCNFKCF@F9?$AA@+2
  00a4e	88 8d 94 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+940], cl
  00a54	33 c0		 xor	 eax, eax
  00a56	89 85 95 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+941], eax
  00a5c	89 85 99 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+945], eax
  00a62	66 89 85 9d f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+949], ax
  00a69	88 85 9f f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+951], al
  00a6f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03JKCLJOFG@F10?$AA@
  00a74	89 85 a0 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+952], eax
  00a7a	33 c0		 xor	 eax, eax
  00a7c	89 85 a4 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+956], eax
  00a82	89 85 a8 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+960], eax
  00a88	66 89 85 ac f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+964], ax
  00a8f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@
  00a94	89 85 ae f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+966], eax
  00a9a	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@+4
  00aa0	89 8d b2 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+970], ecx
  00aa6	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@+8
  00aac	88 95 b6 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+974], dl
  00ab2	33 c0		 xor	 eax, eax
  00ab4	89 85 b7 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+975], eax
  00aba	88 85 bb f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+979], al
  00ac0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00ac5	88 85 bc f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+980], al
  00acb	33 c0		 xor	 eax, eax
  00acd	89 85 bd f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+981], eax
  00ad3	89 85 c1 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+985], eax
  00ad9	89 85 c5 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+989], eax
  00adf	88 85 c9 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+993], al
  00ae5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01COCBENDE@7?$AA@
  00aeb	66 89 85 ca f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+994], ax
  00af2	33 c0		 xor	 eax, eax
  00af4	89 85 cc f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+996], eax
  00afa	89 85 d0 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1000], eax
  00b00	89 85 d4 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1004], eax
  00b06	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KJLJFBPL@8?$AA@
  00b0c	66 89 85 d8 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+1008], ax
  00b13	33 c0		 xor	 eax, eax
  00b15	89 85 da f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1010], eax
  00b1b	89 85 de f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1014], eax
  00b21	89 85 e2 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1018], eax
  00b27	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01LAKCGALK@9?$AA@
  00b2d	66 89 85 e6 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+1022], ax
  00b34	33 c0		 xor	 eax, eax
  00b36	89 85 e8 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1024], eax
  00b3c	89 85 ec f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1028], eax
  00b42	89 85 f0 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1032], eax
  00b48	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01JOAMLHOP@?9?$AA@
  00b4e	66 89 85 f4 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+1036], ax
  00b55	33 c0		 xor	 eax, eax
  00b57	89 85 f6 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1038], eax
  00b5d	89 85 fa f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1042], eax
  00b63	89 85 fe f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1046], eax
  00b69	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01FAMBOPH@4?$AA@
  00b6f	66 89 85 02 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1050], ax
  00b76	33 c0		 xor	 eax, eax
  00b78	89 85 04 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1052], eax
  00b7e	89 85 08 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1056], eax
  00b84	89 85 0c f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1060], eax
  00b8a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BMBHCPLG@5?$AA@
  00b90	66 89 85 10 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1064], ax
  00b97	33 c0		 xor	 eax, eax
  00b99	89 85 12 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1066], eax
  00b9f	89 85 16 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1070], eax
  00ba5	89 85 1a f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1074], eax
  00bab	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01DHDKHMHF@6?$AA@
  00bb1	66 89 85 1e f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1078], ax
  00bb8	33 c0		 xor	 eax, eax
  00bba	89 85 20 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1080], eax
  00bc0	89 85 24 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1084], eax
  00bc6	89 85 28 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1088], eax
  00bcc	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01MIFGBAGJ@?$CL?$AA@
  00bd2	66 89 85 2c f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1092], ax
  00bd9	33 c0		 xor	 eax, eax
  00bdb	89 85 2e f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1094], eax
  00be1	89 85 32 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1098], eax
  00be7	89 85 36 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1102], eax
  00bed	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01HIHLOKLC@1?$AA@
  00bf3	66 89 85 3a f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1106], ax
  00bfa	33 c0		 xor	 eax, eax
  00bfc	89 85 3c f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1108], eax
  00c02	89 85 40 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1112], eax
  00c08	89 85 44 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1116], eax
  00c0e	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01FDFGLJHB@2?$AA@
  00c14	66 89 85 48 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1120], ax
  00c1b	33 c0		 xor	 eax, eax
  00c1d	89 85 4a f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1122], eax
  00c23	89 85 4e f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1126], eax
  00c29	89 85 52 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1130], eax

; 545  : 				  "3","0","Num .","SysRq","","","F11","F12","","","","","","","","",

  00c2f	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01EKENIIDA@3?$AA@
  00c35	66 89 85 56 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1134], ax
  00c3c	33 c0		 xor	 eax, eax
  00c3e	89 85 58 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1136], eax
  00c44	89 85 5c f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1140], eax
  00c4a	89 85 60 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1144], eax
  00c50	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01GBGANLPD@0?$AA@
  00c56	66 89 85 64 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1148], ax
  00c5d	33 c0		 xor	 eax, eax
  00c5f	89 85 66 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1150], eax
  00c65	89 85 6a f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1154], eax
  00c6b	89 85 6e f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1158], eax
  00c71	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05LAFLDKON@Num?5?4?$AA@
  00c76	89 85 72 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1162], eax
  00c7c	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05LAFLDKON@Num?5?4?$AA@+4
  00c83	66 89 8d 76 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1166], cx
  00c8a	33 c0		 xor	 eax, eax
  00c8c	89 85 78 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1168], eax
  00c92	89 85 7c f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1172], eax
  00c98	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05BAHDBLKA@SysRq?$AA@
  00c9d	89 85 80 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1176], eax
  00ca3	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05BAHDBLKA@SysRq?$AA@+4
  00caa	66 89 8d 84 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1180], cx
  00cb1	33 c0		 xor	 eax, eax
  00cb3	89 85 86 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1182], eax
  00cb9	89 85 8a f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1186], eax
  00cbf	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00cc4	88 85 8e f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1190], al
  00cca	33 c0		 xor	 eax, eax
  00ccc	89 85 8f f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1191], eax
  00cd2	89 85 93 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1195], eax
  00cd8	89 85 97 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1199], eax
  00cde	88 85 9b f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1203], al
  00ce4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00ce9	88 85 9c f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1204], al
  00cef	33 c0		 xor	 eax, eax
  00cf1	89 85 9d f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1205], eax
  00cf7	89 85 a1 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1209], eax
  00cfd	89 85 a5 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1213], eax
  00d03	88 85 a9 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1217], al
  00d09	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03IDDAKPBH@F11?$AA@
  00d0e	89 85 aa f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1218], eax
  00d14	33 c0		 xor	 eax, eax
  00d16	89 85 ae f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1222], eax
  00d1c	89 85 b2 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1226], eax
  00d22	66 89 85 b6 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1230], ax
  00d29	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03KIBNPMNE@F12?$AA@
  00d2e	89 85 b8 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1232], eax
  00d34	33 c0		 xor	 eax, eax
  00d36	89 85 bc f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1236], eax
  00d3c	89 85 c0 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1240], eax
  00d42	66 89 85 c4 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1244], ax
  00d49	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00d4e	88 85 c6 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1246], al
  00d54	33 c0		 xor	 eax, eax
  00d56	89 85 c7 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1247], eax
  00d5c	89 85 cb f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1251], eax
  00d62	89 85 cf f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1255], eax
  00d68	88 85 d3 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1259], al
  00d6e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00d73	88 85 d4 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1260], al
  00d79	33 c0		 xor	 eax, eax
  00d7b	89 85 d5 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1261], eax
  00d81	89 85 d9 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1265], eax
  00d87	89 85 dd f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1269], eax
  00d8d	88 85 e1 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1273], al
  00d93	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00d98	88 85 e2 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1274], al
  00d9e	33 c0		 xor	 eax, eax
  00da0	89 85 e3 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1275], eax
  00da6	89 85 e7 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1279], eax
  00dac	89 85 eb f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1283], eax
  00db2	88 85 ef f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1287], al
  00db8	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00dbd	88 85 f0 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1288], al
  00dc3	33 c0		 xor	 eax, eax
  00dc5	89 85 f1 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1289], eax
  00dcb	89 85 f5 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1293], eax
  00dd1	89 85 f9 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1297], eax
  00dd7	88 85 fd f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1301], al
  00ddd	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00de2	88 85 fe f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1302], al
  00de8	33 c0		 xor	 eax, eax
  00dea	89 85 ff f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1303], eax
  00df0	89 85 03 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1307], eax
  00df6	89 85 07 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1311], eax
  00dfc	88 85 0b f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1315], al
  00e02	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e07	88 85 0c f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1316], al
  00e0d	33 c0		 xor	 eax, eax
  00e0f	89 85 0d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1317], eax
  00e15	89 85 11 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1321], eax
  00e1b	89 85 15 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1325], eax
  00e21	88 85 19 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1329], al
  00e27	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e2c	88 85 1a f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1330], al
  00e32	33 c0		 xor	 eax, eax
  00e34	89 85 1b f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1331], eax
  00e3a	89 85 1f f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1335], eax
  00e40	89 85 23 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1339], eax
  00e46	88 85 27 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1343], al
  00e4c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e51	88 85 28 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1344], al
  00e57	33 c0		 xor	 eax, eax
  00e59	89 85 29 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1345], eax
  00e5f	89 85 2d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1349], eax
  00e65	89 85 31 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1353], eax
  00e6b	88 85 35 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1357], al

; 546  : 				  "","","","","","","","","","","","","","","","",

  00e71	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e76	88 85 36 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1358], al
  00e7c	33 c0		 xor	 eax, eax
  00e7e	89 85 37 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1359], eax
  00e84	89 85 3b f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1363], eax
  00e8a	89 85 3f f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1367], eax
  00e90	88 85 43 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1371], al
  00e96	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e9b	88 85 44 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1372], al
  00ea1	33 c0		 xor	 eax, eax
  00ea3	89 85 45 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1373], eax
  00ea9	89 85 49 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1377], eax
  00eaf	89 85 4d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1381], eax
  00eb5	88 85 51 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1385], al
  00ebb	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00ec0	88 85 52 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1386], al
  00ec6	33 c0		 xor	 eax, eax
  00ec8	89 85 53 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1387], eax
  00ece	89 85 57 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1391], eax
  00ed4	89 85 5b f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1395], eax
  00eda	88 85 5f f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1399], al
  00ee0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00ee5	88 85 60 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1400], al
  00eeb	33 c0		 xor	 eax, eax
  00eed	89 85 61 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1401], eax
  00ef3	89 85 65 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1405], eax
  00ef9	89 85 69 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1409], eax
  00eff	88 85 6d f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1413], al
  00f05	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f0a	88 85 6e f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1414], al
  00f10	33 c0		 xor	 eax, eax
  00f12	89 85 6f f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1415], eax
  00f18	89 85 73 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1419], eax
  00f1e	89 85 77 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1423], eax
  00f24	88 85 7b f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1427], al
  00f2a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f2f	88 85 7c f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1428], al
  00f35	33 c0		 xor	 eax, eax
  00f37	89 85 7d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1429], eax
  00f3d	89 85 81 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1433], eax
  00f43	89 85 85 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1437], eax
  00f49	88 85 89 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1441], al
  00f4f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f54	88 85 8a f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1442], al
  00f5a	33 c0		 xor	 eax, eax
  00f5c	89 85 8b f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1443], eax
  00f62	89 85 8f f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1447], eax
  00f68	89 85 93 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1451], eax
  00f6e	88 85 97 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1455], al
  00f74	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f79	88 85 98 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1456], al
  00f7f	33 c0		 xor	 eax, eax
  00f81	89 85 99 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1457], eax
  00f87	89 85 9d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1461], eax
  00f8d	89 85 a1 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1465], eax
  00f93	88 85 a5 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1469], al
  00f99	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f9e	88 85 a6 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1470], al
  00fa4	33 c0		 xor	 eax, eax
  00fa6	89 85 a7 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1471], eax
  00fac	89 85 ab f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1475], eax
  00fb2	89 85 af f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1479], eax
  00fb8	88 85 b3 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1483], al
  00fbe	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00fc3	88 85 b4 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1484], al
  00fc9	33 c0		 xor	 eax, eax
  00fcb	89 85 b5 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1485], eax
  00fd1	89 85 b9 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1489], eax
  00fd7	89 85 bd f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1493], eax
  00fdd	88 85 c1 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1497], al
  00fe3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00fe8	88 85 c2 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1498], al
  00fee	33 c0		 xor	 eax, eax
  00ff0	89 85 c3 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1499], eax
  00ff6	89 85 c7 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1503], eax
  00ffc	89 85 cb f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1507], eax
  01002	88 85 cf f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1511], al
  01008	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0100d	88 85 d0 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1512], al
  01013	33 c0		 xor	 eax, eax
  01015	89 85 d1 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1513], eax
  0101b	89 85 d5 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1517], eax
  01021	89 85 d9 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1521], eax
  01027	88 85 dd f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1525], al
  0102d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01032	88 85 de f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1526], al
  01038	33 c0		 xor	 eax, eax
  0103a	89 85 df f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1527], eax
  01040	89 85 e3 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1531], eax
  01046	89 85 e7 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1535], eax
  0104c	88 85 eb f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1539], al
  01052	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01057	88 85 ec f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1540], al
  0105d	33 c0		 xor	 eax, eax
  0105f	89 85 ed f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1541], eax
  01065	89 85 f1 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1545], eax
  0106b	89 85 f5 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1549], eax
  01071	88 85 f9 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1553], al
  01077	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0107c	88 85 fa f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1554], al
  01082	33 c0		 xor	 eax, eax
  01084	89 85 fb f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1555], eax
  0108a	89 85 ff f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1559], eax
  01090	89 85 03 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1563], eax
  01096	88 85 07 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1567], al
  0109c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  010a1	88 85 08 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1568], al
  010a7	33 c0		 xor	 eax, eax
  010a9	89 85 09 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1569], eax
  010af	89 85 0d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1573], eax
  010b5	89 85 11 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1577], eax
  010bb	88 85 15 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1581], al

; 547  : 				  "","","","","","","","","","","","","","","","",

  010c1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  010c6	88 85 16 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1582], al
  010cc	33 c0		 xor	 eax, eax
  010ce	89 85 17 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1583], eax
  010d4	89 85 1b f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1587], eax
  010da	89 85 1f f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1591], eax
  010e0	88 85 23 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1595], al
  010e6	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  010eb	88 85 24 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1596], al
  010f1	33 c0		 xor	 eax, eax
  010f3	89 85 25 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1597], eax
  010f9	89 85 29 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1601], eax
  010ff	89 85 2d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1605], eax
  01105	88 85 31 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1609], al
  0110b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01110	88 85 32 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1610], al
  01116	33 c0		 xor	 eax, eax
  01118	89 85 33 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1611], eax
  0111e	89 85 37 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1615], eax
  01124	89 85 3b f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1619], eax
  0112a	88 85 3f f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1623], al
  01130	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01135	88 85 40 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1624], al
  0113b	33 c0		 xor	 eax, eax
  0113d	89 85 41 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1625], eax
  01143	89 85 45 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1629], eax
  01149	89 85 49 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1633], eax
  0114f	88 85 4d f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1637], al
  01155	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0115a	88 85 4e f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1638], al
  01160	33 c0		 xor	 eax, eax
  01162	89 85 4f f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1639], eax
  01168	89 85 53 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1643], eax
  0116e	89 85 57 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1647], eax
  01174	88 85 5b f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1651], al
  0117a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0117f	88 85 5c f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1652], al
  01185	33 c0		 xor	 eax, eax
  01187	89 85 5d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1653], eax
  0118d	89 85 61 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1657], eax
  01193	89 85 65 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1661], eax
  01199	88 85 69 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1665], al
  0119f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  011a4	88 85 6a f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1666], al
  011aa	33 c0		 xor	 eax, eax
  011ac	89 85 6b f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1667], eax
  011b2	89 85 6f f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1671], eax
  011b8	89 85 73 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1675], eax
  011be	88 85 77 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1679], al
  011c4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  011c9	88 85 78 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1680], al
  011cf	33 c0		 xor	 eax, eax
  011d1	89 85 79 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1681], eax
  011d7	89 85 7d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1685], eax
  011dd	89 85 81 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1689], eax
  011e3	88 85 85 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1693], al
  011e9	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  011ee	88 85 86 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1694], al
  011f4	33 c0		 xor	 eax, eax
  011f6	89 85 87 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1695], eax
  011fc	89 85 8b f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1699], eax
  01202	89 85 8f f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1703], eax
  01208	88 85 93 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1707], al
  0120e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01213	88 85 94 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1708], al
  01219	33 c0		 xor	 eax, eax
  0121b	89 85 95 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1709], eax
  01221	89 85 99 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1713], eax
  01227	89 85 9d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1717], eax
  0122d	88 85 a1 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1721], al
  01233	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01238	88 85 a2 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1722], al
  0123e	33 c0		 xor	 eax, eax
  01240	89 85 a3 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1723], eax
  01246	89 85 a7 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1727], eax
  0124c	89 85 ab f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1731], eax
  01252	88 85 af f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1735], al
  01258	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0125d	88 85 b0 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1736], al
  01263	33 c0		 xor	 eax, eax
  01265	89 85 b1 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1737], eax
  0126b	89 85 b5 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1741], eax
  01271	89 85 b9 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1745], eax
  01277	88 85 bd f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1749], al
  0127d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01282	88 85 be f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1750], al
  01288	33 c0		 xor	 eax, eax
  0128a	89 85 bf f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1751], eax
  01290	89 85 c3 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1755], eax
  01296	89 85 c7 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1759], eax
  0129c	88 85 cb f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1763], al
  012a2	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  012a7	88 85 cc f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1764], al
  012ad	33 c0		 xor	 eax, eax
  012af	89 85 cd f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1765], eax
  012b5	89 85 d1 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1769], eax
  012bb	89 85 d5 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1773], eax
  012c1	88 85 d9 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1777], al
  012c7	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  012cc	88 85 da f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1778], al
  012d2	33 c0		 xor	 eax, eax
  012d4	89 85 db f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1779], eax
  012da	89 85 df f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1783], eax
  012e0	89 85 e3 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1787], eax
  012e6	88 85 e7 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1791], al
  012ec	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  012f1	88 85 e8 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1792], al
  012f7	33 c0		 xor	 eax, eax
  012f9	89 85 e9 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1793], eax
  012ff	89 85 ed f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1797], eax
  01305	89 85 f1 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1801], eax
  0130b	88 85 f5 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1805], al

; 548  : 				  "","","","","","","","","","","","","","","","",

  01311	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01316	88 85 f6 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1806], al
  0131c	33 c0		 xor	 eax, eax
  0131e	89 85 f7 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1807], eax
  01324	89 85 fb f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1811], eax
  0132a	89 85 ff f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1815], eax
  01330	88 85 03 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1819], al
  01336	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0133b	88 85 04 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1820], al
  01341	33 c0		 xor	 eax, eax
  01343	89 85 05 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1821], eax
  01349	89 85 09 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1825], eax
  0134f	89 85 0d f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1829], eax
  01355	88 85 11 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1833], al
  0135b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01360	88 85 12 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1834], al
  01366	33 c0		 xor	 eax, eax
  01368	89 85 13 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1835], eax
  0136e	89 85 17 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1839], eax
  01374	89 85 1b f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1843], eax
  0137a	88 85 1f f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1847], al
  01380	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01385	88 85 20 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1848], al
  0138b	33 c0		 xor	 eax, eax
  0138d	89 85 21 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1849], eax
  01393	89 85 25 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1853], eax
  01399	89 85 29 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1857], eax
  0139f	88 85 2d f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1861], al
  013a5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  013aa	88 85 2e f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1862], al
  013b0	33 c0		 xor	 eax, eax
  013b2	89 85 2f f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1863], eax
  013b8	89 85 33 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1867], eax
  013be	89 85 37 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1871], eax
  013c4	88 85 3b f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1875], al
  013ca	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  013cf	88 85 3c f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1876], al
  013d5	33 c0		 xor	 eax, eax
  013d7	89 85 3d f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1877], eax
  013dd	89 85 41 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1881], eax
  013e3	89 85 45 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1885], eax
  013e9	88 85 49 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1889], al
  013ef	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  013f4	88 85 4a f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1890], al
  013fa	33 c0		 xor	 eax, eax
  013fc	89 85 4b f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1891], eax
  01402	89 85 4f f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1895], eax
  01408	89 85 53 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1899], eax
  0140e	88 85 57 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1903], al
  01414	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01419	88 85 58 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1904], al
  0141f	33 c0		 xor	 eax, eax
  01421	89 85 59 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1905], eax
  01427	89 85 5d f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1909], eax
  0142d	89 85 61 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1913], eax
  01433	88 85 65 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1917], al
  01439	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0143e	88 85 66 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1918], al
  01444	33 c0		 xor	 eax, eax
  01446	89 85 67 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1919], eax
  0144c	89 85 6b f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1923], eax
  01452	89 85 6f f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1927], eax
  01458	88 85 73 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1931], al
  0145e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01463	88 85 74 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1932], al
  01469	33 c0		 xor	 eax, eax
  0146b	89 85 75 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1933], eax
  01471	89 85 79 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1937], eax
  01477	89 85 7d f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1941], eax
  0147d	88 85 81 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1945], al
  01483	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01488	88 85 82 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1946], al
  0148e	33 c0		 xor	 eax, eax
  01490	89 85 83 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1947], eax
  01496	89 85 87 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1951], eax
  0149c	89 85 8b f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1955], eax
  014a2	88 85 8f f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1959], al
  014a8	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  014ad	88 85 90 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1960], al
  014b3	33 c0		 xor	 eax, eax
  014b5	89 85 91 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1961], eax
  014bb	89 85 95 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1965], eax
  014c1	89 85 99 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1969], eax
  014c7	88 85 9d f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1973], al
  014cd	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  014d2	88 85 9e f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1974], al
  014d8	33 c0		 xor	 eax, eax
  014da	89 85 9f f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1975], eax
  014e0	89 85 a3 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1979], eax
  014e6	89 85 a7 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1983], eax
  014ec	88 85 ab f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1987], al
  014f2	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  014f7	88 85 ac f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1988], al
  014fd	33 c0		 xor	 eax, eax
  014ff	89 85 ad f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1989], eax
  01505	89 85 b1 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1993], eax
  0150b	89 85 b5 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1997], eax
  01511	88 85 b9 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2001], al
  01517	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0151c	88 85 ba f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2002], al
  01522	33 c0		 xor	 eax, eax
  01524	89 85 bb f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2003], eax
  0152a	89 85 bf f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2007], eax
  01530	89 85 c3 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2011], eax
  01536	88 85 c7 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2015], al
  0153c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01541	88 85 c8 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2016], al
  01547	33 c0		 xor	 eax, eax
  01549	89 85 c9 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2017], eax
  0154f	89 85 cd f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2021], eax
  01555	89 85 d1 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2025], eax
  0155b	88 85 d5 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2029], al

; 549  : 				  "","","","","","","","","","","","Right Enter","Right Control","","","",

  01561	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01566	88 85 d6 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2030], al
  0156c	33 c0		 xor	 eax, eax
  0156e	89 85 d7 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2031], eax
  01574	89 85 db f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2035], eax
  0157a	89 85 df f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2039], eax
  01580	88 85 e3 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2043], al
  01586	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0158b	88 85 e4 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2044], al
  01591	33 c0		 xor	 eax, eax
  01593	89 85 e5 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2045], eax
  01599	89 85 e9 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2049], eax
  0159f	89 85 ed f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2053], eax
  015a5	88 85 f1 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2057], al
  015ab	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  015b0	88 85 f2 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2058], al
  015b6	33 c0		 xor	 eax, eax
  015b8	89 85 f3 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2059], eax
  015be	89 85 f7 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2063], eax
  015c4	89 85 fb f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2067], eax
  015ca	88 85 ff f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2071], al
  015d0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  015d5	88 85 00 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2072], al
  015db	33 c0		 xor	 eax, eax
  015dd	89 85 01 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2073], eax
  015e3	89 85 05 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2077], eax
  015e9	89 85 09 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2081], eax
  015ef	88 85 0d fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2085], al
  015f5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  015fa	88 85 0e fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2086], al
  01600	33 c0		 xor	 eax, eax
  01602	89 85 0f fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2087], eax
  01608	89 85 13 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2091], eax
  0160e	89 85 17 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2095], eax
  01614	88 85 1b fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2099], al
  0161a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0161f	88 85 1c fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2100], al
  01625	33 c0		 xor	 eax, eax
  01627	89 85 1d fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2101], eax
  0162d	89 85 21 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2105], eax
  01633	89 85 25 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2109], eax
  01639	88 85 29 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2113], al
  0163f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01644	88 85 2a fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2114], al
  0164a	33 c0		 xor	 eax, eax
  0164c	89 85 2b fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2115], eax
  01652	89 85 2f fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2119], eax
  01658	89 85 33 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2123], eax
  0165e	88 85 37 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2127], al
  01664	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01669	88 85 38 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2128], al
  0166f	33 c0		 xor	 eax, eax
  01671	89 85 39 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2129], eax
  01677	89 85 3d fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2133], eax
  0167d	89 85 41 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2137], eax
  01683	88 85 45 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2141], al
  01689	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0168e	88 85 46 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2142], al
  01694	33 c0		 xor	 eax, eax
  01696	89 85 47 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2143], eax
  0169c	89 85 4b fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2147], eax
  016a2	89 85 4f fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2151], eax
  016a8	88 85 53 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2155], al
  016ae	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  016b3	88 85 54 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2156], al
  016b9	33 c0		 xor	 eax, eax
  016bb	89 85 55 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2157], eax
  016c1	89 85 59 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2161], eax
  016c7	89 85 5d fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2165], eax
  016cd	88 85 61 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2169], al
  016d3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  016d8	88 85 62 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2170], al
  016de	33 c0		 xor	 eax, eax
  016e0	89 85 63 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2171], eax
  016e6	89 85 67 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2175], eax
  016ec	89 85 6b fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2179], eax
  016f2	88 85 6f fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2183], al
  016f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
  016fd	89 85 70 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2184], eax
  01703	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+4
  01709	89 8d 74 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2188], ecx
  0170f	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+8
  01715	89 95 78 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2192], edx
  0171b	33 c0		 xor	 eax, eax
  0171d	66 89 85 7c fa
	ff ff		 mov	 WORD PTR _Temp$[ebp+2196], ax
  01724	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@
  01729	89 85 7e fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2198], eax
  0172f	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+4
  01735	89 8d 82 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2202], ecx
  0173b	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+8
  01741	89 95 86 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2206], edx
  01747	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+12
  0174d	66 89 85 8a fa
	ff ff		 mov	 WORD PTR _Temp$[ebp+2210], ax
  01754	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01759	88 85 8c fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2212], al
  0175f	33 c0		 xor	 eax, eax
  01761	89 85 8d fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2213], eax
  01767	89 85 91 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2217], eax
  0176d	89 85 95 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2221], eax
  01773	88 85 99 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2225], al
  01779	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0177e	88 85 9a fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2226], al
  01784	33 c0		 xor	 eax, eax
  01786	89 85 9b fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2227], eax
  0178c	89 85 9f fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2231], eax
  01792	89 85 a3 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2235], eax
  01798	88 85 a7 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2239], al
  0179e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  017a3	88 85 a8 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2240], al
  017a9	33 c0		 xor	 eax, eax
  017ab	89 85 a9 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2241], eax
  017b1	89 85 ad fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2245], eax
  017b7	89 85 b1 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2249], eax
  017bd	88 85 b5 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2253], al

; 550  : 				  "","","","","","","","","","","","","","","","",

  017c3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  017c8	88 85 b6 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2254], al
  017ce	33 c0		 xor	 eax, eax
  017d0	89 85 b7 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2255], eax
  017d6	89 85 bb fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2259], eax
  017dc	89 85 bf fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2263], eax
  017e2	88 85 c3 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2267], al
  017e8	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  017ed	88 85 c4 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2268], al
  017f3	33 c0		 xor	 eax, eax
  017f5	89 85 c5 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2269], eax
  017fb	89 85 c9 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2273], eax
  01801	89 85 cd fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2277], eax
  01807	88 85 d1 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2281], al
  0180d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01812	88 85 d2 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2282], al
  01818	33 c0		 xor	 eax, eax
  0181a	89 85 d3 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2283], eax
  01820	89 85 d7 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2287], eax
  01826	89 85 db fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2291], eax
  0182c	88 85 df fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2295], al
  01832	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01837	88 85 e0 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2296], al
  0183d	33 c0		 xor	 eax, eax
  0183f	89 85 e1 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2297], eax
  01845	89 85 e5 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2301], eax
  0184b	89 85 e9 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2305], eax
  01851	88 85 ed fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2309], al
  01857	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0185c	88 85 ee fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2310], al
  01862	33 c0		 xor	 eax, eax
  01864	89 85 ef fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2311], eax
  0186a	89 85 f3 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2315], eax
  01870	89 85 f7 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2319], eax
  01876	88 85 fb fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2323], al
  0187c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01881	88 85 fc fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2324], al
  01887	33 c0		 xor	 eax, eax
  01889	89 85 fd fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2325], eax
  0188f	89 85 01 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2329], eax
  01895	89 85 05 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2333], eax
  0189b	88 85 09 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2337], al
  018a1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  018a6	88 85 0a fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2338], al
  018ac	33 c0		 xor	 eax, eax
  018ae	89 85 0b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2339], eax
  018b4	89 85 0f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2343], eax
  018ba	89 85 13 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2347], eax
  018c0	88 85 17 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2351], al
  018c6	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  018cb	88 85 18 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2352], al
  018d1	33 c0		 xor	 eax, eax
  018d3	89 85 19 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2353], eax
  018d9	89 85 1d fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2357], eax
  018df	89 85 21 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2361], eax
  018e5	88 85 25 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2365], al
  018eb	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  018f0	88 85 26 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2366], al
  018f6	33 c0		 xor	 eax, eax
  018f8	89 85 27 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2367], eax
  018fe	89 85 2b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2371], eax
  01904	89 85 2f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2375], eax
  0190a	88 85 33 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2379], al
  01910	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01915	88 85 34 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2380], al
  0191b	33 c0		 xor	 eax, eax
  0191d	89 85 35 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2381], eax
  01923	89 85 39 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2385], eax
  01929	89 85 3d fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2389], eax
  0192f	88 85 41 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2393], al
  01935	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0193a	88 85 42 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2394], al
  01940	33 c0		 xor	 eax, eax
  01942	89 85 43 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2395], eax
  01948	89 85 47 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2399], eax
  0194e	89 85 4b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2403], eax
  01954	88 85 4f fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2407], al
  0195a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0195f	88 85 50 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2408], al
  01965	33 c0		 xor	 eax, eax
  01967	89 85 51 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2409], eax
  0196d	89 85 55 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2413], eax
  01973	89 85 59 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2417], eax
  01979	88 85 5d fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2421], al
  0197f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01984	88 85 5e fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2422], al
  0198a	33 c0		 xor	 eax, eax
  0198c	89 85 5f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2423], eax
  01992	89 85 63 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2427], eax
  01998	89 85 67 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2431], eax
  0199e	88 85 6b fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2435], al
  019a4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  019a9	88 85 6c fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2436], al
  019af	33 c0		 xor	 eax, eax
  019b1	89 85 6d fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2437], eax
  019b7	89 85 71 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2441], eax
  019bd	89 85 75 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2445], eax
  019c3	88 85 79 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2449], al
  019c9	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  019ce	88 85 7a fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2450], al
  019d4	33 c0		 xor	 eax, eax
  019d6	89 85 7b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2451], eax
  019dc	89 85 7f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2455], eax
  019e2	89 85 83 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2459], eax
  019e8	88 85 87 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2463], al
  019ee	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  019f3	88 85 88 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2464], al
  019f9	33 c0		 xor	 eax, eax
  019fb	89 85 89 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2465], eax
  01a01	89 85 8d fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2469], eax
  01a07	89 85 91 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2473], eax
  01a0d	88 85 95 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2477], al

; 551  : 				  "","Function F3","","","/ Num","","Print Screen","Right Alt","","","","","","","","",

  01a13	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01a18	88 85 96 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2478], al
  01a1e	33 c0		 xor	 eax, eax
  01a20	89 85 97 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2479], eax
  01a26	89 85 9b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2483], eax
  01a2c	89 85 9f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2487], eax
  01a32	88 85 a3 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2491], al
  01a38	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@
  01a3d	89 85 a4 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2492], eax
  01a43	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@+4
  01a49	89 8d a8 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2496], ecx
  01a4f	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@+8
  01a55	89 95 ac fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2500], edx
  01a5b	33 c0		 xor	 eax, eax
  01a5d	66 89 85 b0 fb
	ff ff		 mov	 WORD PTR _Temp$[ebp+2504], ax
  01a64	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01a69	88 85 b2 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2506], al
  01a6f	33 c0		 xor	 eax, eax
  01a71	89 85 b3 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2507], eax
  01a77	89 85 b7 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2511], eax
  01a7d	89 85 bb fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2515], eax
  01a83	88 85 bf fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2519], al
  01a89	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01a8e	88 85 c0 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2520], al
  01a94	33 c0		 xor	 eax, eax
  01a96	89 85 c1 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2521], eax
  01a9c	89 85 c5 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2525], eax
  01aa2	89 85 c9 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2529], eax
  01aa8	88 85 cd fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2533], al
  01aae	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05IAKEFGOE@?1?5Num?$AA@
  01ab3	89 85 ce fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2534], eax
  01ab9	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05IAKEFGOE@?1?5Num?$AA@+4
  01ac0	66 89 8d d2 fb
	ff ff		 mov	 WORD PTR _Temp$[ebp+2538], cx
  01ac7	33 c0		 xor	 eax, eax
  01ac9	89 85 d4 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2540], eax
  01acf	89 85 d8 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2544], eax
  01ad5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01ada	88 85 dc fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2548], al
  01ae0	33 c0		 xor	 eax, eax
  01ae2	89 85 dd fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2549], eax
  01ae8	89 85 e1 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2553], eax
  01aee	89 85 e5 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2557], eax
  01af4	88 85 e9 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2561], al
  01afa	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@
  01aff	89 85 ea fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2562], eax
  01b05	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+4
  01b0b	89 8d ee fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2566], ecx
  01b11	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+8
  01b17	89 95 f2 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2570], edx
  01b1d	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+12
  01b22	88 85 f6 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2574], al
  01b28	33 c0		 xor	 eax, eax
  01b2a	88 85 f7 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2575], al
  01b30	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@
  01b35	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2576], eax
  01b3b	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@+4
  01b41	89 8d fc fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2580], ecx
  01b47	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@+8
  01b4e	66 89 95 00 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2584], dx
  01b55	33 c0		 xor	 eax, eax
  01b57	89 85 02 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2586], eax
  01b5d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01b62	88 85 06 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2590], al
  01b68	33 c0		 xor	 eax, eax
  01b6a	89 85 07 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2591], eax
  01b70	89 85 0b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2595], eax
  01b76	89 85 0f fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2599], eax
  01b7c	88 85 13 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2603], al
  01b82	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01b87	88 85 14 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2604], al
  01b8d	33 c0		 xor	 eax, eax
  01b8f	89 85 15 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2605], eax
  01b95	89 85 19 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2609], eax
  01b9b	89 85 1d fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2613], eax
  01ba1	88 85 21 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2617], al
  01ba7	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01bac	88 85 22 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2618], al
  01bb2	33 c0		 xor	 eax, eax
  01bb4	89 85 23 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2619], eax
  01bba	89 85 27 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2623], eax
  01bc0	89 85 2b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2627], eax
  01bc6	88 85 2f fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2631], al
  01bcc	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01bd1	88 85 30 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2632], al
  01bd7	33 c0		 xor	 eax, eax
  01bd9	89 85 31 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2633], eax
  01bdf	89 85 35 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2637], eax
  01be5	89 85 39 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2641], eax
  01beb	88 85 3d fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2645], al
  01bf1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01bf6	88 85 3e fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2646], al
  01bfc	33 c0		 xor	 eax, eax
  01bfe	89 85 3f fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2647], eax
  01c04	89 85 43 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2651], eax
  01c0a	89 85 47 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2655], eax
  01c10	88 85 4b fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2659], al
  01c16	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01c1b	88 85 4c fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2660], al
  01c21	33 c0		 xor	 eax, eax
  01c23	89 85 4d fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2661], eax
  01c29	89 85 51 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2665], eax
  01c2f	89 85 55 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2669], eax
  01c35	88 85 59 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2673], al
  01c3b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01c40	88 85 5a fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2674], al
  01c46	33 c0		 xor	 eax, eax
  01c48	89 85 5b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2675], eax
  01c4e	89 85 5f fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2679], eax
  01c54	89 85 63 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2683], eax
  01c5a	88 85 67 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2687], al
  01c60	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01c65	88 85 68 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2688], al
  01c6b	33 c0		 xor	 eax, eax
  01c6d	89 85 69 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2689], eax
  01c73	89 85 6d fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2693], eax
  01c79	89 85 71 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2697], eax
  01c7f	88 85 75 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2701], al

; 552  : 				  "","","","","Pause","Break","Home","Up","Page Up","","Left","","Right","","End","Down",

  01c85	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01c8a	88 85 76 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2702], al
  01c90	33 c0		 xor	 eax, eax
  01c92	89 85 77 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2703], eax
  01c98	89 85 7b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2707], eax
  01c9e	89 85 7f fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2711], eax
  01ca4	88 85 83 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2715], al
  01caa	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01caf	88 85 84 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2716], al
  01cb5	33 c0		 xor	 eax, eax
  01cb7	89 85 85 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2717], eax
  01cbd	89 85 89 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2721], eax
  01cc3	89 85 8d fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2725], eax
  01cc9	88 85 91 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2729], al
  01ccf	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01cd4	88 85 92 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2730], al
  01cda	33 c0		 xor	 eax, eax
  01cdc	89 85 93 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2731], eax
  01ce2	89 85 97 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2735], eax
  01ce8	89 85 9b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2739], eax
  01cee	88 85 9f fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2743], al
  01cf4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01cf9	88 85 a0 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2744], al
  01cff	33 c0		 xor	 eax, eax
  01d01	89 85 a1 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2745], eax
  01d07	89 85 a5 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2749], eax
  01d0d	89 85 a9 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2753], eax
  01d13	88 85 ad fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2757], al
  01d19	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05PEDNBBBD@Pause?$AA@
  01d1e	89 85 ae fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2758], eax
  01d24	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05PEDNBBBD@Pause?$AA@+4
  01d2b	66 89 8d b2 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2762], cx
  01d32	33 c0		 xor	 eax, eax
  01d34	89 85 b4 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2764], eax
  01d3a	89 85 b8 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2768], eax
  01d40	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05EMFLFCNO@Break?$AA@
  01d45	89 85 bc fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2772], eax
  01d4b	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05EMFLFCNO@Break?$AA@+4
  01d52	66 89 8d c0 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2776], cx
  01d59	33 c0		 xor	 eax, eax
  01d5b	89 85 c2 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2778], eax
  01d61	89 85 c6 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2782], eax
  01d67	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04GKJODLKO@Home?$AA@
  01d6c	89 85 ca fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2786], eax
  01d72	8a 0d 04 00 00
	00		 mov	 cl, BYTE PTR ??_C@_04GKJODLKO@Home?$AA@+4
  01d78	88 8d ce fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2790], cl
  01d7e	33 c0		 xor	 eax, eax
  01d80	89 85 cf fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2791], eax
  01d86	89 85 d3 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2795], eax
  01d8c	88 85 d7 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2799], al
  01d92	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02EFPGLDEA@Up?$AA@
  01d98	66 89 85 d8 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2800], ax
  01d9f	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02EFPGLDEA@Up?$AA@+2
  01da5	88 8d da fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2802], cl
  01dab	33 c0		 xor	 eax, eax
  01dad	89 85 db fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2803], eax
  01db3	89 85 df fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2807], eax
  01db9	66 89 85 e3 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2811], ax
  01dc0	88 85 e5 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2813], al
  01dc6	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07EDGDGJEN@Page?5Up?$AA@
  01dcb	89 85 e6 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2814], eax
  01dd1	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07EDGDGJEN@Page?5Up?$AA@+4
  01dd7	89 8d ea fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2818], ecx
  01ddd	33 c0		 xor	 eax, eax
  01ddf	89 85 ee fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2822], eax
  01de5	66 89 85 f2 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2826], ax
  01dec	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01df1	88 85 f4 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2828], al
  01df7	33 c0		 xor	 eax, eax
  01df9	89 85 f5 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2829], eax
  01dff	89 85 f9 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2833], eax
  01e05	89 85 fd fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2837], eax
  01e0b	88 85 01 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2841], al
  01e11	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04KPCPLBPL@Left?$AA@
  01e16	89 85 02 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2842], eax
  01e1c	8a 0d 04 00 00
	00		 mov	 cl, BYTE PTR ??_C@_04KPCPLBPL@Left?$AA@+4
  01e22	88 8d 06 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2846], cl
  01e28	33 c0		 xor	 eax, eax
  01e2a	89 85 07 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2847], eax
  01e30	89 85 0b fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2851], eax
  01e36	88 85 0f fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2855], al
  01e3c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01e41	88 85 10 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2856], al
  01e47	33 c0		 xor	 eax, eax
  01e49	89 85 11 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2857], eax
  01e4f	89 85 15 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2861], eax
  01e55	89 85 19 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2865], eax
  01e5b	88 85 1d fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2869], al
  01e61	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05DADPALEM@Right?$AA@
  01e66	89 85 1e fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2870], eax
  01e6c	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05DADPALEM@Right?$AA@+4
  01e73	66 89 8d 22 fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2874], cx
  01e7a	33 c0		 xor	 eax, eax
  01e7c	89 85 24 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2876], eax
  01e82	89 85 28 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2880], eax
  01e88	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01e8d	88 85 2c fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2884], al
  01e93	33 c0		 xor	 eax, eax
  01e95	89 85 2d fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2885], eax
  01e9b	89 85 31 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2889], eax
  01ea1	89 85 35 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2893], eax
  01ea7	88 85 39 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2897], al
  01ead	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03DBKJMAGF@End?$AA@
  01eb2	89 85 3a fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2898], eax
  01eb8	33 c0		 xor	 eax, eax
  01eba	89 85 3e fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2902], eax
  01ec0	89 85 42 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2906], eax
  01ec6	66 89 85 46 fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2910], ax
  01ecd	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04FNCLCJMC@Down?$AA@
  01ed2	89 85 48 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2912], eax
  01ed8	8a 0d 04 00 00
	00		 mov	 cl, BYTE PTR ??_C@_04FNCLCJMC@Down?$AA@+4
  01ede	88 8d 4c fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2916], cl
  01ee4	33 c0		 xor	 eax, eax
  01ee6	89 85 4d fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2917], eax
  01eec	89 85 51 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2921], eax
  01ef2	88 85 55 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2925], al

; 553  : 				  "Page Down","Insert","Delete","","","","","","","","Left Windows","Right Windows","Thing","","","",

  01ef8	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@
  01efd	89 85 56 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2926], eax
  01f03	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@+4
  01f09	89 8d 5a fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2930], ecx
  01f0f	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@+8
  01f16	66 89 95 5e fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2934], dx
  01f1d	33 c0		 xor	 eax, eax
  01f1f	89 85 60 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2936], eax
  01f25	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06CPFCODOD@Insert?$AA@
  01f2a	89 85 64 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2940], eax
  01f30	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06CPFCODOD@Insert?$AA@+4
  01f37	66 89 8d 68 fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2944], cx
  01f3e	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06CPFCODOD@Insert?$AA@+6
  01f44	88 95 6a fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2946], dl
  01f4a	33 c0		 xor	 eax, eax
  01f4c	89 85 6b fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2947], eax
  01f52	66 89 85 6f fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2951], ax
  01f59	88 85 71 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2953], al
  01f5f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06JBKGCNBB@Delete?$AA@
  01f64	89 85 72 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2954], eax
  01f6a	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06JBKGCNBB@Delete?$AA@+4
  01f71	66 89 8d 76 fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2958], cx
  01f78	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06JBKGCNBB@Delete?$AA@+6
  01f7e	88 95 78 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2960], dl
  01f84	33 c0		 xor	 eax, eax
  01f86	89 85 79 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2961], eax
  01f8c	66 89 85 7d fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2965], ax
  01f93	88 85 7f fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2967], al
  01f99	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01f9e	88 85 80 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2968], al
  01fa4	33 c0		 xor	 eax, eax
  01fa6	89 85 81 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2969], eax
  01fac	89 85 85 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2973], eax
  01fb2	89 85 89 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2977], eax
  01fb8	88 85 8d fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2981], al
  01fbe	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01fc3	88 85 8e fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2982], al
  01fc9	33 c0		 xor	 eax, eax
  01fcb	89 85 8f fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2983], eax
  01fd1	89 85 93 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2987], eax
  01fd7	89 85 97 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2991], eax
  01fdd	88 85 9b fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2995], al
  01fe3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01fe8	88 85 9c fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2996], al
  01fee	33 c0		 xor	 eax, eax
  01ff0	89 85 9d fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2997], eax
  01ff6	89 85 a1 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3001], eax
  01ffc	89 85 a5 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3005], eax
  02002	88 85 a9 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3009], al
  02008	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0200d	88 85 aa fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3010], al
  02013	33 c0		 xor	 eax, eax
  02015	89 85 ab fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3011], eax
  0201b	89 85 af fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3015], eax
  02021	89 85 b3 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3019], eax
  02027	88 85 b7 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3023], al
  0202d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02032	88 85 b8 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3024], al
  02038	33 c0		 xor	 eax, eax
  0203a	89 85 b9 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3025], eax
  02040	89 85 bd fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3029], eax
  02046	89 85 c1 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3033], eax
  0204c	88 85 c5 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3037], al
  02052	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02057	88 85 c6 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3038], al
  0205d	33 c0		 xor	 eax, eax
  0205f	89 85 c7 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3039], eax
  02065	89 85 cb fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3043], eax
  0206b	89 85 cf fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3047], eax
  02071	88 85 d3 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3051], al
  02077	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0207c	88 85 d4 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3052], al
  02082	33 c0		 xor	 eax, eax
  02084	89 85 d5 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3053], eax
  0208a	89 85 d9 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3057], eax
  02090	89 85 dd fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3061], eax
  02096	88 85 e1 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3065], al
  0209c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@
  020a1	89 85 e2 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3066], eax
  020a7	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+4
  020ad	89 8d e6 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3070], ecx
  020b3	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+8
  020b9	89 95 ea fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3074], edx
  020bf	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+12
  020c4	88 85 ee fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3078], al
  020ca	33 c0		 xor	 eax, eax
  020cc	88 85 ef fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3079], al
  020d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@
  020d7	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3080], eax
  020dd	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+4
  020e3	89 8d f4 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3084], ecx
  020e9	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+8
  020ef	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3088], edx
  020f5	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+12
  020fb	66 89 85 fc fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+3092], ax
  02102	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05FOLLILPC@Thing?$AA@
  02107	89 85 fe fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3094], eax
  0210d	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05FOLLILPC@Thing?$AA@+4
  02114	66 89 8d 02 fe
	ff ff		 mov	 WORD PTR _Temp$[ebp+3098], cx
  0211b	33 c0		 xor	 eax, eax
  0211d	89 85 04 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3100], eax
  02123	89 85 08 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3104], eax
  02129	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0212e	88 85 0c fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3108], al
  02134	33 c0		 xor	 eax, eax
  02136	89 85 0d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3109], eax
  0213c	89 85 11 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3113], eax
  02142	89 85 15 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3117], eax
  02148	88 85 19 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3121], al
  0214e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02153	88 85 1a fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3122], al
  02159	33 c0		 xor	 eax, eax
  0215b	89 85 1b fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3123], eax
  02161	89 85 1f fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3127], eax
  02167	89 85 23 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3131], eax
  0216d	88 85 27 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3135], al
  02173	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02178	88 85 28 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3136], al
  0217e	33 c0		 xor	 eax, eax
  02180	89 85 29 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3137], eax
  02186	89 85 2d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3141], eax
  0218c	89 85 31 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3145], eax
  02192	88 85 35 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3149], al

; 554  : 				  "","","","","","","","","","","","","","","","",

  02198	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0219d	88 85 36 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3150], al
  021a3	33 c0		 xor	 eax, eax
  021a5	89 85 37 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3151], eax
  021ab	89 85 3b fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3155], eax
  021b1	89 85 3f fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3159], eax
  021b7	88 85 43 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3163], al
  021bd	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  021c2	88 85 44 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3164], al
  021c8	33 c0		 xor	 eax, eax
  021ca	89 85 45 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3165], eax
  021d0	89 85 49 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3169], eax
  021d6	89 85 4d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3173], eax
  021dc	88 85 51 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3177], al
  021e2	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  021e7	88 85 52 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3178], al
  021ed	33 c0		 xor	 eax, eax
  021ef	89 85 53 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3179], eax
  021f5	89 85 57 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3183], eax
  021fb	89 85 5b fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3187], eax
  02201	88 85 5f fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3191], al
  02207	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0220c	88 85 60 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3192], al
  02212	33 c0		 xor	 eax, eax
  02214	89 85 61 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3193], eax
  0221a	89 85 65 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3197], eax
  02220	89 85 69 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3201], eax
  02226	88 85 6d fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3205], al
  0222c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02231	88 85 6e fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3206], al
  02237	33 c0		 xor	 eax, eax
  02239	89 85 6f fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3207], eax
  0223f	89 85 73 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3211], eax
  02245	89 85 77 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3215], eax
  0224b	88 85 7b fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3219], al
  02251	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02256	88 85 7c fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3220], al
  0225c	33 c0		 xor	 eax, eax
  0225e	89 85 7d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3221], eax
  02264	89 85 81 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3225], eax
  0226a	89 85 85 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3229], eax
  02270	88 85 89 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3233], al
  02276	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0227b	88 85 8a fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3234], al
  02281	33 c0		 xor	 eax, eax
  02283	89 85 8b fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3235], eax
  02289	89 85 8f fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3239], eax
  0228f	89 85 93 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3243], eax
  02295	88 85 97 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3247], al
  0229b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  022a0	88 85 98 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3248], al
  022a6	33 c0		 xor	 eax, eax
  022a8	89 85 99 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3249], eax
  022ae	89 85 9d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3253], eax
  022b4	89 85 a1 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3257], eax
  022ba	88 85 a5 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3261], al
  022c0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  022c5	88 85 a6 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3262], al
  022cb	33 c0		 xor	 eax, eax
  022cd	89 85 a7 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3263], eax
  022d3	89 85 ab fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3267], eax
  022d9	89 85 af fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3271], eax
  022df	88 85 b3 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3275], al
  022e5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  022ea	88 85 b4 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3276], al
  022f0	33 c0		 xor	 eax, eax
  022f2	89 85 b5 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3277], eax
  022f8	89 85 b9 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3281], eax
  022fe	89 85 bd fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3285], eax
  02304	88 85 c1 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3289], al
  0230a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0230f	88 85 c2 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3290], al
  02315	33 c0		 xor	 eax, eax
  02317	89 85 c3 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3291], eax
  0231d	89 85 c7 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3295], eax
  02323	89 85 cb fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3299], eax
  02329	88 85 cf fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3303], al
  0232f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02334	88 85 d0 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3304], al
  0233a	33 c0		 xor	 eax, eax
  0233c	89 85 d1 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3305], eax
  02342	89 85 d5 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3309], eax
  02348	89 85 d9 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3313], eax
  0234e	88 85 dd fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3317], al
  02354	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02359	88 85 de fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3318], al
  0235f	33 c0		 xor	 eax, eax
  02361	89 85 df fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3319], eax
  02367	89 85 e3 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3323], eax
  0236d	89 85 e7 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3327], eax
  02373	88 85 eb fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3331], al
  02379	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0237e	88 85 ec fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3332], al
  02384	33 c0		 xor	 eax, eax
  02386	89 85 ed fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3333], eax
  0238c	89 85 f1 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3337], eax
  02392	89 85 f5 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3341], eax
  02398	88 85 f9 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3345], al
  0239e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  023a3	88 85 fa fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3346], al
  023a9	33 c0		 xor	 eax, eax
  023ab	89 85 fb fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3347], eax
  023b1	89 85 ff fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3351], eax
  023b7	89 85 03 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3355], eax
  023bd	88 85 07 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3359], al
  023c3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  023c8	88 85 08 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3360], al
  023ce	33 c0		 xor	 eax, eax
  023d0	89 85 09 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3361], eax
  023d6	89 85 0d ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3365], eax
  023dc	89 85 11 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3369], eax
  023e2	88 85 15 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3373], al

; 555  : 				  "","","","","","","","","","","","","","","",""};

  023e8	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  023ed	88 85 16 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3374], al
  023f3	33 c0		 xor	 eax, eax
  023f5	89 85 17 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3375], eax
  023fb	89 85 1b ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3379], eax
  02401	89 85 1f ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3383], eax
  02407	88 85 23 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3387], al
  0240d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02412	88 85 24 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3388], al
  02418	33 c0		 xor	 eax, eax
  0241a	89 85 25 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3389], eax
  02420	89 85 29 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3393], eax
  02426	89 85 2d ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3397], eax
  0242c	88 85 31 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3401], al
  02432	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02437	88 85 32 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3402], al
  0243d	33 c0		 xor	 eax, eax
  0243f	89 85 33 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3403], eax
  02445	89 85 37 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3407], eax
  0244b	89 85 3b ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3411], eax
  02451	88 85 3f ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3415], al
  02457	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0245c	88 85 40 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3416], al
  02462	33 c0		 xor	 eax, eax
  02464	89 85 41 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3417], eax
  0246a	89 85 45 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3421], eax
  02470	89 85 49 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3425], eax
  02476	88 85 4d ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3429], al
  0247c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02481	88 85 4e ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3430], al
  02487	33 c0		 xor	 eax, eax
  02489	89 85 4f ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3431], eax
  0248f	89 85 53 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3435], eax
  02495	89 85 57 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3439], eax
  0249b	88 85 5b ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3443], al
  024a1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  024a6	88 85 5c ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3444], al
  024ac	33 c0		 xor	 eax, eax
  024ae	89 85 5d ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3445], eax
  024b4	89 85 61 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3449], eax
  024ba	89 85 65 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3453], eax
  024c0	88 85 69 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3457], al
  024c6	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  024cb	88 85 6a ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3458], al
  024d1	33 c0		 xor	 eax, eax
  024d3	89 85 6b ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3459], eax
  024d9	89 85 6f ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3463], eax
  024df	89 85 73 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3467], eax
  024e5	88 85 77 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3471], al
  024eb	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  024f0	88 85 78 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3472], al
  024f6	33 c0		 xor	 eax, eax
  024f8	89 85 79 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3473], eax
  024fe	89 85 7d ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3477], eax
  02504	89 45 81	 mov	 DWORD PTR _Temp$[ebp+3481], eax
  02507	88 45 85	 mov	 BYTE PTR _Temp$[ebp+3485], al
  0250a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0250f	88 45 86	 mov	 BYTE PTR _Temp$[ebp+3486], al
  02512	33 c0		 xor	 eax, eax
  02514	89 45 87	 mov	 DWORD PTR _Temp$[ebp+3487], eax
  02517	89 45 8b	 mov	 DWORD PTR _Temp$[ebp+3491], eax
  0251a	89 45 8f	 mov	 DWORD PTR _Temp$[ebp+3495], eax
  0251d	88 45 93	 mov	 BYTE PTR _Temp$[ebp+3499], al
  02520	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02525	88 45 94	 mov	 BYTE PTR _Temp$[ebp+3500], al
  02528	33 c0		 xor	 eax, eax
  0252a	89 45 95	 mov	 DWORD PTR _Temp$[ebp+3501], eax
  0252d	89 45 99	 mov	 DWORD PTR _Temp$[ebp+3505], eax
  02530	89 45 9d	 mov	 DWORD PTR _Temp$[ebp+3509], eax
  02533	88 45 a1	 mov	 BYTE PTR _Temp$[ebp+3513], al
  02536	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0253b	88 45 a2	 mov	 BYTE PTR _Temp$[ebp+3514], al
  0253e	33 c0		 xor	 eax, eax
  02540	89 45 a3	 mov	 DWORD PTR _Temp$[ebp+3515], eax
  02543	89 45 a7	 mov	 DWORD PTR _Temp$[ebp+3519], eax
  02546	89 45 ab	 mov	 DWORD PTR _Temp$[ebp+3523], eax
  02549	88 45 af	 mov	 BYTE PTR _Temp$[ebp+3527], al
  0254c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02551	88 45 b0	 mov	 BYTE PTR _Temp$[ebp+3528], al
  02554	33 c0		 xor	 eax, eax
  02556	89 45 b1	 mov	 DWORD PTR _Temp$[ebp+3529], eax
  02559	89 45 b5	 mov	 DWORD PTR _Temp$[ebp+3533], eax
  0255c	89 45 b9	 mov	 DWORD PTR _Temp$[ebp+3537], eax
  0255f	88 45 bd	 mov	 BYTE PTR _Temp$[ebp+3541], al
  02562	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02567	88 45 be	 mov	 BYTE PTR _Temp$[ebp+3542], al
  0256a	33 c0		 xor	 eax, eax
  0256c	89 45 bf	 mov	 DWORD PTR _Temp$[ebp+3543], eax
  0256f	89 45 c3	 mov	 DWORD PTR _Temp$[ebp+3547], eax
  02572	89 45 c7	 mov	 DWORD PTR _Temp$[ebp+3551], eax
  02575	88 45 cb	 mov	 BYTE PTR _Temp$[ebp+3555], al
  02578	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0257d	88 45 cc	 mov	 BYTE PTR _Temp$[ebp+3556], al
  02580	33 c0		 xor	 eax, eax
  02582	89 45 cd	 mov	 DWORD PTR _Temp$[ebp+3557], eax
  02585	89 45 d1	 mov	 DWORD PTR _Temp$[ebp+3561], eax
  02588	89 45 d5	 mov	 DWORD PTR _Temp$[ebp+3565], eax
  0258b	88 45 d9	 mov	 BYTE PTR _Temp$[ebp+3569], al
  0258e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02593	88 45 da	 mov	 BYTE PTR _Temp$[ebp+3570], al
  02596	33 c0		 xor	 eax, eax
  02598	89 45 db	 mov	 DWORD PTR _Temp$[ebp+3571], eax
  0259b	89 45 df	 mov	 DWORD PTR _Temp$[ebp+3575], eax
  0259e	89 45 e3	 mov	 DWORD PTR _Temp$[ebp+3579], eax
  025a1	88 45 e7	 mov	 BYTE PTR _Temp$[ebp+3583], al
  025a4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  025a9	88 45 e8	 mov	 BYTE PTR _Temp$[ebp+3584], al
  025ac	33 c0		 xor	 eax, eax
  025ae	89 45 e9	 mov	 DWORD PTR _Temp$[ebp+3585], eax
  025b1	89 45 ed	 mov	 DWORD PTR _Temp$[ebp+3589], eax
  025b4	89 45 f1	 mov	 DWORD PTR _Temp$[ebp+3593], eax
  025b7	88 45 f5	 mov	 BYTE PTR _Temp$[ebp+3597], al

; 556  : 	
; 557  : 	for(int i=0;i<257;i++)

  025ba	c7 85 e4 f1 ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$91241[ebp], 0
  025c4	eb 0f		 jmp	 SHORT $LN9@KeyHandler
$LN8@KeyHandler:
  025c6	8b 85 e4 f1 ff
	ff		 mov	 eax, DWORD PTR _i$91241[ebp]
  025cc	83 c0 01	 add	 eax, 1
  025cf	89 85 e4 f1 ff
	ff		 mov	 DWORD PTR _i$91241[ebp], eax
$LN9@KeyHandler:
  025d5	81 bd e4 f1 ff
	ff 01 01 00 00	 cmp	 DWORD PTR _i$91241[ebp], 257 ; 00000101H
  025df	7d 5a		 jge	 SHORT $LN7@KeyHandler

; 558  : 		for(int j=0;j<14;j++)

  025e1	c7 85 e0 f1 ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$91245[ebp], 0
  025eb	eb 0f		 jmp	 SHORT $LN6@KeyHandler
$LN5@KeyHandler:
  025ed	8b 85 e0 f1 ff
	ff		 mov	 eax, DWORD PTR _j$91245[ebp]
  025f3	83 c0 01	 add	 eax, 1
  025f6	89 85 e0 f1 ff
	ff		 mov	 DWORD PTR _j$91245[ebp], eax
$LN6@KeyHandler:
  025fc	83 bd e0 f1 ff
	ff 0e		 cmp	 DWORD PTR _j$91245[ebp], 14 ; 0000000eH
  02603	7d 34		 jge	 SHORT $LN4@KeyHandler

; 559  : 			this->Keys[i][j]=Temp[i][j];

  02605	8b 85 e4 f1 ff
	ff		 mov	 eax, DWORD PTR _i$91241[ebp]
  0260b	6b c0 0e	 imul	 eax, 14			; 0000000eH
  0260e	8d 8c 05 e8 f1
	ff ff		 lea	 ecx, DWORD PTR _Temp$[ebp+eax]
  02615	8b 95 e4 f1 ff
	ff		 mov	 edx, DWORD PTR _i$91241[ebp]
  0261b	6b d2 0e	 imul	 edx, 14			; 0000000eH
  0261e	03 95 e0 f1 ff
	ff		 add	 edx, DWORD PTR _j$91245[ebp]
  02624	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02627	8b b5 e0 f1 ff
	ff		 mov	 esi, DWORD PTR _j$91245[ebp]
  0262d	8a 0c 31	 mov	 cl, BYTE PTR [ecx+esi]
  02630	88 8c 10 01 05
	00 00		 mov	 BYTE PTR [eax+edx+1281], cl
  02637	eb b4		 jmp	 SHORT $LN5@KeyHandler
$LN4@KeyHandler:
  02639	eb 8b		 jmp	 SHORT $LN8@KeyHandler
$LN7@KeyHandler:

; 560  : 
; 561  : 	for(int i=0;i<256;i++)

  0263b	c7 85 dc f1 ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$91249[ebp], 0
  02645	eb 0f		 jmp	 SHORT $LN3@KeyHandler
$LN2@KeyHandler:
  02647	8b 85 dc f1 ff
	ff		 mov	 eax, DWORD PTR _i$91249[ebp]
  0264d	83 c0 01	 add	 eax, 1
  02650	89 85 dc f1 ff
	ff		 mov	 DWORD PTR _i$91249[ebp], eax
$LN3@KeyHandler:
  02656	81 bd dc f1 ff
	ff 00 01 00 00	 cmp	 DWORD PTR _i$91249[ebp], 256 ; 00000100H
  02660	7d 4f		 jge	 SHORT $LN1@KeyHandler

; 562  : 	{
; 563  : 		KeyState1[i]=false;

  02662	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02665	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91249[ebp]
  0266b	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 564  : 		KeyState2[i]=false;

  0266f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02672	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91249[ebp]
  02678	c6 80 01 01 00
	00 00		 mov	 BYTE PTR [eax+257], 0

; 565  : 		KeyState3[i]=false;

  0267f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02682	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91249[ebp]
  02688	c6 80 01 02 00
	00 00		 mov	 BYTE PTR [eax+513], 0

; 566  : 		KeyState4[i]=false;

  0268f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02692	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91249[ebp]
  02698	c6 80 01 03 00
	00 00		 mov	 BYTE PTR [eax+769], 0

; 567  : 		KeyState5[i]=false;

  0269f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026a2	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91249[ebp]
  026a8	c6 80 01 04 00
	00 00		 mov	 BYTE PTR [eax+1025], 0

; 568  : 	}

  026af	eb 96		 jmp	 SHORT $LN2@KeyHandler
$LN1@KeyHandler:

; 569  : 
; 570  : 	this->Bound=false;

  026b1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026b4	c6 00 00	 mov	 BYTE PTR [eax], 0

; 571  : 	this->MouseSyncX=0;

  026b7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026ba	c7 80 1c 13 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+4892], 0

; 572  : 	this->MouseSyncY=0;

  026c4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026c7	c7 80 20 13 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+4896], 0

; 573  : 	this->MouseLeft=-1;

  026d1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026d4	c7 80 14 13 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+4884], -1

; 574  : 	this->MouseRight=-1;

  026de	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026e1	c7 80 18 13 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+4888], -1

; 575  : 	this->MouseDown=-1;

  026eb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026ee	c7 80 10 13 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+4880], -1

; 576  : 	this->MouseUp=-1;

  026f8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026fb	c7 80 24 13 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+4900], -1

; 577  : 
; 578  : 	return;
; 579  : }

  02705	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02708	5f		 pop	 edi
  02709	5e		 pop	 esi
  0270a	5b		 pop	 ebx
  0270b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0270e	33 cd		 xor	 ecx, ebp
  02710	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02715	8b e5		 mov	 esp, ebp
  02717	5d		 pop	 ebp
  02718	c3		 ret	 0
??0KeyHandler@@QAE@XZ ENDP				; KeyHandler::KeyHandler
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??0KeyHandler@@QAE@PAVMouseHandler@@HHHHHH@Z	; KeyHandler::KeyHandler
; Function compile flags: /Odtp /ZI
;	COMDAT ??0KeyHandler@@QAE@PAVMouseHandler@@HHHHHH@Z
_TEXT	SEGMENT
_i$91272 = -3620					; size = 4
_j$91268 = -3616					; size = 4
_i$91264 = -3612					; size = 4
_Temp$ = -3608						; size = 3598
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Mouse$ = 8						; size = 4
_XSpeed$ = 12						; size = 4
_YSpeed$ = 16						; size = 4
_BindMouseXLeft$ = 20					; size = 4
_BindMouseXRight$ = 24					; size = 4
_BindMouseYUp$ = 28					; size = 4
_BindMouseYDown$ = 32					; size = 4
??0KeyHandler@@QAE@PAVMouseHandler@@HHHHHH@Z PROC	; KeyHandler::KeyHandler, COMDAT
; _this$ = ecx

; 581  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 0e 00
	00		 sub	 esp, 3684		; 00000e64H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 582  : 	char Temp[257][14]={"Null Key","Escape","1 Key","2 Key","3 Key","4 Key","5 Key","6 Key","7 Key","8 Key","9 Key","0 Key","- Key","= Key","Backspace","Tab","Q",

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08OFADHOMM@Null?5Key?$AA@
  0001e	89 85 e8 f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp], eax
  00024	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_08OFADHOMM@Null?5Key?$AA@+4
  0002a	89 8d ec f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+4], ecx
  00030	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR ??_C@_08OFADHOMM@Null?5Key?$AA@+8
  00036	88 95 f0 f1 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+8], dl
  0003c	33 c0		 xor	 eax, eax
  0003e	89 85 f1 f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+9], eax
  00044	88 85 f5 f1 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+13], al
  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06OIGFGPHJ@Escape?$AA@
  0004f	89 85 f6 f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+14], eax
  00055	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06OIGFGPHJ@Escape?$AA@+4
  0005c	66 89 8d fa f1
	ff ff		 mov	 WORD PTR _Temp$[ebp+18], cx
  00063	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06OIGFGPHJ@Escape?$AA@+6
  00069	88 95 fc f1 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+20], dl
  0006f	33 c0		 xor	 eax, eax
  00071	89 85 fd f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+21], eax
  00077	66 89 85 01 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+25], ax
  0007e	88 85 03 f2 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+27], al
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05LMCOLBBI@1?5Key?$AA@
  00089	89 85 04 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+28], eax
  0008f	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05LMCOLBBI@1?5Key?$AA@+4
  00096	66 89 8d 08 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+32], cx
  0009d	33 c0		 xor	 eax, eax
  0009f	89 85 0a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+34], eax
  000a5	89 85 0e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+38], eax
  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05DKLKMDLG@2?5Key?$AA@
  000b0	89 85 12 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+42], eax
  000b6	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05DKLKMDLG@2?5Key?$AA@+4
  000bd	66 89 8d 16 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+46], cx
  000c4	33 c0		 xor	 eax, eax
  000c6	89 85 18 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+48], eax
  000cc	89 85 1c f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+52], eax
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05PBOGBABD@3?5Key?$AA@
  000d7	89 85 20 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+56], eax
  000dd	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05PBOGBABD@3?5Key?$AA@+4
  000e4	66 89 8d 24 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+60], cx
  000eb	33 c0		 xor	 eax, eax
  000ed	89 85 26 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+62], eax
  000f3	89 85 2a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+66], eax
  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05OMODCAKL@4?5Key?$AA@
  000fe	89 85 2e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+70], eax
  00104	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05OMODCAKL@4?5Key?$AA@+4
  0010b	66 89 8d 32 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+74], cx
  00112	33 c0		 xor	 eax, eax
  00114	89 85 34 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+76], eax
  0011a	89 85 38 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+80], eax
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05CHLPPDAO@5?5Key?$AA@
  00125	89 85 3c f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+84], eax
  0012b	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05CHLPPDAO@5?5Key?$AA@+4
  00132	66 89 8d 40 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+88], cx
  00139	33 c0		 xor	 eax, eax
  0013b	89 85 42 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+90], eax
  00141	89 85 46 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+94], eax
  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05KBCLIBKA@6?5Key?$AA@
  0014c	89 85 4a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+98], eax
  00152	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05KBCLIBKA@6?5Key?$AA@+4
  00159	66 89 8d 4e f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+102], cx
  00160	33 c0		 xor	 eax, eax
  00162	89 85 50 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+104], eax
  00168	89 85 54 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+108], eax
  0016e	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05GKHHFCAF@7?5Key?$AA@
  00173	89 85 58 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+112], eax
  00179	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05GKHHFCAF@7?5Key?$AA@+4
  00180	66 89 8d 5c f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+116], cx
  00187	33 c0		 xor	 eax, eax
  00189	89 85 5e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+118], eax
  0018f	89 85 62 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+122], eax
  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05JLCBOANA@8?5Key?$AA@
  0019a	89 85 66 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+126], eax
  001a0	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05JLCBOANA@8?5Key?$AA@+4
  001a7	66 89 8d 6a f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+130], cx
  001ae	33 c0		 xor	 eax, eax
  001b0	89 85 6c f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+132], eax
  001b6	89 85 70 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+136], eax
  001bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05FAHNDDHF@9?5Key?$AA@
  001c1	89 85 74 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+140], eax
  001c7	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05FAHNDDHF@9?5Key?$AA@+4
  001ce	66 89 8d 78 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+144], cx
  001d5	33 c0		 xor	 eax, eax
  001d7	89 85 7a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+146], eax
  001dd	89 85 7e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+150], eax
  001e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05HHHCGCLN@0?5Key?$AA@
  001e8	89 85 82 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+154], eax
  001ee	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05HHHCGCLN@0?5Key?$AA@+4
  001f5	66 89 8d 86 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+158], cx
  001fc	33 c0		 xor	 eax, eax
  001fe	89 85 88 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+160], eax
  00204	89 85 8c f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+164], eax
  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05MIDKHDPI@?9?5Key?$AA@
  0020f	89 85 90 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+168], eax
  00215	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05MIDKHDPI@?9?5Key?$AA@+4
  0021c	66 89 8d 94 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+172], cx
  00223	33 c0		 xor	 eax, eax
  00225	89 85 96 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+174], eax
  0022b	89 85 9a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+178], eax
  00231	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05MLOMHBGD@?$DN?5Key?$AA@
  00236	89 85 9e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+182], eax
  0023c	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05MLOMHBGD@?$DN?5Key?$AA@+4
  00243	66 89 8d a2 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+186], cx
  0024a	33 c0		 xor	 eax, eax
  0024c	89 85 a4 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+188], eax
  00252	89 85 a8 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+192], eax
  00258	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@
  0025d	89 85 ac f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+196], eax
  00263	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@+4
  00269	89 8d b0 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+200], ecx
  0026f	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@+8
  00276	66 89 95 b4 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+204], dx
  0027d	33 c0		 xor	 eax, eax
  0027f	89 85 b6 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+206], eax
  00285	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03IEAKBACE@Tab?$AA@
  0028a	89 85 ba f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+210], eax
  00290	33 c0		 xor	 eax, eax
  00292	89 85 be f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+214], eax
  00298	89 85 c2 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+218], eax
  0029e	66 89 85 c6 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+222], ax
  002a5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BNIGIBBF@Q?$AA@
  002ab	66 89 85 c8 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+224], ax
  002b2	33 c0		 xor	 eax, eax
  002b4	89 85 ca f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+226], eax
  002ba	89 85 ce f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+230], eax
  002c0	89 85 d2 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+234], eax

; 583  : 				  "W","E","R","T","Y","U","I","O","P","[","]","Right Enter","Left Control","A","S","D",

  002c6	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01ELNMCGJD@W?$AA@
  002cc	66 89 85 d6 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+238], ax
  002d3	33 c0		 xor	 eax, eax
  002d5	89 85 d8 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+240], eax
  002db	89 85 dc f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+244], eax
  002e1	89 85 e0 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+248], eax
  002e7	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01DDCIFGEA@E?$AA@
  002ed	66 89 85 e4 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+252], ax
  002f4	33 c0		 xor	 eax, eax
  002f6	89 85 e6 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+254], eax
  002fc	89 85 ea f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+258], eax
  00302	89 85 ee f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+262], eax
  00308	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01DGKLNCNG@R?$AA@
  0030e	66 89 85 f2 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+266], ax
  00315	33 c0		 xor	 eax, eax
  00317	89 85 f4 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+268], eax
  0031d	89 85 f8 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+272], eax
  00323	89 85 fc f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+276], eax
  00329	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01GAPBHFFA@T?$AA@
  0032f	66 89 85 00 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+280], ax
  00336	33 c0		 xor	 eax, eax
  00338	89 85 02 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+282], eax
  0033e	89 85 06 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+286], eax
  00344	89 85 0a f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+290], eax
  0034a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01NFFPALBN@Y?$AA@
  00350	66 89 85 0e f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+294], ax
  00357	33 c0		 xor	 eax, eax
  00359	89 85 10 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+296], eax
  0035f	89 85 14 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+300], eax
  00365	89 85 18 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+304], eax
  0036b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01HJOKEEBB@U?$AA@
  00371	66 89 85 1c f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+308], ax
  00378	33 c0		 xor	 eax, eax
  0037a	89 85 1e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+310], eax
  00380	89 85 22 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+314], eax
  00386	89 85 26 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+318], eax
  0038c	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01JPJNBJEM@I?$AA@
  00392	66 89 85 2a f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+322], ax
  00399	33 c0		 xor	 eax, eax
  0039b	89 85 2c f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+324], eax
  003a1	89 85 30 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+328], eax
  003a7	89 85 34 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+332], eax
  003ad	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01MJMHLOMK@O?$AA@
  003b3	66 89 85 38 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+336], ax
  003ba	33 c0		 xor	 eax, eax
  003bc	89 85 3a f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+338], eax
  003c2	89 85 3e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+342], eax
  003c8	89 85 42 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+346], eax
  003ce	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01EJNLAFE@P?$AA@
  003d4	66 89 85 46 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+350], ax
  003db	33 c0		 xor	 eax, eax
  003dd	89 85 48 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+352], eax
  003e3	89 85 4c f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+356], eax
  003e9	89 85 50 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+360], eax
  003ef	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01OHGJGJJP@?$FL?$AA@
  003f5	66 89 85 54 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+364], ax
  003fc	33 c0		 xor	 eax, eax
  003fe	89 85 56 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+366], eax
  00404	89 85 5a f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+370], eax
  0040a	89 85 5e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+374], eax
  00410	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
  00416	66 89 85 62 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+378], ax
  0041d	33 c0		 xor	 eax, eax
  0041f	89 85 64 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+380], eax
  00425	89 85 68 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+384], eax
  0042b	89 85 6c f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+388], eax
  00431	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
  00436	89 85 70 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+392], eax
  0043c	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+4
  00442	89 8d 74 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+396], ecx
  00448	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+8
  0044e	89 95 78 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+400], edx
  00454	33 c0		 xor	 eax, eax
  00456	66 89 85 7c f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+404], ax
  0045d	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@
  00462	89 85 7e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+406], eax
  00468	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+4
  0046e	89 8d 82 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+410], ecx
  00474	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+8
  0047a	89 95 86 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+414], edx
  00480	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+12
  00485	88 85 8a f3 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+418], al
  0048b	33 c0		 xor	 eax, eax
  0048d	88 85 8b f3 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+419], al
  00493	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01FHEEJDEE@A?$AA@
  00499	66 89 85 8c f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+420], ax
  004a0	33 c0		 xor	 eax, eax
  004a2	89 85 8e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+422], eax
  004a8	89 85 92 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+426], eax
  004ae	89 85 96 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+430], eax
  004b4	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01CPLAODJH@S?$AA@
  004ba	66 89 85 9a f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+434], ax
  004c1	33 c0		 xor	 eax, eax
  004c3	89 85 9c f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+436], eax
  004c9	89 85 a0 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+440], eax
  004cf	89 85 a4 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+444], eax
  004d5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01CKDDGHAB@D?$AA@
  004db	66 89 85 a8 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+448], ax
  004e2	33 c0		 xor	 eax, eax
  004e4	89 85 aa f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+450], eax
  004ea	89 85 ae f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+454], eax
  004f0	89 85 b2 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+458], eax

; 584  : 				  "F","G","H","J","K","L",";","\'","`","Left Shift","\\","Z","X","C","V","B",

  004f6	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BIAFAFID@F?$AA@
  004fc	66 89 85 b6 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+462], ax
  00503	33 c0		 xor	 eax, eax
  00505	89 85 b8 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+464], eax
  0050b	89 85 bc f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+468], eax
  00511	89 85 c0 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+472], eax
  00517	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BBODEMC@G?$AA@
  0051d	66 89 85 c4 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+476], ax
  00524	33 c0		 xor	 eax, eax
  00526	89 85 c6 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+478], eax
  0052c	89 85 ca f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+482], eax
  00532	89 85 ce f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+486], eax
  00538	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01IGIGCIAN@H?$AA@
  0053e	66 89 85 d2 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+490], ax
  00545	33 c0		 xor	 eax, eax
  00547	89 85 d4 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+492], eax
  0054d	89 85 d8 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+496], eax
  00553	89 85 dc f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+500], eax
  00559	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01LELAEKIP@J?$AA@
  0055f	66 89 85 e0 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+504], ax
  00566	33 c0		 xor	 eax, eax
  00568	89 85 e2 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+506], eax
  0056e	89 85 e6 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+510], eax
  00574	89 85 ea f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+514], eax
  0057a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KNKLHLMO@K?$AA@
  00580	66 89 85 ee f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+518], ax
  00587	33 c0		 xor	 eax, eax
  00589	89 85 f0 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+520], eax
  0058f	89 85 f4 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+524], eax
  00595	89 85 f8 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+528], eax
  0059b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01OCOKONAJ@L?$AA@
  005a1	66 89 85 fc f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+532], ax
  005a8	33 c0		 xor	 eax, eax
  005aa	89 85 fe f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+534], eax
  005b0	89 85 02 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+538], eax
  005b6	89 85 06 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+542], eax
  005bc	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01ICJEACDI@?$DL?$AA@
  005c2	66 89 85 0a f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+546], ax
  005c9	33 c0		 xor	 eax, eax
  005cb	89 85 0c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+548], eax
  005d1	89 85 10 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+552], eax
  005d7	89 85 14 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+556], eax
  005dd	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01GEODFPGF@?8?$AA@
  005e3	66 89 85 18 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+560], ax
  005ea	33 c0		 xor	 eax, eax
  005ec	89 85 1a f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+562], eax
  005f2	89 85 1e f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+566], eax
  005f8	89 85 22 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+570], eax
  005fe	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01NLNLIGKH@?$GA?$AA@
  00604	66 89 85 26 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+574], ax
  0060b	33 c0		 xor	 eax, eax
  0060d	89 85 28 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+576], eax
  00613	89 85 2c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+580], eax
  00619	89 85 30 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+584], eax
  0061f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@
  00624	89 85 34 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+588], eax
  0062a	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+4
  00630	89 8d 38 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+592], ecx
  00636	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+8
  0063d	66 89 95 3c f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+596], dx
  00644	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+10
  00649	88 85 3e f4 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+598], al
  0064f	33 c0		 xor	 eax, eax
  00651	66 89 85 3f f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+599], ax
  00658	88 85 41 f4 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+601], al
  0065e	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  00664	66 89 85 42 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+602], ax
  0066b	33 c0		 xor	 eax, eax
  0066d	89 85 44 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+604], eax
  00673	89 85 48 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+608], eax
  00679	89 85 4c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+612], eax
  0067f	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01POHCFINO@Z?$AA@
  00685	66 89 85 50 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+616], ax
  0068c	33 c0		 xor	 eax, eax
  0068e	89 85 52 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+618], eax
  00694	89 85 56 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+622], eax
  0069a	89 85 5a f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+626], eax
  006a0	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01MMEEDKFM@X?$AA@
  006a6	66 89 85 5e f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+630], ax
  006ad	33 c0		 xor	 eax, eax
  006af	89 85 60 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+632], eax
  006b5	89 85 64 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+636], eax
  006bb	89 85 68 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+640], eax
  006c1	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01GFHCPBMG@C?$AA@
  006c7	66 89 85 6c f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+644], ax
  006ce	33 c0		 xor	 eax, eax
  006d0	89 85 6e f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+646], eax
  006d6	89 85 72 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+650], eax
  006dc	89 85 76 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+654], eax
  006e2	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01FCMHBHNC@V?$AA@
  006e8	66 89 85 7a f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+658], ax
  006ef	33 c0		 xor	 eax, eax
  006f1	89 85 7c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+660], eax
  006f7	89 85 80 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+664], eax
  006fd	89 85 84 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+668], eax
  00703	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01HMGJMAIH@B?$AA@
  00709	66 89 85 88 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+672], ax
  00710	33 c0		 xor	 eax, eax
  00712	89 85 8a f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+674], eax
  00718	89 85 8e f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+678], eax
  0071e	89 85 92 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+682], eax

; 585  : 				  "N","M",",",".","/","Right Shift","*","Left Alt","Space","Caps Lock","F1","F2","F3","F4","F5","F6",

  00724	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01NANMIPIL@N?$AA@
  0072a	66 89 85 96 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+686], ax
  00731	33 c0		 xor	 eax, eax
  00733	89 85 98 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+688], eax
  00739	89 85 9c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+692], eax
  0073f	89 85 a0 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+696], eax
  00745	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01PLPBNMEI@M?$AA@
  0074b	66 89 85 a4 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+700], ax
  00752	33 c0		 xor	 eax, eax
  00754	89 85 a6 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+702], eax
  0075a	89 85 aa f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+706], eax
  00760	89 85 ae f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+710], eax
  00766	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
  0076c	66 89 85 b2 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+714], ax
  00773	33 c0		 xor	 eax, eax
  00775	89 85 b4 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+716], eax
  0077b	89 85 b8 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+720], eax
  00781	89 85 bc f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+724], eax
  00787	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01LFCBOECM@?4?$AA@
  0078d	66 89 85 c0 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+728], ax
  00794	33 c0		 xor	 eax, eax
  00796	89 85 c2 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+730], eax
  0079c	89 85 c6 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+734], eax
  007a2	89 85 ca f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+738], eax
  007a8	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KMDKNFGN@?1?$AA@
  007ae	66 89 85 ce f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+742], ax
  007b5	33 c0		 xor	 eax, eax
  007b7	89 85 d0 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+744], eax
  007bd	89 85 d4 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+748], eax
  007c3	89 85 d8 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+752], eax
  007c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@
  007ce	89 85 dc f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+756], eax
  007d4	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@+4
  007da	89 8d e0 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+760], ecx
  007e0	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@+8
  007e6	89 95 e4 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+764], edx
  007ec	33 c0		 xor	 eax, eax
  007ee	66 89 85 e8 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+768], ax
  007f5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01NBENCBCI@?$CK?$AA@
  007fb	66 89 85 ea f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+770], ax
  00802	33 c0		 xor	 eax, eax
  00804	89 85 ec f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+772], eax
  0080a	89 85 f0 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+776], eax
  00810	89 85 f4 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+780], eax
  00816	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@
  0081b	89 85 f8 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+784], eax
  00821	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@+4
  00827	89 8d fc f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+788], ecx
  0082d	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@+8
  00833	88 95 00 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+792], dl
  00839	33 c0		 xor	 eax, eax
  0083b	89 85 01 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+793], eax
  00841	88 85 05 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+797], al
  00847	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05OMHELODH@Space?$AA@
  0084c	89 85 06 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+798], eax
  00852	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05OMHELODH@Space?$AA@+4
  00859	66 89 8d 0a f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+802], cx
  00860	33 c0		 xor	 eax, eax
  00862	89 85 0c f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+804], eax
  00868	89 85 10 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+808], eax
  0086e	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@
  00873	89 85 14 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+812], eax
  00879	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@+4
  0087f	89 8d 18 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+816], ecx
  00885	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@+8
  0088c	66 89 95 1c f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+820], dx
  00893	33 c0		 xor	 eax, eax
  00895	89 85 1e f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+822], eax
  0089b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02LCPENACN@F1?$AA@
  008a1	66 89 85 22 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+826], ax
  008a8	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02LCPENACN@F1?$AA@+2
  008ae	88 8d 24 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+828], cl
  008b4	33 c0		 xor	 eax, eax
  008b6	89 85 25 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+829], eax
  008bc	89 85 29 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+833], eax
  008c2	66 89 85 2d f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+837], ax
  008c9	88 85 2f f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+839], al
  008cf	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02JJNJIDOO@F2?$AA@
  008d5	66 89 85 30 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+840], ax
  008dc	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02JJNJIDOO@F2?$AA@+2
  008e2	88 8d 32 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+842], cl
  008e8	33 c0		 xor	 eax, eax
  008ea	89 85 33 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+843], eax
  008f0	89 85 37 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+847], eax
  008f6	66 89 85 3b f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+851], ax
  008fd	88 85 3d f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+853], al
  00903	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02IAMCLCKP@F3?$AA@
  00909	66 89 85 3e f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+854], ax
  00910	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02IAMCLCKP@F3?$AA@+2
  00916	88 8d 40 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+856], cl
  0091c	33 c0		 xor	 eax, eax
  0091e	89 85 41 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+857], eax
  00924	89 85 45 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+861], eax
  0092a	66 89 85 49 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+865], ax
  00931	88 85 4b f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+867], al
  00937	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02MPIDCEGI@F4?$AA@
  0093d	66 89 85 4c f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+868], ax
  00944	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02MPIDCEGI@F4?$AA@+2
  0094a	88 8d 4e f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+870], cl
  00950	33 c0		 xor	 eax, eax
  00952	89 85 4f f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+871], eax
  00958	89 85 53 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+875], eax
  0095e	66 89 85 57 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+879], ax
  00965	88 85 59 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+881], al
  0096b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02NGJIBFCJ@F5?$AA@
  00971	66 89 85 5a f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+882], ax
  00978	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02NGJIBFCJ@F5?$AA@+2
  0097e	88 8d 5c f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+884], cl
  00984	33 c0		 xor	 eax, eax
  00986	89 85 5d f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+885], eax
  0098c	89 85 61 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+889], eax
  00992	66 89 85 65 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+893], ax
  00999	88 85 67 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+895], al
  0099f	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02PNLFEGOK@F6?$AA@
  009a5	66 89 85 68 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+896], ax
  009ac	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02PNLFEGOK@F6?$AA@+2
  009b2	88 8d 6a f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+898], cl
  009b8	33 c0		 xor	 eax, eax
  009ba	89 85 6b f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+899], eax
  009c0	89 85 6f f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+903], eax
  009c6	66 89 85 73 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+907], ax
  009cd	88 85 75 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+909], al

; 586  : 				  "F7","F8","F9","F10","Num Lock","","7","8","9","-","4","5","6","+","1","2",

  009d3	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02OEKOHHKL@F7?$AA@
  009d9	66 89 85 76 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+910], ax
  009e0	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02OEKOHHKL@F7?$AA@+2
  009e6	88 8d 78 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+912], cl
  009ec	33 c0		 xor	 eax, eax
  009ee	89 85 79 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+913], eax
  009f4	89 85 7d f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+917], eax
  009fa	66 89 85 81 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+921], ax
  00a01	88 85 83 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+923], al
  00a07	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02GDDGGLGE@F8?$AA@
  00a0d	66 89 85 84 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+924], ax
  00a14	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02GDDGGLGE@F8?$AA@+2
  00a1a	88 8d 86 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+926], cl
  00a20	33 c0		 xor	 eax, eax
  00a22	89 85 87 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+927], eax
  00a28	89 85 8b f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+931], eax
  00a2e	66 89 85 8f f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+935], ax
  00a35	88 85 91 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+937], al
  00a3b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02HKCNFKCF@F9?$AA@
  00a41	66 89 85 92 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+938], ax
  00a48	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02HKCNFKCF@F9?$AA@+2
  00a4e	88 8d 94 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+940], cl
  00a54	33 c0		 xor	 eax, eax
  00a56	89 85 95 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+941], eax
  00a5c	89 85 99 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+945], eax
  00a62	66 89 85 9d f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+949], ax
  00a69	88 85 9f f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+951], al
  00a6f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03JKCLJOFG@F10?$AA@
  00a74	89 85 a0 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+952], eax
  00a7a	33 c0		 xor	 eax, eax
  00a7c	89 85 a4 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+956], eax
  00a82	89 85 a8 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+960], eax
  00a88	66 89 85 ac f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+964], ax
  00a8f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@
  00a94	89 85 ae f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+966], eax
  00a9a	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@+4
  00aa0	89 8d b2 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+970], ecx
  00aa6	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@+8
  00aac	88 95 b6 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+974], dl
  00ab2	33 c0		 xor	 eax, eax
  00ab4	89 85 b7 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+975], eax
  00aba	88 85 bb f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+979], al
  00ac0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00ac5	88 85 bc f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+980], al
  00acb	33 c0		 xor	 eax, eax
  00acd	89 85 bd f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+981], eax
  00ad3	89 85 c1 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+985], eax
  00ad9	89 85 c5 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+989], eax
  00adf	88 85 c9 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+993], al
  00ae5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01COCBENDE@7?$AA@
  00aeb	66 89 85 ca f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+994], ax
  00af2	33 c0		 xor	 eax, eax
  00af4	89 85 cc f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+996], eax
  00afa	89 85 d0 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1000], eax
  00b00	89 85 d4 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1004], eax
  00b06	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KJLJFBPL@8?$AA@
  00b0c	66 89 85 d8 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+1008], ax
  00b13	33 c0		 xor	 eax, eax
  00b15	89 85 da f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1010], eax
  00b1b	89 85 de f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1014], eax
  00b21	89 85 e2 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1018], eax
  00b27	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01LAKCGALK@9?$AA@
  00b2d	66 89 85 e6 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+1022], ax
  00b34	33 c0		 xor	 eax, eax
  00b36	89 85 e8 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1024], eax
  00b3c	89 85 ec f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1028], eax
  00b42	89 85 f0 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1032], eax
  00b48	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01JOAMLHOP@?9?$AA@
  00b4e	66 89 85 f4 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+1036], ax
  00b55	33 c0		 xor	 eax, eax
  00b57	89 85 f6 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1038], eax
  00b5d	89 85 fa f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1042], eax
  00b63	89 85 fe f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1046], eax
  00b69	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01FAMBOPH@4?$AA@
  00b6f	66 89 85 02 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1050], ax
  00b76	33 c0		 xor	 eax, eax
  00b78	89 85 04 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1052], eax
  00b7e	89 85 08 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1056], eax
  00b84	89 85 0c f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1060], eax
  00b8a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BMBHCPLG@5?$AA@
  00b90	66 89 85 10 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1064], ax
  00b97	33 c0		 xor	 eax, eax
  00b99	89 85 12 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1066], eax
  00b9f	89 85 16 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1070], eax
  00ba5	89 85 1a f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1074], eax
  00bab	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01DHDKHMHF@6?$AA@
  00bb1	66 89 85 1e f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1078], ax
  00bb8	33 c0		 xor	 eax, eax
  00bba	89 85 20 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1080], eax
  00bc0	89 85 24 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1084], eax
  00bc6	89 85 28 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1088], eax
  00bcc	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01MIFGBAGJ@?$CL?$AA@
  00bd2	66 89 85 2c f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1092], ax
  00bd9	33 c0		 xor	 eax, eax
  00bdb	89 85 2e f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1094], eax
  00be1	89 85 32 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1098], eax
  00be7	89 85 36 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1102], eax
  00bed	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01HIHLOKLC@1?$AA@
  00bf3	66 89 85 3a f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1106], ax
  00bfa	33 c0		 xor	 eax, eax
  00bfc	89 85 3c f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1108], eax
  00c02	89 85 40 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1112], eax
  00c08	89 85 44 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1116], eax
  00c0e	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01FDFGLJHB@2?$AA@
  00c14	66 89 85 48 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1120], ax
  00c1b	33 c0		 xor	 eax, eax
  00c1d	89 85 4a f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1122], eax
  00c23	89 85 4e f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1126], eax
  00c29	89 85 52 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1130], eax

; 587  : 				  "3","0","Num .","SysRq","","","F11","F12","","","","","","","","",

  00c2f	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01EKENIIDA@3?$AA@
  00c35	66 89 85 56 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1134], ax
  00c3c	33 c0		 xor	 eax, eax
  00c3e	89 85 58 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1136], eax
  00c44	89 85 5c f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1140], eax
  00c4a	89 85 60 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1144], eax
  00c50	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01GBGANLPD@0?$AA@
  00c56	66 89 85 64 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1148], ax
  00c5d	33 c0		 xor	 eax, eax
  00c5f	89 85 66 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1150], eax
  00c65	89 85 6a f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1154], eax
  00c6b	89 85 6e f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1158], eax
  00c71	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05LAFLDKON@Num?5?4?$AA@
  00c76	89 85 72 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1162], eax
  00c7c	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05LAFLDKON@Num?5?4?$AA@+4
  00c83	66 89 8d 76 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1166], cx
  00c8a	33 c0		 xor	 eax, eax
  00c8c	89 85 78 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1168], eax
  00c92	89 85 7c f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1172], eax
  00c98	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05BAHDBLKA@SysRq?$AA@
  00c9d	89 85 80 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1176], eax
  00ca3	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05BAHDBLKA@SysRq?$AA@+4
  00caa	66 89 8d 84 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1180], cx
  00cb1	33 c0		 xor	 eax, eax
  00cb3	89 85 86 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1182], eax
  00cb9	89 85 8a f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1186], eax
  00cbf	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00cc4	88 85 8e f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1190], al
  00cca	33 c0		 xor	 eax, eax
  00ccc	89 85 8f f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1191], eax
  00cd2	89 85 93 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1195], eax
  00cd8	89 85 97 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1199], eax
  00cde	88 85 9b f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1203], al
  00ce4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00ce9	88 85 9c f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1204], al
  00cef	33 c0		 xor	 eax, eax
  00cf1	89 85 9d f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1205], eax
  00cf7	89 85 a1 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1209], eax
  00cfd	89 85 a5 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1213], eax
  00d03	88 85 a9 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1217], al
  00d09	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03IDDAKPBH@F11?$AA@
  00d0e	89 85 aa f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1218], eax
  00d14	33 c0		 xor	 eax, eax
  00d16	89 85 ae f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1222], eax
  00d1c	89 85 b2 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1226], eax
  00d22	66 89 85 b6 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1230], ax
  00d29	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03KIBNPMNE@F12?$AA@
  00d2e	89 85 b8 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1232], eax
  00d34	33 c0		 xor	 eax, eax
  00d36	89 85 bc f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1236], eax
  00d3c	89 85 c0 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1240], eax
  00d42	66 89 85 c4 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1244], ax
  00d49	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00d4e	88 85 c6 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1246], al
  00d54	33 c0		 xor	 eax, eax
  00d56	89 85 c7 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1247], eax
  00d5c	89 85 cb f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1251], eax
  00d62	89 85 cf f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1255], eax
  00d68	88 85 d3 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1259], al
  00d6e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00d73	88 85 d4 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1260], al
  00d79	33 c0		 xor	 eax, eax
  00d7b	89 85 d5 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1261], eax
  00d81	89 85 d9 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1265], eax
  00d87	89 85 dd f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1269], eax
  00d8d	88 85 e1 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1273], al
  00d93	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00d98	88 85 e2 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1274], al
  00d9e	33 c0		 xor	 eax, eax
  00da0	89 85 e3 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1275], eax
  00da6	89 85 e7 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1279], eax
  00dac	89 85 eb f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1283], eax
  00db2	88 85 ef f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1287], al
  00db8	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00dbd	88 85 f0 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1288], al
  00dc3	33 c0		 xor	 eax, eax
  00dc5	89 85 f1 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1289], eax
  00dcb	89 85 f5 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1293], eax
  00dd1	89 85 f9 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1297], eax
  00dd7	88 85 fd f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1301], al
  00ddd	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00de2	88 85 fe f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1302], al
  00de8	33 c0		 xor	 eax, eax
  00dea	89 85 ff f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1303], eax
  00df0	89 85 03 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1307], eax
  00df6	89 85 07 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1311], eax
  00dfc	88 85 0b f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1315], al
  00e02	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e07	88 85 0c f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1316], al
  00e0d	33 c0		 xor	 eax, eax
  00e0f	89 85 0d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1317], eax
  00e15	89 85 11 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1321], eax
  00e1b	89 85 15 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1325], eax
  00e21	88 85 19 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1329], al
  00e27	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e2c	88 85 1a f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1330], al
  00e32	33 c0		 xor	 eax, eax
  00e34	89 85 1b f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1331], eax
  00e3a	89 85 1f f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1335], eax
  00e40	89 85 23 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1339], eax
  00e46	88 85 27 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1343], al
  00e4c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e51	88 85 28 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1344], al
  00e57	33 c0		 xor	 eax, eax
  00e59	89 85 29 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1345], eax
  00e5f	89 85 2d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1349], eax
  00e65	89 85 31 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1353], eax
  00e6b	88 85 35 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1357], al

; 588  : 				  "","","","","","","","","","","","","","","","",

  00e71	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e76	88 85 36 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1358], al
  00e7c	33 c0		 xor	 eax, eax
  00e7e	89 85 37 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1359], eax
  00e84	89 85 3b f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1363], eax
  00e8a	89 85 3f f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1367], eax
  00e90	88 85 43 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1371], al
  00e96	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e9b	88 85 44 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1372], al
  00ea1	33 c0		 xor	 eax, eax
  00ea3	89 85 45 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1373], eax
  00ea9	89 85 49 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1377], eax
  00eaf	89 85 4d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1381], eax
  00eb5	88 85 51 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1385], al
  00ebb	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00ec0	88 85 52 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1386], al
  00ec6	33 c0		 xor	 eax, eax
  00ec8	89 85 53 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1387], eax
  00ece	89 85 57 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1391], eax
  00ed4	89 85 5b f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1395], eax
  00eda	88 85 5f f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1399], al
  00ee0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00ee5	88 85 60 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1400], al
  00eeb	33 c0		 xor	 eax, eax
  00eed	89 85 61 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1401], eax
  00ef3	89 85 65 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1405], eax
  00ef9	89 85 69 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1409], eax
  00eff	88 85 6d f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1413], al
  00f05	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f0a	88 85 6e f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1414], al
  00f10	33 c0		 xor	 eax, eax
  00f12	89 85 6f f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1415], eax
  00f18	89 85 73 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1419], eax
  00f1e	89 85 77 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1423], eax
  00f24	88 85 7b f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1427], al
  00f2a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f2f	88 85 7c f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1428], al
  00f35	33 c0		 xor	 eax, eax
  00f37	89 85 7d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1429], eax
  00f3d	89 85 81 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1433], eax
  00f43	89 85 85 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1437], eax
  00f49	88 85 89 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1441], al
  00f4f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f54	88 85 8a f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1442], al
  00f5a	33 c0		 xor	 eax, eax
  00f5c	89 85 8b f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1443], eax
  00f62	89 85 8f f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1447], eax
  00f68	89 85 93 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1451], eax
  00f6e	88 85 97 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1455], al
  00f74	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f79	88 85 98 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1456], al
  00f7f	33 c0		 xor	 eax, eax
  00f81	89 85 99 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1457], eax
  00f87	89 85 9d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1461], eax
  00f8d	89 85 a1 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1465], eax
  00f93	88 85 a5 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1469], al
  00f99	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f9e	88 85 a6 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1470], al
  00fa4	33 c0		 xor	 eax, eax
  00fa6	89 85 a7 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1471], eax
  00fac	89 85 ab f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1475], eax
  00fb2	89 85 af f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1479], eax
  00fb8	88 85 b3 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1483], al
  00fbe	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00fc3	88 85 b4 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1484], al
  00fc9	33 c0		 xor	 eax, eax
  00fcb	89 85 b5 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1485], eax
  00fd1	89 85 b9 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1489], eax
  00fd7	89 85 bd f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1493], eax
  00fdd	88 85 c1 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1497], al
  00fe3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00fe8	88 85 c2 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1498], al
  00fee	33 c0		 xor	 eax, eax
  00ff0	89 85 c3 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1499], eax
  00ff6	89 85 c7 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1503], eax
  00ffc	89 85 cb f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1507], eax
  01002	88 85 cf f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1511], al
  01008	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0100d	88 85 d0 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1512], al
  01013	33 c0		 xor	 eax, eax
  01015	89 85 d1 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1513], eax
  0101b	89 85 d5 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1517], eax
  01021	89 85 d9 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1521], eax
  01027	88 85 dd f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1525], al
  0102d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01032	88 85 de f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1526], al
  01038	33 c0		 xor	 eax, eax
  0103a	89 85 df f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1527], eax
  01040	89 85 e3 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1531], eax
  01046	89 85 e7 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1535], eax
  0104c	88 85 eb f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1539], al
  01052	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01057	88 85 ec f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1540], al
  0105d	33 c0		 xor	 eax, eax
  0105f	89 85 ed f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1541], eax
  01065	89 85 f1 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1545], eax
  0106b	89 85 f5 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1549], eax
  01071	88 85 f9 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1553], al
  01077	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0107c	88 85 fa f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1554], al
  01082	33 c0		 xor	 eax, eax
  01084	89 85 fb f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1555], eax
  0108a	89 85 ff f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1559], eax
  01090	89 85 03 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1563], eax
  01096	88 85 07 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1567], al
  0109c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  010a1	88 85 08 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1568], al
  010a7	33 c0		 xor	 eax, eax
  010a9	89 85 09 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1569], eax
  010af	89 85 0d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1573], eax
  010b5	89 85 11 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1577], eax
  010bb	88 85 15 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1581], al

; 589  : 				  "","","","","","","","","","","","","","","","",

  010c1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  010c6	88 85 16 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1582], al
  010cc	33 c0		 xor	 eax, eax
  010ce	89 85 17 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1583], eax
  010d4	89 85 1b f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1587], eax
  010da	89 85 1f f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1591], eax
  010e0	88 85 23 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1595], al
  010e6	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  010eb	88 85 24 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1596], al
  010f1	33 c0		 xor	 eax, eax
  010f3	89 85 25 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1597], eax
  010f9	89 85 29 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1601], eax
  010ff	89 85 2d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1605], eax
  01105	88 85 31 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1609], al
  0110b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01110	88 85 32 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1610], al
  01116	33 c0		 xor	 eax, eax
  01118	89 85 33 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1611], eax
  0111e	89 85 37 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1615], eax
  01124	89 85 3b f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1619], eax
  0112a	88 85 3f f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1623], al
  01130	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01135	88 85 40 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1624], al
  0113b	33 c0		 xor	 eax, eax
  0113d	89 85 41 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1625], eax
  01143	89 85 45 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1629], eax
  01149	89 85 49 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1633], eax
  0114f	88 85 4d f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1637], al
  01155	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0115a	88 85 4e f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1638], al
  01160	33 c0		 xor	 eax, eax
  01162	89 85 4f f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1639], eax
  01168	89 85 53 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1643], eax
  0116e	89 85 57 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1647], eax
  01174	88 85 5b f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1651], al
  0117a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0117f	88 85 5c f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1652], al
  01185	33 c0		 xor	 eax, eax
  01187	89 85 5d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1653], eax
  0118d	89 85 61 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1657], eax
  01193	89 85 65 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1661], eax
  01199	88 85 69 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1665], al
  0119f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  011a4	88 85 6a f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1666], al
  011aa	33 c0		 xor	 eax, eax
  011ac	89 85 6b f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1667], eax
  011b2	89 85 6f f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1671], eax
  011b8	89 85 73 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1675], eax
  011be	88 85 77 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1679], al
  011c4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  011c9	88 85 78 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1680], al
  011cf	33 c0		 xor	 eax, eax
  011d1	89 85 79 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1681], eax
  011d7	89 85 7d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1685], eax
  011dd	89 85 81 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1689], eax
  011e3	88 85 85 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1693], al
  011e9	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  011ee	88 85 86 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1694], al
  011f4	33 c0		 xor	 eax, eax
  011f6	89 85 87 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1695], eax
  011fc	89 85 8b f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1699], eax
  01202	89 85 8f f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1703], eax
  01208	88 85 93 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1707], al
  0120e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01213	88 85 94 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1708], al
  01219	33 c0		 xor	 eax, eax
  0121b	89 85 95 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1709], eax
  01221	89 85 99 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1713], eax
  01227	89 85 9d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1717], eax
  0122d	88 85 a1 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1721], al
  01233	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01238	88 85 a2 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1722], al
  0123e	33 c0		 xor	 eax, eax
  01240	89 85 a3 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1723], eax
  01246	89 85 a7 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1727], eax
  0124c	89 85 ab f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1731], eax
  01252	88 85 af f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1735], al
  01258	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0125d	88 85 b0 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1736], al
  01263	33 c0		 xor	 eax, eax
  01265	89 85 b1 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1737], eax
  0126b	89 85 b5 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1741], eax
  01271	89 85 b9 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1745], eax
  01277	88 85 bd f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1749], al
  0127d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01282	88 85 be f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1750], al
  01288	33 c0		 xor	 eax, eax
  0128a	89 85 bf f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1751], eax
  01290	89 85 c3 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1755], eax
  01296	89 85 c7 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1759], eax
  0129c	88 85 cb f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1763], al
  012a2	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  012a7	88 85 cc f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1764], al
  012ad	33 c0		 xor	 eax, eax
  012af	89 85 cd f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1765], eax
  012b5	89 85 d1 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1769], eax
  012bb	89 85 d5 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1773], eax
  012c1	88 85 d9 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1777], al
  012c7	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  012cc	88 85 da f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1778], al
  012d2	33 c0		 xor	 eax, eax
  012d4	89 85 db f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1779], eax
  012da	89 85 df f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1783], eax
  012e0	89 85 e3 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1787], eax
  012e6	88 85 e7 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1791], al
  012ec	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  012f1	88 85 e8 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1792], al
  012f7	33 c0		 xor	 eax, eax
  012f9	89 85 e9 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1793], eax
  012ff	89 85 ed f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1797], eax
  01305	89 85 f1 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1801], eax
  0130b	88 85 f5 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1805], al

; 590  : 				  "","","","","","","","","","","","","","","","",

  01311	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01316	88 85 f6 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1806], al
  0131c	33 c0		 xor	 eax, eax
  0131e	89 85 f7 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1807], eax
  01324	89 85 fb f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1811], eax
  0132a	89 85 ff f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1815], eax
  01330	88 85 03 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1819], al
  01336	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0133b	88 85 04 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1820], al
  01341	33 c0		 xor	 eax, eax
  01343	89 85 05 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1821], eax
  01349	89 85 09 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1825], eax
  0134f	89 85 0d f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1829], eax
  01355	88 85 11 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1833], al
  0135b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01360	88 85 12 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1834], al
  01366	33 c0		 xor	 eax, eax
  01368	89 85 13 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1835], eax
  0136e	89 85 17 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1839], eax
  01374	89 85 1b f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1843], eax
  0137a	88 85 1f f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1847], al
  01380	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01385	88 85 20 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1848], al
  0138b	33 c0		 xor	 eax, eax
  0138d	89 85 21 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1849], eax
  01393	89 85 25 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1853], eax
  01399	89 85 29 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1857], eax
  0139f	88 85 2d f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1861], al
  013a5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  013aa	88 85 2e f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1862], al
  013b0	33 c0		 xor	 eax, eax
  013b2	89 85 2f f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1863], eax
  013b8	89 85 33 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1867], eax
  013be	89 85 37 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1871], eax
  013c4	88 85 3b f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1875], al
  013ca	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  013cf	88 85 3c f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1876], al
  013d5	33 c0		 xor	 eax, eax
  013d7	89 85 3d f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1877], eax
  013dd	89 85 41 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1881], eax
  013e3	89 85 45 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1885], eax
  013e9	88 85 49 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1889], al
  013ef	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  013f4	88 85 4a f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1890], al
  013fa	33 c0		 xor	 eax, eax
  013fc	89 85 4b f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1891], eax
  01402	89 85 4f f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1895], eax
  01408	89 85 53 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1899], eax
  0140e	88 85 57 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1903], al
  01414	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01419	88 85 58 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1904], al
  0141f	33 c0		 xor	 eax, eax
  01421	89 85 59 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1905], eax
  01427	89 85 5d f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1909], eax
  0142d	89 85 61 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1913], eax
  01433	88 85 65 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1917], al
  01439	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0143e	88 85 66 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1918], al
  01444	33 c0		 xor	 eax, eax
  01446	89 85 67 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1919], eax
  0144c	89 85 6b f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1923], eax
  01452	89 85 6f f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1927], eax
  01458	88 85 73 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1931], al
  0145e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01463	88 85 74 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1932], al
  01469	33 c0		 xor	 eax, eax
  0146b	89 85 75 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1933], eax
  01471	89 85 79 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1937], eax
  01477	89 85 7d f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1941], eax
  0147d	88 85 81 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1945], al
  01483	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01488	88 85 82 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1946], al
  0148e	33 c0		 xor	 eax, eax
  01490	89 85 83 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1947], eax
  01496	89 85 87 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1951], eax
  0149c	89 85 8b f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1955], eax
  014a2	88 85 8f f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1959], al
  014a8	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  014ad	88 85 90 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1960], al
  014b3	33 c0		 xor	 eax, eax
  014b5	89 85 91 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1961], eax
  014bb	89 85 95 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1965], eax
  014c1	89 85 99 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1969], eax
  014c7	88 85 9d f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1973], al
  014cd	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  014d2	88 85 9e f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1974], al
  014d8	33 c0		 xor	 eax, eax
  014da	89 85 9f f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1975], eax
  014e0	89 85 a3 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1979], eax
  014e6	89 85 a7 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1983], eax
  014ec	88 85 ab f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1987], al
  014f2	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  014f7	88 85 ac f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1988], al
  014fd	33 c0		 xor	 eax, eax
  014ff	89 85 ad f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1989], eax
  01505	89 85 b1 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1993], eax
  0150b	89 85 b5 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1997], eax
  01511	88 85 b9 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2001], al
  01517	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0151c	88 85 ba f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2002], al
  01522	33 c0		 xor	 eax, eax
  01524	89 85 bb f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2003], eax
  0152a	89 85 bf f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2007], eax
  01530	89 85 c3 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2011], eax
  01536	88 85 c7 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2015], al
  0153c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01541	88 85 c8 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2016], al
  01547	33 c0		 xor	 eax, eax
  01549	89 85 c9 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2017], eax
  0154f	89 85 cd f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2021], eax
  01555	89 85 d1 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2025], eax
  0155b	88 85 d5 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2029], al

; 591  : 				  "","","","","","","","","","","","Right Enter","Right Control","","","",

  01561	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01566	88 85 d6 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2030], al
  0156c	33 c0		 xor	 eax, eax
  0156e	89 85 d7 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2031], eax
  01574	89 85 db f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2035], eax
  0157a	89 85 df f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2039], eax
  01580	88 85 e3 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2043], al
  01586	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0158b	88 85 e4 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2044], al
  01591	33 c0		 xor	 eax, eax
  01593	89 85 e5 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2045], eax
  01599	89 85 e9 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2049], eax
  0159f	89 85 ed f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2053], eax
  015a5	88 85 f1 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2057], al
  015ab	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  015b0	88 85 f2 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2058], al
  015b6	33 c0		 xor	 eax, eax
  015b8	89 85 f3 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2059], eax
  015be	89 85 f7 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2063], eax
  015c4	89 85 fb f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2067], eax
  015ca	88 85 ff f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2071], al
  015d0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  015d5	88 85 00 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2072], al
  015db	33 c0		 xor	 eax, eax
  015dd	89 85 01 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2073], eax
  015e3	89 85 05 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2077], eax
  015e9	89 85 09 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2081], eax
  015ef	88 85 0d fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2085], al
  015f5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  015fa	88 85 0e fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2086], al
  01600	33 c0		 xor	 eax, eax
  01602	89 85 0f fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2087], eax
  01608	89 85 13 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2091], eax
  0160e	89 85 17 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2095], eax
  01614	88 85 1b fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2099], al
  0161a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0161f	88 85 1c fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2100], al
  01625	33 c0		 xor	 eax, eax
  01627	89 85 1d fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2101], eax
  0162d	89 85 21 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2105], eax
  01633	89 85 25 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2109], eax
  01639	88 85 29 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2113], al
  0163f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01644	88 85 2a fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2114], al
  0164a	33 c0		 xor	 eax, eax
  0164c	89 85 2b fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2115], eax
  01652	89 85 2f fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2119], eax
  01658	89 85 33 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2123], eax
  0165e	88 85 37 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2127], al
  01664	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01669	88 85 38 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2128], al
  0166f	33 c0		 xor	 eax, eax
  01671	89 85 39 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2129], eax
  01677	89 85 3d fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2133], eax
  0167d	89 85 41 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2137], eax
  01683	88 85 45 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2141], al
  01689	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0168e	88 85 46 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2142], al
  01694	33 c0		 xor	 eax, eax
  01696	89 85 47 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2143], eax
  0169c	89 85 4b fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2147], eax
  016a2	89 85 4f fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2151], eax
  016a8	88 85 53 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2155], al
  016ae	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  016b3	88 85 54 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2156], al
  016b9	33 c0		 xor	 eax, eax
  016bb	89 85 55 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2157], eax
  016c1	89 85 59 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2161], eax
  016c7	89 85 5d fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2165], eax
  016cd	88 85 61 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2169], al
  016d3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  016d8	88 85 62 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2170], al
  016de	33 c0		 xor	 eax, eax
  016e0	89 85 63 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2171], eax
  016e6	89 85 67 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2175], eax
  016ec	89 85 6b fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2179], eax
  016f2	88 85 6f fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2183], al
  016f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
  016fd	89 85 70 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2184], eax
  01703	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+4
  01709	89 8d 74 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2188], ecx
  0170f	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+8
  01715	89 95 78 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2192], edx
  0171b	33 c0		 xor	 eax, eax
  0171d	66 89 85 7c fa
	ff ff		 mov	 WORD PTR _Temp$[ebp+2196], ax
  01724	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@
  01729	89 85 7e fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2198], eax
  0172f	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+4
  01735	89 8d 82 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2202], ecx
  0173b	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+8
  01741	89 95 86 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2206], edx
  01747	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+12
  0174d	66 89 85 8a fa
	ff ff		 mov	 WORD PTR _Temp$[ebp+2210], ax
  01754	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01759	88 85 8c fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2212], al
  0175f	33 c0		 xor	 eax, eax
  01761	89 85 8d fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2213], eax
  01767	89 85 91 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2217], eax
  0176d	89 85 95 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2221], eax
  01773	88 85 99 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2225], al
  01779	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0177e	88 85 9a fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2226], al
  01784	33 c0		 xor	 eax, eax
  01786	89 85 9b fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2227], eax
  0178c	89 85 9f fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2231], eax
  01792	89 85 a3 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2235], eax
  01798	88 85 a7 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2239], al
  0179e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  017a3	88 85 a8 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2240], al
  017a9	33 c0		 xor	 eax, eax
  017ab	89 85 a9 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2241], eax
  017b1	89 85 ad fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2245], eax
  017b7	89 85 b1 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2249], eax
  017bd	88 85 b5 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2253], al

; 592  : 				  "","","","","","","","","","","","","","","","",

  017c3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  017c8	88 85 b6 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2254], al
  017ce	33 c0		 xor	 eax, eax
  017d0	89 85 b7 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2255], eax
  017d6	89 85 bb fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2259], eax
  017dc	89 85 bf fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2263], eax
  017e2	88 85 c3 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2267], al
  017e8	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  017ed	88 85 c4 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2268], al
  017f3	33 c0		 xor	 eax, eax
  017f5	89 85 c5 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2269], eax
  017fb	89 85 c9 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2273], eax
  01801	89 85 cd fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2277], eax
  01807	88 85 d1 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2281], al
  0180d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01812	88 85 d2 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2282], al
  01818	33 c0		 xor	 eax, eax
  0181a	89 85 d3 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2283], eax
  01820	89 85 d7 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2287], eax
  01826	89 85 db fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2291], eax
  0182c	88 85 df fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2295], al
  01832	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01837	88 85 e0 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2296], al
  0183d	33 c0		 xor	 eax, eax
  0183f	89 85 e1 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2297], eax
  01845	89 85 e5 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2301], eax
  0184b	89 85 e9 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2305], eax
  01851	88 85 ed fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2309], al
  01857	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0185c	88 85 ee fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2310], al
  01862	33 c0		 xor	 eax, eax
  01864	89 85 ef fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2311], eax
  0186a	89 85 f3 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2315], eax
  01870	89 85 f7 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2319], eax
  01876	88 85 fb fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2323], al
  0187c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01881	88 85 fc fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2324], al
  01887	33 c0		 xor	 eax, eax
  01889	89 85 fd fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2325], eax
  0188f	89 85 01 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2329], eax
  01895	89 85 05 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2333], eax
  0189b	88 85 09 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2337], al
  018a1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  018a6	88 85 0a fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2338], al
  018ac	33 c0		 xor	 eax, eax
  018ae	89 85 0b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2339], eax
  018b4	89 85 0f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2343], eax
  018ba	89 85 13 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2347], eax
  018c0	88 85 17 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2351], al
  018c6	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  018cb	88 85 18 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2352], al
  018d1	33 c0		 xor	 eax, eax
  018d3	89 85 19 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2353], eax
  018d9	89 85 1d fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2357], eax
  018df	89 85 21 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2361], eax
  018e5	88 85 25 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2365], al
  018eb	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  018f0	88 85 26 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2366], al
  018f6	33 c0		 xor	 eax, eax
  018f8	89 85 27 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2367], eax
  018fe	89 85 2b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2371], eax
  01904	89 85 2f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2375], eax
  0190a	88 85 33 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2379], al
  01910	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01915	88 85 34 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2380], al
  0191b	33 c0		 xor	 eax, eax
  0191d	89 85 35 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2381], eax
  01923	89 85 39 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2385], eax
  01929	89 85 3d fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2389], eax
  0192f	88 85 41 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2393], al
  01935	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0193a	88 85 42 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2394], al
  01940	33 c0		 xor	 eax, eax
  01942	89 85 43 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2395], eax
  01948	89 85 47 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2399], eax
  0194e	89 85 4b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2403], eax
  01954	88 85 4f fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2407], al
  0195a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0195f	88 85 50 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2408], al
  01965	33 c0		 xor	 eax, eax
  01967	89 85 51 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2409], eax
  0196d	89 85 55 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2413], eax
  01973	89 85 59 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2417], eax
  01979	88 85 5d fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2421], al
  0197f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01984	88 85 5e fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2422], al
  0198a	33 c0		 xor	 eax, eax
  0198c	89 85 5f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2423], eax
  01992	89 85 63 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2427], eax
  01998	89 85 67 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2431], eax
  0199e	88 85 6b fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2435], al
  019a4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  019a9	88 85 6c fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2436], al
  019af	33 c0		 xor	 eax, eax
  019b1	89 85 6d fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2437], eax
  019b7	89 85 71 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2441], eax
  019bd	89 85 75 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2445], eax
  019c3	88 85 79 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2449], al
  019c9	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  019ce	88 85 7a fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2450], al
  019d4	33 c0		 xor	 eax, eax
  019d6	89 85 7b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2451], eax
  019dc	89 85 7f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2455], eax
  019e2	89 85 83 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2459], eax
  019e8	88 85 87 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2463], al
  019ee	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  019f3	88 85 88 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2464], al
  019f9	33 c0		 xor	 eax, eax
  019fb	89 85 89 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2465], eax
  01a01	89 85 8d fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2469], eax
  01a07	89 85 91 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2473], eax
  01a0d	88 85 95 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2477], al

; 593  : 				  "","Function F3","","","/ Num","","Print Screen","Right Alt","","","","","","","","",

  01a13	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01a18	88 85 96 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2478], al
  01a1e	33 c0		 xor	 eax, eax
  01a20	89 85 97 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2479], eax
  01a26	89 85 9b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2483], eax
  01a2c	89 85 9f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2487], eax
  01a32	88 85 a3 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2491], al
  01a38	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@
  01a3d	89 85 a4 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2492], eax
  01a43	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@+4
  01a49	89 8d a8 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2496], ecx
  01a4f	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@+8
  01a55	89 95 ac fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2500], edx
  01a5b	33 c0		 xor	 eax, eax
  01a5d	66 89 85 b0 fb
	ff ff		 mov	 WORD PTR _Temp$[ebp+2504], ax
  01a64	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01a69	88 85 b2 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2506], al
  01a6f	33 c0		 xor	 eax, eax
  01a71	89 85 b3 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2507], eax
  01a77	89 85 b7 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2511], eax
  01a7d	89 85 bb fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2515], eax
  01a83	88 85 bf fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2519], al
  01a89	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01a8e	88 85 c0 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2520], al
  01a94	33 c0		 xor	 eax, eax
  01a96	89 85 c1 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2521], eax
  01a9c	89 85 c5 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2525], eax
  01aa2	89 85 c9 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2529], eax
  01aa8	88 85 cd fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2533], al
  01aae	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05IAKEFGOE@?1?5Num?$AA@
  01ab3	89 85 ce fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2534], eax
  01ab9	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05IAKEFGOE@?1?5Num?$AA@+4
  01ac0	66 89 8d d2 fb
	ff ff		 mov	 WORD PTR _Temp$[ebp+2538], cx
  01ac7	33 c0		 xor	 eax, eax
  01ac9	89 85 d4 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2540], eax
  01acf	89 85 d8 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2544], eax
  01ad5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01ada	88 85 dc fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2548], al
  01ae0	33 c0		 xor	 eax, eax
  01ae2	89 85 dd fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2549], eax
  01ae8	89 85 e1 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2553], eax
  01aee	89 85 e5 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2557], eax
  01af4	88 85 e9 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2561], al
  01afa	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@
  01aff	89 85 ea fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2562], eax
  01b05	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+4
  01b0b	89 8d ee fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2566], ecx
  01b11	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+8
  01b17	89 95 f2 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2570], edx
  01b1d	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+12
  01b22	88 85 f6 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2574], al
  01b28	33 c0		 xor	 eax, eax
  01b2a	88 85 f7 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2575], al
  01b30	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@
  01b35	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2576], eax
  01b3b	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@+4
  01b41	89 8d fc fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2580], ecx
  01b47	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@+8
  01b4e	66 89 95 00 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2584], dx
  01b55	33 c0		 xor	 eax, eax
  01b57	89 85 02 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2586], eax
  01b5d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01b62	88 85 06 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2590], al
  01b68	33 c0		 xor	 eax, eax
  01b6a	89 85 07 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2591], eax
  01b70	89 85 0b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2595], eax
  01b76	89 85 0f fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2599], eax
  01b7c	88 85 13 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2603], al
  01b82	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01b87	88 85 14 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2604], al
  01b8d	33 c0		 xor	 eax, eax
  01b8f	89 85 15 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2605], eax
  01b95	89 85 19 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2609], eax
  01b9b	89 85 1d fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2613], eax
  01ba1	88 85 21 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2617], al
  01ba7	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01bac	88 85 22 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2618], al
  01bb2	33 c0		 xor	 eax, eax
  01bb4	89 85 23 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2619], eax
  01bba	89 85 27 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2623], eax
  01bc0	89 85 2b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2627], eax
  01bc6	88 85 2f fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2631], al
  01bcc	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01bd1	88 85 30 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2632], al
  01bd7	33 c0		 xor	 eax, eax
  01bd9	89 85 31 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2633], eax
  01bdf	89 85 35 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2637], eax
  01be5	89 85 39 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2641], eax
  01beb	88 85 3d fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2645], al
  01bf1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01bf6	88 85 3e fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2646], al
  01bfc	33 c0		 xor	 eax, eax
  01bfe	89 85 3f fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2647], eax
  01c04	89 85 43 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2651], eax
  01c0a	89 85 47 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2655], eax
  01c10	88 85 4b fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2659], al
  01c16	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01c1b	88 85 4c fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2660], al
  01c21	33 c0		 xor	 eax, eax
  01c23	89 85 4d fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2661], eax
  01c29	89 85 51 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2665], eax
  01c2f	89 85 55 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2669], eax
  01c35	88 85 59 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2673], al
  01c3b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01c40	88 85 5a fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2674], al
  01c46	33 c0		 xor	 eax, eax
  01c48	89 85 5b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2675], eax
  01c4e	89 85 5f fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2679], eax
  01c54	89 85 63 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2683], eax
  01c5a	88 85 67 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2687], al
  01c60	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01c65	88 85 68 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2688], al
  01c6b	33 c0		 xor	 eax, eax
  01c6d	89 85 69 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2689], eax
  01c73	89 85 6d fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2693], eax
  01c79	89 85 71 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2697], eax
  01c7f	88 85 75 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2701], al

; 594  : 				  "","","","","Pause","Break","Home","Up","Page Up","","Left","","Right","","End","Down",

  01c85	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01c8a	88 85 76 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2702], al
  01c90	33 c0		 xor	 eax, eax
  01c92	89 85 77 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2703], eax
  01c98	89 85 7b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2707], eax
  01c9e	89 85 7f fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2711], eax
  01ca4	88 85 83 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2715], al
  01caa	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01caf	88 85 84 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2716], al
  01cb5	33 c0		 xor	 eax, eax
  01cb7	89 85 85 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2717], eax
  01cbd	89 85 89 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2721], eax
  01cc3	89 85 8d fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2725], eax
  01cc9	88 85 91 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2729], al
  01ccf	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01cd4	88 85 92 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2730], al
  01cda	33 c0		 xor	 eax, eax
  01cdc	89 85 93 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2731], eax
  01ce2	89 85 97 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2735], eax
  01ce8	89 85 9b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2739], eax
  01cee	88 85 9f fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2743], al
  01cf4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01cf9	88 85 a0 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2744], al
  01cff	33 c0		 xor	 eax, eax
  01d01	89 85 a1 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2745], eax
  01d07	89 85 a5 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2749], eax
  01d0d	89 85 a9 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2753], eax
  01d13	88 85 ad fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2757], al
  01d19	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05PEDNBBBD@Pause?$AA@
  01d1e	89 85 ae fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2758], eax
  01d24	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05PEDNBBBD@Pause?$AA@+4
  01d2b	66 89 8d b2 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2762], cx
  01d32	33 c0		 xor	 eax, eax
  01d34	89 85 b4 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2764], eax
  01d3a	89 85 b8 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2768], eax
  01d40	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05EMFLFCNO@Break?$AA@
  01d45	89 85 bc fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2772], eax
  01d4b	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05EMFLFCNO@Break?$AA@+4
  01d52	66 89 8d c0 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2776], cx
  01d59	33 c0		 xor	 eax, eax
  01d5b	89 85 c2 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2778], eax
  01d61	89 85 c6 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2782], eax
  01d67	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04GKJODLKO@Home?$AA@
  01d6c	89 85 ca fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2786], eax
  01d72	8a 0d 04 00 00
	00		 mov	 cl, BYTE PTR ??_C@_04GKJODLKO@Home?$AA@+4
  01d78	88 8d ce fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2790], cl
  01d7e	33 c0		 xor	 eax, eax
  01d80	89 85 cf fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2791], eax
  01d86	89 85 d3 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2795], eax
  01d8c	88 85 d7 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2799], al
  01d92	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02EFPGLDEA@Up?$AA@
  01d98	66 89 85 d8 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2800], ax
  01d9f	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02EFPGLDEA@Up?$AA@+2
  01da5	88 8d da fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2802], cl
  01dab	33 c0		 xor	 eax, eax
  01dad	89 85 db fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2803], eax
  01db3	89 85 df fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2807], eax
  01db9	66 89 85 e3 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2811], ax
  01dc0	88 85 e5 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2813], al
  01dc6	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07EDGDGJEN@Page?5Up?$AA@
  01dcb	89 85 e6 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2814], eax
  01dd1	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07EDGDGJEN@Page?5Up?$AA@+4
  01dd7	89 8d ea fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2818], ecx
  01ddd	33 c0		 xor	 eax, eax
  01ddf	89 85 ee fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2822], eax
  01de5	66 89 85 f2 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2826], ax
  01dec	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01df1	88 85 f4 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2828], al
  01df7	33 c0		 xor	 eax, eax
  01df9	89 85 f5 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2829], eax
  01dff	89 85 f9 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2833], eax
  01e05	89 85 fd fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2837], eax
  01e0b	88 85 01 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2841], al
  01e11	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04KPCPLBPL@Left?$AA@
  01e16	89 85 02 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2842], eax
  01e1c	8a 0d 04 00 00
	00		 mov	 cl, BYTE PTR ??_C@_04KPCPLBPL@Left?$AA@+4
  01e22	88 8d 06 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2846], cl
  01e28	33 c0		 xor	 eax, eax
  01e2a	89 85 07 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2847], eax
  01e30	89 85 0b fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2851], eax
  01e36	88 85 0f fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2855], al
  01e3c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01e41	88 85 10 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2856], al
  01e47	33 c0		 xor	 eax, eax
  01e49	89 85 11 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2857], eax
  01e4f	89 85 15 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2861], eax
  01e55	89 85 19 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2865], eax
  01e5b	88 85 1d fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2869], al
  01e61	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05DADPALEM@Right?$AA@
  01e66	89 85 1e fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2870], eax
  01e6c	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05DADPALEM@Right?$AA@+4
  01e73	66 89 8d 22 fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2874], cx
  01e7a	33 c0		 xor	 eax, eax
  01e7c	89 85 24 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2876], eax
  01e82	89 85 28 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2880], eax
  01e88	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01e8d	88 85 2c fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2884], al
  01e93	33 c0		 xor	 eax, eax
  01e95	89 85 2d fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2885], eax
  01e9b	89 85 31 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2889], eax
  01ea1	89 85 35 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2893], eax
  01ea7	88 85 39 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2897], al
  01ead	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03DBKJMAGF@End?$AA@
  01eb2	89 85 3a fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2898], eax
  01eb8	33 c0		 xor	 eax, eax
  01eba	89 85 3e fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2902], eax
  01ec0	89 85 42 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2906], eax
  01ec6	66 89 85 46 fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2910], ax
  01ecd	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04FNCLCJMC@Down?$AA@
  01ed2	89 85 48 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2912], eax
  01ed8	8a 0d 04 00 00
	00		 mov	 cl, BYTE PTR ??_C@_04FNCLCJMC@Down?$AA@+4
  01ede	88 8d 4c fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2916], cl
  01ee4	33 c0		 xor	 eax, eax
  01ee6	89 85 4d fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2917], eax
  01eec	89 85 51 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2921], eax
  01ef2	88 85 55 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2925], al

; 595  : 				  "Page Down","Insert","Delete","","","","","","","","Left Windows","Right Windows","Thing","","","",

  01ef8	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@
  01efd	89 85 56 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2926], eax
  01f03	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@+4
  01f09	89 8d 5a fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2930], ecx
  01f0f	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@+8
  01f16	66 89 95 5e fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2934], dx
  01f1d	33 c0		 xor	 eax, eax
  01f1f	89 85 60 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2936], eax
  01f25	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06CPFCODOD@Insert?$AA@
  01f2a	89 85 64 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2940], eax
  01f30	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06CPFCODOD@Insert?$AA@+4
  01f37	66 89 8d 68 fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2944], cx
  01f3e	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06CPFCODOD@Insert?$AA@+6
  01f44	88 95 6a fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2946], dl
  01f4a	33 c0		 xor	 eax, eax
  01f4c	89 85 6b fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2947], eax
  01f52	66 89 85 6f fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2951], ax
  01f59	88 85 71 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2953], al
  01f5f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06JBKGCNBB@Delete?$AA@
  01f64	89 85 72 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2954], eax
  01f6a	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06JBKGCNBB@Delete?$AA@+4
  01f71	66 89 8d 76 fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2958], cx
  01f78	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06JBKGCNBB@Delete?$AA@+6
  01f7e	88 95 78 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2960], dl
  01f84	33 c0		 xor	 eax, eax
  01f86	89 85 79 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2961], eax
  01f8c	66 89 85 7d fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2965], ax
  01f93	88 85 7f fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2967], al
  01f99	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01f9e	88 85 80 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2968], al
  01fa4	33 c0		 xor	 eax, eax
  01fa6	89 85 81 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2969], eax
  01fac	89 85 85 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2973], eax
  01fb2	89 85 89 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2977], eax
  01fb8	88 85 8d fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2981], al
  01fbe	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01fc3	88 85 8e fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2982], al
  01fc9	33 c0		 xor	 eax, eax
  01fcb	89 85 8f fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2983], eax
  01fd1	89 85 93 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2987], eax
  01fd7	89 85 97 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2991], eax
  01fdd	88 85 9b fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2995], al
  01fe3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01fe8	88 85 9c fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2996], al
  01fee	33 c0		 xor	 eax, eax
  01ff0	89 85 9d fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2997], eax
  01ff6	89 85 a1 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3001], eax
  01ffc	89 85 a5 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3005], eax
  02002	88 85 a9 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3009], al
  02008	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0200d	88 85 aa fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3010], al
  02013	33 c0		 xor	 eax, eax
  02015	89 85 ab fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3011], eax
  0201b	89 85 af fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3015], eax
  02021	89 85 b3 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3019], eax
  02027	88 85 b7 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3023], al
  0202d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02032	88 85 b8 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3024], al
  02038	33 c0		 xor	 eax, eax
  0203a	89 85 b9 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3025], eax
  02040	89 85 bd fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3029], eax
  02046	89 85 c1 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3033], eax
  0204c	88 85 c5 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3037], al
  02052	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02057	88 85 c6 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3038], al
  0205d	33 c0		 xor	 eax, eax
  0205f	89 85 c7 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3039], eax
  02065	89 85 cb fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3043], eax
  0206b	89 85 cf fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3047], eax
  02071	88 85 d3 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3051], al
  02077	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0207c	88 85 d4 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3052], al
  02082	33 c0		 xor	 eax, eax
  02084	89 85 d5 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3053], eax
  0208a	89 85 d9 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3057], eax
  02090	89 85 dd fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3061], eax
  02096	88 85 e1 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3065], al
  0209c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@
  020a1	89 85 e2 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3066], eax
  020a7	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+4
  020ad	89 8d e6 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3070], ecx
  020b3	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+8
  020b9	89 95 ea fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3074], edx
  020bf	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+12
  020c4	88 85 ee fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3078], al
  020ca	33 c0		 xor	 eax, eax
  020cc	88 85 ef fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3079], al
  020d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@
  020d7	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3080], eax
  020dd	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+4
  020e3	89 8d f4 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3084], ecx
  020e9	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+8
  020ef	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3088], edx
  020f5	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+12
  020fb	66 89 85 fc fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+3092], ax
  02102	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05FOLLILPC@Thing?$AA@
  02107	89 85 fe fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3094], eax
  0210d	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05FOLLILPC@Thing?$AA@+4
  02114	66 89 8d 02 fe
	ff ff		 mov	 WORD PTR _Temp$[ebp+3098], cx
  0211b	33 c0		 xor	 eax, eax
  0211d	89 85 04 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3100], eax
  02123	89 85 08 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3104], eax
  02129	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0212e	88 85 0c fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3108], al
  02134	33 c0		 xor	 eax, eax
  02136	89 85 0d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3109], eax
  0213c	89 85 11 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3113], eax
  02142	89 85 15 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3117], eax
  02148	88 85 19 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3121], al
  0214e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02153	88 85 1a fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3122], al
  02159	33 c0		 xor	 eax, eax
  0215b	89 85 1b fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3123], eax
  02161	89 85 1f fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3127], eax
  02167	89 85 23 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3131], eax
  0216d	88 85 27 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3135], al
  02173	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02178	88 85 28 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3136], al
  0217e	33 c0		 xor	 eax, eax
  02180	89 85 29 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3137], eax
  02186	89 85 2d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3141], eax
  0218c	89 85 31 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3145], eax
  02192	88 85 35 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3149], al

; 596  : 				  "","","","","","","","","","","","","","","","",

  02198	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0219d	88 85 36 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3150], al
  021a3	33 c0		 xor	 eax, eax
  021a5	89 85 37 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3151], eax
  021ab	89 85 3b fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3155], eax
  021b1	89 85 3f fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3159], eax
  021b7	88 85 43 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3163], al
  021bd	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  021c2	88 85 44 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3164], al
  021c8	33 c0		 xor	 eax, eax
  021ca	89 85 45 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3165], eax
  021d0	89 85 49 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3169], eax
  021d6	89 85 4d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3173], eax
  021dc	88 85 51 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3177], al
  021e2	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  021e7	88 85 52 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3178], al
  021ed	33 c0		 xor	 eax, eax
  021ef	89 85 53 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3179], eax
  021f5	89 85 57 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3183], eax
  021fb	89 85 5b fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3187], eax
  02201	88 85 5f fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3191], al
  02207	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0220c	88 85 60 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3192], al
  02212	33 c0		 xor	 eax, eax
  02214	89 85 61 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3193], eax
  0221a	89 85 65 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3197], eax
  02220	89 85 69 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3201], eax
  02226	88 85 6d fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3205], al
  0222c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02231	88 85 6e fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3206], al
  02237	33 c0		 xor	 eax, eax
  02239	89 85 6f fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3207], eax
  0223f	89 85 73 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3211], eax
  02245	89 85 77 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3215], eax
  0224b	88 85 7b fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3219], al
  02251	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02256	88 85 7c fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3220], al
  0225c	33 c0		 xor	 eax, eax
  0225e	89 85 7d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3221], eax
  02264	89 85 81 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3225], eax
  0226a	89 85 85 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3229], eax
  02270	88 85 89 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3233], al
  02276	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0227b	88 85 8a fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3234], al
  02281	33 c0		 xor	 eax, eax
  02283	89 85 8b fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3235], eax
  02289	89 85 8f fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3239], eax
  0228f	89 85 93 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3243], eax
  02295	88 85 97 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3247], al
  0229b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  022a0	88 85 98 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3248], al
  022a6	33 c0		 xor	 eax, eax
  022a8	89 85 99 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3249], eax
  022ae	89 85 9d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3253], eax
  022b4	89 85 a1 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3257], eax
  022ba	88 85 a5 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3261], al
  022c0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  022c5	88 85 a6 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3262], al
  022cb	33 c0		 xor	 eax, eax
  022cd	89 85 a7 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3263], eax
  022d3	89 85 ab fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3267], eax
  022d9	89 85 af fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3271], eax
  022df	88 85 b3 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3275], al
  022e5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  022ea	88 85 b4 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3276], al
  022f0	33 c0		 xor	 eax, eax
  022f2	89 85 b5 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3277], eax
  022f8	89 85 b9 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3281], eax
  022fe	89 85 bd fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3285], eax
  02304	88 85 c1 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3289], al
  0230a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0230f	88 85 c2 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3290], al
  02315	33 c0		 xor	 eax, eax
  02317	89 85 c3 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3291], eax
  0231d	89 85 c7 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3295], eax
  02323	89 85 cb fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3299], eax
  02329	88 85 cf fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3303], al
  0232f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02334	88 85 d0 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3304], al
  0233a	33 c0		 xor	 eax, eax
  0233c	89 85 d1 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3305], eax
  02342	89 85 d5 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3309], eax
  02348	89 85 d9 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3313], eax
  0234e	88 85 dd fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3317], al
  02354	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02359	88 85 de fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3318], al
  0235f	33 c0		 xor	 eax, eax
  02361	89 85 df fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3319], eax
  02367	89 85 e3 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3323], eax
  0236d	89 85 e7 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3327], eax
  02373	88 85 eb fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3331], al
  02379	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0237e	88 85 ec fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3332], al
  02384	33 c0		 xor	 eax, eax
  02386	89 85 ed fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3333], eax
  0238c	89 85 f1 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3337], eax
  02392	89 85 f5 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3341], eax
  02398	88 85 f9 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3345], al
  0239e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  023a3	88 85 fa fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3346], al
  023a9	33 c0		 xor	 eax, eax
  023ab	89 85 fb fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3347], eax
  023b1	89 85 ff fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3351], eax
  023b7	89 85 03 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3355], eax
  023bd	88 85 07 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3359], al
  023c3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  023c8	88 85 08 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3360], al
  023ce	33 c0		 xor	 eax, eax
  023d0	89 85 09 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3361], eax
  023d6	89 85 0d ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3365], eax
  023dc	89 85 11 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3369], eax
  023e2	88 85 15 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3373], al

; 597  : 				  "","","","","","","","","","","","","","","",""};

  023e8	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  023ed	88 85 16 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3374], al
  023f3	33 c0		 xor	 eax, eax
  023f5	89 85 17 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3375], eax
  023fb	89 85 1b ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3379], eax
  02401	89 85 1f ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3383], eax
  02407	88 85 23 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3387], al
  0240d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02412	88 85 24 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3388], al
  02418	33 c0		 xor	 eax, eax
  0241a	89 85 25 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3389], eax
  02420	89 85 29 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3393], eax
  02426	89 85 2d ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3397], eax
  0242c	88 85 31 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3401], al
  02432	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02437	88 85 32 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3402], al
  0243d	33 c0		 xor	 eax, eax
  0243f	89 85 33 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3403], eax
  02445	89 85 37 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3407], eax
  0244b	89 85 3b ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3411], eax
  02451	88 85 3f ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3415], al
  02457	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0245c	88 85 40 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3416], al
  02462	33 c0		 xor	 eax, eax
  02464	89 85 41 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3417], eax
  0246a	89 85 45 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3421], eax
  02470	89 85 49 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3425], eax
  02476	88 85 4d ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3429], al
  0247c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02481	88 85 4e ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3430], al
  02487	33 c0		 xor	 eax, eax
  02489	89 85 4f ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3431], eax
  0248f	89 85 53 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3435], eax
  02495	89 85 57 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3439], eax
  0249b	88 85 5b ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3443], al
  024a1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  024a6	88 85 5c ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3444], al
  024ac	33 c0		 xor	 eax, eax
  024ae	89 85 5d ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3445], eax
  024b4	89 85 61 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3449], eax
  024ba	89 85 65 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3453], eax
  024c0	88 85 69 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3457], al
  024c6	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  024cb	88 85 6a ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3458], al
  024d1	33 c0		 xor	 eax, eax
  024d3	89 85 6b ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3459], eax
  024d9	89 85 6f ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3463], eax
  024df	89 85 73 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3467], eax
  024e5	88 85 77 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3471], al
  024eb	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  024f0	88 85 78 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3472], al
  024f6	33 c0		 xor	 eax, eax
  024f8	89 85 79 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3473], eax
  024fe	89 85 7d ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3477], eax
  02504	89 45 81	 mov	 DWORD PTR _Temp$[ebp+3481], eax
  02507	88 45 85	 mov	 BYTE PTR _Temp$[ebp+3485], al
  0250a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0250f	88 45 86	 mov	 BYTE PTR _Temp$[ebp+3486], al
  02512	33 c0		 xor	 eax, eax
  02514	89 45 87	 mov	 DWORD PTR _Temp$[ebp+3487], eax
  02517	89 45 8b	 mov	 DWORD PTR _Temp$[ebp+3491], eax
  0251a	89 45 8f	 mov	 DWORD PTR _Temp$[ebp+3495], eax
  0251d	88 45 93	 mov	 BYTE PTR _Temp$[ebp+3499], al
  02520	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02525	88 45 94	 mov	 BYTE PTR _Temp$[ebp+3500], al
  02528	33 c0		 xor	 eax, eax
  0252a	89 45 95	 mov	 DWORD PTR _Temp$[ebp+3501], eax
  0252d	89 45 99	 mov	 DWORD PTR _Temp$[ebp+3505], eax
  02530	89 45 9d	 mov	 DWORD PTR _Temp$[ebp+3509], eax
  02533	88 45 a1	 mov	 BYTE PTR _Temp$[ebp+3513], al
  02536	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0253b	88 45 a2	 mov	 BYTE PTR _Temp$[ebp+3514], al
  0253e	33 c0		 xor	 eax, eax
  02540	89 45 a3	 mov	 DWORD PTR _Temp$[ebp+3515], eax
  02543	89 45 a7	 mov	 DWORD PTR _Temp$[ebp+3519], eax
  02546	89 45 ab	 mov	 DWORD PTR _Temp$[ebp+3523], eax
  02549	88 45 af	 mov	 BYTE PTR _Temp$[ebp+3527], al
  0254c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02551	88 45 b0	 mov	 BYTE PTR _Temp$[ebp+3528], al
  02554	33 c0		 xor	 eax, eax
  02556	89 45 b1	 mov	 DWORD PTR _Temp$[ebp+3529], eax
  02559	89 45 b5	 mov	 DWORD PTR _Temp$[ebp+3533], eax
  0255c	89 45 b9	 mov	 DWORD PTR _Temp$[ebp+3537], eax
  0255f	88 45 bd	 mov	 BYTE PTR _Temp$[ebp+3541], al
  02562	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02567	88 45 be	 mov	 BYTE PTR _Temp$[ebp+3542], al
  0256a	33 c0		 xor	 eax, eax
  0256c	89 45 bf	 mov	 DWORD PTR _Temp$[ebp+3543], eax
  0256f	89 45 c3	 mov	 DWORD PTR _Temp$[ebp+3547], eax
  02572	89 45 c7	 mov	 DWORD PTR _Temp$[ebp+3551], eax
  02575	88 45 cb	 mov	 BYTE PTR _Temp$[ebp+3555], al
  02578	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0257d	88 45 cc	 mov	 BYTE PTR _Temp$[ebp+3556], al
  02580	33 c0		 xor	 eax, eax
  02582	89 45 cd	 mov	 DWORD PTR _Temp$[ebp+3557], eax
  02585	89 45 d1	 mov	 DWORD PTR _Temp$[ebp+3561], eax
  02588	89 45 d5	 mov	 DWORD PTR _Temp$[ebp+3565], eax
  0258b	88 45 d9	 mov	 BYTE PTR _Temp$[ebp+3569], al
  0258e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02593	88 45 da	 mov	 BYTE PTR _Temp$[ebp+3570], al
  02596	33 c0		 xor	 eax, eax
  02598	89 45 db	 mov	 DWORD PTR _Temp$[ebp+3571], eax
  0259b	89 45 df	 mov	 DWORD PTR _Temp$[ebp+3575], eax
  0259e	89 45 e3	 mov	 DWORD PTR _Temp$[ebp+3579], eax
  025a1	88 45 e7	 mov	 BYTE PTR _Temp$[ebp+3583], al
  025a4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  025a9	88 45 e8	 mov	 BYTE PTR _Temp$[ebp+3584], al
  025ac	33 c0		 xor	 eax, eax
  025ae	89 45 e9	 mov	 DWORD PTR _Temp$[ebp+3585], eax
  025b1	89 45 ed	 mov	 DWORD PTR _Temp$[ebp+3589], eax
  025b4	89 45 f1	 mov	 DWORD PTR _Temp$[ebp+3593], eax
  025b7	88 45 f5	 mov	 BYTE PTR _Temp$[ebp+3597], al

; 598  : 	
; 599  : 	for(int i=0;i<257;i++)

  025ba	c7 85 e4 f1 ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$91264[ebp], 0
  025c4	eb 0f		 jmp	 SHORT $LN11@KeyHandler@2
$LN10@KeyHandler@2:
  025c6	8b 85 e4 f1 ff
	ff		 mov	 eax, DWORD PTR _i$91264[ebp]
  025cc	83 c0 01	 add	 eax, 1
  025cf	89 85 e4 f1 ff
	ff		 mov	 DWORD PTR _i$91264[ebp], eax
$LN11@KeyHandler@2:
  025d5	81 bd e4 f1 ff
	ff 01 01 00 00	 cmp	 DWORD PTR _i$91264[ebp], 257 ; 00000101H
  025df	7d 5a		 jge	 SHORT $LN9@KeyHandler@2

; 600  : 		for(int j=0;j<14;j++)

  025e1	c7 85 e0 f1 ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$91268[ebp], 0
  025eb	eb 0f		 jmp	 SHORT $LN8@KeyHandler@2
$LN7@KeyHandler@2:
  025ed	8b 85 e0 f1 ff
	ff		 mov	 eax, DWORD PTR _j$91268[ebp]
  025f3	83 c0 01	 add	 eax, 1
  025f6	89 85 e0 f1 ff
	ff		 mov	 DWORD PTR _j$91268[ebp], eax
$LN8@KeyHandler@2:
  025fc	83 bd e0 f1 ff
	ff 0e		 cmp	 DWORD PTR _j$91268[ebp], 14 ; 0000000eH
  02603	7d 34		 jge	 SHORT $LN6@KeyHandler@2

; 601  : 			this->Keys[i][j]=Temp[i][j];

  02605	8b 85 e4 f1 ff
	ff		 mov	 eax, DWORD PTR _i$91264[ebp]
  0260b	6b c0 0e	 imul	 eax, 14			; 0000000eH
  0260e	8d 8c 05 e8 f1
	ff ff		 lea	 ecx, DWORD PTR _Temp$[ebp+eax]
  02615	8b 95 e4 f1 ff
	ff		 mov	 edx, DWORD PTR _i$91264[ebp]
  0261b	6b d2 0e	 imul	 edx, 14			; 0000000eH
  0261e	03 95 e0 f1 ff
	ff		 add	 edx, DWORD PTR _j$91268[ebp]
  02624	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02627	8b b5 e0 f1 ff
	ff		 mov	 esi, DWORD PTR _j$91268[ebp]
  0262d	8a 0c 31	 mov	 cl, BYTE PTR [ecx+esi]
  02630	88 8c 10 01 05
	00 00		 mov	 BYTE PTR [eax+edx+1281], cl
  02637	eb b4		 jmp	 SHORT $LN7@KeyHandler@2
$LN6@KeyHandler@2:
  02639	eb 8b		 jmp	 SHORT $LN10@KeyHandler@2
$LN9@KeyHandler@2:

; 602  : 
; 603  : 	for(int i=0;i<256;i++)

  0263b	c7 85 dc f1 ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$91272[ebp], 0
  02645	eb 0f		 jmp	 SHORT $LN5@KeyHandler@2
$LN4@KeyHandler@2:
  02647	8b 85 dc f1 ff
	ff		 mov	 eax, DWORD PTR _i$91272[ebp]
  0264d	83 c0 01	 add	 eax, 1
  02650	89 85 dc f1 ff
	ff		 mov	 DWORD PTR _i$91272[ebp], eax
$LN5@KeyHandler@2:
  02656	81 bd dc f1 ff
	ff 00 01 00 00	 cmp	 DWORD PTR _i$91272[ebp], 256 ; 00000100H
  02660	7d 4f		 jge	 SHORT $LN3@KeyHandler@2

; 604  : 	{
; 605  : 		KeyState1[i]=false;

  02662	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02665	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91272[ebp]
  0266b	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 606  : 		KeyState2[i]=false;

  0266f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02672	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91272[ebp]
  02678	c6 80 01 01 00
	00 00		 mov	 BYTE PTR [eax+257], 0

; 607  : 		KeyState3[i]=false;

  0267f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02682	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91272[ebp]
  02688	c6 80 01 02 00
	00 00		 mov	 BYTE PTR [eax+513], 0

; 608  : 		KeyState4[i]=false;

  0268f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02692	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91272[ebp]
  02698	c6 80 01 03 00
	00 00		 mov	 BYTE PTR [eax+769], 0

; 609  : 		KeyState5[i]=false;

  0269f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026a2	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91272[ebp]
  026a8	c6 80 01 04 00
	00 00		 mov	 BYTE PTR [eax+1025], 0

; 610  : 	}

  026af	eb 96		 jmp	 SHORT $LN4@KeyHandler@2
$LN3@KeyHandler@2:

; 611  : 
; 612  : 	this->CurrentMouse=Mouse;

  026b1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026b4	8b 4d 08	 mov	 ecx, DWORD PTR _Mouse$[ebp]
  026b7	89 88 28 13 00
	00		 mov	 DWORD PTR [eax+4904], ecx

; 613  : 
; 614  : 	if(this->CurrentMouse!=NULL)

  026bd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026c0	83 b8 28 13 00
	00 00		 cmp	 DWORD PTR [eax+4904], 0
  026c7	74 08		 je	 SHORT $LN2@KeyHandler@2

; 615  : 		this->Bound=true;

  026c9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026cc	c6 00 01	 mov	 BYTE PTR [eax], 1

; 616  : 	else

  026cf	eb 06		 jmp	 SHORT $LN1@KeyHandler@2
$LN2@KeyHandler@2:

; 617  : 		this->Bound=false;

  026d1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026d4	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN1@KeyHandler@2:

; 618  : 
; 619  : 	this->MouseSyncX=XSpeed;

  026d7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026da	8b 4d 0c	 mov	 ecx, DWORD PTR _XSpeed$[ebp]
  026dd	89 88 1c 13 00
	00		 mov	 DWORD PTR [eax+4892], ecx

; 620  : 	this->MouseSyncY=YSpeed;

  026e3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026e6	8b 4d 10	 mov	 ecx, DWORD PTR _YSpeed$[ebp]
  026e9	89 88 20 13 00
	00		 mov	 DWORD PTR [eax+4896], ecx

; 621  : 	this->MouseLeft=BindMouseXLeft;

  026ef	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026f2	8b 4d 14	 mov	 ecx, DWORD PTR _BindMouseXLeft$[ebp]
  026f5	89 88 14 13 00
	00		 mov	 DWORD PTR [eax+4884], ecx

; 622  : 	this->MouseRight=BindMouseXRight;

  026fb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026fe	8b 4d 18	 mov	 ecx, DWORD PTR _BindMouseXRight$[ebp]
  02701	89 88 18 13 00
	00		 mov	 DWORD PTR [eax+4888], ecx

; 623  : 	this->MouseDown=BindMouseYDown;

  02707	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0270a	8b 4d 20	 mov	 ecx, DWORD PTR _BindMouseYDown$[ebp]
  0270d	89 88 10 13 00
	00		 mov	 DWORD PTR [eax+4880], ecx

; 624  : 	this->MouseUp=BindMouseYUp;

  02713	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02716	8b 4d 1c	 mov	 ecx, DWORD PTR _BindMouseYUp$[ebp]
  02719	89 88 24 13 00
	00		 mov	 DWORD PTR [eax+4900], ecx

; 625  : 
; 626  : 	return;
; 627  : }

  0271f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02722	5f		 pop	 edi
  02723	5e		 pop	 esi
  02724	5b		 pop	 ebx
  02725	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02728	33 cd		 xor	 ecx, ebp
  0272a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0272f	8b e5		 mov	 esp, ebp
  02731	5d		 pop	 ebp
  02732	c2 1c 00	 ret	 28			; 0000001cH
??0KeyHandler@@QAE@PAVMouseHandler@@HHHHHH@Z ENDP	; KeyHandler::KeyHandler
_TEXT	ENDS
PUBLIC	?CharToInt@KeyHandler@@QAEHPAD@Z		; KeyHandler::CharToInt
PUBLIC	__$ArrayPad$
PUBLIC	??0KeyHandler@@QAE@PAVMouseHandler@@HHPAD111@Z	; KeyHandler::KeyHandler
; Function compile flags: /Odtp /ZI
;	COMDAT ??0KeyHandler@@QAE@PAVMouseHandler@@HHPAD111@Z
_TEXT	SEGMENT
_i$91297 = -3620					; size = 4
_j$91293 = -3616					; size = 4
_i$91289 = -3612					; size = 4
_Temp$ = -3608						; size = 3598
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Mouse$ = 8						; size = 4
_XSpeed$ = 12						; size = 4
_YSpeed$ = 16						; size = 4
_BindMouseXLeft$ = 20					; size = 4
_BindMouseXRight$ = 24					; size = 4
_BindMouseYUp$ = 28					; size = 4
_BindMouseYDown$ = 32					; size = 4
??0KeyHandler@@QAE@PAVMouseHandler@@HHPAD111@Z PROC	; KeyHandler::KeyHandler, COMDAT
; _this$ = ecx

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 0e 00
	00		 sub	 esp, 3684		; 00000e64H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 630  : 	char Temp[257][14]={"Null Key","Escape","1 Key","2 Key","3 Key","4 Key","5 Key","6 Key","7 Key","8 Key","9 Key","0 Key","- Key","= Key","Backspace","Tab","Q",

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08OFADHOMM@Null?5Key?$AA@
  0001e	89 85 e8 f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp], eax
  00024	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_08OFADHOMM@Null?5Key?$AA@+4
  0002a	89 8d ec f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+4], ecx
  00030	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR ??_C@_08OFADHOMM@Null?5Key?$AA@+8
  00036	88 95 f0 f1 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+8], dl
  0003c	33 c0		 xor	 eax, eax
  0003e	89 85 f1 f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+9], eax
  00044	88 85 f5 f1 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+13], al
  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06OIGFGPHJ@Escape?$AA@
  0004f	89 85 f6 f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+14], eax
  00055	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06OIGFGPHJ@Escape?$AA@+4
  0005c	66 89 8d fa f1
	ff ff		 mov	 WORD PTR _Temp$[ebp+18], cx
  00063	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06OIGFGPHJ@Escape?$AA@+6
  00069	88 95 fc f1 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+20], dl
  0006f	33 c0		 xor	 eax, eax
  00071	89 85 fd f1 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+21], eax
  00077	66 89 85 01 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+25], ax
  0007e	88 85 03 f2 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+27], al
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05LMCOLBBI@1?5Key?$AA@
  00089	89 85 04 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+28], eax
  0008f	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05LMCOLBBI@1?5Key?$AA@+4
  00096	66 89 8d 08 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+32], cx
  0009d	33 c0		 xor	 eax, eax
  0009f	89 85 0a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+34], eax
  000a5	89 85 0e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+38], eax
  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05DKLKMDLG@2?5Key?$AA@
  000b0	89 85 12 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+42], eax
  000b6	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05DKLKMDLG@2?5Key?$AA@+4
  000bd	66 89 8d 16 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+46], cx
  000c4	33 c0		 xor	 eax, eax
  000c6	89 85 18 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+48], eax
  000cc	89 85 1c f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+52], eax
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05PBOGBABD@3?5Key?$AA@
  000d7	89 85 20 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+56], eax
  000dd	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05PBOGBABD@3?5Key?$AA@+4
  000e4	66 89 8d 24 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+60], cx
  000eb	33 c0		 xor	 eax, eax
  000ed	89 85 26 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+62], eax
  000f3	89 85 2a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+66], eax
  000f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05OMODCAKL@4?5Key?$AA@
  000fe	89 85 2e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+70], eax
  00104	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05OMODCAKL@4?5Key?$AA@+4
  0010b	66 89 8d 32 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+74], cx
  00112	33 c0		 xor	 eax, eax
  00114	89 85 34 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+76], eax
  0011a	89 85 38 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+80], eax
  00120	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05CHLPPDAO@5?5Key?$AA@
  00125	89 85 3c f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+84], eax
  0012b	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05CHLPPDAO@5?5Key?$AA@+4
  00132	66 89 8d 40 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+88], cx
  00139	33 c0		 xor	 eax, eax
  0013b	89 85 42 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+90], eax
  00141	89 85 46 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+94], eax
  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05KBCLIBKA@6?5Key?$AA@
  0014c	89 85 4a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+98], eax
  00152	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05KBCLIBKA@6?5Key?$AA@+4
  00159	66 89 8d 4e f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+102], cx
  00160	33 c0		 xor	 eax, eax
  00162	89 85 50 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+104], eax
  00168	89 85 54 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+108], eax
  0016e	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05GKHHFCAF@7?5Key?$AA@
  00173	89 85 58 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+112], eax
  00179	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05GKHHFCAF@7?5Key?$AA@+4
  00180	66 89 8d 5c f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+116], cx
  00187	33 c0		 xor	 eax, eax
  00189	89 85 5e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+118], eax
  0018f	89 85 62 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+122], eax
  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05JLCBOANA@8?5Key?$AA@
  0019a	89 85 66 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+126], eax
  001a0	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05JLCBOANA@8?5Key?$AA@+4
  001a7	66 89 8d 6a f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+130], cx
  001ae	33 c0		 xor	 eax, eax
  001b0	89 85 6c f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+132], eax
  001b6	89 85 70 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+136], eax
  001bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05FAHNDDHF@9?5Key?$AA@
  001c1	89 85 74 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+140], eax
  001c7	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05FAHNDDHF@9?5Key?$AA@+4
  001ce	66 89 8d 78 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+144], cx
  001d5	33 c0		 xor	 eax, eax
  001d7	89 85 7a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+146], eax
  001dd	89 85 7e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+150], eax
  001e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05HHHCGCLN@0?5Key?$AA@
  001e8	89 85 82 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+154], eax
  001ee	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05HHHCGCLN@0?5Key?$AA@+4
  001f5	66 89 8d 86 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+158], cx
  001fc	33 c0		 xor	 eax, eax
  001fe	89 85 88 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+160], eax
  00204	89 85 8c f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+164], eax
  0020a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05MIDKHDPI@?9?5Key?$AA@
  0020f	89 85 90 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+168], eax
  00215	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05MIDKHDPI@?9?5Key?$AA@+4
  0021c	66 89 8d 94 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+172], cx
  00223	33 c0		 xor	 eax, eax
  00225	89 85 96 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+174], eax
  0022b	89 85 9a f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+178], eax
  00231	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05MLOMHBGD@?$DN?5Key?$AA@
  00236	89 85 9e f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+182], eax
  0023c	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05MLOMHBGD@?$DN?5Key?$AA@+4
  00243	66 89 8d a2 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+186], cx
  0024a	33 c0		 xor	 eax, eax
  0024c	89 85 a4 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+188], eax
  00252	89 85 a8 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+192], eax
  00258	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@
  0025d	89 85 ac f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+196], eax
  00263	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@+4
  00269	89 8d b0 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+200], ecx
  0026f	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@+8
  00276	66 89 95 b4 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+204], dx
  0027d	33 c0		 xor	 eax, eax
  0027f	89 85 b6 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+206], eax
  00285	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03IEAKBACE@Tab?$AA@
  0028a	89 85 ba f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+210], eax
  00290	33 c0		 xor	 eax, eax
  00292	89 85 be f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+214], eax
  00298	89 85 c2 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+218], eax
  0029e	66 89 85 c6 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+222], ax
  002a5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BNIGIBBF@Q?$AA@
  002ab	66 89 85 c8 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+224], ax
  002b2	33 c0		 xor	 eax, eax
  002b4	89 85 ca f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+226], eax
  002ba	89 85 ce f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+230], eax
  002c0	89 85 d2 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+234], eax

; 631  : 				  "W","E","R","T","Y","U","I","O","P","[","]","Right Enter","Left Control","A","S","D",

  002c6	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01ELNMCGJD@W?$AA@
  002cc	66 89 85 d6 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+238], ax
  002d3	33 c0		 xor	 eax, eax
  002d5	89 85 d8 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+240], eax
  002db	89 85 dc f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+244], eax
  002e1	89 85 e0 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+248], eax
  002e7	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01DDCIFGEA@E?$AA@
  002ed	66 89 85 e4 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+252], ax
  002f4	33 c0		 xor	 eax, eax
  002f6	89 85 e6 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+254], eax
  002fc	89 85 ea f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+258], eax
  00302	89 85 ee f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+262], eax
  00308	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01DGKLNCNG@R?$AA@
  0030e	66 89 85 f2 f2
	ff ff		 mov	 WORD PTR _Temp$[ebp+266], ax
  00315	33 c0		 xor	 eax, eax
  00317	89 85 f4 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+268], eax
  0031d	89 85 f8 f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+272], eax
  00323	89 85 fc f2 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+276], eax
  00329	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01GAPBHFFA@T?$AA@
  0032f	66 89 85 00 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+280], ax
  00336	33 c0		 xor	 eax, eax
  00338	89 85 02 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+282], eax
  0033e	89 85 06 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+286], eax
  00344	89 85 0a f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+290], eax
  0034a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01NFFPALBN@Y?$AA@
  00350	66 89 85 0e f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+294], ax
  00357	33 c0		 xor	 eax, eax
  00359	89 85 10 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+296], eax
  0035f	89 85 14 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+300], eax
  00365	89 85 18 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+304], eax
  0036b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01HJOKEEBB@U?$AA@
  00371	66 89 85 1c f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+308], ax
  00378	33 c0		 xor	 eax, eax
  0037a	89 85 1e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+310], eax
  00380	89 85 22 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+314], eax
  00386	89 85 26 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+318], eax
  0038c	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01JPJNBJEM@I?$AA@
  00392	66 89 85 2a f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+322], ax
  00399	33 c0		 xor	 eax, eax
  0039b	89 85 2c f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+324], eax
  003a1	89 85 30 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+328], eax
  003a7	89 85 34 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+332], eax
  003ad	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01MJMHLOMK@O?$AA@
  003b3	66 89 85 38 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+336], ax
  003ba	33 c0		 xor	 eax, eax
  003bc	89 85 3a f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+338], eax
  003c2	89 85 3e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+342], eax
  003c8	89 85 42 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+346], eax
  003ce	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01EJNLAFE@P?$AA@
  003d4	66 89 85 46 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+350], ax
  003db	33 c0		 xor	 eax, eax
  003dd	89 85 48 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+352], eax
  003e3	89 85 4c f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+356], eax
  003e9	89 85 50 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+360], eax
  003ef	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01OHGJGJJP@?$FL?$AA@
  003f5	66 89 85 54 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+364], ax
  003fc	33 c0		 xor	 eax, eax
  003fe	89 85 56 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+366], eax
  00404	89 85 5a f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+370], eax
  0040a	89 85 5e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+374], eax
  00410	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
  00416	66 89 85 62 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+378], ax
  0041d	33 c0		 xor	 eax, eax
  0041f	89 85 64 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+380], eax
  00425	89 85 68 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+384], eax
  0042b	89 85 6c f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+388], eax
  00431	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
  00436	89 85 70 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+392], eax
  0043c	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+4
  00442	89 8d 74 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+396], ecx
  00448	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+8
  0044e	89 95 78 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+400], edx
  00454	33 c0		 xor	 eax, eax
  00456	66 89 85 7c f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+404], ax
  0045d	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@
  00462	89 85 7e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+406], eax
  00468	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+4
  0046e	89 8d 82 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+410], ecx
  00474	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+8
  0047a	89 95 86 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+414], edx
  00480	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+12
  00485	88 85 8a f3 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+418], al
  0048b	33 c0		 xor	 eax, eax
  0048d	88 85 8b f3 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+419], al
  00493	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01FHEEJDEE@A?$AA@
  00499	66 89 85 8c f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+420], ax
  004a0	33 c0		 xor	 eax, eax
  004a2	89 85 8e f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+422], eax
  004a8	89 85 92 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+426], eax
  004ae	89 85 96 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+430], eax
  004b4	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01CPLAODJH@S?$AA@
  004ba	66 89 85 9a f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+434], ax
  004c1	33 c0		 xor	 eax, eax
  004c3	89 85 9c f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+436], eax
  004c9	89 85 a0 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+440], eax
  004cf	89 85 a4 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+444], eax
  004d5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01CKDDGHAB@D?$AA@
  004db	66 89 85 a8 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+448], ax
  004e2	33 c0		 xor	 eax, eax
  004e4	89 85 aa f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+450], eax
  004ea	89 85 ae f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+454], eax
  004f0	89 85 b2 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+458], eax

; 632  : 				  "F","G","H","J","K","L",";","\'","`","Left Shift","\\","Z","X","C","V","B",

  004f6	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BIAFAFID@F?$AA@
  004fc	66 89 85 b6 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+462], ax
  00503	33 c0		 xor	 eax, eax
  00505	89 85 b8 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+464], eax
  0050b	89 85 bc f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+468], eax
  00511	89 85 c0 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+472], eax
  00517	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BBODEMC@G?$AA@
  0051d	66 89 85 c4 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+476], ax
  00524	33 c0		 xor	 eax, eax
  00526	89 85 c6 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+478], eax
  0052c	89 85 ca f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+482], eax
  00532	89 85 ce f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+486], eax
  00538	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01IGIGCIAN@H?$AA@
  0053e	66 89 85 d2 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+490], ax
  00545	33 c0		 xor	 eax, eax
  00547	89 85 d4 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+492], eax
  0054d	89 85 d8 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+496], eax
  00553	89 85 dc f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+500], eax
  00559	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01LELAEKIP@J?$AA@
  0055f	66 89 85 e0 f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+504], ax
  00566	33 c0		 xor	 eax, eax
  00568	89 85 e2 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+506], eax
  0056e	89 85 e6 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+510], eax
  00574	89 85 ea f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+514], eax
  0057a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KNKLHLMO@K?$AA@
  00580	66 89 85 ee f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+518], ax
  00587	33 c0		 xor	 eax, eax
  00589	89 85 f0 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+520], eax
  0058f	89 85 f4 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+524], eax
  00595	89 85 f8 f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+528], eax
  0059b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01OCOKONAJ@L?$AA@
  005a1	66 89 85 fc f3
	ff ff		 mov	 WORD PTR _Temp$[ebp+532], ax
  005a8	33 c0		 xor	 eax, eax
  005aa	89 85 fe f3 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+534], eax
  005b0	89 85 02 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+538], eax
  005b6	89 85 06 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+542], eax
  005bc	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01ICJEACDI@?$DL?$AA@
  005c2	66 89 85 0a f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+546], ax
  005c9	33 c0		 xor	 eax, eax
  005cb	89 85 0c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+548], eax
  005d1	89 85 10 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+552], eax
  005d7	89 85 14 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+556], eax
  005dd	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01GEODFPGF@?8?$AA@
  005e3	66 89 85 18 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+560], ax
  005ea	33 c0		 xor	 eax, eax
  005ec	89 85 1a f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+562], eax
  005f2	89 85 1e f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+566], eax
  005f8	89 85 22 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+570], eax
  005fe	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01NLNLIGKH@?$GA?$AA@
  00604	66 89 85 26 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+574], ax
  0060b	33 c0		 xor	 eax, eax
  0060d	89 85 28 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+576], eax
  00613	89 85 2c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+580], eax
  00619	89 85 30 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+584], eax
  0061f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@
  00624	89 85 34 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+588], eax
  0062a	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+4
  00630	89 8d 38 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+592], ecx
  00636	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+8
  0063d	66 89 95 3c f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+596], dx
  00644	a0 0a 00 00 00	 mov	 al, BYTE PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+10
  00649	88 85 3e f4 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+598], al
  0064f	33 c0		 xor	 eax, eax
  00651	66 89 85 3f f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+599], ax
  00658	88 85 41 f4 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+601], al
  0065e	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
  00664	66 89 85 42 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+602], ax
  0066b	33 c0		 xor	 eax, eax
  0066d	89 85 44 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+604], eax
  00673	89 85 48 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+608], eax
  00679	89 85 4c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+612], eax
  0067f	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01POHCFINO@Z?$AA@
  00685	66 89 85 50 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+616], ax
  0068c	33 c0		 xor	 eax, eax
  0068e	89 85 52 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+618], eax
  00694	89 85 56 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+622], eax
  0069a	89 85 5a f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+626], eax
  006a0	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01MMEEDKFM@X?$AA@
  006a6	66 89 85 5e f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+630], ax
  006ad	33 c0		 xor	 eax, eax
  006af	89 85 60 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+632], eax
  006b5	89 85 64 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+636], eax
  006bb	89 85 68 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+640], eax
  006c1	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01GFHCPBMG@C?$AA@
  006c7	66 89 85 6c f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+644], ax
  006ce	33 c0		 xor	 eax, eax
  006d0	89 85 6e f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+646], eax
  006d6	89 85 72 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+650], eax
  006dc	89 85 76 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+654], eax
  006e2	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01FCMHBHNC@V?$AA@
  006e8	66 89 85 7a f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+658], ax
  006ef	33 c0		 xor	 eax, eax
  006f1	89 85 7c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+660], eax
  006f7	89 85 80 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+664], eax
  006fd	89 85 84 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+668], eax
  00703	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01HMGJMAIH@B?$AA@
  00709	66 89 85 88 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+672], ax
  00710	33 c0		 xor	 eax, eax
  00712	89 85 8a f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+674], eax
  00718	89 85 8e f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+678], eax
  0071e	89 85 92 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+682], eax

; 633  : 				  "N","M",",",".","/","Right Shift","*","Left Alt","Space","Caps Lock","F1","F2","F3","F4","F5","F6",

  00724	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01NANMIPIL@N?$AA@
  0072a	66 89 85 96 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+686], ax
  00731	33 c0		 xor	 eax, eax
  00733	89 85 98 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+688], eax
  00739	89 85 9c f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+692], eax
  0073f	89 85 a0 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+696], eax
  00745	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01PLPBNMEI@M?$AA@
  0074b	66 89 85 a4 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+700], ax
  00752	33 c0		 xor	 eax, eax
  00754	89 85 a6 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+702], eax
  0075a	89 85 aa f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+706], eax
  00760	89 85 ae f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+710], eax
  00766	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
  0076c	66 89 85 b2 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+714], ax
  00773	33 c0		 xor	 eax, eax
  00775	89 85 b4 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+716], eax
  0077b	89 85 b8 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+720], eax
  00781	89 85 bc f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+724], eax
  00787	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01LFCBOECM@?4?$AA@
  0078d	66 89 85 c0 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+728], ax
  00794	33 c0		 xor	 eax, eax
  00796	89 85 c2 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+730], eax
  0079c	89 85 c6 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+734], eax
  007a2	89 85 ca f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+738], eax
  007a8	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KMDKNFGN@?1?$AA@
  007ae	66 89 85 ce f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+742], ax
  007b5	33 c0		 xor	 eax, eax
  007b7	89 85 d0 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+744], eax
  007bd	89 85 d4 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+748], eax
  007c3	89 85 d8 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+752], eax
  007c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@
  007ce	89 85 dc f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+756], eax
  007d4	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@+4
  007da	89 8d e0 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+760], ecx
  007e0	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@+8
  007e6	89 95 e4 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+764], edx
  007ec	33 c0		 xor	 eax, eax
  007ee	66 89 85 e8 f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+768], ax
  007f5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01NBENCBCI@?$CK?$AA@
  007fb	66 89 85 ea f4
	ff ff		 mov	 WORD PTR _Temp$[ebp+770], ax
  00802	33 c0		 xor	 eax, eax
  00804	89 85 ec f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+772], eax
  0080a	89 85 f0 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+776], eax
  00810	89 85 f4 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+780], eax
  00816	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@
  0081b	89 85 f8 f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+784], eax
  00821	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@+4
  00827	89 8d fc f4 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+788], ecx
  0082d	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@+8
  00833	88 95 00 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+792], dl
  00839	33 c0		 xor	 eax, eax
  0083b	89 85 01 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+793], eax
  00841	88 85 05 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+797], al
  00847	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05OMHELODH@Space?$AA@
  0084c	89 85 06 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+798], eax
  00852	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05OMHELODH@Space?$AA@+4
  00859	66 89 8d 0a f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+802], cx
  00860	33 c0		 xor	 eax, eax
  00862	89 85 0c f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+804], eax
  00868	89 85 10 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+808], eax
  0086e	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@
  00873	89 85 14 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+812], eax
  00879	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@+4
  0087f	89 8d 18 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+816], ecx
  00885	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@+8
  0088c	66 89 95 1c f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+820], dx
  00893	33 c0		 xor	 eax, eax
  00895	89 85 1e f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+822], eax
  0089b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02LCPENACN@F1?$AA@
  008a1	66 89 85 22 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+826], ax
  008a8	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02LCPENACN@F1?$AA@+2
  008ae	88 8d 24 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+828], cl
  008b4	33 c0		 xor	 eax, eax
  008b6	89 85 25 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+829], eax
  008bc	89 85 29 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+833], eax
  008c2	66 89 85 2d f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+837], ax
  008c9	88 85 2f f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+839], al
  008cf	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02JJNJIDOO@F2?$AA@
  008d5	66 89 85 30 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+840], ax
  008dc	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02JJNJIDOO@F2?$AA@+2
  008e2	88 8d 32 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+842], cl
  008e8	33 c0		 xor	 eax, eax
  008ea	89 85 33 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+843], eax
  008f0	89 85 37 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+847], eax
  008f6	66 89 85 3b f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+851], ax
  008fd	88 85 3d f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+853], al
  00903	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02IAMCLCKP@F3?$AA@
  00909	66 89 85 3e f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+854], ax
  00910	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02IAMCLCKP@F3?$AA@+2
  00916	88 8d 40 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+856], cl
  0091c	33 c0		 xor	 eax, eax
  0091e	89 85 41 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+857], eax
  00924	89 85 45 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+861], eax
  0092a	66 89 85 49 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+865], ax
  00931	88 85 4b f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+867], al
  00937	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02MPIDCEGI@F4?$AA@
  0093d	66 89 85 4c f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+868], ax
  00944	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02MPIDCEGI@F4?$AA@+2
  0094a	88 8d 4e f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+870], cl
  00950	33 c0		 xor	 eax, eax
  00952	89 85 4f f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+871], eax
  00958	89 85 53 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+875], eax
  0095e	66 89 85 57 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+879], ax
  00965	88 85 59 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+881], al
  0096b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02NGJIBFCJ@F5?$AA@
  00971	66 89 85 5a f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+882], ax
  00978	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02NGJIBFCJ@F5?$AA@+2
  0097e	88 8d 5c f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+884], cl
  00984	33 c0		 xor	 eax, eax
  00986	89 85 5d f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+885], eax
  0098c	89 85 61 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+889], eax
  00992	66 89 85 65 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+893], ax
  00999	88 85 67 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+895], al
  0099f	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02PNLFEGOK@F6?$AA@
  009a5	66 89 85 68 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+896], ax
  009ac	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02PNLFEGOK@F6?$AA@+2
  009b2	88 8d 6a f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+898], cl
  009b8	33 c0		 xor	 eax, eax
  009ba	89 85 6b f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+899], eax
  009c0	89 85 6f f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+903], eax
  009c6	66 89 85 73 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+907], ax
  009cd	88 85 75 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+909], al

; 634  : 				  "F7","F8","F9","F10","Num Lock","","7","8","9","-","4","5","6","+","1","2",

  009d3	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02OEKOHHKL@F7?$AA@
  009d9	66 89 85 76 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+910], ax
  009e0	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02OEKOHHKL@F7?$AA@+2
  009e6	88 8d 78 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+912], cl
  009ec	33 c0		 xor	 eax, eax
  009ee	89 85 79 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+913], eax
  009f4	89 85 7d f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+917], eax
  009fa	66 89 85 81 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+921], ax
  00a01	88 85 83 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+923], al
  00a07	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02GDDGGLGE@F8?$AA@
  00a0d	66 89 85 84 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+924], ax
  00a14	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02GDDGGLGE@F8?$AA@+2
  00a1a	88 8d 86 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+926], cl
  00a20	33 c0		 xor	 eax, eax
  00a22	89 85 87 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+927], eax
  00a28	89 85 8b f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+931], eax
  00a2e	66 89 85 8f f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+935], ax
  00a35	88 85 91 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+937], al
  00a3b	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02HKCNFKCF@F9?$AA@
  00a41	66 89 85 92 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+938], ax
  00a48	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02HKCNFKCF@F9?$AA@+2
  00a4e	88 8d 94 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+940], cl
  00a54	33 c0		 xor	 eax, eax
  00a56	89 85 95 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+941], eax
  00a5c	89 85 99 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+945], eax
  00a62	66 89 85 9d f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+949], ax
  00a69	88 85 9f f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+951], al
  00a6f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03JKCLJOFG@F10?$AA@
  00a74	89 85 a0 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+952], eax
  00a7a	33 c0		 xor	 eax, eax
  00a7c	89 85 a4 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+956], eax
  00a82	89 85 a8 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+960], eax
  00a88	66 89 85 ac f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+964], ax
  00a8f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@
  00a94	89 85 ae f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+966], eax
  00a9a	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@+4
  00aa0	89 8d b2 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+970], ecx
  00aa6	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@+8
  00aac	88 95 b6 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+974], dl
  00ab2	33 c0		 xor	 eax, eax
  00ab4	89 85 b7 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+975], eax
  00aba	88 85 bb f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+979], al
  00ac0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00ac5	88 85 bc f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+980], al
  00acb	33 c0		 xor	 eax, eax
  00acd	89 85 bd f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+981], eax
  00ad3	89 85 c1 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+985], eax
  00ad9	89 85 c5 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+989], eax
  00adf	88 85 c9 f5 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+993], al
  00ae5	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01COCBENDE@7?$AA@
  00aeb	66 89 85 ca f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+994], ax
  00af2	33 c0		 xor	 eax, eax
  00af4	89 85 cc f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+996], eax
  00afa	89 85 d0 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1000], eax
  00b00	89 85 d4 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1004], eax
  00b06	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KJLJFBPL@8?$AA@
  00b0c	66 89 85 d8 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+1008], ax
  00b13	33 c0		 xor	 eax, eax
  00b15	89 85 da f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1010], eax
  00b1b	89 85 de f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1014], eax
  00b21	89 85 e2 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1018], eax
  00b27	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01LAKCGALK@9?$AA@
  00b2d	66 89 85 e6 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+1022], ax
  00b34	33 c0		 xor	 eax, eax
  00b36	89 85 e8 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1024], eax
  00b3c	89 85 ec f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1028], eax
  00b42	89 85 f0 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1032], eax
  00b48	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01JOAMLHOP@?9?$AA@
  00b4e	66 89 85 f4 f5
	ff ff		 mov	 WORD PTR _Temp$[ebp+1036], ax
  00b55	33 c0		 xor	 eax, eax
  00b57	89 85 f6 f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1038], eax
  00b5d	89 85 fa f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1042], eax
  00b63	89 85 fe f5 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1046], eax
  00b69	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01FAMBOPH@4?$AA@
  00b6f	66 89 85 02 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1050], ax
  00b76	33 c0		 xor	 eax, eax
  00b78	89 85 04 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1052], eax
  00b7e	89 85 08 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1056], eax
  00b84	89 85 0c f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1060], eax
  00b8a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01BMBHCPLG@5?$AA@
  00b90	66 89 85 10 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1064], ax
  00b97	33 c0		 xor	 eax, eax
  00b99	89 85 12 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1066], eax
  00b9f	89 85 16 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1070], eax
  00ba5	89 85 1a f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1074], eax
  00bab	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01DHDKHMHF@6?$AA@
  00bb1	66 89 85 1e f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1078], ax
  00bb8	33 c0		 xor	 eax, eax
  00bba	89 85 20 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1080], eax
  00bc0	89 85 24 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1084], eax
  00bc6	89 85 28 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1088], eax
  00bcc	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01MIFGBAGJ@?$CL?$AA@
  00bd2	66 89 85 2c f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1092], ax
  00bd9	33 c0		 xor	 eax, eax
  00bdb	89 85 2e f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1094], eax
  00be1	89 85 32 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1098], eax
  00be7	89 85 36 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1102], eax
  00bed	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01HIHLOKLC@1?$AA@
  00bf3	66 89 85 3a f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1106], ax
  00bfa	33 c0		 xor	 eax, eax
  00bfc	89 85 3c f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1108], eax
  00c02	89 85 40 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1112], eax
  00c08	89 85 44 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1116], eax
  00c0e	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01FDFGLJHB@2?$AA@
  00c14	66 89 85 48 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1120], ax
  00c1b	33 c0		 xor	 eax, eax
  00c1d	89 85 4a f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1122], eax
  00c23	89 85 4e f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1126], eax
  00c29	89 85 52 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1130], eax

; 635  : 				  "3","0","Num .","SysRq","","","F11","F12","","","","","","","","",

  00c2f	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01EKENIIDA@3?$AA@
  00c35	66 89 85 56 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1134], ax
  00c3c	33 c0		 xor	 eax, eax
  00c3e	89 85 58 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1136], eax
  00c44	89 85 5c f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1140], eax
  00c4a	89 85 60 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1144], eax
  00c50	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01GBGANLPD@0?$AA@
  00c56	66 89 85 64 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1148], ax
  00c5d	33 c0		 xor	 eax, eax
  00c5f	89 85 66 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1150], eax
  00c65	89 85 6a f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1154], eax
  00c6b	89 85 6e f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1158], eax
  00c71	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05LAFLDKON@Num?5?4?$AA@
  00c76	89 85 72 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1162], eax
  00c7c	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05LAFLDKON@Num?5?4?$AA@+4
  00c83	66 89 8d 76 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1166], cx
  00c8a	33 c0		 xor	 eax, eax
  00c8c	89 85 78 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1168], eax
  00c92	89 85 7c f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1172], eax
  00c98	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05BAHDBLKA@SysRq?$AA@
  00c9d	89 85 80 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1176], eax
  00ca3	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05BAHDBLKA@SysRq?$AA@+4
  00caa	66 89 8d 84 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1180], cx
  00cb1	33 c0		 xor	 eax, eax
  00cb3	89 85 86 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1182], eax
  00cb9	89 85 8a f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1186], eax
  00cbf	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00cc4	88 85 8e f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1190], al
  00cca	33 c0		 xor	 eax, eax
  00ccc	89 85 8f f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1191], eax
  00cd2	89 85 93 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1195], eax
  00cd8	89 85 97 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1199], eax
  00cde	88 85 9b f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1203], al
  00ce4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00ce9	88 85 9c f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1204], al
  00cef	33 c0		 xor	 eax, eax
  00cf1	89 85 9d f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1205], eax
  00cf7	89 85 a1 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1209], eax
  00cfd	89 85 a5 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1213], eax
  00d03	88 85 a9 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1217], al
  00d09	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03IDDAKPBH@F11?$AA@
  00d0e	89 85 aa f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1218], eax
  00d14	33 c0		 xor	 eax, eax
  00d16	89 85 ae f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1222], eax
  00d1c	89 85 b2 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1226], eax
  00d22	66 89 85 b6 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1230], ax
  00d29	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03KIBNPMNE@F12?$AA@
  00d2e	89 85 b8 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1232], eax
  00d34	33 c0		 xor	 eax, eax
  00d36	89 85 bc f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1236], eax
  00d3c	89 85 c0 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1240], eax
  00d42	66 89 85 c4 f6
	ff ff		 mov	 WORD PTR _Temp$[ebp+1244], ax
  00d49	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00d4e	88 85 c6 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1246], al
  00d54	33 c0		 xor	 eax, eax
  00d56	89 85 c7 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1247], eax
  00d5c	89 85 cb f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1251], eax
  00d62	89 85 cf f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1255], eax
  00d68	88 85 d3 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1259], al
  00d6e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00d73	88 85 d4 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1260], al
  00d79	33 c0		 xor	 eax, eax
  00d7b	89 85 d5 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1261], eax
  00d81	89 85 d9 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1265], eax
  00d87	89 85 dd f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1269], eax
  00d8d	88 85 e1 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1273], al
  00d93	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00d98	88 85 e2 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1274], al
  00d9e	33 c0		 xor	 eax, eax
  00da0	89 85 e3 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1275], eax
  00da6	89 85 e7 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1279], eax
  00dac	89 85 eb f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1283], eax
  00db2	88 85 ef f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1287], al
  00db8	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00dbd	88 85 f0 f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1288], al
  00dc3	33 c0		 xor	 eax, eax
  00dc5	89 85 f1 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1289], eax
  00dcb	89 85 f5 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1293], eax
  00dd1	89 85 f9 f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1297], eax
  00dd7	88 85 fd f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1301], al
  00ddd	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00de2	88 85 fe f6 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1302], al
  00de8	33 c0		 xor	 eax, eax
  00dea	89 85 ff f6 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1303], eax
  00df0	89 85 03 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1307], eax
  00df6	89 85 07 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1311], eax
  00dfc	88 85 0b f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1315], al
  00e02	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e07	88 85 0c f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1316], al
  00e0d	33 c0		 xor	 eax, eax
  00e0f	89 85 0d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1317], eax
  00e15	89 85 11 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1321], eax
  00e1b	89 85 15 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1325], eax
  00e21	88 85 19 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1329], al
  00e27	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e2c	88 85 1a f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1330], al
  00e32	33 c0		 xor	 eax, eax
  00e34	89 85 1b f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1331], eax
  00e3a	89 85 1f f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1335], eax
  00e40	89 85 23 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1339], eax
  00e46	88 85 27 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1343], al
  00e4c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e51	88 85 28 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1344], al
  00e57	33 c0		 xor	 eax, eax
  00e59	89 85 29 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1345], eax
  00e5f	89 85 2d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1349], eax
  00e65	89 85 31 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1353], eax
  00e6b	88 85 35 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1357], al

; 636  : 				  "","","","","","","","","","","","","","","","",

  00e71	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e76	88 85 36 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1358], al
  00e7c	33 c0		 xor	 eax, eax
  00e7e	89 85 37 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1359], eax
  00e84	89 85 3b f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1363], eax
  00e8a	89 85 3f f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1367], eax
  00e90	88 85 43 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1371], al
  00e96	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00e9b	88 85 44 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1372], al
  00ea1	33 c0		 xor	 eax, eax
  00ea3	89 85 45 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1373], eax
  00ea9	89 85 49 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1377], eax
  00eaf	89 85 4d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1381], eax
  00eb5	88 85 51 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1385], al
  00ebb	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00ec0	88 85 52 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1386], al
  00ec6	33 c0		 xor	 eax, eax
  00ec8	89 85 53 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1387], eax
  00ece	89 85 57 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1391], eax
  00ed4	89 85 5b f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1395], eax
  00eda	88 85 5f f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1399], al
  00ee0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00ee5	88 85 60 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1400], al
  00eeb	33 c0		 xor	 eax, eax
  00eed	89 85 61 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1401], eax
  00ef3	89 85 65 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1405], eax
  00ef9	89 85 69 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1409], eax
  00eff	88 85 6d f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1413], al
  00f05	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f0a	88 85 6e f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1414], al
  00f10	33 c0		 xor	 eax, eax
  00f12	89 85 6f f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1415], eax
  00f18	89 85 73 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1419], eax
  00f1e	89 85 77 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1423], eax
  00f24	88 85 7b f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1427], al
  00f2a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f2f	88 85 7c f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1428], al
  00f35	33 c0		 xor	 eax, eax
  00f37	89 85 7d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1429], eax
  00f3d	89 85 81 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1433], eax
  00f43	89 85 85 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1437], eax
  00f49	88 85 89 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1441], al
  00f4f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f54	88 85 8a f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1442], al
  00f5a	33 c0		 xor	 eax, eax
  00f5c	89 85 8b f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1443], eax
  00f62	89 85 8f f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1447], eax
  00f68	89 85 93 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1451], eax
  00f6e	88 85 97 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1455], al
  00f74	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f79	88 85 98 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1456], al
  00f7f	33 c0		 xor	 eax, eax
  00f81	89 85 99 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1457], eax
  00f87	89 85 9d f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1461], eax
  00f8d	89 85 a1 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1465], eax
  00f93	88 85 a5 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1469], al
  00f99	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00f9e	88 85 a6 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1470], al
  00fa4	33 c0		 xor	 eax, eax
  00fa6	89 85 a7 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1471], eax
  00fac	89 85 ab f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1475], eax
  00fb2	89 85 af f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1479], eax
  00fb8	88 85 b3 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1483], al
  00fbe	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00fc3	88 85 b4 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1484], al
  00fc9	33 c0		 xor	 eax, eax
  00fcb	89 85 b5 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1485], eax
  00fd1	89 85 b9 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1489], eax
  00fd7	89 85 bd f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1493], eax
  00fdd	88 85 c1 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1497], al
  00fe3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00fe8	88 85 c2 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1498], al
  00fee	33 c0		 xor	 eax, eax
  00ff0	89 85 c3 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1499], eax
  00ff6	89 85 c7 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1503], eax
  00ffc	89 85 cb f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1507], eax
  01002	88 85 cf f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1511], al
  01008	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0100d	88 85 d0 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1512], al
  01013	33 c0		 xor	 eax, eax
  01015	89 85 d1 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1513], eax
  0101b	89 85 d5 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1517], eax
  01021	89 85 d9 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1521], eax
  01027	88 85 dd f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1525], al
  0102d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01032	88 85 de f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1526], al
  01038	33 c0		 xor	 eax, eax
  0103a	89 85 df f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1527], eax
  01040	89 85 e3 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1531], eax
  01046	89 85 e7 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1535], eax
  0104c	88 85 eb f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1539], al
  01052	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01057	88 85 ec f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1540], al
  0105d	33 c0		 xor	 eax, eax
  0105f	89 85 ed f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1541], eax
  01065	89 85 f1 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1545], eax
  0106b	89 85 f5 f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1549], eax
  01071	88 85 f9 f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1553], al
  01077	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0107c	88 85 fa f7 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1554], al
  01082	33 c0		 xor	 eax, eax
  01084	89 85 fb f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1555], eax
  0108a	89 85 ff f7 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1559], eax
  01090	89 85 03 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1563], eax
  01096	88 85 07 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1567], al
  0109c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  010a1	88 85 08 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1568], al
  010a7	33 c0		 xor	 eax, eax
  010a9	89 85 09 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1569], eax
  010af	89 85 0d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1573], eax
  010b5	89 85 11 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1577], eax
  010bb	88 85 15 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1581], al

; 637  : 				  "","","","","","","","","","","","","","","","",

  010c1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  010c6	88 85 16 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1582], al
  010cc	33 c0		 xor	 eax, eax
  010ce	89 85 17 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1583], eax
  010d4	89 85 1b f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1587], eax
  010da	89 85 1f f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1591], eax
  010e0	88 85 23 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1595], al
  010e6	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  010eb	88 85 24 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1596], al
  010f1	33 c0		 xor	 eax, eax
  010f3	89 85 25 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1597], eax
  010f9	89 85 29 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1601], eax
  010ff	89 85 2d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1605], eax
  01105	88 85 31 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1609], al
  0110b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01110	88 85 32 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1610], al
  01116	33 c0		 xor	 eax, eax
  01118	89 85 33 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1611], eax
  0111e	89 85 37 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1615], eax
  01124	89 85 3b f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1619], eax
  0112a	88 85 3f f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1623], al
  01130	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01135	88 85 40 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1624], al
  0113b	33 c0		 xor	 eax, eax
  0113d	89 85 41 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1625], eax
  01143	89 85 45 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1629], eax
  01149	89 85 49 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1633], eax
  0114f	88 85 4d f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1637], al
  01155	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0115a	88 85 4e f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1638], al
  01160	33 c0		 xor	 eax, eax
  01162	89 85 4f f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1639], eax
  01168	89 85 53 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1643], eax
  0116e	89 85 57 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1647], eax
  01174	88 85 5b f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1651], al
  0117a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0117f	88 85 5c f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1652], al
  01185	33 c0		 xor	 eax, eax
  01187	89 85 5d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1653], eax
  0118d	89 85 61 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1657], eax
  01193	89 85 65 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1661], eax
  01199	88 85 69 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1665], al
  0119f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  011a4	88 85 6a f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1666], al
  011aa	33 c0		 xor	 eax, eax
  011ac	89 85 6b f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1667], eax
  011b2	89 85 6f f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1671], eax
  011b8	89 85 73 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1675], eax
  011be	88 85 77 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1679], al
  011c4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  011c9	88 85 78 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1680], al
  011cf	33 c0		 xor	 eax, eax
  011d1	89 85 79 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1681], eax
  011d7	89 85 7d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1685], eax
  011dd	89 85 81 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1689], eax
  011e3	88 85 85 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1693], al
  011e9	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  011ee	88 85 86 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1694], al
  011f4	33 c0		 xor	 eax, eax
  011f6	89 85 87 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1695], eax
  011fc	89 85 8b f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1699], eax
  01202	89 85 8f f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1703], eax
  01208	88 85 93 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1707], al
  0120e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01213	88 85 94 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1708], al
  01219	33 c0		 xor	 eax, eax
  0121b	89 85 95 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1709], eax
  01221	89 85 99 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1713], eax
  01227	89 85 9d f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1717], eax
  0122d	88 85 a1 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1721], al
  01233	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01238	88 85 a2 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1722], al
  0123e	33 c0		 xor	 eax, eax
  01240	89 85 a3 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1723], eax
  01246	89 85 a7 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1727], eax
  0124c	89 85 ab f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1731], eax
  01252	88 85 af f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1735], al
  01258	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0125d	88 85 b0 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1736], al
  01263	33 c0		 xor	 eax, eax
  01265	89 85 b1 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1737], eax
  0126b	89 85 b5 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1741], eax
  01271	89 85 b9 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1745], eax
  01277	88 85 bd f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1749], al
  0127d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01282	88 85 be f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1750], al
  01288	33 c0		 xor	 eax, eax
  0128a	89 85 bf f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1751], eax
  01290	89 85 c3 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1755], eax
  01296	89 85 c7 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1759], eax
  0129c	88 85 cb f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1763], al
  012a2	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  012a7	88 85 cc f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1764], al
  012ad	33 c0		 xor	 eax, eax
  012af	89 85 cd f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1765], eax
  012b5	89 85 d1 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1769], eax
  012bb	89 85 d5 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1773], eax
  012c1	88 85 d9 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1777], al
  012c7	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  012cc	88 85 da f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1778], al
  012d2	33 c0		 xor	 eax, eax
  012d4	89 85 db f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1779], eax
  012da	89 85 df f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1783], eax
  012e0	89 85 e3 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1787], eax
  012e6	88 85 e7 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1791], al
  012ec	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  012f1	88 85 e8 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1792], al
  012f7	33 c0		 xor	 eax, eax
  012f9	89 85 e9 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1793], eax
  012ff	89 85 ed f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1797], eax
  01305	89 85 f1 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1801], eax
  0130b	88 85 f5 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1805], al

; 638  : 				  "","","","","","","","","","","","","","","","",

  01311	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01316	88 85 f6 f8 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1806], al
  0131c	33 c0		 xor	 eax, eax
  0131e	89 85 f7 f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1807], eax
  01324	89 85 fb f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1811], eax
  0132a	89 85 ff f8 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1815], eax
  01330	88 85 03 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1819], al
  01336	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0133b	88 85 04 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1820], al
  01341	33 c0		 xor	 eax, eax
  01343	89 85 05 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1821], eax
  01349	89 85 09 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1825], eax
  0134f	89 85 0d f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1829], eax
  01355	88 85 11 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1833], al
  0135b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01360	88 85 12 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1834], al
  01366	33 c0		 xor	 eax, eax
  01368	89 85 13 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1835], eax
  0136e	89 85 17 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1839], eax
  01374	89 85 1b f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1843], eax
  0137a	88 85 1f f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1847], al
  01380	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01385	88 85 20 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1848], al
  0138b	33 c0		 xor	 eax, eax
  0138d	89 85 21 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1849], eax
  01393	89 85 25 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1853], eax
  01399	89 85 29 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1857], eax
  0139f	88 85 2d f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1861], al
  013a5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  013aa	88 85 2e f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1862], al
  013b0	33 c0		 xor	 eax, eax
  013b2	89 85 2f f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1863], eax
  013b8	89 85 33 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1867], eax
  013be	89 85 37 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1871], eax
  013c4	88 85 3b f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1875], al
  013ca	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  013cf	88 85 3c f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1876], al
  013d5	33 c0		 xor	 eax, eax
  013d7	89 85 3d f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1877], eax
  013dd	89 85 41 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1881], eax
  013e3	89 85 45 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1885], eax
  013e9	88 85 49 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1889], al
  013ef	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  013f4	88 85 4a f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1890], al
  013fa	33 c0		 xor	 eax, eax
  013fc	89 85 4b f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1891], eax
  01402	89 85 4f f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1895], eax
  01408	89 85 53 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1899], eax
  0140e	88 85 57 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1903], al
  01414	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01419	88 85 58 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1904], al
  0141f	33 c0		 xor	 eax, eax
  01421	89 85 59 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1905], eax
  01427	89 85 5d f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1909], eax
  0142d	89 85 61 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1913], eax
  01433	88 85 65 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1917], al
  01439	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0143e	88 85 66 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1918], al
  01444	33 c0		 xor	 eax, eax
  01446	89 85 67 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1919], eax
  0144c	89 85 6b f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1923], eax
  01452	89 85 6f f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1927], eax
  01458	88 85 73 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1931], al
  0145e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01463	88 85 74 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1932], al
  01469	33 c0		 xor	 eax, eax
  0146b	89 85 75 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1933], eax
  01471	89 85 79 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1937], eax
  01477	89 85 7d f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1941], eax
  0147d	88 85 81 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1945], al
  01483	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01488	88 85 82 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1946], al
  0148e	33 c0		 xor	 eax, eax
  01490	89 85 83 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1947], eax
  01496	89 85 87 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1951], eax
  0149c	89 85 8b f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1955], eax
  014a2	88 85 8f f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1959], al
  014a8	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  014ad	88 85 90 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1960], al
  014b3	33 c0		 xor	 eax, eax
  014b5	89 85 91 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1961], eax
  014bb	89 85 95 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1965], eax
  014c1	89 85 99 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1969], eax
  014c7	88 85 9d f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1973], al
  014cd	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  014d2	88 85 9e f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1974], al
  014d8	33 c0		 xor	 eax, eax
  014da	89 85 9f f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1975], eax
  014e0	89 85 a3 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1979], eax
  014e6	89 85 a7 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1983], eax
  014ec	88 85 ab f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1987], al
  014f2	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  014f7	88 85 ac f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+1988], al
  014fd	33 c0		 xor	 eax, eax
  014ff	89 85 ad f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1989], eax
  01505	89 85 b1 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1993], eax
  0150b	89 85 b5 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+1997], eax
  01511	88 85 b9 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2001], al
  01517	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0151c	88 85 ba f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2002], al
  01522	33 c0		 xor	 eax, eax
  01524	89 85 bb f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2003], eax
  0152a	89 85 bf f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2007], eax
  01530	89 85 c3 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2011], eax
  01536	88 85 c7 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2015], al
  0153c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01541	88 85 c8 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2016], al
  01547	33 c0		 xor	 eax, eax
  01549	89 85 c9 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2017], eax
  0154f	89 85 cd f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2021], eax
  01555	89 85 d1 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2025], eax
  0155b	88 85 d5 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2029], al

; 639  : 				  "","","","","","","","","","","","Right Enter","Right Control","","","",

  01561	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01566	88 85 d6 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2030], al
  0156c	33 c0		 xor	 eax, eax
  0156e	89 85 d7 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2031], eax
  01574	89 85 db f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2035], eax
  0157a	89 85 df f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2039], eax
  01580	88 85 e3 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2043], al
  01586	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0158b	88 85 e4 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2044], al
  01591	33 c0		 xor	 eax, eax
  01593	89 85 e5 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2045], eax
  01599	89 85 e9 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2049], eax
  0159f	89 85 ed f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2053], eax
  015a5	88 85 f1 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2057], al
  015ab	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  015b0	88 85 f2 f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2058], al
  015b6	33 c0		 xor	 eax, eax
  015b8	89 85 f3 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2059], eax
  015be	89 85 f7 f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2063], eax
  015c4	89 85 fb f9 ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2067], eax
  015ca	88 85 ff f9 ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2071], al
  015d0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  015d5	88 85 00 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2072], al
  015db	33 c0		 xor	 eax, eax
  015dd	89 85 01 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2073], eax
  015e3	89 85 05 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2077], eax
  015e9	89 85 09 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2081], eax
  015ef	88 85 0d fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2085], al
  015f5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  015fa	88 85 0e fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2086], al
  01600	33 c0		 xor	 eax, eax
  01602	89 85 0f fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2087], eax
  01608	89 85 13 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2091], eax
  0160e	89 85 17 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2095], eax
  01614	88 85 1b fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2099], al
  0161a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0161f	88 85 1c fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2100], al
  01625	33 c0		 xor	 eax, eax
  01627	89 85 1d fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2101], eax
  0162d	89 85 21 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2105], eax
  01633	89 85 25 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2109], eax
  01639	88 85 29 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2113], al
  0163f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01644	88 85 2a fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2114], al
  0164a	33 c0		 xor	 eax, eax
  0164c	89 85 2b fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2115], eax
  01652	89 85 2f fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2119], eax
  01658	89 85 33 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2123], eax
  0165e	88 85 37 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2127], al
  01664	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01669	88 85 38 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2128], al
  0166f	33 c0		 xor	 eax, eax
  01671	89 85 39 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2129], eax
  01677	89 85 3d fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2133], eax
  0167d	89 85 41 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2137], eax
  01683	88 85 45 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2141], al
  01689	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0168e	88 85 46 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2142], al
  01694	33 c0		 xor	 eax, eax
  01696	89 85 47 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2143], eax
  0169c	89 85 4b fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2147], eax
  016a2	89 85 4f fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2151], eax
  016a8	88 85 53 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2155], al
  016ae	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  016b3	88 85 54 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2156], al
  016b9	33 c0		 xor	 eax, eax
  016bb	89 85 55 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2157], eax
  016c1	89 85 59 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2161], eax
  016c7	89 85 5d fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2165], eax
  016cd	88 85 61 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2169], al
  016d3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  016d8	88 85 62 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2170], al
  016de	33 c0		 xor	 eax, eax
  016e0	89 85 63 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2171], eax
  016e6	89 85 67 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2175], eax
  016ec	89 85 6b fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2179], eax
  016f2	88 85 6f fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2183], al
  016f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
  016fd	89 85 70 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2184], eax
  01703	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+4
  01709	89 8d 74 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2188], ecx
  0170f	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+8
  01715	89 95 78 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2192], edx
  0171b	33 c0		 xor	 eax, eax
  0171d	66 89 85 7c fa
	ff ff		 mov	 WORD PTR _Temp$[ebp+2196], ax
  01724	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@
  01729	89 85 7e fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2198], eax
  0172f	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+4
  01735	89 8d 82 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2202], ecx
  0173b	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+8
  01741	89 95 86 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2206], edx
  01747	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+12
  0174d	66 89 85 8a fa
	ff ff		 mov	 WORD PTR _Temp$[ebp+2210], ax
  01754	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01759	88 85 8c fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2212], al
  0175f	33 c0		 xor	 eax, eax
  01761	89 85 8d fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2213], eax
  01767	89 85 91 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2217], eax
  0176d	89 85 95 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2221], eax
  01773	88 85 99 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2225], al
  01779	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0177e	88 85 9a fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2226], al
  01784	33 c0		 xor	 eax, eax
  01786	89 85 9b fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2227], eax
  0178c	89 85 9f fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2231], eax
  01792	89 85 a3 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2235], eax
  01798	88 85 a7 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2239], al
  0179e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  017a3	88 85 a8 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2240], al
  017a9	33 c0		 xor	 eax, eax
  017ab	89 85 a9 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2241], eax
  017b1	89 85 ad fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2245], eax
  017b7	89 85 b1 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2249], eax
  017bd	88 85 b5 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2253], al

; 640  : 				  "","","","","","","","","","","","","","","","",

  017c3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  017c8	88 85 b6 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2254], al
  017ce	33 c0		 xor	 eax, eax
  017d0	89 85 b7 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2255], eax
  017d6	89 85 bb fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2259], eax
  017dc	89 85 bf fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2263], eax
  017e2	88 85 c3 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2267], al
  017e8	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  017ed	88 85 c4 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2268], al
  017f3	33 c0		 xor	 eax, eax
  017f5	89 85 c5 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2269], eax
  017fb	89 85 c9 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2273], eax
  01801	89 85 cd fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2277], eax
  01807	88 85 d1 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2281], al
  0180d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01812	88 85 d2 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2282], al
  01818	33 c0		 xor	 eax, eax
  0181a	89 85 d3 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2283], eax
  01820	89 85 d7 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2287], eax
  01826	89 85 db fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2291], eax
  0182c	88 85 df fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2295], al
  01832	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01837	88 85 e0 fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2296], al
  0183d	33 c0		 xor	 eax, eax
  0183f	89 85 e1 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2297], eax
  01845	89 85 e5 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2301], eax
  0184b	89 85 e9 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2305], eax
  01851	88 85 ed fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2309], al
  01857	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0185c	88 85 ee fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2310], al
  01862	33 c0		 xor	 eax, eax
  01864	89 85 ef fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2311], eax
  0186a	89 85 f3 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2315], eax
  01870	89 85 f7 fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2319], eax
  01876	88 85 fb fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2323], al
  0187c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01881	88 85 fc fa ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2324], al
  01887	33 c0		 xor	 eax, eax
  01889	89 85 fd fa ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2325], eax
  0188f	89 85 01 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2329], eax
  01895	89 85 05 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2333], eax
  0189b	88 85 09 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2337], al
  018a1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  018a6	88 85 0a fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2338], al
  018ac	33 c0		 xor	 eax, eax
  018ae	89 85 0b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2339], eax
  018b4	89 85 0f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2343], eax
  018ba	89 85 13 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2347], eax
  018c0	88 85 17 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2351], al
  018c6	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  018cb	88 85 18 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2352], al
  018d1	33 c0		 xor	 eax, eax
  018d3	89 85 19 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2353], eax
  018d9	89 85 1d fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2357], eax
  018df	89 85 21 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2361], eax
  018e5	88 85 25 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2365], al
  018eb	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  018f0	88 85 26 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2366], al
  018f6	33 c0		 xor	 eax, eax
  018f8	89 85 27 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2367], eax
  018fe	89 85 2b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2371], eax
  01904	89 85 2f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2375], eax
  0190a	88 85 33 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2379], al
  01910	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01915	88 85 34 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2380], al
  0191b	33 c0		 xor	 eax, eax
  0191d	89 85 35 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2381], eax
  01923	89 85 39 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2385], eax
  01929	89 85 3d fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2389], eax
  0192f	88 85 41 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2393], al
  01935	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0193a	88 85 42 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2394], al
  01940	33 c0		 xor	 eax, eax
  01942	89 85 43 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2395], eax
  01948	89 85 47 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2399], eax
  0194e	89 85 4b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2403], eax
  01954	88 85 4f fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2407], al
  0195a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0195f	88 85 50 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2408], al
  01965	33 c0		 xor	 eax, eax
  01967	89 85 51 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2409], eax
  0196d	89 85 55 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2413], eax
  01973	89 85 59 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2417], eax
  01979	88 85 5d fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2421], al
  0197f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01984	88 85 5e fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2422], al
  0198a	33 c0		 xor	 eax, eax
  0198c	89 85 5f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2423], eax
  01992	89 85 63 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2427], eax
  01998	89 85 67 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2431], eax
  0199e	88 85 6b fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2435], al
  019a4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  019a9	88 85 6c fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2436], al
  019af	33 c0		 xor	 eax, eax
  019b1	89 85 6d fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2437], eax
  019b7	89 85 71 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2441], eax
  019bd	89 85 75 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2445], eax
  019c3	88 85 79 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2449], al
  019c9	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  019ce	88 85 7a fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2450], al
  019d4	33 c0		 xor	 eax, eax
  019d6	89 85 7b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2451], eax
  019dc	89 85 7f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2455], eax
  019e2	89 85 83 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2459], eax
  019e8	88 85 87 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2463], al
  019ee	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  019f3	88 85 88 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2464], al
  019f9	33 c0		 xor	 eax, eax
  019fb	89 85 89 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2465], eax
  01a01	89 85 8d fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2469], eax
  01a07	89 85 91 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2473], eax
  01a0d	88 85 95 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2477], al

; 641  : 				  "","Function F3","","","/ Num","","Print Screen","Right Alt","","","","","","","","",

  01a13	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01a18	88 85 96 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2478], al
  01a1e	33 c0		 xor	 eax, eax
  01a20	89 85 97 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2479], eax
  01a26	89 85 9b fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2483], eax
  01a2c	89 85 9f fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2487], eax
  01a32	88 85 a3 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2491], al
  01a38	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@
  01a3d	89 85 a4 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2492], eax
  01a43	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@+4
  01a49	89 8d a8 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2496], ecx
  01a4f	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@+8
  01a55	89 95 ac fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2500], edx
  01a5b	33 c0		 xor	 eax, eax
  01a5d	66 89 85 b0 fb
	ff ff		 mov	 WORD PTR _Temp$[ebp+2504], ax
  01a64	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01a69	88 85 b2 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2506], al
  01a6f	33 c0		 xor	 eax, eax
  01a71	89 85 b3 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2507], eax
  01a77	89 85 b7 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2511], eax
  01a7d	89 85 bb fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2515], eax
  01a83	88 85 bf fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2519], al
  01a89	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01a8e	88 85 c0 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2520], al
  01a94	33 c0		 xor	 eax, eax
  01a96	89 85 c1 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2521], eax
  01a9c	89 85 c5 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2525], eax
  01aa2	89 85 c9 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2529], eax
  01aa8	88 85 cd fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2533], al
  01aae	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05IAKEFGOE@?1?5Num?$AA@
  01ab3	89 85 ce fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2534], eax
  01ab9	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05IAKEFGOE@?1?5Num?$AA@+4
  01ac0	66 89 8d d2 fb
	ff ff		 mov	 WORD PTR _Temp$[ebp+2538], cx
  01ac7	33 c0		 xor	 eax, eax
  01ac9	89 85 d4 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2540], eax
  01acf	89 85 d8 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2544], eax
  01ad5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01ada	88 85 dc fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2548], al
  01ae0	33 c0		 xor	 eax, eax
  01ae2	89 85 dd fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2549], eax
  01ae8	89 85 e1 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2553], eax
  01aee	89 85 e5 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2557], eax
  01af4	88 85 e9 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2561], al
  01afa	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@
  01aff	89 85 ea fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2562], eax
  01b05	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+4
  01b0b	89 8d ee fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2566], ecx
  01b11	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+8
  01b17	89 95 f2 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2570], edx
  01b1d	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+12
  01b22	88 85 f6 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2574], al
  01b28	33 c0		 xor	 eax, eax
  01b2a	88 85 f7 fb ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2575], al
  01b30	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@
  01b35	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2576], eax
  01b3b	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@+4
  01b41	89 8d fc fb ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2580], ecx
  01b47	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@+8
  01b4e	66 89 95 00 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2584], dx
  01b55	33 c0		 xor	 eax, eax
  01b57	89 85 02 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2586], eax
  01b5d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01b62	88 85 06 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2590], al
  01b68	33 c0		 xor	 eax, eax
  01b6a	89 85 07 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2591], eax
  01b70	89 85 0b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2595], eax
  01b76	89 85 0f fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2599], eax
  01b7c	88 85 13 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2603], al
  01b82	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01b87	88 85 14 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2604], al
  01b8d	33 c0		 xor	 eax, eax
  01b8f	89 85 15 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2605], eax
  01b95	89 85 19 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2609], eax
  01b9b	89 85 1d fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2613], eax
  01ba1	88 85 21 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2617], al
  01ba7	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01bac	88 85 22 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2618], al
  01bb2	33 c0		 xor	 eax, eax
  01bb4	89 85 23 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2619], eax
  01bba	89 85 27 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2623], eax
  01bc0	89 85 2b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2627], eax
  01bc6	88 85 2f fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2631], al
  01bcc	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01bd1	88 85 30 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2632], al
  01bd7	33 c0		 xor	 eax, eax
  01bd9	89 85 31 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2633], eax
  01bdf	89 85 35 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2637], eax
  01be5	89 85 39 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2641], eax
  01beb	88 85 3d fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2645], al
  01bf1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01bf6	88 85 3e fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2646], al
  01bfc	33 c0		 xor	 eax, eax
  01bfe	89 85 3f fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2647], eax
  01c04	89 85 43 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2651], eax
  01c0a	89 85 47 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2655], eax
  01c10	88 85 4b fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2659], al
  01c16	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01c1b	88 85 4c fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2660], al
  01c21	33 c0		 xor	 eax, eax
  01c23	89 85 4d fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2661], eax
  01c29	89 85 51 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2665], eax
  01c2f	89 85 55 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2669], eax
  01c35	88 85 59 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2673], al
  01c3b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01c40	88 85 5a fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2674], al
  01c46	33 c0		 xor	 eax, eax
  01c48	89 85 5b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2675], eax
  01c4e	89 85 5f fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2679], eax
  01c54	89 85 63 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2683], eax
  01c5a	88 85 67 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2687], al
  01c60	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01c65	88 85 68 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2688], al
  01c6b	33 c0		 xor	 eax, eax
  01c6d	89 85 69 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2689], eax
  01c73	89 85 6d fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2693], eax
  01c79	89 85 71 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2697], eax
  01c7f	88 85 75 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2701], al

; 642  : 				  "","","","","Pause","Break","Home","Up","Page Up","","Left","","Right","","End","Down",

  01c85	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01c8a	88 85 76 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2702], al
  01c90	33 c0		 xor	 eax, eax
  01c92	89 85 77 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2703], eax
  01c98	89 85 7b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2707], eax
  01c9e	89 85 7f fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2711], eax
  01ca4	88 85 83 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2715], al
  01caa	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01caf	88 85 84 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2716], al
  01cb5	33 c0		 xor	 eax, eax
  01cb7	89 85 85 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2717], eax
  01cbd	89 85 89 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2721], eax
  01cc3	89 85 8d fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2725], eax
  01cc9	88 85 91 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2729], al
  01ccf	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01cd4	88 85 92 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2730], al
  01cda	33 c0		 xor	 eax, eax
  01cdc	89 85 93 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2731], eax
  01ce2	89 85 97 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2735], eax
  01ce8	89 85 9b fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2739], eax
  01cee	88 85 9f fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2743], al
  01cf4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01cf9	88 85 a0 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2744], al
  01cff	33 c0		 xor	 eax, eax
  01d01	89 85 a1 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2745], eax
  01d07	89 85 a5 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2749], eax
  01d0d	89 85 a9 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2753], eax
  01d13	88 85 ad fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2757], al
  01d19	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05PEDNBBBD@Pause?$AA@
  01d1e	89 85 ae fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2758], eax
  01d24	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05PEDNBBBD@Pause?$AA@+4
  01d2b	66 89 8d b2 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2762], cx
  01d32	33 c0		 xor	 eax, eax
  01d34	89 85 b4 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2764], eax
  01d3a	89 85 b8 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2768], eax
  01d40	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05EMFLFCNO@Break?$AA@
  01d45	89 85 bc fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2772], eax
  01d4b	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05EMFLFCNO@Break?$AA@+4
  01d52	66 89 8d c0 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2776], cx
  01d59	33 c0		 xor	 eax, eax
  01d5b	89 85 c2 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2778], eax
  01d61	89 85 c6 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2782], eax
  01d67	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04GKJODLKO@Home?$AA@
  01d6c	89 85 ca fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2786], eax
  01d72	8a 0d 04 00 00
	00		 mov	 cl, BYTE PTR ??_C@_04GKJODLKO@Home?$AA@+4
  01d78	88 8d ce fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2790], cl
  01d7e	33 c0		 xor	 eax, eax
  01d80	89 85 cf fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2791], eax
  01d86	89 85 d3 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2795], eax
  01d8c	88 85 d7 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2799], al
  01d92	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02EFPGLDEA@Up?$AA@
  01d98	66 89 85 d8 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2800], ax
  01d9f	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02EFPGLDEA@Up?$AA@+2
  01da5	88 8d da fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2802], cl
  01dab	33 c0		 xor	 eax, eax
  01dad	89 85 db fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2803], eax
  01db3	89 85 df fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2807], eax
  01db9	66 89 85 e3 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2811], ax
  01dc0	88 85 e5 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2813], al
  01dc6	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_07EDGDGJEN@Page?5Up?$AA@
  01dcb	89 85 e6 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2814], eax
  01dd1	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_07EDGDGJEN@Page?5Up?$AA@+4
  01dd7	89 8d ea fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2818], ecx
  01ddd	33 c0		 xor	 eax, eax
  01ddf	89 85 ee fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2822], eax
  01de5	66 89 85 f2 fc
	ff ff		 mov	 WORD PTR _Temp$[ebp+2826], ax
  01dec	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01df1	88 85 f4 fc ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2828], al
  01df7	33 c0		 xor	 eax, eax
  01df9	89 85 f5 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2829], eax
  01dff	89 85 f9 fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2833], eax
  01e05	89 85 fd fc ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2837], eax
  01e0b	88 85 01 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2841], al
  01e11	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04KPCPLBPL@Left?$AA@
  01e16	89 85 02 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2842], eax
  01e1c	8a 0d 04 00 00
	00		 mov	 cl, BYTE PTR ??_C@_04KPCPLBPL@Left?$AA@+4
  01e22	88 8d 06 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2846], cl
  01e28	33 c0		 xor	 eax, eax
  01e2a	89 85 07 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2847], eax
  01e30	89 85 0b fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2851], eax
  01e36	88 85 0f fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2855], al
  01e3c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01e41	88 85 10 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2856], al
  01e47	33 c0		 xor	 eax, eax
  01e49	89 85 11 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2857], eax
  01e4f	89 85 15 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2861], eax
  01e55	89 85 19 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2865], eax
  01e5b	88 85 1d fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2869], al
  01e61	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05DADPALEM@Right?$AA@
  01e66	89 85 1e fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2870], eax
  01e6c	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05DADPALEM@Right?$AA@+4
  01e73	66 89 8d 22 fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2874], cx
  01e7a	33 c0		 xor	 eax, eax
  01e7c	89 85 24 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2876], eax
  01e82	89 85 28 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2880], eax
  01e88	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01e8d	88 85 2c fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2884], al
  01e93	33 c0		 xor	 eax, eax
  01e95	89 85 2d fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2885], eax
  01e9b	89 85 31 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2889], eax
  01ea1	89 85 35 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2893], eax
  01ea7	88 85 39 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2897], al
  01ead	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_03DBKJMAGF@End?$AA@
  01eb2	89 85 3a fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2898], eax
  01eb8	33 c0		 xor	 eax, eax
  01eba	89 85 3e fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2902], eax
  01ec0	89 85 42 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2906], eax
  01ec6	66 89 85 46 fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2910], ax
  01ecd	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04FNCLCJMC@Down?$AA@
  01ed2	89 85 48 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2912], eax
  01ed8	8a 0d 04 00 00
	00		 mov	 cl, BYTE PTR ??_C@_04FNCLCJMC@Down?$AA@+4
  01ede	88 8d 4c fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2916], cl
  01ee4	33 c0		 xor	 eax, eax
  01ee6	89 85 4d fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2917], eax
  01eec	89 85 51 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2921], eax
  01ef2	88 85 55 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2925], al

; 643  : 				  "Page Down","Insert","Delete","","","","","","","","Left Windows","Right Windows","Thing","","","",

  01ef8	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@
  01efd	89 85 56 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2926], eax
  01f03	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@+4
  01f09	89 8d 5a fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2930], ecx
  01f0f	66 8b 15 08 00
	00 00		 mov	 dx, WORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@+8
  01f16	66 89 95 5e fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2934], dx
  01f1d	33 c0		 xor	 eax, eax
  01f1f	89 85 60 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2936], eax
  01f25	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06CPFCODOD@Insert?$AA@
  01f2a	89 85 64 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2940], eax
  01f30	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06CPFCODOD@Insert?$AA@+4
  01f37	66 89 8d 68 fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2944], cx
  01f3e	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06CPFCODOD@Insert?$AA@+6
  01f44	88 95 6a fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2946], dl
  01f4a	33 c0		 xor	 eax, eax
  01f4c	89 85 6b fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2947], eax
  01f52	66 89 85 6f fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2951], ax
  01f59	88 85 71 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2953], al
  01f5f	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06JBKGCNBB@Delete?$AA@
  01f64	89 85 72 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2954], eax
  01f6a	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06JBKGCNBB@Delete?$AA@+4
  01f71	66 89 8d 76 fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2958], cx
  01f78	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06JBKGCNBB@Delete?$AA@+6
  01f7e	88 95 78 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2960], dl
  01f84	33 c0		 xor	 eax, eax
  01f86	89 85 79 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2961], eax
  01f8c	66 89 85 7d fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+2965], ax
  01f93	88 85 7f fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2967], al
  01f99	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01f9e	88 85 80 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2968], al
  01fa4	33 c0		 xor	 eax, eax
  01fa6	89 85 81 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2969], eax
  01fac	89 85 85 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2973], eax
  01fb2	89 85 89 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2977], eax
  01fb8	88 85 8d fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2981], al
  01fbe	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01fc3	88 85 8e fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2982], al
  01fc9	33 c0		 xor	 eax, eax
  01fcb	89 85 8f fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2983], eax
  01fd1	89 85 93 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2987], eax
  01fd7	89 85 97 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2991], eax
  01fdd	88 85 9b fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2995], al
  01fe3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  01fe8	88 85 9c fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+2996], al
  01fee	33 c0		 xor	 eax, eax
  01ff0	89 85 9d fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+2997], eax
  01ff6	89 85 a1 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3001], eax
  01ffc	89 85 a5 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3005], eax
  02002	88 85 a9 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3009], al
  02008	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0200d	88 85 aa fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3010], al
  02013	33 c0		 xor	 eax, eax
  02015	89 85 ab fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3011], eax
  0201b	89 85 af fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3015], eax
  02021	89 85 b3 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3019], eax
  02027	88 85 b7 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3023], al
  0202d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02032	88 85 b8 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3024], al
  02038	33 c0		 xor	 eax, eax
  0203a	89 85 b9 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3025], eax
  02040	89 85 bd fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3029], eax
  02046	89 85 c1 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3033], eax
  0204c	88 85 c5 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3037], al
  02052	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02057	88 85 c6 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3038], al
  0205d	33 c0		 xor	 eax, eax
  0205f	89 85 c7 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3039], eax
  02065	89 85 cb fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3043], eax
  0206b	89 85 cf fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3047], eax
  02071	88 85 d3 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3051], al
  02077	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0207c	88 85 d4 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3052], al
  02082	33 c0		 xor	 eax, eax
  02084	89 85 d5 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3053], eax
  0208a	89 85 d9 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3057], eax
  02090	89 85 dd fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3061], eax
  02096	88 85 e1 fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3065], al
  0209c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@
  020a1	89 85 e2 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3066], eax
  020a7	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+4
  020ad	89 8d e6 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3070], ecx
  020b3	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+8
  020b9	89 95 ea fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3074], edx
  020bf	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+12
  020c4	88 85 ee fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3078], al
  020ca	33 c0		 xor	 eax, eax
  020cc	88 85 ef fd ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3079], al
  020d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@
  020d7	89 85 f0 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3080], eax
  020dd	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+4
  020e3	89 8d f4 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3084], ecx
  020e9	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+8
  020ef	89 95 f8 fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3088], edx
  020f5	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+12
  020fb	66 89 85 fc fd
	ff ff		 mov	 WORD PTR _Temp$[ebp+3092], ax
  02102	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05FOLLILPC@Thing?$AA@
  02107	89 85 fe fd ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3094], eax
  0210d	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_05FOLLILPC@Thing?$AA@+4
  02114	66 89 8d 02 fe
	ff ff		 mov	 WORD PTR _Temp$[ebp+3098], cx
  0211b	33 c0		 xor	 eax, eax
  0211d	89 85 04 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3100], eax
  02123	89 85 08 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3104], eax
  02129	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0212e	88 85 0c fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3108], al
  02134	33 c0		 xor	 eax, eax
  02136	89 85 0d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3109], eax
  0213c	89 85 11 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3113], eax
  02142	89 85 15 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3117], eax
  02148	88 85 19 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3121], al
  0214e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02153	88 85 1a fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3122], al
  02159	33 c0		 xor	 eax, eax
  0215b	89 85 1b fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3123], eax
  02161	89 85 1f fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3127], eax
  02167	89 85 23 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3131], eax
  0216d	88 85 27 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3135], al
  02173	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02178	88 85 28 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3136], al
  0217e	33 c0		 xor	 eax, eax
  02180	89 85 29 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3137], eax
  02186	89 85 2d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3141], eax
  0218c	89 85 31 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3145], eax
  02192	88 85 35 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3149], al

; 644  : 				  "","","","","","","","","","","","","","","","",

  02198	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0219d	88 85 36 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3150], al
  021a3	33 c0		 xor	 eax, eax
  021a5	89 85 37 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3151], eax
  021ab	89 85 3b fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3155], eax
  021b1	89 85 3f fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3159], eax
  021b7	88 85 43 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3163], al
  021bd	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  021c2	88 85 44 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3164], al
  021c8	33 c0		 xor	 eax, eax
  021ca	89 85 45 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3165], eax
  021d0	89 85 49 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3169], eax
  021d6	89 85 4d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3173], eax
  021dc	88 85 51 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3177], al
  021e2	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  021e7	88 85 52 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3178], al
  021ed	33 c0		 xor	 eax, eax
  021ef	89 85 53 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3179], eax
  021f5	89 85 57 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3183], eax
  021fb	89 85 5b fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3187], eax
  02201	88 85 5f fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3191], al
  02207	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0220c	88 85 60 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3192], al
  02212	33 c0		 xor	 eax, eax
  02214	89 85 61 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3193], eax
  0221a	89 85 65 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3197], eax
  02220	89 85 69 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3201], eax
  02226	88 85 6d fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3205], al
  0222c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02231	88 85 6e fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3206], al
  02237	33 c0		 xor	 eax, eax
  02239	89 85 6f fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3207], eax
  0223f	89 85 73 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3211], eax
  02245	89 85 77 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3215], eax
  0224b	88 85 7b fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3219], al
  02251	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02256	88 85 7c fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3220], al
  0225c	33 c0		 xor	 eax, eax
  0225e	89 85 7d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3221], eax
  02264	89 85 81 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3225], eax
  0226a	89 85 85 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3229], eax
  02270	88 85 89 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3233], al
  02276	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0227b	88 85 8a fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3234], al
  02281	33 c0		 xor	 eax, eax
  02283	89 85 8b fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3235], eax
  02289	89 85 8f fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3239], eax
  0228f	89 85 93 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3243], eax
  02295	88 85 97 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3247], al
  0229b	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  022a0	88 85 98 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3248], al
  022a6	33 c0		 xor	 eax, eax
  022a8	89 85 99 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3249], eax
  022ae	89 85 9d fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3253], eax
  022b4	89 85 a1 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3257], eax
  022ba	88 85 a5 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3261], al
  022c0	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  022c5	88 85 a6 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3262], al
  022cb	33 c0		 xor	 eax, eax
  022cd	89 85 a7 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3263], eax
  022d3	89 85 ab fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3267], eax
  022d9	89 85 af fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3271], eax
  022df	88 85 b3 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3275], al
  022e5	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  022ea	88 85 b4 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3276], al
  022f0	33 c0		 xor	 eax, eax
  022f2	89 85 b5 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3277], eax
  022f8	89 85 b9 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3281], eax
  022fe	89 85 bd fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3285], eax
  02304	88 85 c1 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3289], al
  0230a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0230f	88 85 c2 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3290], al
  02315	33 c0		 xor	 eax, eax
  02317	89 85 c3 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3291], eax
  0231d	89 85 c7 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3295], eax
  02323	89 85 cb fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3299], eax
  02329	88 85 cf fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3303], al
  0232f	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02334	88 85 d0 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3304], al
  0233a	33 c0		 xor	 eax, eax
  0233c	89 85 d1 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3305], eax
  02342	89 85 d5 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3309], eax
  02348	89 85 d9 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3313], eax
  0234e	88 85 dd fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3317], al
  02354	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02359	88 85 de fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3318], al
  0235f	33 c0		 xor	 eax, eax
  02361	89 85 df fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3319], eax
  02367	89 85 e3 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3323], eax
  0236d	89 85 e7 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3327], eax
  02373	88 85 eb fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3331], al
  02379	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0237e	88 85 ec fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3332], al
  02384	33 c0		 xor	 eax, eax
  02386	89 85 ed fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3333], eax
  0238c	89 85 f1 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3337], eax
  02392	89 85 f5 fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3341], eax
  02398	88 85 f9 fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3345], al
  0239e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  023a3	88 85 fa fe ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3346], al
  023a9	33 c0		 xor	 eax, eax
  023ab	89 85 fb fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3347], eax
  023b1	89 85 ff fe ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3351], eax
  023b7	89 85 03 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3355], eax
  023bd	88 85 07 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3359], al
  023c3	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  023c8	88 85 08 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3360], al
  023ce	33 c0		 xor	 eax, eax
  023d0	89 85 09 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3361], eax
  023d6	89 85 0d ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3365], eax
  023dc	89 85 11 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3369], eax
  023e2	88 85 15 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3373], al

; 645  : 				  "","","","","","","","","","","","","","","",""};

  023e8	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  023ed	88 85 16 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3374], al
  023f3	33 c0		 xor	 eax, eax
  023f5	89 85 17 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3375], eax
  023fb	89 85 1b ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3379], eax
  02401	89 85 1f ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3383], eax
  02407	88 85 23 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3387], al
  0240d	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02412	88 85 24 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3388], al
  02418	33 c0		 xor	 eax, eax
  0241a	89 85 25 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3389], eax
  02420	89 85 29 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3393], eax
  02426	89 85 2d ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3397], eax
  0242c	88 85 31 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3401], al
  02432	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02437	88 85 32 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3402], al
  0243d	33 c0		 xor	 eax, eax
  0243f	89 85 33 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3403], eax
  02445	89 85 37 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3407], eax
  0244b	89 85 3b ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3411], eax
  02451	88 85 3f ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3415], al
  02457	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0245c	88 85 40 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3416], al
  02462	33 c0		 xor	 eax, eax
  02464	89 85 41 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3417], eax
  0246a	89 85 45 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3421], eax
  02470	89 85 49 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3425], eax
  02476	88 85 4d ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3429], al
  0247c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02481	88 85 4e ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3430], al
  02487	33 c0		 xor	 eax, eax
  02489	89 85 4f ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3431], eax
  0248f	89 85 53 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3435], eax
  02495	89 85 57 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3439], eax
  0249b	88 85 5b ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3443], al
  024a1	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  024a6	88 85 5c ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3444], al
  024ac	33 c0		 xor	 eax, eax
  024ae	89 85 5d ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3445], eax
  024b4	89 85 61 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3449], eax
  024ba	89 85 65 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3453], eax
  024c0	88 85 69 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3457], al
  024c6	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  024cb	88 85 6a ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3458], al
  024d1	33 c0		 xor	 eax, eax
  024d3	89 85 6b ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3459], eax
  024d9	89 85 6f ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3463], eax
  024df	89 85 73 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3467], eax
  024e5	88 85 77 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3471], al
  024eb	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  024f0	88 85 78 ff ff
	ff		 mov	 BYTE PTR _Temp$[ebp+3472], al
  024f6	33 c0		 xor	 eax, eax
  024f8	89 85 79 ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3473], eax
  024fe	89 85 7d ff ff
	ff		 mov	 DWORD PTR _Temp$[ebp+3477], eax
  02504	89 45 81	 mov	 DWORD PTR _Temp$[ebp+3481], eax
  02507	88 45 85	 mov	 BYTE PTR _Temp$[ebp+3485], al
  0250a	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0250f	88 45 86	 mov	 BYTE PTR _Temp$[ebp+3486], al
  02512	33 c0		 xor	 eax, eax
  02514	89 45 87	 mov	 DWORD PTR _Temp$[ebp+3487], eax
  02517	89 45 8b	 mov	 DWORD PTR _Temp$[ebp+3491], eax
  0251a	89 45 8f	 mov	 DWORD PTR _Temp$[ebp+3495], eax
  0251d	88 45 93	 mov	 BYTE PTR _Temp$[ebp+3499], al
  02520	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02525	88 45 94	 mov	 BYTE PTR _Temp$[ebp+3500], al
  02528	33 c0		 xor	 eax, eax
  0252a	89 45 95	 mov	 DWORD PTR _Temp$[ebp+3501], eax
  0252d	89 45 99	 mov	 DWORD PTR _Temp$[ebp+3505], eax
  02530	89 45 9d	 mov	 DWORD PTR _Temp$[ebp+3509], eax
  02533	88 45 a1	 mov	 BYTE PTR _Temp$[ebp+3513], al
  02536	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0253b	88 45 a2	 mov	 BYTE PTR _Temp$[ebp+3514], al
  0253e	33 c0		 xor	 eax, eax
  02540	89 45 a3	 mov	 DWORD PTR _Temp$[ebp+3515], eax
  02543	89 45 a7	 mov	 DWORD PTR _Temp$[ebp+3519], eax
  02546	89 45 ab	 mov	 DWORD PTR _Temp$[ebp+3523], eax
  02549	88 45 af	 mov	 BYTE PTR _Temp$[ebp+3527], al
  0254c	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02551	88 45 b0	 mov	 BYTE PTR _Temp$[ebp+3528], al
  02554	33 c0		 xor	 eax, eax
  02556	89 45 b1	 mov	 DWORD PTR _Temp$[ebp+3529], eax
  02559	89 45 b5	 mov	 DWORD PTR _Temp$[ebp+3533], eax
  0255c	89 45 b9	 mov	 DWORD PTR _Temp$[ebp+3537], eax
  0255f	88 45 bd	 mov	 BYTE PTR _Temp$[ebp+3541], al
  02562	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02567	88 45 be	 mov	 BYTE PTR _Temp$[ebp+3542], al
  0256a	33 c0		 xor	 eax, eax
  0256c	89 45 bf	 mov	 DWORD PTR _Temp$[ebp+3543], eax
  0256f	89 45 c3	 mov	 DWORD PTR _Temp$[ebp+3547], eax
  02572	89 45 c7	 mov	 DWORD PTR _Temp$[ebp+3551], eax
  02575	88 45 cb	 mov	 BYTE PTR _Temp$[ebp+3555], al
  02578	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  0257d	88 45 cc	 mov	 BYTE PTR _Temp$[ebp+3556], al
  02580	33 c0		 xor	 eax, eax
  02582	89 45 cd	 mov	 DWORD PTR _Temp$[ebp+3557], eax
  02585	89 45 d1	 mov	 DWORD PTR _Temp$[ebp+3561], eax
  02588	89 45 d5	 mov	 DWORD PTR _Temp$[ebp+3565], eax
  0258b	88 45 d9	 mov	 BYTE PTR _Temp$[ebp+3569], al
  0258e	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  02593	88 45 da	 mov	 BYTE PTR _Temp$[ebp+3570], al
  02596	33 c0		 xor	 eax, eax
  02598	89 45 db	 mov	 DWORD PTR _Temp$[ebp+3571], eax
  0259b	89 45 df	 mov	 DWORD PTR _Temp$[ebp+3575], eax
  0259e	89 45 e3	 mov	 DWORD PTR _Temp$[ebp+3579], eax
  025a1	88 45 e7	 mov	 BYTE PTR _Temp$[ebp+3583], al
  025a4	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  025a9	88 45 e8	 mov	 BYTE PTR _Temp$[ebp+3584], al
  025ac	33 c0		 xor	 eax, eax
  025ae	89 45 e9	 mov	 DWORD PTR _Temp$[ebp+3585], eax
  025b1	89 45 ed	 mov	 DWORD PTR _Temp$[ebp+3589], eax
  025b4	89 45 f1	 mov	 DWORD PTR _Temp$[ebp+3593], eax
  025b7	88 45 f5	 mov	 BYTE PTR _Temp$[ebp+3597], al

; 646  : 	
; 647  : 	for(int i=0;i<257;i++)

  025ba	c7 85 e4 f1 ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$91289[ebp], 0
  025c4	eb 0f		 jmp	 SHORT $LN11@KeyHandler@3
$LN10@KeyHandler@3:
  025c6	8b 85 e4 f1 ff
	ff		 mov	 eax, DWORD PTR _i$91289[ebp]
  025cc	83 c0 01	 add	 eax, 1
  025cf	89 85 e4 f1 ff
	ff		 mov	 DWORD PTR _i$91289[ebp], eax
$LN11@KeyHandler@3:
  025d5	81 bd e4 f1 ff
	ff 01 01 00 00	 cmp	 DWORD PTR _i$91289[ebp], 257 ; 00000101H
  025df	7d 5a		 jge	 SHORT $LN9@KeyHandler@3

; 648  : 		for(int j=0;j<14;j++)

  025e1	c7 85 e0 f1 ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$91293[ebp], 0
  025eb	eb 0f		 jmp	 SHORT $LN8@KeyHandler@3
$LN7@KeyHandler@3:
  025ed	8b 85 e0 f1 ff
	ff		 mov	 eax, DWORD PTR _j$91293[ebp]
  025f3	83 c0 01	 add	 eax, 1
  025f6	89 85 e0 f1 ff
	ff		 mov	 DWORD PTR _j$91293[ebp], eax
$LN8@KeyHandler@3:
  025fc	83 bd e0 f1 ff
	ff 0e		 cmp	 DWORD PTR _j$91293[ebp], 14 ; 0000000eH
  02603	7d 34		 jge	 SHORT $LN6@KeyHandler@3

; 649  : 			this->Keys[i][j]=Temp[i][j];

  02605	8b 85 e4 f1 ff
	ff		 mov	 eax, DWORD PTR _i$91289[ebp]
  0260b	6b c0 0e	 imul	 eax, 14			; 0000000eH
  0260e	8d 8c 05 e8 f1
	ff ff		 lea	 ecx, DWORD PTR _Temp$[ebp+eax]
  02615	8b 95 e4 f1 ff
	ff		 mov	 edx, DWORD PTR _i$91289[ebp]
  0261b	6b d2 0e	 imul	 edx, 14			; 0000000eH
  0261e	03 95 e0 f1 ff
	ff		 add	 edx, DWORD PTR _j$91293[ebp]
  02624	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02627	8b b5 e0 f1 ff
	ff		 mov	 esi, DWORD PTR _j$91293[ebp]
  0262d	8a 0c 31	 mov	 cl, BYTE PTR [ecx+esi]
  02630	88 8c 10 01 05
	00 00		 mov	 BYTE PTR [eax+edx+1281], cl
  02637	eb b4		 jmp	 SHORT $LN7@KeyHandler@3
$LN6@KeyHandler@3:
  02639	eb 8b		 jmp	 SHORT $LN10@KeyHandler@3
$LN9@KeyHandler@3:

; 650  : 
; 651  : 	for(int i=0;i<256;i++)

  0263b	c7 85 dc f1 ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$91297[ebp], 0
  02645	eb 0f		 jmp	 SHORT $LN5@KeyHandler@3
$LN4@KeyHandler@3:
  02647	8b 85 dc f1 ff
	ff		 mov	 eax, DWORD PTR _i$91297[ebp]
  0264d	83 c0 01	 add	 eax, 1
  02650	89 85 dc f1 ff
	ff		 mov	 DWORD PTR _i$91297[ebp], eax
$LN5@KeyHandler@3:
  02656	81 bd dc f1 ff
	ff 00 01 00 00	 cmp	 DWORD PTR _i$91297[ebp], 256 ; 00000100H
  02660	7d 4f		 jge	 SHORT $LN3@KeyHandler@3

; 652  : 	{
; 653  : 		KeyState1[i]=false;

  02662	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02665	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91297[ebp]
  0266b	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 654  : 		KeyState2[i]=false;

  0266f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02672	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91297[ebp]
  02678	c6 80 01 01 00
	00 00		 mov	 BYTE PTR [eax+257], 0

; 655  : 		KeyState3[i]=false;

  0267f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02682	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91297[ebp]
  02688	c6 80 01 02 00
	00 00		 mov	 BYTE PTR [eax+513], 0

; 656  : 		KeyState4[i]=false;

  0268f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02692	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91297[ebp]
  02698	c6 80 01 03 00
	00 00		 mov	 BYTE PTR [eax+769], 0

; 657  : 		KeyState5[i]=false;

  0269f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026a2	03 85 dc f1 ff
	ff		 add	 eax, DWORD PTR _i$91297[ebp]
  026a8	c6 80 01 04 00
	00 00		 mov	 BYTE PTR [eax+1025], 0

; 658  : 	}

  026af	eb 96		 jmp	 SHORT $LN4@KeyHandler@3
$LN3@KeyHandler@3:

; 659  : 
; 660  : 	this->CurrentMouse=Mouse;

  026b1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026b4	8b 4d 08	 mov	 ecx, DWORD PTR _Mouse$[ebp]
  026b7	89 88 28 13 00
	00		 mov	 DWORD PTR [eax+4904], ecx

; 661  : 
; 662  : 	if(this->CurrentMouse!=NULL)

  026bd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026c0	83 b8 28 13 00
	00 00		 cmp	 DWORD PTR [eax+4904], 0
  026c7	74 08		 je	 SHORT $LN2@KeyHandler@3

; 663  : 		this->Bound=true;

  026c9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026cc	c6 00 01	 mov	 BYTE PTR [eax], 1

; 664  : 	else

  026cf	eb 06		 jmp	 SHORT $LN1@KeyHandler@3
$LN2@KeyHandler@3:

; 665  : 		this->Bound=false;

  026d1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026d4	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN1@KeyHandler@3:

; 666  : 
; 667  : 	this->MouseSyncX=XSpeed;

  026d7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026da	8b 4d 0c	 mov	 ecx, DWORD PTR _XSpeed$[ebp]
  026dd	89 88 1c 13 00
	00		 mov	 DWORD PTR [eax+4892], ecx

; 668  : 	this->MouseSyncY=YSpeed;

  026e3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  026e6	8b 4d 10	 mov	 ecx, DWORD PTR _YSpeed$[ebp]
  026e9	89 88 20 13 00
	00		 mov	 DWORD PTR [eax+4896], ecx

; 669  : 	this->MouseLeft=this->CharToInt(BindMouseXLeft)-1;

  026ef	8b 45 14	 mov	 eax, DWORD PTR _BindMouseXLeft$[ebp]
  026f2	50		 push	 eax
  026f3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  026f6	e8 00 00 00 00	 call	 ?CharToInt@KeyHandler@@QAEHPAD@Z ; KeyHandler::CharToInt
  026fb	83 e8 01	 sub	 eax, 1
  026fe	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02701	89 81 14 13 00
	00		 mov	 DWORD PTR [ecx+4884], eax

; 670  : 	this->MouseRight=this->CharToInt(BindMouseXRight)-1;

  02707	8b 45 18	 mov	 eax, DWORD PTR _BindMouseXRight$[ebp]
  0270a	50		 push	 eax
  0270b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0270e	e8 00 00 00 00	 call	 ?CharToInt@KeyHandler@@QAEHPAD@Z ; KeyHandler::CharToInt
  02713	83 e8 01	 sub	 eax, 1
  02716	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02719	89 81 18 13 00
	00		 mov	 DWORD PTR [ecx+4888], eax

; 671  : 	this->MouseDown=this->CharToInt(BindMouseYDown)-1;

  0271f	8b 45 20	 mov	 eax, DWORD PTR _BindMouseYDown$[ebp]
  02722	50		 push	 eax
  02723	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02726	e8 00 00 00 00	 call	 ?CharToInt@KeyHandler@@QAEHPAD@Z ; KeyHandler::CharToInt
  0272b	83 e8 01	 sub	 eax, 1
  0272e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02731	89 81 10 13 00
	00		 mov	 DWORD PTR [ecx+4880], eax

; 672  : 	this->MouseUp=this->CharToInt(BindMouseYUp)-1;

  02737	8b 45 1c	 mov	 eax, DWORD PTR _BindMouseYUp$[ebp]
  0273a	50		 push	 eax
  0273b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0273e	e8 00 00 00 00	 call	 ?CharToInt@KeyHandler@@QAEHPAD@Z ; KeyHandler::CharToInt
  02743	83 e8 01	 sub	 eax, 1
  02746	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  02749	89 81 24 13 00
	00		 mov	 DWORD PTR [ecx+4900], eax

; 673  : 
; 674  : 	return;
; 675  : }

  0274f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  02752	5f		 pop	 edi
  02753	5e		 pop	 esi
  02754	5b		 pop	 ebx
  02755	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02758	33 cd		 xor	 ecx, ebp
  0275a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0275f	8b e5		 mov	 esp, ebp
  02761	5d		 pop	 ebp
  02762	c2 1c 00	 ret	 28			; 0000001cH
??0KeyHandler@@QAE@PAVMouseHandler@@HHPAD111@Z ENDP	; KeyHandler::KeyHandler
_TEXT	ENDS
PUBLIC	??_GMouseHandler@@QAEPAXI@Z			; MouseHandler::`scalar deleting destructor'
PUBLIC	??1KeyHandler@@QAE@XZ				; KeyHandler::~KeyHandler
; Function compile flags: /Odtp /ZI
;	COMDAT ??1KeyHandler@@QAE@XZ
_TEXT	SEGMENT
tv69 = -80						; size = 4
$T94268 = -76						; size = 4
$T94269 = -72						; size = 4
_this$ = -4						; size = 4
??1KeyHandler@@QAE@XZ PROC				; KeyHandler::~KeyHandler, COMDAT
; _this$ = ecx

; 677  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 678  : 	delete this->CurrentMouse;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 28 13 00
	00		 mov	 ecx, DWORD PTR [eax+4904]
  00015	89 4d b8	 mov	 DWORD PTR $T94269[ebp], ecx
  00018	8b 55 b8	 mov	 edx, DWORD PTR $T94269[ebp]
  0001b	89 55 b4	 mov	 DWORD PTR $T94268[ebp], edx
  0001e	83 7d b4 00	 cmp	 DWORD PTR $T94268[ebp], 0
  00022	74 0f		 je	 SHORT $LN3@KeyHandler@4
  00024	6a 01		 push	 1
  00026	8b 4d b4	 mov	 ecx, DWORD PTR $T94268[ebp]
  00029	e8 00 00 00 00	 call	 ??_GMouseHandler@@QAEPAXI@Z
  0002e	89 45 b0	 mov	 DWORD PTR tv69[ebp], eax
  00031	eb 07		 jmp	 SHORT $LN1@KeyHandler@4
$LN3@KeyHandler@4:
  00033	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN1@KeyHandler@4:

; 679  : 
; 680  : 	return;
; 681  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??1KeyHandler@@QAE@XZ ENDP				; KeyHandler::~KeyHandler
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_GMouseHandler@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMouseHandler@@QAEPAXI@Z PROC			; MouseHandler::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??1MouseHandler@@QAE@XZ	; MouseHandler::~MouseHandler
  00014	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00017	83 e0 01	 and	 eax, 1
  0001a	74 0c		 je	 SHORT $LN1@scalar@2
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
$LN1@scalar@2:
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_GMouseHandler@@QAEPAXI@Z ENDP			; MouseHandler::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?CompareStrings@KeyHandler@@AAE_NPAD0@Z		; KeyHandler::CompareStrings
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?CompareStrings@KeyHandler@@AAE_NPAD0@Z
_TEXT	SEGMENT
_i$91318 = -8						; size = 4
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?CompareStrings@KeyHandler@@AAE_NPAD0@Z PROC		; KeyHandler::CompareStrings, COMDAT
; _this$ = ecx

; 683  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 684  : 	if(strlen(a)!=strlen(b))

  0000c	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 _strlen
  00015	83 c4 04	 add	 esp, 4
  00018	8b f0		 mov	 esi, eax
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _strlen
  00023	83 c4 04	 add	 esp, 4
  00026	3b f0		 cmp	 esi, eax
  00028	74 04		 je	 SHORT $LN5@CompareStr

; 685  : 		return false;

  0002a	32 c0		 xor	 al, al
  0002c	eb 44		 jmp	 SHORT $LN6@CompareStr
$LN5@CompareStr:

; 686  : 
; 687  : 	for(int i=0;a[i]==b[i];i++)

  0002e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$91318[ebp], 0
  00035	eb 09		 jmp	 SHORT $LN4@CompareStr
$LN3@CompareStr:
  00037	8b 45 f8	 mov	 eax, DWORD PTR _i$91318[ebp]
  0003a	83 c0 01	 add	 eax, 1
  0003d	89 45 f8	 mov	 DWORD PTR _i$91318[ebp], eax
$LN4@CompareStr:
  00040	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00043	03 45 f8	 add	 eax, DWORD PTR _i$91318[ebp]
  00046	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00049	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  0004c	03 55 f8	 add	 edx, DWORD PTR _i$91318[ebp]
  0004f	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00052	3b c8		 cmp	 ecx, eax
  00054	75 1a		 jne	 SHORT $LN2@CompareStr

; 688  : 		if(i==strlen(a)-1)

  00056	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _strlen
  0005f	83 c4 04	 add	 esp, 4
  00062	83 e8 01	 sub	 eax, 1
  00065	39 45 f8	 cmp	 DWORD PTR _i$91318[ebp], eax
  00068	75 04		 jne	 SHORT $LN1@CompareStr

; 689  : 			return true;

  0006a	b0 01		 mov	 al, 1
  0006c	eb 04		 jmp	 SHORT $LN6@CompareStr
$LN1@CompareStr:

; 690  : 
; 691  : 	return false;

  0006e	eb c7		 jmp	 SHORT $LN3@CompareStr
$LN2@CompareStr:
  00070	32 c0		 xor	 al, al
$LN6@CompareStr:

; 692  : }

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
?CompareStrings@KeyHandler@@AAE_NPAD0@Z ENDP		; KeyHandler::CompareStrings
_TEXT	ENDS
PUBLIC	?IsBound@KeyHandler@@QAE_NXZ			; KeyHandler::IsBound
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsBound@KeyHandler@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBound@KeyHandler@@QAE_NXZ PROC			; KeyHandler::IsBound, COMDAT
; _this$ = ecx

; 694  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 695  : 	return this->Bound;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 00		 mov	 al, BYTE PTR [eax]

; 696  : }

  00011	5f		 pop	 edi
  00012	5e		 pop	 esi
  00013	5b		 pop	 ebx
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?IsBound@KeyHandler@@QAE_NXZ ENDP			; KeyHandler::IsBound
_TEXT	ENDS
PUBLIC	?IsHeld@KeyHandler@@QAE_NPAD@Z			; KeyHandler::IsHeld
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsHeld@KeyHandler@@QAE_NPAD@Z
_TEXT	SEGMENT
tv94 = -76						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IsHeld@KeyHandler@@QAE_NPAD@Z PROC			; KeyHandler::IsHeld, COMDAT
; _this$ = ecx

; 698  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 699  : 	int i=CharToInt(Key);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CharToInt@KeyHandler@@QAEHPAD@Z ; KeyHandler::CharToInt
  00018	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax

; 700  : 
; 701  : 	if(i>=1&&i<=256)

  0001b	83 7d f8 01	 cmp	 DWORD PTR _i$[ebp], 1
  0001f	7c 71		 jl	 SHORT $LN2@IsHeld
  00021	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00028	7f 68		 jg	 SHORT $LN2@IsHeld

; 702  : 		return this->KeyState1[i-1]&&this->KeyState2[i-1]&&this->KeyState3[i-1]&&this->KeyState4[i-1]&&this->KeyState5[i-1];

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  00030	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00033	85 c9		 test	 ecx, ecx
  00035	74 4d		 je	 SHORT $LN5@IsHeld
  00037	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	03 55 f8	 add	 edx, DWORD PTR _i$[ebp]
  0003d	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR [edx+256]
  00044	85 c0		 test	 eax, eax
  00046	74 3c		 je	 SHORT $LN5@IsHeld
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  0004e	0f b6 91 00 02
	00 00		 movzx	 edx, BYTE PTR [ecx+512]
  00055	85 d2		 test	 edx, edx
  00057	74 2b		 je	 SHORT $LN5@IsHeld
  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  0005f	0f b6 88 00 03
	00 00		 movzx	 ecx, BYTE PTR [eax+768]
  00066	85 c9		 test	 ecx, ecx
  00068	74 1a		 je	 SHORT $LN5@IsHeld
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	03 55 f8	 add	 edx, DWORD PTR _i$[ebp]
  00070	0f b6 82 00 04
	00 00		 movzx	 eax, BYTE PTR [edx+1024]
  00077	85 c0		 test	 eax, eax
  00079	74 09		 je	 SHORT $LN5@IsHeld
  0007b	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv94[ebp], 1
  00082	eb 07		 jmp	 SHORT $LN6@IsHeld
$LN5@IsHeld:
  00084	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
$LN6@IsHeld:
  0008b	8a 45 b4	 mov	 al, BYTE PTR tv94[ebp]
  0008e	eb 04		 jmp	 SHORT $LN3@IsHeld

; 703  : 	else

  00090	eb 02		 jmp	 SHORT $LN3@IsHeld
$LN2@IsHeld:

; 704  : 		return false;

  00092	32 c0		 xor	 al, al
$LN3@IsHeld:

; 705  : }

  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
?IsHeld@KeyHandler@@QAE_NPAD@Z ENDP			; KeyHandler::IsHeld
_TEXT	ENDS
PUBLIC	?IsHeld@KeyHandler@@QAE_NH@Z			; KeyHandler::IsHeld
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsHeld@KeyHandler@@QAE_NH@Z
_TEXT	SEGMENT
tv86 = -72						; size = 4
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IsHeld@KeyHandler@@QAE_NH@Z PROC			; KeyHandler::IsHeld, COMDAT
; _this$ = ecx

; 707  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 708  : 	if(Key>=0&&Key<256)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _Key$[ebp], 0
  00010	7c 72		 jl	 SHORT $LN2@IsHeld@2
  00012	81 7d 08 00 01
	00 00		 cmp	 DWORD PTR _Key$[ebp], 256 ; 00000100H
  00019	7d 69		 jge	 SHORT $LN2@IsHeld@2

; 709  : 		return this->KeyState1[Key]&&this->KeyState2[Key]&&this->KeyState3[Key]&&this->KeyState4[Key]&&this->KeyState5[Key];

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	03 45 08	 add	 eax, DWORD PTR _Key$[ebp]
  00021	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00025	85 c9		 test	 ecx, ecx
  00027	74 4d		 je	 SHORT $LN5@IsHeld@2
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	03 55 08	 add	 edx, DWORD PTR _Key$[ebp]
  0002f	0f b6 82 01 01
	00 00		 movzx	 eax, BYTE PTR [edx+257]
  00036	85 c0		 test	 eax, eax
  00038	74 3c		 je	 SHORT $LN5@IsHeld@2
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	03 4d 08	 add	 ecx, DWORD PTR _Key$[ebp]
  00040	0f b6 91 01 02
	00 00		 movzx	 edx, BYTE PTR [ecx+513]
  00047	85 d2		 test	 edx, edx
  00049	74 2b		 je	 SHORT $LN5@IsHeld@2
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	03 45 08	 add	 eax, DWORD PTR _Key$[ebp]
  00051	0f b6 88 01 03
	00 00		 movzx	 ecx, BYTE PTR [eax+769]
  00058	85 c9		 test	 ecx, ecx
  0005a	74 1a		 je	 SHORT $LN5@IsHeld@2
  0005c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005f	03 55 08	 add	 edx, DWORD PTR _Key$[ebp]
  00062	0f b6 82 01 04
	00 00		 movzx	 eax, BYTE PTR [edx+1025]
  00069	85 c0		 test	 eax, eax
  0006b	74 09		 je	 SHORT $LN5@IsHeld@2
  0006d	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv86[ebp], 1
  00074	eb 07		 jmp	 SHORT $LN6@IsHeld@2
$LN5@IsHeld@2:
  00076	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN6@IsHeld@2:
  0007d	8a 45 b8	 mov	 al, BYTE PTR tv86[ebp]
  00080	eb 04		 jmp	 SHORT $LN3@IsHeld@2

; 710  : 	else

  00082	eb 02		 jmp	 SHORT $LN3@IsHeld@2
$LN2@IsHeld@2:

; 711  : 		return false;

  00084	32 c0		 xor	 al, al
$LN3@IsHeld@2:

; 712  : }

  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?IsHeld@KeyHandler@@QAE_NH@Z ENDP			; KeyHandler::IsHeld
_TEXT	ENDS
PUBLIC	?IsMashed@KeyHandler@@QAE_NPAD@Z		; KeyHandler::IsMashed
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsMashed@KeyHandler@@QAE_NPAD@Z
_TEXT	SEGMENT
tv94 = -76						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IsMashed@KeyHandler@@QAE_NPAD@Z PROC			; KeyHandler::IsMashed, COMDAT
; _this$ = ecx

; 714  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 715  : 	int i=CharToInt(Key);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CharToInt@KeyHandler@@QAEHPAD@Z ; KeyHandler::CharToInt
  00018	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax

; 716  : 
; 717  : 	if(i>=1&&i<=256)

  0001b	83 7d f8 01	 cmp	 DWORD PTR _i$[ebp], 1
  0001f	7c 6f		 jl	 SHORT $LN2@IsMashed
  00021	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00028	7f 66		 jg	 SHORT $LN2@IsMashed

; 718  : 		if(this->KeyState1[i-1])

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  00030	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00033	85 c9		 test	 ecx, ecx
  00035	74 59		 je	 SHORT $LN2@IsMashed

; 719  : 			return !this->KeyState2[i-1]&&(this->KeyState3[i-1]||this->KeyState4[i-1]||this->KeyState5[i-1]);

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  0003d	0f b6 88 00 01
	00 00		 movzx	 ecx, BYTE PTR [eax+256]
  00044	85 c9		 test	 ecx, ecx
  00046	75 3c		 jne	 SHORT $LN6@IsMashed
  00048	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004b	03 55 f8	 add	 edx, DWORD PTR _i$[ebp]
  0004e	0f b6 82 00 02
	00 00		 movzx	 eax, BYTE PTR [edx+512]
  00055	85 c0		 test	 eax, eax
  00057	75 22		 jne	 SHORT $LN5@IsMashed
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  0005f	0f b6 91 00 03
	00 00		 movzx	 edx, BYTE PTR [ecx+768]
  00066	85 d2		 test	 edx, edx
  00068	75 11		 jne	 SHORT $LN5@IsMashed
  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  00070	0f b6 88 00 04
	00 00		 movzx	 ecx, BYTE PTR [eax+1024]
  00077	85 c9		 test	 ecx, ecx
  00079	74 09		 je	 SHORT $LN6@IsMashed
$LN5@IsMashed:
  0007b	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv94[ebp], 1
  00082	eb 07		 jmp	 SHORT $LN7@IsMashed
$LN6@IsMashed:
  00084	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv94[ebp], 0
$LN7@IsMashed:
  0008b	8a 45 b4	 mov	 al, BYTE PTR tv94[ebp]
  0008e	eb 02		 jmp	 SHORT $LN3@IsMashed
$LN2@IsMashed:

; 720  : 	
; 721  : 	return false;

  00090	32 c0		 xor	 al, al
$LN3@IsMashed:

; 722  : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
?IsMashed@KeyHandler@@QAE_NPAD@Z ENDP			; KeyHandler::IsMashed
_TEXT	ENDS
PUBLIC	?IsMashed@KeyHandler@@QAE_NH@Z			; KeyHandler::IsMashed
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsMashed@KeyHandler@@QAE_NH@Z
_TEXT	SEGMENT
tv86 = -72						; size = 4
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IsMashed@KeyHandler@@QAE_NH@Z PROC			; KeyHandler::IsMashed, COMDAT
; _this$ = ecx

; 724  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 725  : 	if(Key>=0&&Key<256)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _Key$[ebp], 0
  00010	7c 70		 jl	 SHORT $LN2@IsMashed@2
  00012	81 7d 08 00 01
	00 00		 cmp	 DWORD PTR _Key$[ebp], 256 ; 00000100H
  00019	7d 67		 jge	 SHORT $LN2@IsMashed@2

; 726  : 		if(this->KeyState1[Key])

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	03 45 08	 add	 eax, DWORD PTR _Key$[ebp]
  00021	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00025	85 c9		 test	 ecx, ecx
  00027	74 59		 je	 SHORT $LN2@IsMashed@2

; 727  : 			return !this->KeyState2[Key]&&(this->KeyState3[Key]||this->KeyState4[Key]||this->KeyState5[Key]);

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	03 45 08	 add	 eax, DWORD PTR _Key$[ebp]
  0002f	0f b6 88 01 01
	00 00		 movzx	 ecx, BYTE PTR [eax+257]
  00036	85 c9		 test	 ecx, ecx
  00038	75 3c		 jne	 SHORT $LN6@IsMashed@2
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	03 55 08	 add	 edx, DWORD PTR _Key$[ebp]
  00040	0f b6 82 01 02
	00 00		 movzx	 eax, BYTE PTR [edx+513]
  00047	85 c0		 test	 eax, eax
  00049	75 22		 jne	 SHORT $LN5@IsMashed@2
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	03 4d 08	 add	 ecx, DWORD PTR _Key$[ebp]
  00051	0f b6 91 01 03
	00 00		 movzx	 edx, BYTE PTR [ecx+769]
  00058	85 d2		 test	 edx, edx
  0005a	75 11		 jne	 SHORT $LN5@IsMashed@2
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	03 45 08	 add	 eax, DWORD PTR _Key$[ebp]
  00062	0f b6 88 01 04
	00 00		 movzx	 ecx, BYTE PTR [eax+1025]
  00069	85 c9		 test	 ecx, ecx
  0006b	74 09		 je	 SHORT $LN6@IsMashed@2
$LN5@IsMashed@2:
  0006d	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv86[ebp], 1
  00074	eb 07		 jmp	 SHORT $LN7@IsMashed@2
$LN6@IsMashed@2:
  00076	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN7@IsMashed@2:
  0007d	8a 45 b8	 mov	 al, BYTE PTR tv86[ebp]
  00080	eb 02		 jmp	 SHORT $LN3@IsMashed@2
$LN2@IsMashed@2:

; 728  : 	
; 729  : 	return false;

  00082	32 c0		 xor	 al, al
$LN3@IsMashed@2:

; 730  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
?IsMashed@KeyHandler@@QAE_NH@Z ENDP			; KeyHandler::IsMashed
_TEXT	ENDS
PUBLIC	?IsPressed@KeyHandler@@QAE_NH@Z			; KeyHandler::IsPressed
PUBLIC	?IsPressed@KeyHandler@@QAE_NPAD@Z		; KeyHandler::IsPressed
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsPressed@KeyHandler@@QAE_NPAD@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IsPressed@KeyHandler@@QAE_NPAD@Z PROC			; KeyHandler::IsPressed, COMDAT
; _this$ = ecx

; 732  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 733  : 	int i=CharToInt(Key);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CharToInt@KeyHandler@@QAEHPAD@Z ; KeyHandler::CharToInt
  00018	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax

; 734  : 
; 735  : 	if(i>=1&&i<=256)

  0001b	83 7d f8 01	 cmp	 DWORD PTR _i$[ebp], 1
  0001f	7c 1c		 jl	 SHORT $LN2@IsPressed
  00021	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00028	7f 13		 jg	 SHORT $LN2@IsPressed

; 736  : 		return this->IsPressed(i-1);

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0002d	83 e8 01	 sub	 eax, 1
  00030	50		 push	 eax
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?IsPressed@KeyHandler@@QAE_NH@Z ; KeyHandler::IsPressed
  00039	eb 04		 jmp	 SHORT $LN3@IsPressed

; 737  : 	else

  0003b	eb 02		 jmp	 SHORT $LN3@IsPressed
$LN2@IsPressed:

; 738  : 		return false;

  0003d	32 c0		 xor	 al, al
$LN3@IsPressed:

; 739  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?IsPressed@KeyHandler@@QAE_NPAD@Z ENDP			; KeyHandler::IsPressed
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsPressed@KeyHandler@@QAE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IsPressed@KeyHandler@@QAE_NH@Z PROC			; KeyHandler::IsPressed, COMDAT
; _this$ = ecx

; 741  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 742  : 	if(Key>=0&&Key<256)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _Key$[ebp], 0
  00010	7c 16		 jl	 SHORT $LN2@IsPressed@2
  00012	81 7d 08 00 01
	00 00		 cmp	 DWORD PTR _Key$[ebp], 256 ; 00000100H
  00019	7d 0d		 jge	 SHORT $LN2@IsPressed@2

; 743  : 		return this->KeyState1[Key];

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	03 45 08	 add	 eax, DWORD PTR _Key$[ebp]
  00021	8a 40 01	 mov	 al, BYTE PTR [eax+1]
  00024	eb 04		 jmp	 SHORT $LN3@IsPressed@2

; 744  : 	else

  00026	eb 02		 jmp	 SHORT $LN3@IsPressed@2
$LN2@IsPressed@2:

; 745  : 		return false;

  00028	32 c0		 xor	 al, al
$LN3@IsPressed@2:

; 746  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?IsPressed@KeyHandler@@QAE_NH@Z ENDP			; KeyHandler::IsPressed
_TEXT	ENDS
PUBLIC	?IntToChar@KeyHandler@@QAEPADH@Z		; KeyHandler::IntToChar
PUBLIC	?GetFirstKey$@KeyHandler@@QAEPADXZ		; KeyHandler::GetFirstKey$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetFirstKey$@KeyHandler@@QAEPADXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?GetFirstKey$@KeyHandler@@QAEPADXZ PROC			; KeyHandler::GetFirstKey$, COMDAT
; _this$ = ecx

; 748  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 749  : 	int i;
; 750  : 
; 751  : 	for(i=0;!this->KeyState1[i]&&i<256;i++);

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN5@GetFirstKe
$LN4@GetFirstKe:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN5@GetFirstKe:
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  00024	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00028	85 c9		 test	 ecx, ecx
  0002a	75 0b		 jne	 SHORT $LN3@GetFirstKe
  0002c	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00033	7d 02		 jge	 SHORT $LN3@GetFirstKe
  00035	eb de		 jmp	 SHORT $LN4@GetFirstKe
$LN3@GetFirstKe:

; 752  : 
; 753  : 	if(i==256)

  00037	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0003e	75 0e		 jne	 SHORT $LN2@GetFirstKe

; 754  : 		return this->IntToChar(0);

  00040	6a 00		 push	 0
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?IntToChar@KeyHandler@@QAEPADH@Z ; KeyHandler::IntToChar
  0004a	eb 11		 jmp	 SHORT $LN6@GetFirstKe

; 755  : 	else

  0004c	eb 0f		 jmp	 SHORT $LN6@GetFirstKe
$LN2@GetFirstKe:

; 756  : 		return this->IntToChar(i+1);

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00051	83 c0 01	 add	 eax, 1
  00054	50		 push	 eax
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?IntToChar@KeyHandler@@QAEPADH@Z ; KeyHandler::IntToChar
$LN6@GetFirstKe:

; 757  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?GetFirstKey$@KeyHandler@@QAEPADXZ ENDP			; KeyHandler::GetFirstKey$
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IntToChar@KeyHandler@@QAEPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IntToChar@KeyHandler@@QAEPADH@Z PROC			; KeyHandler::IntToChar, COMDAT
; _this$ = ecx

; 759  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 760  : 	if(Key<0||Key>256)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _Key$[ebp], 0
  00010	7c 09		 jl	 SHORT $LN1@IntToChar
  00012	81 7d 08 00 01
	00 00		 cmp	 DWORD PTR _Key$[ebp], 256 ; 00000100H
  00019	7e 07		 jle	 SHORT $LN2@IntToChar
$LN1@IntToChar:

; 761  : 		return "";

  0001b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00020	eb 10		 jmp	 SHORT $LN3@IntToChar
$LN2@IntToChar:

; 762  : 
; 763  : 	return this->Keys[Key];

  00022	8b 45 08	 mov	 eax, DWORD PTR _Key$[ebp]
  00025	6b c0 0e	 imul	 eax, 14			; 0000000eH
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8d 84 01 01 05
	00 00		 lea	 eax, DWORD PTR [ecx+eax+1281]
$LN3@IntToChar:

; 764  : }

  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?IntToChar@KeyHandler@@QAEPADH@Z ENDP			; KeyHandler::IntToChar
_TEXT	ENDS
PUBLIC	?MouseBindDown$@KeyHandler@@QAEPADXZ		; KeyHandler::MouseBindDown$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindDown$@KeyHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindDown$@KeyHandler@@QAEPADXZ PROC		; KeyHandler::MouseBindDown$, COMDAT
; _this$ = ecx

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 767  : 	return this->IntToChar(this->MouseDown+1);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 10 13 00
	00		 mov	 ecx, DWORD PTR [eax+4880]
  00015	83 c1 01	 add	 ecx, 1
  00018	51		 push	 ecx
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?IntToChar@KeyHandler@@QAEPADH@Z ; KeyHandler::IntToChar

; 768  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?MouseBindDown$@KeyHandler@@QAEPADXZ ENDP		; KeyHandler::MouseBindDown$
_TEXT	ENDS
PUBLIC	?MouseBindLeft$@KeyHandler@@QAEPADXZ		; KeyHandler::MouseBindLeft$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindLeft$@KeyHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindLeft$@KeyHandler@@QAEPADXZ PROC		; KeyHandler::MouseBindLeft$, COMDAT
; _this$ = ecx

; 770  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 771  : 	return this->IntToChar(this->MouseLeft+1);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 14 13 00
	00		 mov	 ecx, DWORD PTR [eax+4884]
  00015	83 c1 01	 add	 ecx, 1
  00018	51		 push	 ecx
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?IntToChar@KeyHandler@@QAEPADH@Z ; KeyHandler::IntToChar

; 772  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?MouseBindLeft$@KeyHandler@@QAEPADXZ ENDP		; KeyHandler::MouseBindLeft$
_TEXT	ENDS
PUBLIC	?MouseBindRight$@KeyHandler@@QAEPADXZ		; KeyHandler::MouseBindRight$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindRight$@KeyHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindRight$@KeyHandler@@QAEPADXZ PROC		; KeyHandler::MouseBindRight$, COMDAT
; _this$ = ecx

; 774  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 775  : 	return this->IntToChar(this->MouseRight+1);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 18 13 00
	00		 mov	 ecx, DWORD PTR [eax+4888]
  00015	83 c1 01	 add	 ecx, 1
  00018	51		 push	 ecx
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?IntToChar@KeyHandler@@QAEPADH@Z ; KeyHandler::IntToChar

; 776  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?MouseBindRight$@KeyHandler@@QAEPADXZ ENDP		; KeyHandler::MouseBindRight$
_TEXT	ENDS
PUBLIC	?MouseBindUp$@KeyHandler@@QAEPADXZ		; KeyHandler::MouseBindUp$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindUp$@KeyHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindUp$@KeyHandler@@QAEPADXZ PROC			; KeyHandler::MouseBindUp$, COMDAT
; _this$ = ecx

; 778  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 779  : 	return this->IntToChar(this->MouseUp+1);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 24 13 00
	00		 mov	 ecx, DWORD PTR [eax+4900]
  00015	83 c1 01	 add	 ecx, 1
  00018	51		 push	 ecx
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?IntToChar@KeyHandler@@QAEPADH@Z ; KeyHandler::IntToChar

; 780  : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?MouseBindUp$@KeyHandler@@QAEPADXZ ENDP			; KeyHandler::MouseBindUp$
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?CharToInt@KeyHandler@@QAEHPAD@Z
_TEXT	SEGMENT
_i$91396 = -8						; size = 4
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?CharToInt@KeyHandler@@QAEHPAD@Z PROC			; KeyHandler::CharToInt, COMDAT
; _this$ = ecx

; 782  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 783  : 	for(int i=1;i<257;i++)

  0000c	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$91396[ebp], 1
  00013	eb 09		 jmp	 SHORT $LN4@CharToInt
$LN3@CharToInt:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$91396[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$91396[ebp], eax
$LN4@CharToInt:
  0001e	81 7d f8 01 01
	00 00		 cmp	 DWORD PTR _i$91396[ebp], 257 ; 00000101H
  00025	7d 2b		 jge	 SHORT $LN2@CharToInt

; 784  : 		if(this->CompareStrings(Key,Keys[i]))

  00027	8b 45 f8	 mov	 eax, DWORD PTR _i$91396[ebp]
  0002a	6b c0 0e	 imul	 eax, 14			; 0000000eH
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8d 94 01 01 05
	00 00		 lea	 edx, DWORD PTR [ecx+eax+1281]
  00037	52		 push	 edx
  00038	8b 45 08	 mov	 eax, DWORD PTR _Key$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?CompareStrings@KeyHandler@@AAE_NPAD0@Z ; KeyHandler::CompareStrings
  00044	0f b6 c8	 movzx	 ecx, al
  00047	85 c9		 test	 ecx, ecx
  00049	74 05		 je	 SHORT $LN1@CharToInt

; 785  : 			return i;

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _i$91396[ebp]
  0004e	eb 04		 jmp	 SHORT $LN5@CharToInt
$LN1@CharToInt:

; 786  : 
; 787  : 	return 0;

  00050	eb c3		 jmp	 SHORT $LN3@CharToInt
$LN2@CharToInt:
  00052	33 c0		 xor	 eax, eax
$LN5@CharToInt:

; 788  : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?CharToInt@KeyHandler@@QAEHPAD@Z ENDP			; KeyHandler::CharToInt
_TEXT	ENDS
PUBLIC	?GetFirstKey@KeyHandler@@QAEHXZ			; KeyHandler::GetFirstKey
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetFirstKey@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?GetFirstKey@KeyHandler@@QAEHXZ PROC			; KeyHandler::GetFirstKey, COMDAT
; _this$ = ecx

; 790  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 791  : 	int i;
; 792  : 
; 793  : 	for(i=0;!this->KeyState1[i]&&i<256;i++);

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN5@GetFirstKe@2
$LN4@GetFirstKe@2:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN5@GetFirstKe@2:
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  00024	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00028	85 c9		 test	 ecx, ecx
  0002a	75 0b		 jne	 SHORT $LN3@GetFirstKe@2
  0002c	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00033	7d 02		 jge	 SHORT $LN3@GetFirstKe@2
  00035	eb de		 jmp	 SHORT $LN4@GetFirstKe@2
$LN3@GetFirstKe@2:

; 794  : 
; 795  : 	if(i==256)

  00037	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0003e	75 07		 jne	 SHORT $LN2@GetFirstKe@2

; 796  : 		return -1;

  00040	83 c8 ff	 or	 eax, -1
  00043	eb 05		 jmp	 SHORT $LN6@GetFirstKe@2

; 797  : 	else

  00045	eb 03		 jmp	 SHORT $LN6@GetFirstKe@2
$LN2@GetFirstKe@2:

; 798  : 		return i;

  00047	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
$LN6@GetFirstKe@2:

; 799  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetFirstKey@KeyHandler@@QAEHXZ ENDP			; KeyHandler::GetFirstKey
_TEXT	ENDS
PUBLIC	?GetMouseSpeedX@KeyHandler@@QAEHXZ		; KeyHandler::GetMouseSpeedX
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMouseSpeedX@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseSpeedX@KeyHandler@@QAEHXZ PROC			; KeyHandler::GetMouseSpeedX, COMDAT
; _this$ = ecx

; 801  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  : 	return this->MouseSyncX;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 1c 13 00
	00		 mov	 eax, DWORD PTR [eax+4892]

; 803  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetMouseSpeedX@KeyHandler@@QAEHXZ ENDP			; KeyHandler::GetMouseSpeedX
_TEXT	ENDS
PUBLIC	?GetMouseSpeedY@KeyHandler@@QAEHXZ		; KeyHandler::GetMouseSpeedY
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMouseSpeedY@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseSpeedY@KeyHandler@@QAEHXZ PROC			; KeyHandler::GetMouseSpeedY, COMDAT
; _this$ = ecx

; 805  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 806  : 	return this->MouseSyncY;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 20 13 00
	00		 mov	 eax, DWORD PTR [eax+4896]

; 807  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetMouseSpeedY@KeyHandler@@QAEHXZ ENDP			; KeyHandler::GetMouseSpeedY
_TEXT	ENDS
PUBLIC	?KeyBound@KeyHandler@@AAEHH@Z			; KeyHandler::KeyBound
; Function compile flags: /Odtp /ZI
;	COMDAT ?KeyBound@KeyHandler@@AAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Binding$ = 8						; size = 4
?KeyBound@KeyHandler@@AAEHH@Z PROC			; KeyHandler::KeyBound, COMDAT
; _this$ = ecx

; 809  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 810  : 	if(this->IsPressed(Binding))

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Binding$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?IsPressed@KeyHandler@@QAE_NH@Z ; KeyHandler::IsPressed
  00018	0f b6 c8	 movzx	 ecx, al
  0001b	85 c9		 test	 ecx, ecx
  0001d	74 09		 je	 SHORT $LN2@KeyBound

; 811  : 		return 1;

  0001f	b8 01 00 00 00	 mov	 eax, 1
  00024	eb 04		 jmp	 SHORT $LN3@KeyBound

; 812  : 	else

  00026	eb 02		 jmp	 SHORT $LN3@KeyBound
$LN2@KeyBound:

; 813  : 		return 0;

  00028	33 c0		 xor	 eax, eax
$LN3@KeyBound:

; 814  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?KeyBound@KeyHandler@@AAEHH@Z ENDP			; KeyHandler::KeyBound
_TEXT	ENDS
PUBLIC	?MouseBindDown@KeyHandler@@QAEHXZ		; KeyHandler::MouseBindDown
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindDown@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindDown@KeyHandler@@QAEHXZ PROC			; KeyHandler::MouseBindDown, COMDAT
; _this$ = ecx

; 816  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 817  : 	return this->MouseDown;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 10 13 00
	00		 mov	 eax, DWORD PTR [eax+4880]

; 818  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?MouseBindDown@KeyHandler@@QAEHXZ ENDP			; KeyHandler::MouseBindDown
_TEXT	ENDS
PUBLIC	?MouseBindLeft@KeyHandler@@QAEHXZ		; KeyHandler::MouseBindLeft
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindLeft@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindLeft@KeyHandler@@QAEHXZ PROC			; KeyHandler::MouseBindLeft, COMDAT
; _this$ = ecx

; 820  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 821  : 	return this->MouseLeft;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 14 13 00
	00		 mov	 eax, DWORD PTR [eax+4884]

; 822  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?MouseBindLeft@KeyHandler@@QAEHXZ ENDP			; KeyHandler::MouseBindLeft
_TEXT	ENDS
PUBLIC	?MouseBindRight@KeyHandler@@QAEHXZ		; KeyHandler::MouseBindRight
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindRight@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindRight@KeyHandler@@QAEHXZ PROC			; KeyHandler::MouseBindRight, COMDAT
; _this$ = ecx

; 824  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 825  : 	return this->MouseRight;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 18 13 00
	00		 mov	 eax, DWORD PTR [eax+4888]

; 826  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?MouseBindRight@KeyHandler@@QAEHXZ ENDP			; KeyHandler::MouseBindRight
_TEXT	ENDS
PUBLIC	?MouseBindUp@KeyHandler@@QAEHXZ			; KeyHandler::MouseBindUp
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindUp@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindUp@KeyHandler@@QAEHXZ PROC			; KeyHandler::MouseBindUp, COMDAT
; _this$ = ecx

; 828  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 829  : 	return this->MouseUp;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 24 13 00
	00		 mov	 eax, DWORD PTR [eax+4900]

; 830  : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?MouseBindUp@KeyHandler@@QAEHXZ ENDP			; KeyHandler::MouseBindUp
_TEXT	ENDS
PUBLIC	?BindMouse@KeyHandler@@QAEX_N@Z			; KeyHandler::BindMouse
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouse@KeyHandler@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Bind$ = 8						; size = 1
?BindMouse@KeyHandler@@QAEX_N@Z PROC			; KeyHandler::BindMouse, COMDAT
; _this$ = ecx

; 832  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 833  : 	this->Bound=Bind;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 4d 08	 mov	 cl, BYTE PTR _Bind$[ebp]
  00012	88 08		 mov	 BYTE PTR [eax], cl

; 834  : 	
; 835  : 	return;
; 836  : }

  00014	5f		 pop	 edi
  00015	5e		 pop	 esi
  00016	5b		 pop	 ebx
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?BindMouse@KeyHandler@@QAEX_N@Z ENDP			; KeyHandler::BindMouse
_TEXT	ENDS
PUBLIC	?BindMouseXLeft@KeyHandler@@QAEXPAD@Z		; KeyHandler::BindMouseXLeft
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXLeft@KeyHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_Key$ = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?BindMouseXLeft@KeyHandler@@QAEXPAD@Z PROC		; KeyHandler::BindMouseXLeft, COMDAT
; _this$ = ecx

; 838  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 839  : 	int Key=this->CharToInt(i)-1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CharToInt@KeyHandler@@QAEHPAD@Z ; KeyHandler::CharToInt
  00018	83 e8 01	 sub	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _Key$[ebp], eax

; 840  : 
; 841  : 	if(Key<0||Key>=256)

  0001e	78 09		 js	 SHORT $LN1@BindMouseX
  00020	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _Key$[ebp], 256 ; 00000100H
  00027	7c 02		 jl	 SHORT $LN2@BindMouseX
$LN1@BindMouseX:

; 842  : 		return;

  00029	eb 0c		 jmp	 SHORT $LN3@BindMouseX
$LN2@BindMouseX:

; 843  : 
; 844  : 	this->MouseLeft=Key;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _Key$[ebp]
  00031	89 88 14 13 00
	00		 mov	 DWORD PTR [eax+4884], ecx
$LN3@BindMouseX:

; 845  : 
; 846  : 	return;
; 847  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?BindMouseXLeft@KeyHandler@@QAEXPAD@Z ENDP		; KeyHandler::BindMouseXLeft
_TEXT	ENDS
PUBLIC	?BindMouseXLeft@KeyHandler@@QAEXH@Z		; KeyHandler::BindMouseXLeft
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXLeft@KeyHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?BindMouseXLeft@KeyHandler@@QAEXH@Z PROC		; KeyHandler::BindMouseXLeft, COMDAT
; _this$ = ecx

; 849  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 850  : 	if(Key<0||Key>=256)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _Key$[ebp], 0
  00010	7c 09		 jl	 SHORT $LN1@BindMouseX@2
  00012	81 7d 08 00 01
	00 00		 cmp	 DWORD PTR _Key$[ebp], 256 ; 00000100H
  00019	7c 02		 jl	 SHORT $LN2@BindMouseX@2
$LN1@BindMouseX@2:

; 851  : 		return;

  0001b	eb 0c		 jmp	 SHORT $LN3@BindMouseX@2
$LN2@BindMouseX@2:

; 852  : 
; 853  : 	this->MouseLeft=Key;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _Key$[ebp]
  00023	89 88 14 13 00
	00		 mov	 DWORD PTR [eax+4884], ecx
$LN3@BindMouseX@2:

; 854  : 
; 855  : 	return;
; 856  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?BindMouseXLeft@KeyHandler@@QAEXH@Z ENDP		; KeyHandler::BindMouseXLeft
_TEXT	ENDS
PUBLIC	?BindMouseXRight@KeyHandler@@QAEXPAD@Z		; KeyHandler::BindMouseXRight
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXRight@KeyHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_Key$ = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?BindMouseXRight@KeyHandler@@QAEXPAD@Z PROC		; KeyHandler::BindMouseXRight, COMDAT
; _this$ = ecx

; 858  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 859  : 	int Key=this->CharToInt(i)-1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CharToInt@KeyHandler@@QAEHPAD@Z ; KeyHandler::CharToInt
  00018	83 e8 01	 sub	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _Key$[ebp], eax

; 860  : 
; 861  : 	if(Key<0||Key>=256)

  0001e	78 09		 js	 SHORT $LN1@BindMouseX@3
  00020	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _Key$[ebp], 256 ; 00000100H
  00027	7c 02		 jl	 SHORT $LN2@BindMouseX@3
$LN1@BindMouseX@3:

; 862  : 		return;

  00029	eb 0c		 jmp	 SHORT $LN3@BindMouseX@3
$LN2@BindMouseX@3:

; 863  : 
; 864  : 	this->MouseRight=Key;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _Key$[ebp]
  00031	89 88 18 13 00
	00		 mov	 DWORD PTR [eax+4888], ecx
$LN3@BindMouseX@3:

; 865  : 
; 866  : 	return;
; 867  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?BindMouseXRight@KeyHandler@@QAEXPAD@Z ENDP		; KeyHandler::BindMouseXRight
_TEXT	ENDS
PUBLIC	?BindMouseXRight@KeyHandler@@QAEXH@Z		; KeyHandler::BindMouseXRight
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXRight@KeyHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?BindMouseXRight@KeyHandler@@QAEXH@Z PROC		; KeyHandler::BindMouseXRight, COMDAT
; _this$ = ecx

; 869  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 870  : 	if(Key<0||Key>=256)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _Key$[ebp], 0
  00010	7c 09		 jl	 SHORT $LN1@BindMouseX@4
  00012	81 7d 08 00 01
	00 00		 cmp	 DWORD PTR _Key$[ebp], 256 ; 00000100H
  00019	7c 02		 jl	 SHORT $LN2@BindMouseX@4
$LN1@BindMouseX@4:

; 871  : 		return;

  0001b	eb 0c		 jmp	 SHORT $LN3@BindMouseX@4
$LN2@BindMouseX@4:

; 872  : 
; 873  : 	this->MouseRight=Key;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _Key$[ebp]
  00023	89 88 18 13 00
	00		 mov	 DWORD PTR [eax+4888], ecx
$LN3@BindMouseX@4:

; 874  : 
; 875  : 	return;
; 876  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?BindMouseXRight@KeyHandler@@QAEXH@Z ENDP		; KeyHandler::BindMouseXRight
_TEXT	ENDS
PUBLIC	?BindMouseYDown@KeyHandler@@QAEXPAD@Z		; KeyHandler::BindMouseYDown
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYDown@KeyHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_Key$ = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?BindMouseYDown@KeyHandler@@QAEXPAD@Z PROC		; KeyHandler::BindMouseYDown, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 879  : 	int Key=this->CharToInt(i)-1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CharToInt@KeyHandler@@QAEHPAD@Z ; KeyHandler::CharToInt
  00018	83 e8 01	 sub	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _Key$[ebp], eax

; 880  : 
; 881  : 	if(Key<0||Key>=256)

  0001e	78 09		 js	 SHORT $LN1@BindMouseY
  00020	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _Key$[ebp], 256 ; 00000100H
  00027	7c 02		 jl	 SHORT $LN2@BindMouseY
$LN1@BindMouseY:

; 882  : 		return;

  00029	eb 0c		 jmp	 SHORT $LN3@BindMouseY
$LN2@BindMouseY:

; 883  : 
; 884  : 	this->MouseDown=Key;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _Key$[ebp]
  00031	89 88 10 13 00
	00		 mov	 DWORD PTR [eax+4880], ecx
$LN3@BindMouseY:

; 885  : 
; 886  : 	return;
; 887  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?BindMouseYDown@KeyHandler@@QAEXPAD@Z ENDP		; KeyHandler::BindMouseYDown
_TEXT	ENDS
PUBLIC	?BindMouseYDown@KeyHandler@@QAEXH@Z		; KeyHandler::BindMouseYDown
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYDown@KeyHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?BindMouseYDown@KeyHandler@@QAEXH@Z PROC		; KeyHandler::BindMouseYDown, COMDAT
; _this$ = ecx

; 889  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 890  : 	if(Key<0||Key>=256)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _Key$[ebp], 0
  00010	7c 09		 jl	 SHORT $LN1@BindMouseY@2
  00012	81 7d 08 00 01
	00 00		 cmp	 DWORD PTR _Key$[ebp], 256 ; 00000100H
  00019	7c 02		 jl	 SHORT $LN2@BindMouseY@2
$LN1@BindMouseY@2:

; 891  : 		return;

  0001b	eb 0c		 jmp	 SHORT $LN3@BindMouseY@2
$LN2@BindMouseY@2:

; 892  : 
; 893  : 	this->MouseDown=Key;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _Key$[ebp]
  00023	89 88 10 13 00
	00		 mov	 DWORD PTR [eax+4880], ecx
$LN3@BindMouseY@2:

; 894  : 
; 895  : 	return;
; 896  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?BindMouseYDown@KeyHandler@@QAEXH@Z ENDP		; KeyHandler::BindMouseYDown
_TEXT	ENDS
PUBLIC	?BindMouseYUp@KeyHandler@@QAEXPAD@Z		; KeyHandler::BindMouseYUp
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYUp@KeyHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_Key$ = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?BindMouseYUp@KeyHandler@@QAEXPAD@Z PROC		; KeyHandler::BindMouseYUp, COMDAT
; _this$ = ecx

; 898  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 899  : 	int Key=this->CharToInt(i)-1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CharToInt@KeyHandler@@QAEHPAD@Z ; KeyHandler::CharToInt
  00018	83 e8 01	 sub	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _Key$[ebp], eax

; 900  : 
; 901  : 	if(Key<0||Key>=256)

  0001e	78 09		 js	 SHORT $LN1@BindMouseY@3
  00020	81 7d f8 00 01
	00 00		 cmp	 DWORD PTR _Key$[ebp], 256 ; 00000100H
  00027	7c 02		 jl	 SHORT $LN2@BindMouseY@3
$LN1@BindMouseY@3:

; 902  : 		return;

  00029	eb 0c		 jmp	 SHORT $LN3@BindMouseY@3
$LN2@BindMouseY@3:

; 903  : 
; 904  : 	this->MouseUp=Key;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _Key$[ebp]
  00031	89 88 24 13 00
	00		 mov	 DWORD PTR [eax+4900], ecx
$LN3@BindMouseY@3:

; 905  : 
; 906  : 	return;
; 907  : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?BindMouseYUp@KeyHandler@@QAEXPAD@Z ENDP		; KeyHandler::BindMouseYUp
_TEXT	ENDS
PUBLIC	?BindMouseYUp@KeyHandler@@QAEXH@Z		; KeyHandler::BindMouseYUp
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYUp@KeyHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?BindMouseYUp@KeyHandler@@QAEXH@Z PROC			; KeyHandler::BindMouseYUp, COMDAT
; _this$ = ecx

; 909  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 910  : 	if(Key<0||Key>=256)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _Key$[ebp], 0
  00010	7c 09		 jl	 SHORT $LN1@BindMouseY@4
  00012	81 7d 08 00 01
	00 00		 cmp	 DWORD PTR _Key$[ebp], 256 ; 00000100H
  00019	7c 02		 jl	 SHORT $LN2@BindMouseY@4
$LN1@BindMouseY@4:

; 911  : 		return;

  0001b	eb 0c		 jmp	 SHORT $LN3@BindMouseY@4
$LN2@BindMouseY@4:

; 912  : 
; 913  : 	this->MouseUp=Key;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _Key$[ebp]
  00023	89 88 24 13 00
	00		 mov	 DWORD PTR [eax+4900], ecx
$LN3@BindMouseY@4:

; 914  : 
; 915  : 	return;
; 916  : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?BindMouseYUp@KeyHandler@@QAEXH@Z ENDP			; KeyHandler::BindMouseYUp
_TEXT	ENDS
PUBLIC	?SetMouse@KeyHandler@@QAEXPAVMouseHandler@@@Z	; KeyHandler::SetMouse
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouse@KeyHandler@@QAEXPAVMouseHandler@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Mouse$ = 8						; size = 4
?SetMouse@KeyHandler@@QAEXPAVMouseHandler@@@Z PROC	; KeyHandler::SetMouse, COMDAT
; _this$ = ecx

; 918  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 919  : 	this->CurrentMouse=Mouse;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _Mouse$[ebp]
  00012	89 88 28 13 00
	00		 mov	 DWORD PTR [eax+4904], ecx

; 920  : 
; 921  : 	if(Mouse!=NULL)

  00018	83 7d 08 00	 cmp	 DWORD PTR _Mouse$[ebp], 0
  0001c	74 08		 je	 SHORT $LN2@SetMouse

; 922  : 		this->Bound=true;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c6 00 01	 mov	 BYTE PTR [eax], 1

; 923  : 	else

  00024	eb 06		 jmp	 SHORT $LN3@SetMouse
$LN2@SetMouse:

; 924  : 		this->Bound=false;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN3@SetMouse:

; 925  : 
; 926  : 	return;
; 927  : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?SetMouse@KeyHandler@@QAEXPAVMouseHandler@@@Z ENDP	; KeyHandler::SetMouse
_TEXT	ENDS
PUBLIC	?SetMouseSpeedX@KeyHandler@@QAEXH@Z		; KeyHandler::SetMouseSpeedX
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouseSpeedX@KeyHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
?SetMouseSpeedX@KeyHandler@@QAEXH@Z PROC		; KeyHandler::SetMouseSpeedX, COMDAT
; _this$ = ecx

; 929  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 930  : 	if(X<0)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _X$[ebp], 0
  00010	7d 02		 jge	 SHORT $LN1@SetMouseSp

; 931  : 		return;

  00012	eb 0c		 jmp	 SHORT $LN2@SetMouseSp
$LN1@SetMouseSp:

; 932  : 
; 933  : 	this->MouseSyncX=X;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _X$[ebp]
  0001a	89 88 1c 13 00
	00		 mov	 DWORD PTR [eax+4892], ecx
$LN2@SetMouseSp:

; 934  : 
; 935  : 	return;
; 936  : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?SetMouseSpeedX@KeyHandler@@QAEXH@Z ENDP		; KeyHandler::SetMouseSpeedX
_TEXT	ENDS
PUBLIC	?SetMouseSpeedY@KeyHandler@@QAEXH@Z		; KeyHandler::SetMouseSpeedY
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouseSpeedY@KeyHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Y$ = 8							; size = 4
?SetMouseSpeedY@KeyHandler@@QAEXH@Z PROC		; KeyHandler::SetMouseSpeedY, COMDAT
; _this$ = ecx

; 938  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 939  : 	if(Y<0)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _Y$[ebp], 0
  00010	7d 02		 jge	 SHORT $LN1@SetMouseSp@2

; 940  : 		return;

  00012	eb 0c		 jmp	 SHORT $LN2@SetMouseSp@2
$LN1@SetMouseSp@2:

; 941  : 
; 942  : 	this->MouseSyncY=Y;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _Y$[ebp]
  0001a	89 88 20 13 00
	00		 mov	 DWORD PTR [eax+4896], ecx
$LN2@SetMouseSp@2:

; 943  : 
; 944  : 	return;
; 945  : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?SetMouseSpeedY@KeyHandler@@QAEXH@Z ENDP		; KeyHandler::SetMouseSpeedY
_TEXT	ENDS
PUBLIC	?Update@KeyHandler@@QAEXXZ			; KeyHandler::Update
EXTRN	?dbKeyState@@YAHH@Z:PROC			; dbKeyState
; Function compile flags: /Odtp /ZI
;	COMDAT ?Update@KeyHandler@@QAEXXZ
_TEXT	SEGMENT
_i$91513 = -12						; size = 4
_i$91509 = -8						; size = 4
_this$ = -4						; size = 4
?Update@KeyHandler@@QAEXXZ PROC				; KeyHandler::Update, COMDAT
; _this$ = ecx

; 947  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 948  : 	for(int i=255;i>=0;i--)

  0000c	c7 45 f8 ff 00
	00 00		 mov	 DWORD PTR _i$91509[ebp], 255 ; 000000ffH
  00013	eb 09		 jmp	 SHORT $LN9@Update@2
$LN8@Update@2:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$91509[ebp]
  00018	83 e8 01	 sub	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$91509[ebp], eax
$LN9@Update@2:
  0001e	83 7d f8 00	 cmp	 DWORD PTR _i$91509[ebp], 0
  00022	7c 5f		 jl	 SHORT $LN7@Update@2

; 949  : 	{
; 950  : 		KeyState5[i]=KeyState4[i];

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	03 45 f8	 add	 eax, DWORD PTR _i$91509[ebp]
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	03 4d f8	 add	 ecx, DWORD PTR _i$91509[ebp]
  00030	8a 91 01 03 00
	00		 mov	 dl, BYTE PTR [ecx+769]
  00036	88 90 01 04 00
	00		 mov	 BYTE PTR [eax+1025], dl

; 951  : 		KeyState4[i]=KeyState3[i];

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	03 45 f8	 add	 eax, DWORD PTR _i$91509[ebp]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	03 4d f8	 add	 ecx, DWORD PTR _i$91509[ebp]
  00048	8a 91 01 02 00
	00		 mov	 dl, BYTE PTR [ecx+513]
  0004e	88 90 01 03 00
	00		 mov	 BYTE PTR [eax+769], dl

; 952  : 		KeyState3[i]=KeyState2[i];

  00054	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00057	03 45 f8	 add	 eax, DWORD PTR _i$91509[ebp]
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	03 4d f8	 add	 ecx, DWORD PTR _i$91509[ebp]
  00060	8a 91 01 01 00
	00		 mov	 dl, BYTE PTR [ecx+257]
  00066	88 90 01 02 00
	00		 mov	 BYTE PTR [eax+513], dl

; 953  : 		KeyState2[i]=KeyState1[i];

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	03 45 f8	 add	 eax, DWORD PTR _i$91509[ebp]
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	03 4d f8	 add	 ecx, DWORD PTR _i$91509[ebp]
  00078	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0007b	88 90 01 01 00
	00		 mov	 BYTE PTR [eax+257], dl

; 954  : 	}

  00081	eb 92		 jmp	 SHORT $LN8@Update@2
$LN7@Update@2:

; 955  : 
; 956  : 	for(int i=1;i<257;i++)

  00083	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _i$91513[ebp], 1
  0008a	eb 09		 jmp	 SHORT $LN6@Update@2
$LN5@Update@2:
  0008c	8b 45 f4	 mov	 eax, DWORD PTR _i$91513[ebp]
  0008f	83 c0 01	 add	 eax, 1
  00092	89 45 f4	 mov	 DWORD PTR _i$91513[ebp], eax
$LN6@Update@2:
  00095	81 7d f4 01 01
	00 00		 cmp	 DWORD PTR _i$91513[ebp], 257 ; 00000101H
  0009c	7d 1b		 jge	 SHORT $LN4@Update@2

; 957  : 		KeyState1[i-1]=dbKeyState(i);

  0009e	8b 45 f4	 mov	 eax, DWORD PTR _i$91513[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?dbKeyState@@YAHH@Z	; dbKeyState
  000a7	83 c4 04	 add	 esp, 4
  000aa	85 c0		 test	 eax, eax
  000ac	0f 95 c1	 setne	 cl
  000af	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b2	03 55 f4	 add	 edx, DWORD PTR _i$91513[ebp]
  000b5	88 0a		 mov	 BYTE PTR [edx], cl
  000b7	eb d3		 jmp	 SHORT $LN5@Update@2
$LN4@Update@2:

; 958  : 
; 959  : 	if(this->CurrentMouse!=NULL)

  000b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	83 b8 28 13 00
	00 00		 cmp	 DWORD PTR [eax+4904], 0
  000c3	0f 84 ad 00 00
	00		 je	 $LN10@Update@2

; 960  : 		if(this->Bound||this->CurrentMouse->GetCursorName()!="")

  000c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000cf	85 c9		 test	 ecx, ecx
  000d1	75 19		 jne	 SHORT $LN1@Update@2
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d6	8b 88 28 13 00
	00		 mov	 ecx, DWORD PTR [eax+4904]
  000dc	e8 00 00 00 00	 call	 ?GetCursorName@MouseHandler@@QAEPADXZ ; MouseHandler::GetCursorName
  000e1	3d 00 00 00 00	 cmp	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  000e6	0f 84 8a 00 00
	00		 je	 $LN10@Update@2
$LN1@Update@2:

; 961  : 			this->CurrentMouse->MoveMouse(this->MouseSyncX*this->KeyBound(this->MouseRight)-this->MouseSyncX*this->KeyBound(this->MouseLeft),this->MouseSyncY*this->KeyBound(this->MouseDown)-this->MouseSyncY*this->KeyBound(this->MouseUp),0);

  000ec	6a 00		 push	 0
  000ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f1	8b 88 10 13 00
	00		 mov	 ecx, DWORD PTR [eax+4880]
  000f7	51		 push	 ecx
  000f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fb	e8 00 00 00 00	 call	 ?KeyBound@KeyHandler@@AAEHH@Z ; KeyHandler::KeyBound
  00100	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00103	8b f0		 mov	 esi, eax
  00105	0f af b2 20 13
	00 00		 imul	 esi, DWORD PTR [edx+4896]
  0010c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010f	8b 88 24 13 00
	00		 mov	 ecx, DWORD PTR [eax+4900]
  00115	51		 push	 ecx
  00116	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	e8 00 00 00 00	 call	 ?KeyBound@KeyHandler@@AAEHH@Z ; KeyHandler::KeyBound
  0011e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00121	0f af 82 20 13
	00 00		 imul	 eax, DWORD PTR [edx+4896]
  00128	2b f0		 sub	 esi, eax
  0012a	56		 push	 esi
  0012b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012e	8b 88 18 13 00
	00		 mov	 ecx, DWORD PTR [eax+4888]
  00134	51		 push	 ecx
  00135	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00138	e8 00 00 00 00	 call	 ?KeyBound@KeyHandler@@AAEHH@Z ; KeyHandler::KeyBound
  0013d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00140	8b f0		 mov	 esi, eax
  00142	0f af b2 1c 13
	00 00		 imul	 esi, DWORD PTR [edx+4892]
  00149	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014c	8b 88 14 13 00
	00		 mov	 ecx, DWORD PTR [eax+4884]
  00152	51		 push	 ecx
  00153	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00156	e8 00 00 00 00	 call	 ?KeyBound@KeyHandler@@AAEHH@Z ; KeyHandler::KeyBound
  0015b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0015e	0f af 82 1c 13
	00 00		 imul	 eax, DWORD PTR [edx+4892]
  00165	2b f0		 sub	 esi, eax
  00167	56		 push	 esi
  00168	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016b	8b 88 28 13 00
	00		 mov	 ecx, DWORD PTR [eax+4904]
  00171	e8 00 00 00 00	 call	 ?MoveMouse@MouseHandler@@QAEXHHH@Z ; MouseHandler::MoveMouse
$LN10@Update@2:

; 962  : 
; 963  : 	return;
; 964  : }

  00176	5f		 pop	 edi
  00177	5e		 pop	 esi
  00178	5b		 pop	 ebx
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c3		 ret	 0
?Update@KeyHandler@@QAEXXZ ENDP				; KeyHandler::Update
_TEXT	ENDS
PUBLIC	??0DeviceHandler@@QAE@XZ			; DeviceHandler::DeviceHandler
EXTRN	?dbEmptyChecklist@@YAXXZ:PROC			; dbEmptyChecklist
EXTRN	?dbChecklistValueA@@YAHH@Z:PROC			; dbChecklistValueA
EXTRN	?dbSetControlDevice@@YAXPAD@Z:PROC		; dbSetControlDevice
EXTRN	?dbChecklistString@@YAPADH@Z:PROC		; dbChecklistString
EXTRN	?dbPerformChecklistControlDevices@@YAXXZ:PROC	; dbPerformChecklistControlDevices
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DeviceHandler@@QAE@XZ
_TEXT	SEGMENT
_i$91539 = -24						; size = 4
_j$91535 = -20						; size = 4
_i$91531 = -16						; size = 4
_j$91527 = -12						; size = 4
_i$91523 = -8						; size = 4
_this$ = -4						; size = 4
??0DeviceHandler@@QAE@XZ PROC				; DeviceHandler::DeviceHandler, COMDAT
; _this$ = ecx

; 969  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 970  : 	this->MouseSyncX=0;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	c7 80 a0 0c 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+3232], 0

; 971  : 	this->MouseSyncY=0;

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	c7 80 a4 0c 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+3236], 0

; 972  : 	this->PercentBindX=1.0f;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	d9 e8		 fld1
  0002b	d9 98 88 0c 00
	00		 fstp	 DWORD PTR [eax+3208]

; 973  : 	this->PercentBindY=1.0f;

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	d9 e8		 fld1
  00036	d9 98 8c 0c 00
	00		 fstp	 DWORD PTR [eax+3212]

; 974  : 	this->MouseDown=-1;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 80 94 0c 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+3220], -1

; 975  : 	this->MouseLeft=-1;

  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	c7 80 98 0c 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+3224], -1

; 976  : 	this->MouseRight=-1;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c7 80 9c 0c 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+3228], -1

; 977  : 	this->MouseUp=-1;

  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	c7 80 a8 0c 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+3240], -1

; 978  : 	this->CurrentMouse=NULL;

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	c7 80 8c 22 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+8844], 0

; 979  : 	this->Bound=false;

  0007d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00080	c6 00 00	 mov	 BYTE PTR [eax], 0

; 980  : 
; 981  : 	for(int i=0;i<100;i++)

  00083	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$91523[ebp], 0
  0008a	eb 09		 jmp	 SHORT $LN22@DeviceHand
$LN21@DeviceHand:
  0008c	8b 45 f8	 mov	 eax, DWORD PTR _i$91523[ebp]
  0008f	83 c0 01	 add	 eax, 1
  00092	89 45 f8	 mov	 DWORD PTR _i$91523[ebp], eax
$LN22@DeviceHand:
  00095	83 7d f8 64	 cmp	 DWORD PTR _i$91523[ebp], 100 ; 00000064H
  00099	7d 2d		 jge	 SHORT $LN20@DeviceHand

; 982  : 		for(int j=0;j<32;j++)

  0009b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$91527[ebp], 0
  000a2	eb 09		 jmp	 SHORT $LN19@DeviceHand
$LN18@DeviceHand:
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _j$91527[ebp]
  000a7	83 c0 01	 add	 eax, 1
  000aa	89 45 f4	 mov	 DWORD PTR _j$91527[ebp], eax
$LN19@DeviceHand:
  000ad	83 7d f4 20	 cmp	 DWORD PTR _j$91527[ebp], 32 ; 00000020H
  000b1	7d 13		 jge	 SHORT $LN17@DeviceHand

; 983  : 			this->Buttons[j][i]=false;

  000b3	8b 45 f4	 mov	 eax, DWORD PTR _j$91527[ebp]
  000b6	6b c0 64	 imul	 eax, 100		; 00000064H
  000b9	03 45 f8	 add	 eax, DWORD PTR _i$91523[ebp]
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	c6 44 01 03 00	 mov	 BYTE PTR [ecx+eax+3], 0
  000c4	eb de		 jmp	 SHORT $LN18@DeviceHand
$LN17@DeviceHand:
  000c6	eb c4		 jmp	 SHORT $LN21@DeviceHand
$LN20@DeviceHand:

; 984  : 
; 985  : 	for(int i=0;i<100;i++)

  000c8	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$91531[ebp], 0
  000cf	eb 09		 jmp	 SHORT $LN16@DeviceHand
$LN15@DeviceHand:
  000d1	8b 45 f0	 mov	 eax, DWORD PTR _i$91531[ebp]
  000d4	83 c0 01	 add	 eax, 1
  000d7	89 45 f0	 mov	 DWORD PTR _i$91531[ebp], eax
$LN16@DeviceHand:
  000da	83 7d f0 64	 cmp	 DWORD PTR _i$91531[ebp], 100 ; 00000064H
  000de	7d 39		 jge	 SHORT $LN14@DeviceHand

; 986  : 		for(int j=0;j<4;j++)

  000e0	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$91535[ebp], 0
  000e7	eb 09		 jmp	 SHORT $LN13@DeviceHand
$LN12@DeviceHand:
  000e9	8b 45 ec	 mov	 eax, DWORD PTR _j$91535[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	89 45 ec	 mov	 DWORD PTR _j$91535[ebp], eax
$LN13@DeviceHand:
  000f2	83 7d ec 04	 cmp	 DWORD PTR _j$91535[ebp], 4
  000f6	7d 1f		 jge	 SHORT $LN11@DeviceHand

; 987  : 			this->HatAngles[j][i]=-1;

  000f8	8b 45 ec	 mov	 eax, DWORD PTR _j$91535[ebp]
  000fb	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  00101	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00104	8d 94 01 5c 11
	00 00		 lea	 edx, DWORD PTR [ecx+eax+4444]
  0010b	8b 45 f0	 mov	 eax, DWORD PTR _i$91531[ebp]
  0010e	c7 04 82 ff ff
	ff ff		 mov	 DWORD PTR [edx+eax*4], -1
  00115	eb d2		 jmp	 SHORT $LN12@DeviceHand
$LN11@DeviceHand:
  00117	eb b8		 jmp	 SHORT $LN15@DeviceHand
$LN14@DeviceHand:

; 988  : 
; 989  : 	for(int i=0;i<100;i++)

  00119	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$91539[ebp], 0
  00120	eb 09		 jmp	 SHORT $LN10@DeviceHand
$LN9@DeviceHand:
  00122	8b 45 e8	 mov	 eax, DWORD PTR _i$91539[ebp]
  00125	83 c0 01	 add	 eax, 1
  00128	89 45 e8	 mov	 DWORD PTR _i$91539[ebp], eax
$LN10@DeviceHand:
  0012b	83 7d e8 64	 cmp	 DWORD PTR _i$91539[ebp], 100 ; 00000064H
  0012f	0f 8d af 00 00
	00		 jge	 $LN8@DeviceHand

; 990  : 	{
; 991  : 		this->JoyStickSliderA[i]=0;

  00135	8b 45 e8	 mov	 eax, DWORD PTR _i$91539[ebp]
  00138	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013b	c7 84 81 9c 17
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+6044], 0

; 992  : 		this->JoyStickSliderB[i]=0;

  00146	8b 45 e8	 mov	 eax, DWORD PTR _i$91539[ebp]
  00149	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014c	c7 84 81 2c 19
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+6444], 0

; 993  : 		this->JoyStickSliderC[i]=0;

  00157	8b 45 e8	 mov	 eax, DWORD PTR _i$91539[ebp]
  0015a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015d	c7 84 81 bc 1a
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+6844], 0

; 994  : 		this->JoyStickSliderD[i]=0;

  00168	8b 45 e8	 mov	 eax, DWORD PTR _i$91539[ebp]
  0016b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016e	c7 84 81 4c 1c
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+7244], 0

; 995  : 		this->JoyStickTwistX[i]=0;

  00179	8b 45 e8	 mov	 eax, DWORD PTR _i$91539[ebp]
  0017c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017f	c7 84 81 dc 1d
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+7644], 0

; 996  : 		this->JoyStickTwistY[i]=0;

  0018a	8b 45 e8	 mov	 eax, DWORD PTR _i$91539[ebp]
  0018d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00190	c7 84 81 6c 1f
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+8044], 0

; 997  : 		this->JoyStickTwistZ[i]=0;

  0019b	8b 45 e8	 mov	 eax, DWORD PTR _i$91539[ebp]
  0019e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a1	c7 84 81 fc 20
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+8444], 0

; 998  : 		this->JoyStickX[i]=0;

  001ac	8b 45 e8	 mov	 eax, DWORD PTR _i$91539[ebp]
  001af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b2	c7 84 81 ac 0c
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+3244], 0

; 999  : 		this->JoyStickY[i]=0;

  001bd	8b 45 e8	 mov	 eax, DWORD PTR _i$91539[ebp]
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c3	c7 84 81 3c 0e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+3644], 0

; 1000 : 		this->JoyStickZ[i]=0;

  001ce	8b 45 e8	 mov	 eax, DWORD PTR _i$91539[ebp]
  001d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d4	c7 84 81 cc 0f
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+4044], 0

; 1001 : 	}

  001df	e9 3e ff ff ff	 jmp	 $LN9@DeviceHand
$LN8@DeviceHand:

; 1002 : 
; 1003 : 	dbPerformChecklistControlDevices();

  001e4	e8 00 00 00 00	 call	 ?dbPerformChecklistControlDevices@@YAXXZ ; dbPerformChecklistControlDevices

; 1004 : 	for(this->CurrentDevice=1;dbChecklistString(this->CurrentDevice)==NULL;this->CurrentDevice++);

  001e9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ec	c7 80 90 0c 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+3216], 1
  001f6	eb 15		 jmp	 SHORT $LN7@DeviceHand
$LN6@DeviceHand:
  001f8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001fb	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  00201	83 c1 01	 add	 ecx, 1
  00204	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00207	89 8a 90 0c 00
	00		 mov	 DWORD PTR [edx+3216], ecx
$LN7@DeviceHand:
  0020d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00210	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  00216	51		 push	 ecx
  00217	e8 00 00 00 00	 call	 ?dbChecklistString@@YAPADH@Z ; dbChecklistString
  0021c	83 c4 04	 add	 esp, 4
  0021f	85 c0		 test	 eax, eax
  00221	75 02		 jne	 SHORT $LN5@DeviceHand
  00223	eb d3		 jmp	 SHORT $LN6@DeviceHand
$LN5@DeviceHand:

; 1005 : 	this->CurrentDevice$=dbChecklistString(this->CurrentDevice);

  00225	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00228	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  0022e	51		 push	 ecx
  0022f	e8 00 00 00 00	 call	 ?dbChecklistString@@YAPADH@Z ; dbChecklistString
  00234	83 c4 04	 add	 esp, 4
  00237	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0023a	89 82 84 0c 00
	00		 mov	 DWORD PTR [edx+3204], eax

; 1006 : 	if(this->CurrentDevice$!=NULL&&this->CurrentDevice$!="")

  00240	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00243	83 b8 84 0c 00
	00 00		 cmp	 DWORD PTR [eax+3204], 0
  0024a	74 23		 je	 SHORT $LN4@DeviceHand
  0024c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0024f	81 b8 84 0c 00
	00 00 00 00 00	 cmp	 DWORD PTR [eax+3204], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00259	74 14		 je	 SHORT $LN4@DeviceHand

; 1007 : 		dbSetControlDevice(this->CurrentDevice$);

  0025b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025e	8b 88 84 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3204]
  00264	51		 push	 ecx
  00265	e8 00 00 00 00	 call	 ?dbSetControlDevice@@YAXPAD@Z ; dbSetControlDevice
  0026a	83 c4 04	 add	 esp, 4

; 1008 : 	else

  0026d	eb 0d		 jmp	 SHORT $LN3@DeviceHand
$LN4@DeviceHand:

; 1009 : 		this->CurrentDevice=0;

  0026f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00272	c7 80 90 0c 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+3216], 0
$LN3@DeviceHand:

; 1010 : 	if(dbChecklistValueA(this->CurrentDevice)==1)

  0027c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0027f	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  00285	51		 push	 ecx
  00286	e8 00 00 00 00	 call	 ?dbChecklistValueA@@YAHH@Z ; dbChecklistValueA
  0028b	83 c4 04	 add	 esp, 4
  0028e	83 f8 01	 cmp	 eax, 1
  00291	75 10		 jne	 SHORT $LN2@DeviceHand

; 1011 : 	{
; 1012 : 		this->ForceFeedback=true;

  00293	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00296	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1

; 1013 : 		this->ForceFeedbackOn=true;

  0029a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0029d	c6 40 02 01	 mov	 BYTE PTR [eax+2], 1

; 1014 : 	}
; 1015 : 	else

  002a1	eb 0e		 jmp	 SHORT $LN1@DeviceHand
$LN2@DeviceHand:

; 1016 : 	{
; 1017 : 		this->ForceFeedback=false;

  002a3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a6	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1018 : 		this->ForceFeedbackOn=false;

  002aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002ad	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0
$LN1@DeviceHand:

; 1019 : 	}
; 1020 : 	dbEmptyChecklist();

  002b1	e8 00 00 00 00	 call	 ?dbEmptyChecklist@@YAXXZ ; dbEmptyChecklist

; 1021 : 
; 1022 : 	return;
; 1023 : }

  002b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b9	5f		 pop	 edi
  002ba	5e		 pop	 esi
  002bb	5b		 pop	 ebx
  002bc	8b e5		 mov	 esp, ebp
  002be	5d		 pop	 ebp
  002bf	c3		 ret	 0
??0DeviceHandler@@QAE@XZ ENDP				; DeviceHandler::DeviceHandler
_TEXT	ENDS
PUBLIC	?CharToInputInt@DeviceHandler@@QAEHPAD@Z	; DeviceHandler::CharToInputInt
PUBLIC	??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMPAD111@Z ; DeviceHandler::DeviceHandler
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMPAD111@Z
_TEXT	SEGMENT
_i$91578 = -24						; size = 4
_j$91574 = -20						; size = 4
_i$91570 = -16						; size = 4
_j$91566 = -12						; size = 4
_i$91562 = -8						; size = 4
_this$ = -4						; size = 4
_Mouse$ = 8						; size = 4
_XSpeed$ = 12						; size = 4
_YSpeed$ = 16						; size = 4
_PercentXBind$ = 20					; size = 4
_PercentYBind$ = 24					; size = 4
_Down$ = 28						; size = 4
_Left$ = 32						; size = 4
_Right$ = 36						; size = 4
_Up$ = 40						; size = 4
??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMPAD111@Z PROC ; DeviceHandler::DeviceHandler, COMDAT
; _this$ = ecx

; 1025 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1026 : 	this->MouseSyncX=XSpeed;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _XSpeed$[ebp]
  00012	89 88 a0 0c 00
	00		 mov	 DWORD PTR [eax+3232], ecx

; 1027 : 	this->MouseSyncY=YSpeed;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR _YSpeed$[ebp]
  0001e	89 88 a4 0c 00
	00		 mov	 DWORD PTR [eax+3236], ecx

; 1028 : 	this->PercentBindX=PercentXBind;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	d9 45 14	 fld	 DWORD PTR _PercentXBind$[ebp]
  0002a	d9 98 88 0c 00
	00		 fstp	 DWORD PTR [eax+3208]

; 1029 : 	this->PercentBindY=PercentYBind;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	d9 45 18	 fld	 DWORD PTR _PercentYBind$[ebp]
  00036	d9 98 8c 0c 00
	00		 fstp	 DWORD PTR [eax+3212]

; 1030 : 	this->MouseDown=this->CharToInputInt(Down);

  0003c	8b 45 1c	 mov	 eax, DWORD PTR _Down$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	89 81 94 0c 00
	00		 mov	 DWORD PTR [ecx+3220], eax

; 1031 : 	this->MouseLeft=this->CharToInputInt(Left);

  00051	8b 45 20	 mov	 eax, DWORD PTR _Left$[ebp]
  00054	50		 push	 eax
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	89 81 98 0c 00
	00		 mov	 DWORD PTR [ecx+3224], eax

; 1032 : 	this->MouseRight=this->CharToInputInt(Right);

  00066	8b 45 24	 mov	 eax, DWORD PTR _Right$[ebp]
  00069	50		 push	 eax
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	89 81 9c 0c 00
	00		 mov	 DWORD PTR [ecx+3228], eax

; 1033 : 	this->MouseUp=this->CharToInputInt(Up);

  0007b	8b 45 28	 mov	 eax, DWORD PTR _Up$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	e8 00 00 00 00	 call	 ?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	89 81 a8 0c 00
	00		 mov	 DWORD PTR [ecx+3240], eax

; 1034 : 	this->CurrentMouse=Mouse;

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _Mouse$[ebp]
  00096	89 88 8c 22 00
	00		 mov	 DWORD PTR [eax+8844], ecx

; 1035 : 	this->Bound=true;

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1036 : 
; 1037 : 	for(int i=0;i<100;i++)

  000a2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$91562[ebp], 0
  000a9	eb 09		 jmp	 SHORT $LN22@DeviceHand@2
$LN21@DeviceHand@2:
  000ab	8b 45 f8	 mov	 eax, DWORD PTR _i$91562[ebp]
  000ae	83 c0 01	 add	 eax, 1
  000b1	89 45 f8	 mov	 DWORD PTR _i$91562[ebp], eax
$LN22@DeviceHand@2:
  000b4	83 7d f8 64	 cmp	 DWORD PTR _i$91562[ebp], 100 ; 00000064H
  000b8	7d 2d		 jge	 SHORT $LN20@DeviceHand@2

; 1038 : 		for(int j=0;j<32;j++)

  000ba	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$91566[ebp], 0
  000c1	eb 09		 jmp	 SHORT $LN19@DeviceHand@2
$LN18@DeviceHand@2:
  000c3	8b 45 f4	 mov	 eax, DWORD PTR _j$91566[ebp]
  000c6	83 c0 01	 add	 eax, 1
  000c9	89 45 f4	 mov	 DWORD PTR _j$91566[ebp], eax
$LN19@DeviceHand@2:
  000cc	83 7d f4 20	 cmp	 DWORD PTR _j$91566[ebp], 32 ; 00000020H
  000d0	7d 13		 jge	 SHORT $LN17@DeviceHand@2

; 1039 : 			this->Buttons[j][i]=false;

  000d2	8b 45 f4	 mov	 eax, DWORD PTR _j$91566[ebp]
  000d5	6b c0 64	 imul	 eax, 100		; 00000064H
  000d8	03 45 f8	 add	 eax, DWORD PTR _i$91562[ebp]
  000db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	c6 44 01 03 00	 mov	 BYTE PTR [ecx+eax+3], 0
  000e3	eb de		 jmp	 SHORT $LN18@DeviceHand@2
$LN17@DeviceHand@2:
  000e5	eb c4		 jmp	 SHORT $LN21@DeviceHand@2
$LN20@DeviceHand@2:

; 1040 : 
; 1041 : 	for(int i=0;i<100;i++)

  000e7	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$91570[ebp], 0
  000ee	eb 09		 jmp	 SHORT $LN16@DeviceHand@2
$LN15@DeviceHand@2:
  000f0	8b 45 f0	 mov	 eax, DWORD PTR _i$91570[ebp]
  000f3	83 c0 01	 add	 eax, 1
  000f6	89 45 f0	 mov	 DWORD PTR _i$91570[ebp], eax
$LN16@DeviceHand@2:
  000f9	83 7d f0 64	 cmp	 DWORD PTR _i$91570[ebp], 100 ; 00000064H
  000fd	7d 39		 jge	 SHORT $LN14@DeviceHand@2

; 1042 : 		for(int j=0;j<4;j++)

  000ff	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$91574[ebp], 0
  00106	eb 09		 jmp	 SHORT $LN13@DeviceHand@2
$LN12@DeviceHand@2:
  00108	8b 45 ec	 mov	 eax, DWORD PTR _j$91574[ebp]
  0010b	83 c0 01	 add	 eax, 1
  0010e	89 45 ec	 mov	 DWORD PTR _j$91574[ebp], eax
$LN13@DeviceHand@2:
  00111	83 7d ec 04	 cmp	 DWORD PTR _j$91574[ebp], 4
  00115	7d 1f		 jge	 SHORT $LN11@DeviceHand@2

; 1043 : 			this->HatAngles[j][i]=-1;

  00117	8b 45 ec	 mov	 eax, DWORD PTR _j$91574[ebp]
  0011a	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  00120	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	8d 94 01 5c 11
	00 00		 lea	 edx, DWORD PTR [ecx+eax+4444]
  0012a	8b 45 f0	 mov	 eax, DWORD PTR _i$91570[ebp]
  0012d	c7 04 82 ff ff
	ff ff		 mov	 DWORD PTR [edx+eax*4], -1
  00134	eb d2		 jmp	 SHORT $LN12@DeviceHand@2
$LN11@DeviceHand@2:
  00136	eb b8		 jmp	 SHORT $LN15@DeviceHand@2
$LN14@DeviceHand@2:

; 1044 : 
; 1045 : 	for(int i=0;i<100;i++)

  00138	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$91578[ebp], 0
  0013f	eb 09		 jmp	 SHORT $LN10@DeviceHand@2
$LN9@DeviceHand@2:
  00141	8b 45 e8	 mov	 eax, DWORD PTR _i$91578[ebp]
  00144	83 c0 01	 add	 eax, 1
  00147	89 45 e8	 mov	 DWORD PTR _i$91578[ebp], eax
$LN10@DeviceHand@2:
  0014a	83 7d e8 64	 cmp	 DWORD PTR _i$91578[ebp], 100 ; 00000064H
  0014e	0f 8d af 00 00
	00		 jge	 $LN8@DeviceHand@2

; 1046 : 	{
; 1047 : 		this->JoyStickSliderA[i]=0;

  00154	8b 45 e8	 mov	 eax, DWORD PTR _i$91578[ebp]
  00157	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	c7 84 81 9c 17
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+6044], 0

; 1048 : 		this->JoyStickSliderB[i]=0;

  00165	8b 45 e8	 mov	 eax, DWORD PTR _i$91578[ebp]
  00168	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016b	c7 84 81 2c 19
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+6444], 0

; 1049 : 		this->JoyStickSliderC[i]=0;

  00176	8b 45 e8	 mov	 eax, DWORD PTR _i$91578[ebp]
  00179	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017c	c7 84 81 bc 1a
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+6844], 0

; 1050 : 		this->JoyStickSliderD[i]=0;

  00187	8b 45 e8	 mov	 eax, DWORD PTR _i$91578[ebp]
  0018a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018d	c7 84 81 4c 1c
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+7244], 0

; 1051 : 		this->JoyStickTwistX[i]=0;

  00198	8b 45 e8	 mov	 eax, DWORD PTR _i$91578[ebp]
  0019b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0019e	c7 84 81 dc 1d
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+7644], 0

; 1052 : 		this->JoyStickTwistY[i]=0;

  001a9	8b 45 e8	 mov	 eax, DWORD PTR _i$91578[ebp]
  001ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001af	c7 84 81 6c 1f
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+8044], 0

; 1053 : 		this->JoyStickTwistZ[i]=0;

  001ba	8b 45 e8	 mov	 eax, DWORD PTR _i$91578[ebp]
  001bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c0	c7 84 81 fc 20
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+8444], 0

; 1054 : 		this->JoyStickX[i]=0;

  001cb	8b 45 e8	 mov	 eax, DWORD PTR _i$91578[ebp]
  001ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d1	c7 84 81 ac 0c
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+3244], 0

; 1055 : 		this->JoyStickY[i]=0;

  001dc	8b 45 e8	 mov	 eax, DWORD PTR _i$91578[ebp]
  001df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e2	c7 84 81 3c 0e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+3644], 0

; 1056 : 		this->JoyStickZ[i]=0;

  001ed	8b 45 e8	 mov	 eax, DWORD PTR _i$91578[ebp]
  001f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f3	c7 84 81 cc 0f
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+4044], 0

; 1057 : 	}

  001fe	e9 3e ff ff ff	 jmp	 $LN9@DeviceHand@2
$LN8@DeviceHand@2:

; 1058 : 
; 1059 : 	dbPerformChecklistControlDevices();

  00203	e8 00 00 00 00	 call	 ?dbPerformChecklistControlDevices@@YAXXZ ; dbPerformChecklistControlDevices

; 1060 : 	for(this->CurrentDevice=1;dbChecklistString(this->CurrentDevice)==NULL;this->CurrentDevice++);

  00208	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0020b	c7 80 90 0c 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+3216], 1
  00215	eb 15		 jmp	 SHORT $LN7@DeviceHand@2
$LN6@DeviceHand@2:
  00217	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0021a	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  00220	83 c1 01	 add	 ecx, 1
  00223	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00226	89 8a 90 0c 00
	00		 mov	 DWORD PTR [edx+3216], ecx
$LN7@DeviceHand@2:
  0022c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0022f	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  00235	51		 push	 ecx
  00236	e8 00 00 00 00	 call	 ?dbChecklistString@@YAPADH@Z ; dbChecklistString
  0023b	83 c4 04	 add	 esp, 4
  0023e	85 c0		 test	 eax, eax
  00240	75 02		 jne	 SHORT $LN5@DeviceHand@2
  00242	eb d3		 jmp	 SHORT $LN6@DeviceHand@2
$LN5@DeviceHand@2:

; 1061 : 	this->CurrentDevice$=dbChecklistString(this->CurrentDevice);

  00244	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00247	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  0024d	51		 push	 ecx
  0024e	e8 00 00 00 00	 call	 ?dbChecklistString@@YAPADH@Z ; dbChecklistString
  00253	83 c4 04	 add	 esp, 4
  00256	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00259	89 82 84 0c 00
	00		 mov	 DWORD PTR [edx+3204], eax

; 1062 : 	if(this->CurrentDevice$!=NULL&&this->CurrentDevice$!="")

  0025f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00262	83 b8 84 0c 00
	00 00		 cmp	 DWORD PTR [eax+3204], 0
  00269	74 23		 je	 SHORT $LN4@DeviceHand@2
  0026b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0026e	81 b8 84 0c 00
	00 00 00 00 00	 cmp	 DWORD PTR [eax+3204], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00278	74 14		 je	 SHORT $LN4@DeviceHand@2

; 1063 : 		dbSetControlDevice(this->CurrentDevice$);

  0027a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0027d	8b 88 84 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3204]
  00283	51		 push	 ecx
  00284	e8 00 00 00 00	 call	 ?dbSetControlDevice@@YAXPAD@Z ; dbSetControlDevice
  00289	83 c4 04	 add	 esp, 4

; 1064 : 	else

  0028c	eb 0d		 jmp	 SHORT $LN3@DeviceHand@2
$LN4@DeviceHand@2:

; 1065 : 		this->CurrentDevice=0;

  0028e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00291	c7 80 90 0c 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+3216], 0
$LN3@DeviceHand@2:

; 1066 : 	if(dbChecklistValueA(this->CurrentDevice)==1)

  0029b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0029e	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  002a4	51		 push	 ecx
  002a5	e8 00 00 00 00	 call	 ?dbChecklistValueA@@YAHH@Z ; dbChecklistValueA
  002aa	83 c4 04	 add	 esp, 4
  002ad	83 f8 01	 cmp	 eax, 1
  002b0	75 10		 jne	 SHORT $LN2@DeviceHand@2

; 1067 : 	{
; 1068 : 		this->ForceFeedback=true;

  002b2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b5	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1

; 1069 : 		this->ForceFeedbackOn=true;

  002b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002bc	c6 40 02 01	 mov	 BYTE PTR [eax+2], 1

; 1070 : 	}
; 1071 : 	else

  002c0	eb 0e		 jmp	 SHORT $LN1@DeviceHand@2
$LN2@DeviceHand@2:

; 1072 : 	{
; 1073 : 		this->ForceFeedback=false;

  002c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002c5	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1074 : 		this->ForceFeedbackOn=false;

  002c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002cc	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0
$LN1@DeviceHand@2:

; 1075 : 	}
; 1076 : 	dbEmptyChecklist();

  002d0	e8 00 00 00 00	 call	 ?dbEmptyChecklist@@YAXXZ ; dbEmptyChecklist

; 1077 : 
; 1078 : 	return;
; 1079 : }

  002d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d8	5f		 pop	 edi
  002d9	5e		 pop	 esi
  002da	5b		 pop	 ebx
  002db	8b e5		 mov	 esp, ebp
  002dd	5d		 pop	 ebp
  002de	c2 24 00	 ret	 36			; 00000024H
??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMPAD111@Z ENDP ; DeviceHandler::DeviceHandler
_TEXT	ENDS
PUBLIC	??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMHHHH@Z ; DeviceHandler::DeviceHandler
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMHHHH@Z
_TEXT	SEGMENT
_i$91617 = -24						; size = 4
_j$91613 = -20						; size = 4
_i$91609 = -16						; size = 4
_j$91605 = -12						; size = 4
_i$91601 = -8						; size = 4
_this$ = -4						; size = 4
_Mouse$ = 8						; size = 4
_XSpeed$ = 12						; size = 4
_YSpeed$ = 16						; size = 4
_PercentXBind$ = 20					; size = 4
_PercentYBind$ = 24					; size = 4
_Down$ = 28						; size = 4
_Left$ = 32						; size = 4
_Right$ = 36						; size = 4
_Up$ = 40						; size = 4
??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMHHHH@Z PROC	; DeviceHandler::DeviceHandler, COMDAT
; _this$ = ecx

; 1081 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1082 : 	this->MouseSyncX=XSpeed;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 0c	 mov	 ecx, DWORD PTR _XSpeed$[ebp]
  00012	89 88 a0 0c 00
	00		 mov	 DWORD PTR [eax+3232], ecx

; 1083 : 	this->MouseSyncY=YSpeed;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR _YSpeed$[ebp]
  0001e	89 88 a4 0c 00
	00		 mov	 DWORD PTR [eax+3236], ecx

; 1084 : 	this->PercentBindX=PercentXBind;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	d9 45 14	 fld	 DWORD PTR _PercentXBind$[ebp]
  0002a	d9 98 88 0c 00
	00		 fstp	 DWORD PTR [eax+3208]

; 1085 : 	this->PercentBindY=PercentYBind;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	d9 45 18	 fld	 DWORD PTR _PercentYBind$[ebp]
  00036	d9 98 8c 0c 00
	00		 fstp	 DWORD PTR [eax+3212]

; 1086 : 	this->MouseDown=Down;

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 4d 1c	 mov	 ecx, DWORD PTR _Down$[ebp]
  00042	89 88 94 0c 00
	00		 mov	 DWORD PTR [eax+3220], ecx

; 1087 : 	this->MouseLeft=Left;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 4d 20	 mov	 ecx, DWORD PTR _Left$[ebp]
  0004e	89 88 98 0c 00
	00		 mov	 DWORD PTR [eax+3224], ecx

; 1088 : 	this->MouseRight=Right;

  00054	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 4d 24	 mov	 ecx, DWORD PTR _Right$[ebp]
  0005a	89 88 9c 0c 00
	00		 mov	 DWORD PTR [eax+3228], ecx

; 1089 : 	this->MouseUp=Up;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d 28	 mov	 ecx, DWORD PTR _Up$[ebp]
  00066	89 88 a8 0c 00
	00		 mov	 DWORD PTR [eax+3240], ecx

; 1090 : 	this->CurrentMouse=Mouse;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _Mouse$[ebp]
  00072	89 88 8c 22 00
	00		 mov	 DWORD PTR [eax+8844], ecx

; 1091 : 	this->Bound=true;

  00078	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	c6 00 01	 mov	 BYTE PTR [eax], 1

; 1092 : 
; 1093 : 	for(int i=0;i<100;i++)

  0007e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$91601[ebp], 0
  00085	eb 09		 jmp	 SHORT $LN22@DeviceHand@3
$LN21@DeviceHand@3:
  00087	8b 45 f8	 mov	 eax, DWORD PTR _i$91601[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 f8	 mov	 DWORD PTR _i$91601[ebp], eax
$LN22@DeviceHand@3:
  00090	83 7d f8 64	 cmp	 DWORD PTR _i$91601[ebp], 100 ; 00000064H
  00094	7d 2d		 jge	 SHORT $LN20@DeviceHand@3

; 1094 : 		for(int j=0;j<32;j++)

  00096	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$91605[ebp], 0
  0009d	eb 09		 jmp	 SHORT $LN19@DeviceHand@3
$LN18@DeviceHand@3:
  0009f	8b 45 f4	 mov	 eax, DWORD PTR _j$91605[ebp]
  000a2	83 c0 01	 add	 eax, 1
  000a5	89 45 f4	 mov	 DWORD PTR _j$91605[ebp], eax
$LN19@DeviceHand@3:
  000a8	83 7d f4 20	 cmp	 DWORD PTR _j$91605[ebp], 32 ; 00000020H
  000ac	7d 13		 jge	 SHORT $LN17@DeviceHand@3

; 1095 : 			this->Buttons[j][i]=false;

  000ae	8b 45 f4	 mov	 eax, DWORD PTR _j$91605[ebp]
  000b1	6b c0 64	 imul	 eax, 100		; 00000064H
  000b4	03 45 f8	 add	 eax, DWORD PTR _i$91601[ebp]
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	c6 44 01 03 00	 mov	 BYTE PTR [ecx+eax+3], 0
  000bf	eb de		 jmp	 SHORT $LN18@DeviceHand@3
$LN17@DeviceHand@3:
  000c1	eb c4		 jmp	 SHORT $LN21@DeviceHand@3
$LN20@DeviceHand@3:

; 1096 : 
; 1097 : 	for(int i=0;i<100;i++)

  000c3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$91609[ebp], 0
  000ca	eb 09		 jmp	 SHORT $LN16@DeviceHand@3
$LN15@DeviceHand@3:
  000cc	8b 45 f0	 mov	 eax, DWORD PTR _i$91609[ebp]
  000cf	83 c0 01	 add	 eax, 1
  000d2	89 45 f0	 mov	 DWORD PTR _i$91609[ebp], eax
$LN16@DeviceHand@3:
  000d5	83 7d f0 64	 cmp	 DWORD PTR _i$91609[ebp], 100 ; 00000064H
  000d9	7d 39		 jge	 SHORT $LN14@DeviceHand@3

; 1098 : 		for(int j=0;j<4;j++)

  000db	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$91613[ebp], 0
  000e2	eb 09		 jmp	 SHORT $LN13@DeviceHand@3
$LN12@DeviceHand@3:
  000e4	8b 45 ec	 mov	 eax, DWORD PTR _j$91613[ebp]
  000e7	83 c0 01	 add	 eax, 1
  000ea	89 45 ec	 mov	 DWORD PTR _j$91613[ebp], eax
$LN13@DeviceHand@3:
  000ed	83 7d ec 04	 cmp	 DWORD PTR _j$91613[ebp], 4
  000f1	7d 1f		 jge	 SHORT $LN11@DeviceHand@3

; 1099 : 			this->HatAngles[j][i]=-1;

  000f3	8b 45 ec	 mov	 eax, DWORD PTR _j$91613[ebp]
  000f6	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  000fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	8d 94 01 5c 11
	00 00		 lea	 edx, DWORD PTR [ecx+eax+4444]
  00106	8b 45 f0	 mov	 eax, DWORD PTR _i$91609[ebp]
  00109	c7 04 82 ff ff
	ff ff		 mov	 DWORD PTR [edx+eax*4], -1
  00110	eb d2		 jmp	 SHORT $LN12@DeviceHand@3
$LN11@DeviceHand@3:
  00112	eb b8		 jmp	 SHORT $LN15@DeviceHand@3
$LN14@DeviceHand@3:

; 1100 : 
; 1101 : 	for(int i=0;i<100;i++)

  00114	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$91617[ebp], 0
  0011b	eb 09		 jmp	 SHORT $LN10@DeviceHand@3
$LN9@DeviceHand@3:
  0011d	8b 45 e8	 mov	 eax, DWORD PTR _i$91617[ebp]
  00120	83 c0 01	 add	 eax, 1
  00123	89 45 e8	 mov	 DWORD PTR _i$91617[ebp], eax
$LN10@DeviceHand@3:
  00126	83 7d e8 64	 cmp	 DWORD PTR _i$91617[ebp], 100 ; 00000064H
  0012a	0f 8d af 00 00
	00		 jge	 $LN8@DeviceHand@3

; 1102 : 	{
; 1103 : 		this->JoyStickSliderA[i]=0;

  00130	8b 45 e8	 mov	 eax, DWORD PTR _i$91617[ebp]
  00133	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	c7 84 81 9c 17
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+6044], 0

; 1104 : 		this->JoyStickSliderB[i]=0;

  00141	8b 45 e8	 mov	 eax, DWORD PTR _i$91617[ebp]
  00144	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00147	c7 84 81 2c 19
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+6444], 0

; 1105 : 		this->JoyStickSliderC[i]=0;

  00152	8b 45 e8	 mov	 eax, DWORD PTR _i$91617[ebp]
  00155	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00158	c7 84 81 bc 1a
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+6844], 0

; 1106 : 		this->JoyStickSliderD[i]=0;

  00163	8b 45 e8	 mov	 eax, DWORD PTR _i$91617[ebp]
  00166	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00169	c7 84 81 4c 1c
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+7244], 0

; 1107 : 		this->JoyStickTwistX[i]=0;

  00174	8b 45 e8	 mov	 eax, DWORD PTR _i$91617[ebp]
  00177	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017a	c7 84 81 dc 1d
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+7644], 0

; 1108 : 		this->JoyStickTwistY[i]=0;

  00185	8b 45 e8	 mov	 eax, DWORD PTR _i$91617[ebp]
  00188	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018b	c7 84 81 6c 1f
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+8044], 0

; 1109 : 		this->JoyStickTwistZ[i]=0;

  00196	8b 45 e8	 mov	 eax, DWORD PTR _i$91617[ebp]
  00199	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0019c	c7 84 81 fc 20
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+8444], 0

; 1110 : 		this->JoyStickX[i]=0;

  001a7	8b 45 e8	 mov	 eax, DWORD PTR _i$91617[ebp]
  001aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ad	c7 84 81 ac 0c
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+3244], 0

; 1111 : 		this->JoyStickY[i]=0;

  001b8	8b 45 e8	 mov	 eax, DWORD PTR _i$91617[ebp]
  001bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001be	c7 84 81 3c 0e
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+3644], 0

; 1112 : 		this->JoyStickZ[i]=0;

  001c9	8b 45 e8	 mov	 eax, DWORD PTR _i$91617[ebp]
  001cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001cf	c7 84 81 cc 0f
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax*4+4044], 0

; 1113 : 	}

  001da	e9 3e ff ff ff	 jmp	 $LN9@DeviceHand@3
$LN8@DeviceHand@3:

; 1114 : 
; 1115 : 	dbPerformChecklistControlDevices();

  001df	e8 00 00 00 00	 call	 ?dbPerformChecklistControlDevices@@YAXXZ ; dbPerformChecklistControlDevices

; 1116 : 	for(this->CurrentDevice=1;dbChecklistString(this->CurrentDevice)==NULL;this->CurrentDevice++);

  001e4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001e7	c7 80 90 0c 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+3216], 1
  001f1	eb 15		 jmp	 SHORT $LN7@DeviceHand@3
$LN6@DeviceHand@3:
  001f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001f6	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  001fc	83 c1 01	 add	 ecx, 1
  001ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00202	89 8a 90 0c 00
	00		 mov	 DWORD PTR [edx+3216], ecx
$LN7@DeviceHand@3:
  00208	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0020b	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  00211	51		 push	 ecx
  00212	e8 00 00 00 00	 call	 ?dbChecklistString@@YAPADH@Z ; dbChecklistString
  00217	83 c4 04	 add	 esp, 4
  0021a	85 c0		 test	 eax, eax
  0021c	75 02		 jne	 SHORT $LN5@DeviceHand@3
  0021e	eb d3		 jmp	 SHORT $LN6@DeviceHand@3
$LN5@DeviceHand@3:

; 1117 : 	this->CurrentDevice$=dbChecklistString(this->CurrentDevice);

  00220	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00223	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  00229	51		 push	 ecx
  0022a	e8 00 00 00 00	 call	 ?dbChecklistString@@YAPADH@Z ; dbChecklistString
  0022f	83 c4 04	 add	 esp, 4
  00232	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00235	89 82 84 0c 00
	00		 mov	 DWORD PTR [edx+3204], eax

; 1118 : 	if(this->CurrentDevice$!=NULL&&this->CurrentDevice$!="")

  0023b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0023e	83 b8 84 0c 00
	00 00		 cmp	 DWORD PTR [eax+3204], 0
  00245	74 23		 je	 SHORT $LN4@DeviceHand@3
  00247	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0024a	81 b8 84 0c 00
	00 00 00 00 00	 cmp	 DWORD PTR [eax+3204], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00254	74 14		 je	 SHORT $LN4@DeviceHand@3

; 1119 : 		dbSetControlDevice(this->CurrentDevice$);

  00256	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00259	8b 88 84 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3204]
  0025f	51		 push	 ecx
  00260	e8 00 00 00 00	 call	 ?dbSetControlDevice@@YAXPAD@Z ; dbSetControlDevice
  00265	83 c4 04	 add	 esp, 4

; 1120 : 	else

  00268	eb 0d		 jmp	 SHORT $LN3@DeviceHand@3
$LN4@DeviceHand@3:

; 1121 : 		this->CurrentDevice=0;

  0026a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0026d	c7 80 90 0c 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+3216], 0
$LN3@DeviceHand@3:

; 1122 : 	if(dbChecklistValueA(this->CurrentDevice)==1)

  00277	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0027a	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  00280	51		 push	 ecx
  00281	e8 00 00 00 00	 call	 ?dbChecklistValueA@@YAHH@Z ; dbChecklistValueA
  00286	83 c4 04	 add	 esp, 4
  00289	83 f8 01	 cmp	 eax, 1
  0028c	75 10		 jne	 SHORT $LN2@DeviceHand@3

; 1123 : 	{
; 1124 : 		this->ForceFeedback=true;

  0028e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00291	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1

; 1125 : 		this->ForceFeedbackOn=true;

  00295	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00298	c6 40 02 01	 mov	 BYTE PTR [eax+2], 1

; 1126 : 	}
; 1127 : 	else

  0029c	eb 0e		 jmp	 SHORT $LN1@DeviceHand@3
$LN2@DeviceHand@3:

; 1128 : 	{
; 1129 : 		this->ForceFeedback=false;

  0029e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a1	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1130 : 		this->ForceFeedbackOn=false;

  002a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a8	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0
$LN1@DeviceHand@3:

; 1131 : 	}
; 1132 : 	dbEmptyChecklist();

  002ac	e8 00 00 00 00	 call	 ?dbEmptyChecklist@@YAXXZ ; dbEmptyChecklist

; 1133 : 
; 1134 : 	return;
; 1135 : }

  002b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b4	5f		 pop	 edi
  002b5	5e		 pop	 esi
  002b6	5b		 pop	 ebx
  002b7	8b e5		 mov	 esp, ebp
  002b9	5d		 pop	 ebp
  002ba	c2 24 00	 ret	 36			; 00000024H
??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMHHHH@Z ENDP	; DeviceHandler::DeviceHandler
_TEXT	ENDS
PUBLIC	??1DeviceHandler@@QAE@XZ			; DeviceHandler::~DeviceHandler
; Function compile flags: /Odtp /ZI
;	COMDAT ??1DeviceHandler@@QAE@XZ
_TEXT	SEGMENT
tv71 = -84						; size = 4
$T94364 = -80						; size = 4
$T94365 = -76						; size = 4
$T94366 = -72						; size = 4
_this$ = -4						; size = 4
??1DeviceHandler@@QAE@XZ PROC				; DeviceHandler::~DeviceHandler, COMDAT
; _this$ = ecx

; 1137 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1138 : 	delete this->CurrentDevice$;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 84 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3204]
  00015	89 4d b0	 mov	 DWORD PTR $T94364[ebp], ecx
  00018	8b 55 b0	 mov	 edx, DWORD PTR $T94364[ebp]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00021	83 c4 04	 add	 esp, 4

; 1139 : 	delete this->CurrentMouse;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 88 8c 22 00
	00		 mov	 ecx, DWORD PTR [eax+8844]
  0002d	89 4d b8	 mov	 DWORD PTR $T94366[ebp], ecx
  00030	8b 55 b8	 mov	 edx, DWORD PTR $T94366[ebp]
  00033	89 55 b4	 mov	 DWORD PTR $T94365[ebp], edx
  00036	83 7d b4 00	 cmp	 DWORD PTR $T94365[ebp], 0
  0003a	74 0f		 je	 SHORT $LN3@DeviceHand@4
  0003c	6a 01		 push	 1
  0003e	8b 4d b4	 mov	 ecx, DWORD PTR $T94365[ebp]
  00041	e8 00 00 00 00	 call	 ??_GMouseHandler@@QAEPAXI@Z
  00046	89 45 ac	 mov	 DWORD PTR tv71[ebp], eax
  00049	eb 07		 jmp	 SHORT $LN1@DeviceHand@4
$LN3@DeviceHand@4:
  0004b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN1@DeviceHand@4:

; 1140 : 
; 1141 : 	return;
; 1142 : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
??1DeviceHandler@@QAE@XZ ENDP				; DeviceHandler::~DeviceHandler
_TEXT	ENDS
PUBLIC	?GetForceFeedback@DeviceHandler@@QAE_NXZ	; DeviceHandler::GetForceFeedback
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetForceFeedback@DeviceHandler@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetForceFeedback@DeviceHandler@@QAE_NXZ PROC		; DeviceHandler::GetForceFeedback, COMDAT
; _this$ = ecx

; 1144 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1145 : 	return this->ForceFeedback;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 40 01	 mov	 al, BYTE PTR [eax+1]

; 1146 : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetForceFeedback@DeviceHandler@@QAE_NXZ ENDP		; DeviceHandler::GetForceFeedback
_TEXT	ENDS
PUBLIC	?GetForceFeedbackOn@DeviceHandler@@QAE_NXZ	; DeviceHandler::GetForceFeedbackOn
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetForceFeedbackOn@DeviceHandler@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetForceFeedbackOn@DeviceHandler@@QAE_NXZ PROC		; DeviceHandler::GetForceFeedbackOn, COMDAT
; _this$ = ecx

; 1148 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1149 : 	return this->ForceFeedbackOn;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8a 40 02	 mov	 al, BYTE PTR [eax+2]

; 1150 : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?GetForceFeedbackOn@DeviceHandler@@QAE_NXZ ENDP		; DeviceHandler::GetForceFeedbackOn
_TEXT	ENDS
PUBLIC	?GetIsJoy@DeviceHandler@@QAE_NHM@Z		; DeviceHandler::GetIsJoy
PUBLIC	?GetHatAngle@DeviceHandler@@QAEHH@Z		; DeviceHandler::GetHatAngle
PUBLIC	?IsPressed@DeviceHandler@@QAE_NH@Z		; DeviceHandler::IsPressed
PUBLIC	__real@00000000
PUBLIC	?GetIsGenericInput@DeviceHandler@@QAE_NPAD@Z	; DeviceHandler::GetIsGenericInput
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?GetIsGenericInput@DeviceHandler@@QAE_NPAD@Z
_TEXT	SEGMENT
_InputChannel$ = -12					; size = 4
_Percent$ = -8						; size = 4
_this$ = -4						; size = 4
_InputChannel$$ = 8					; size = 4
?GetIsGenericInput@DeviceHandler@@QAE_NPAD@Z PROC	; DeviceHandler::GetIsGenericInput, COMDAT
; _this$ = ecx

; 1152 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1153 : 	float Percent=0.0f;

  0000c	d9 ee		 fldz
  0000e	d9 5d f8	 fstp	 DWORD PTR _Percent$[ebp]

; 1154 : 	int InputChannel=this->CharToInputInt(InputChannel$);

  00011	8b 45 08	 mov	 eax, DWORD PTR _InputChannel$$[ebp]
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
  0001d	89 45 f4	 mov	 DWORD PTR _InputChannel$[ebp], eax

; 1155 : 
; 1156 : 	if(InputChannel<32)

  00020	83 7d f4 20	 cmp	 DWORD PTR _InputChannel$[ebp], 32 ; 00000020H
  00024	7d 0e		 jge	 SHORT $LN3@GetIsGener

; 1157 : 		return this->IsPressed(InputChannel);

  00026	8b 45 f4	 mov	 eax, DWORD PTR _InputChannel$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?IsPressed@DeviceHandler@@QAE_NH@Z ; DeviceHandler::IsPressed
  00032	eb 5f		 jmp	 SHORT $LN4@GetIsGener
$LN3@GetIsGener:

; 1158 : 
; 1159 : 	if(InputChannel<64)

  00034	83 7d f4 40	 cmp	 DWORD PTR _InputChannel$[ebp], 64 ; 00000040H
  00038	7d 39		 jge	 SHORT $LN2@GetIsGener

; 1160 : 		return (this->GetHatAngle((InputChannel-32)/8)==((InputChannel-32)%8)*45);

  0003a	8b 45 f4	 mov	 eax, DWORD PTR _InputChannel$[ebp]
  0003d	83 e8 20	 sub	 eax, 32			; 00000020H
  00040	99		 cdq
  00041	83 e2 07	 and	 edx, 7
  00044	03 c2		 add	 eax, edx
  00046	c1 f8 03	 sar	 eax, 3
  00049	50		 push	 eax
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?GetHatAngle@DeviceHandler@@QAEHH@Z ; DeviceHandler::GetHatAngle
  00052	8b 4d f4	 mov	 ecx, DWORD PTR _InputChannel$[ebp]
  00055	83 e9 20	 sub	 ecx, 32			; 00000020H
  00058	81 e1 07 00 00
	80		 and	 ecx, -2147483641	; 80000007H
  0005e	79 05		 jns	 SHORT $LN6@GetIsGener
  00060	49		 dec	 ecx
  00061	83 c9 f8	 or	 ecx, -8			; fffffff8H
  00064	41		 inc	 ecx
$LN6@GetIsGener:
  00065	6b c9 2d	 imul	 ecx, 45			; 0000002dH
  00068	33 d2		 xor	 edx, edx
  0006a	3b c1		 cmp	 eax, ecx
  0006c	0f 94 c2	 sete	 dl
  0006f	8a c2		 mov	 al, dl
  00071	eb 20		 jmp	 SHORT $LN4@GetIsGener
$LN2@GetIsGener:

; 1161 : 
; 1162 : 	if(InputChannel<84)

  00073	83 7d f4 54	 cmp	 DWORD PTR _InputChannel$[ebp], 84 ; 00000054H
  00077	7d 18		 jge	 SHORT $LN1@GetIsGener

; 1163 : 		return this->GetIsJoy(InputChannel-63,Percent);

  00079	51		 push	 ecx
  0007a	d9 45 f8	 fld	 DWORD PTR _Percent$[ebp]
  0007d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00080	8b 45 f4	 mov	 eax, DWORD PTR _InputChannel$[ebp]
  00083	83 e8 3f	 sub	 eax, 63			; 0000003fH
  00086	50		 push	 eax
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?GetIsJoy@DeviceHandler@@QAE_NHM@Z ; DeviceHandler::GetIsJoy
  0008f	eb 02		 jmp	 SHORT $LN4@GetIsGener
$LN1@GetIsGener:

; 1164 : 
; 1165 : 	return false;

  00091	32 c0		 xor	 al, al
$LN4@GetIsGener:

; 1166 : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
?GetIsGenericInput@DeviceHandler@@QAE_NPAD@Z ENDP	; DeviceHandler::GetIsGenericInput
_TEXT	ENDS
PUBLIC	?GetIsGenericInput@DeviceHandler@@QAE_NPADM@Z	; DeviceHandler::GetIsGenericInput
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetIsGenericInput@DeviceHandler@@QAE_NPADM@Z
_TEXT	SEGMENT
_InputChannel$ = -8					; size = 4
_this$ = -4						; size = 4
_InputChannel$$ = 8					; size = 4
_Percent$ = 12						; size = 4
?GetIsGenericInput@DeviceHandler@@QAE_NPADM@Z PROC	; DeviceHandler::GetIsGenericInput, COMDAT
; _this$ = ecx

; 1168 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1169 : 	int InputChannel=this->CharToInputInt(InputChannel$);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _InputChannel$$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
  00018	89 45 f8	 mov	 DWORD PTR _InputChannel$[ebp], eax

; 1170 : 
; 1171 : 	if(InputChannel<32)

  0001b	83 7d f8 20	 cmp	 DWORD PTR _InputChannel$[ebp], 32 ; 00000020H
  0001f	7d 0e		 jge	 SHORT $LN3@GetIsGener@2

; 1172 : 		return this->IsPressed(InputChannel);

  00021	8b 45 f8	 mov	 eax, DWORD PTR _InputChannel$[ebp]
  00024	50		 push	 eax
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?IsPressed@DeviceHandler@@QAE_NH@Z ; DeviceHandler::IsPressed
  0002d	eb 5f		 jmp	 SHORT $LN4@GetIsGener@2
$LN3@GetIsGener@2:

; 1173 : 
; 1174 : 	if(InputChannel<64)

  0002f	83 7d f8 40	 cmp	 DWORD PTR _InputChannel$[ebp], 64 ; 00000040H
  00033	7d 39		 jge	 SHORT $LN2@GetIsGener@2

; 1175 : 		return (this->GetHatAngle((InputChannel-32)/8)==((InputChannel-32)%8)*45);

  00035	8b 45 f8	 mov	 eax, DWORD PTR _InputChannel$[ebp]
  00038	83 e8 20	 sub	 eax, 32			; 00000020H
  0003b	99		 cdq
  0003c	83 e2 07	 and	 edx, 7
  0003f	03 c2		 add	 eax, edx
  00041	c1 f8 03	 sar	 eax, 3
  00044	50		 push	 eax
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?GetHatAngle@DeviceHandler@@QAEHH@Z ; DeviceHandler::GetHatAngle
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _InputChannel$[ebp]
  00050	83 e9 20	 sub	 ecx, 32			; 00000020H
  00053	81 e1 07 00 00
	80		 and	 ecx, -2147483641	; 80000007H
  00059	79 05		 jns	 SHORT $LN6@GetIsGener@2
  0005b	49		 dec	 ecx
  0005c	83 c9 f8	 or	 ecx, -8			; fffffff8H
  0005f	41		 inc	 ecx
$LN6@GetIsGener@2:
  00060	6b c9 2d	 imul	 ecx, 45			; 0000002dH
  00063	33 d2		 xor	 edx, edx
  00065	3b c1		 cmp	 eax, ecx
  00067	0f 94 c2	 sete	 dl
  0006a	8a c2		 mov	 al, dl
  0006c	eb 20		 jmp	 SHORT $LN4@GetIsGener@2
$LN2@GetIsGener@2:

; 1176 : 
; 1177 : 	if(InputChannel<84)

  0006e	83 7d f8 54	 cmp	 DWORD PTR _InputChannel$[ebp], 84 ; 00000054H
  00072	7d 18		 jge	 SHORT $LN1@GetIsGener@2

; 1178 : 		return this->GetIsJoy(InputChannel-63,Percent);

  00074	51		 push	 ecx
  00075	d9 45 0c	 fld	 DWORD PTR _Percent$[ebp]
  00078	d9 1c 24	 fstp	 DWORD PTR [esp]
  0007b	8b 45 f8	 mov	 eax, DWORD PTR _InputChannel$[ebp]
  0007e	83 e8 3f	 sub	 eax, 63			; 0000003fH
  00081	50		 push	 eax
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	e8 00 00 00 00	 call	 ?GetIsJoy@DeviceHandler@@QAE_NHM@Z ; DeviceHandler::GetIsJoy
  0008a	eb 02		 jmp	 SHORT $LN4@GetIsGener@2
$LN1@GetIsGener@2:

; 1179 : 
; 1180 : 	return false;

  0008c	32 c0		 xor	 al, al
$LN4@GetIsGener@2:

; 1181 : }

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
?GetIsGenericInput@DeviceHandler@@QAE_NPADM@Z ENDP	; DeviceHandler::GetIsGenericInput
_TEXT	ENDS
PUBLIC	?GetIsGenericInput@DeviceHandler@@QAE_NH@Z	; DeviceHandler::GetIsGenericInput
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetIsGenericInput@DeviceHandler@@QAE_NH@Z
_TEXT	SEGMENT
_Percent$ = -8						; size = 4
_this$ = -4						; size = 4
_InputChannel$ = 8					; size = 4
?GetIsGenericInput@DeviceHandler@@QAE_NH@Z PROC		; DeviceHandler::GetIsGenericInput, COMDAT
; _this$ = ecx

; 1183 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1184 : 	float Percent=0.0f;

  0000c	d9 ee		 fldz
  0000e	d9 5d f8	 fstp	 DWORD PTR _Percent$[ebp]

; 1185 : 
; 1186 : 	if(InputChannel<32)

  00011	83 7d 08 20	 cmp	 DWORD PTR _InputChannel$[ebp], 32 ; 00000020H
  00015	7d 0e		 jge	 SHORT $LN3@GetIsGener@3

; 1187 : 		return this->IsPressed(InputChannel);

  00017	8b 45 08	 mov	 eax, DWORD PTR _InputChannel$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?IsPressed@DeviceHandler@@QAE_NH@Z ; DeviceHandler::IsPressed
  00023	eb 5f		 jmp	 SHORT $LN4@GetIsGener@3
$LN3@GetIsGener@3:

; 1188 : 
; 1189 : 	if(InputChannel<64)

  00025	83 7d 08 40	 cmp	 DWORD PTR _InputChannel$[ebp], 64 ; 00000040H
  00029	7d 39		 jge	 SHORT $LN2@GetIsGener@3

; 1190 : 		return (this->GetHatAngle((InputChannel-32)/8)==((InputChannel-32)%8)*45);

  0002b	8b 45 08	 mov	 eax, DWORD PTR _InputChannel$[ebp]
  0002e	83 e8 20	 sub	 eax, 32			; 00000020H
  00031	99		 cdq
  00032	83 e2 07	 and	 edx, 7
  00035	03 c2		 add	 eax, edx
  00037	c1 f8 03	 sar	 eax, 3
  0003a	50		 push	 eax
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?GetHatAngle@DeviceHandler@@QAEHH@Z ; DeviceHandler::GetHatAngle
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _InputChannel$[ebp]
  00046	83 e9 20	 sub	 ecx, 32			; 00000020H
  00049	81 e1 07 00 00
	80		 and	 ecx, -2147483641	; 80000007H
  0004f	79 05		 jns	 SHORT $LN6@GetIsGener@3
  00051	49		 dec	 ecx
  00052	83 c9 f8	 or	 ecx, -8			; fffffff8H
  00055	41		 inc	 ecx
$LN6@GetIsGener@3:
  00056	6b c9 2d	 imul	 ecx, 45			; 0000002dH
  00059	33 d2		 xor	 edx, edx
  0005b	3b c1		 cmp	 eax, ecx
  0005d	0f 94 c2	 sete	 dl
  00060	8a c2		 mov	 al, dl
  00062	eb 20		 jmp	 SHORT $LN4@GetIsGener@3
$LN2@GetIsGener@3:

; 1191 : 
; 1192 : 	if(InputChannel<84)

  00064	83 7d 08 54	 cmp	 DWORD PTR _InputChannel$[ebp], 84 ; 00000054H
  00068	7d 18		 jge	 SHORT $LN1@GetIsGener@3

; 1193 : 		return this->GetIsJoy(InputChannel-63,Percent);

  0006a	51		 push	 ecx
  0006b	d9 45 f8	 fld	 DWORD PTR _Percent$[ebp]
  0006e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00071	8b 45 08	 mov	 eax, DWORD PTR _InputChannel$[ebp]
  00074	83 e8 3f	 sub	 eax, 63			; 0000003fH
  00077	50		 push	 eax
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?GetIsJoy@DeviceHandler@@QAE_NHM@Z ; DeviceHandler::GetIsJoy
  00080	eb 02		 jmp	 SHORT $LN4@GetIsGener@3
$LN1@GetIsGener@3:

; 1194 : 
; 1195 : 	return false;

  00082	32 c0		 xor	 al, al
$LN4@GetIsGener@3:

; 1196 : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
?GetIsGenericInput@DeviceHandler@@QAE_NH@Z ENDP		; DeviceHandler::GetIsGenericInput
_TEXT	ENDS
PUBLIC	?GetIsGenericInput@DeviceHandler@@QAE_NHM@Z	; DeviceHandler::GetIsGenericInput
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetIsGenericInput@DeviceHandler@@QAE_NHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputChannel$ = 8					; size = 4
_Percent$ = 12						; size = 4
?GetIsGenericInput@DeviceHandler@@QAE_NHM@Z PROC	; DeviceHandler::GetIsGenericInput, COMDAT
; _this$ = ecx

; 1198 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1199 : 	if(InputChannel<32)

  0000c	83 7d 08 20	 cmp	 DWORD PTR _InputChannel$[ebp], 32 ; 00000020H
  00010	7d 0e		 jge	 SHORT $LN3@GetIsGener@4

; 1200 : 		return this->IsPressed(InputChannel);

  00012	8b 45 08	 mov	 eax, DWORD PTR _InputChannel$[ebp]
  00015	50		 push	 eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?IsPressed@DeviceHandler@@QAE_NH@Z ; DeviceHandler::IsPressed
  0001e	eb 5f		 jmp	 SHORT $LN4@GetIsGener@4
$LN3@GetIsGener@4:

; 1201 : 
; 1202 : 	if(InputChannel<64)

  00020	83 7d 08 40	 cmp	 DWORD PTR _InputChannel$[ebp], 64 ; 00000040H
  00024	7d 39		 jge	 SHORT $LN2@GetIsGener@4

; 1203 : 		return (this->GetHatAngle((InputChannel-32)/8)==((InputChannel-32)%8)*45);

  00026	8b 45 08	 mov	 eax, DWORD PTR _InputChannel$[ebp]
  00029	83 e8 20	 sub	 eax, 32			; 00000020H
  0002c	99		 cdq
  0002d	83 e2 07	 and	 edx, 7
  00030	03 c2		 add	 eax, edx
  00032	c1 f8 03	 sar	 eax, 3
  00035	50		 push	 eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?GetHatAngle@DeviceHandler@@QAEHH@Z ; DeviceHandler::GetHatAngle
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _InputChannel$[ebp]
  00041	83 e9 20	 sub	 ecx, 32			; 00000020H
  00044	81 e1 07 00 00
	80		 and	 ecx, -2147483641	; 80000007H
  0004a	79 05		 jns	 SHORT $LN6@GetIsGener@4
  0004c	49		 dec	 ecx
  0004d	83 c9 f8	 or	 ecx, -8			; fffffff8H
  00050	41		 inc	 ecx
$LN6@GetIsGener@4:
  00051	6b c9 2d	 imul	 ecx, 45			; 0000002dH
  00054	33 d2		 xor	 edx, edx
  00056	3b c1		 cmp	 eax, ecx
  00058	0f 94 c2	 sete	 dl
  0005b	8a c2		 mov	 al, dl
  0005d	eb 20		 jmp	 SHORT $LN4@GetIsGener@4
$LN2@GetIsGener@4:

; 1204 : 
; 1205 : 	if(InputChannel<84)

  0005f	83 7d 08 54	 cmp	 DWORD PTR _InputChannel$[ebp], 84 ; 00000054H
  00063	7d 18		 jge	 SHORT $LN1@GetIsGener@4

; 1206 : 		return this->GetIsJoy(InputChannel-63,Percent);

  00065	51		 push	 ecx
  00066	d9 45 0c	 fld	 DWORD PTR _Percent$[ebp]
  00069	d9 1c 24	 fstp	 DWORD PTR [esp]
  0006c	8b 45 08	 mov	 eax, DWORD PTR _InputChannel$[ebp]
  0006f	83 e8 3f	 sub	 eax, 63			; 0000003fH
  00072	50		 push	 eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ?GetIsJoy@DeviceHandler@@QAE_NHM@Z ; DeviceHandler::GetIsJoy
  0007b	eb 02		 jmp	 SHORT $LN4@GetIsGener@4
$LN1@GetIsGener@4:

; 1207 : 
; 1208 : 	return false;

  0007d	32 c0		 xor	 al, al
$LN4@GetIsGener@4:

; 1209 : }

  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
?GetIsGenericInput@DeviceHandler@@QAE_NHM@Z ENDP	; DeviceHandler::GetIsGenericInput
_TEXT	ENDS
PUBLIC	?IsJoyStickSliderDMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderDMax
PUBLIC	?IsJoyStickSliderDMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderDMin
PUBLIC	?IsJoyStickSliderCMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderCMax
PUBLIC	?IsJoyStickSliderCMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderCMin
PUBLIC	?IsJoyStickSliderBMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderBMax
PUBLIC	?IsJoyStickSliderBMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderBMin
PUBLIC	?IsJoyStickSliderAMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderAMax
PUBLIC	?IsJoyStickSliderAMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderAMin
PUBLIC	?IsJoyStickTwistZMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistZMax
PUBLIC	?IsJoyStickTwistZMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistZMin
PUBLIC	?IsJoyStickTwistYMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistYMax
PUBLIC	?IsJoyStickTwistYMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistYMin
PUBLIC	?IsJoyStickTwistXMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistXMax
PUBLIC	?IsJoyStickTwistXMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistXMin
PUBLIC	?IsJoyStickZMax@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickZMax
PUBLIC	?IsJoyStickZMin@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickZMin
PUBLIC	?IsJoyStickYMax@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickYMax
PUBLIC	?IsJoyStickYMin@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickYMin
PUBLIC	?IsJoyStickXMax@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickXMax
PUBLIC	?IsJoyStickXMin@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickXMin
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetIsJoy@DeviceHandler@@QAE_NHM@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Joystick$ = 8						; size = 4
_MinimumPercent$ = 12					; size = 4
?GetIsJoy@DeviceHandler@@QAE_NHM@Z PROC			; DeviceHandler::GetIsJoy, COMDAT
; _this$ = ecx

; 1211 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1212 : 	switch(Joystick)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Joystick$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00015	83 e9 01	 sub	 ecx, 1
  00018	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  0001b	83 7d b8 13	 cmp	 DWORD PTR tv64[ebp], 19	; 00000013H
  0001f	0f 87 d4 01 00
	00		 ja	 $LN1@GetIsJoy
  00025	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  00028	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN26@GetIsJoy[edx*4]
$LN21@GetIsJoy:

; 1213 : 	{
; 1214 : 	case 1:
; 1215 : 		return this->IsJoyStickXMin(MinimumPercent);

  0002f	51		 push	 ecx
  00030	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  00033	d9 1c 24	 fstp	 DWORD PTR [esp]
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?IsJoyStickXMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickXMin
  0003e	e9 b8 01 00 00	 jmp	 $LN22@GetIsJoy

; 1216 : 		break;

  00043	e9 b3 01 00 00	 jmp	 $LN22@GetIsJoy
$LN20@GetIsJoy:

; 1217 : 	case 2:
; 1218 : 		return this->IsJoyStickXMax(MinimumPercent);

  00048	51		 push	 ecx
  00049	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  0004c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?IsJoyStickXMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickXMax
  00057	e9 9f 01 00 00	 jmp	 $LN22@GetIsJoy

; 1219 : 		break;

  0005c	e9 9a 01 00 00	 jmp	 $LN22@GetIsJoy
$LN19@GetIsJoy:

; 1220 : 	case 3:
; 1221 : 		return this->IsJoyStickYMin(MinimumPercent);

  00061	51		 push	 ecx
  00062	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  00065	d9 1c 24	 fstp	 DWORD PTR [esp]
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	e8 00 00 00 00	 call	 ?IsJoyStickYMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickYMin
  00070	e9 86 01 00 00	 jmp	 $LN22@GetIsJoy

; 1222 : 		break;

  00075	e9 81 01 00 00	 jmp	 $LN22@GetIsJoy
$LN18@GetIsJoy:

; 1223 : 	case 4:
; 1224 : 		return this->IsJoyStickYMax(MinimumPercent);

  0007a	51		 push	 ecx
  0007b	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  0007e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?IsJoyStickYMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickYMax
  00089	e9 6d 01 00 00	 jmp	 $LN22@GetIsJoy

; 1225 : 		break;

  0008e	e9 68 01 00 00	 jmp	 $LN22@GetIsJoy
$LN17@GetIsJoy:

; 1226 : 	case 5:
; 1227 : 		return this->IsJoyStickZMin(MinimumPercent);

  00093	51		 push	 ecx
  00094	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  00097	d9 1c 24	 fstp	 DWORD PTR [esp]
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?IsJoyStickZMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickZMin
  000a2	e9 54 01 00 00	 jmp	 $LN22@GetIsJoy

; 1228 : 		break;

  000a7	e9 4f 01 00 00	 jmp	 $LN22@GetIsJoy
$LN16@GetIsJoy:

; 1229 : 	case 6:
; 1230 : 		return this->IsJoyStickZMax(MinimumPercent);

  000ac	51		 push	 ecx
  000ad	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  000b0	d9 1c 24	 fstp	 DWORD PTR [esp]
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	e8 00 00 00 00	 call	 ?IsJoyStickZMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickZMax
  000bb	e9 3b 01 00 00	 jmp	 $LN22@GetIsJoy

; 1231 : 		break;

  000c0	e9 36 01 00 00	 jmp	 $LN22@GetIsJoy
$LN15@GetIsJoy:

; 1232 : 	case 7:
; 1233 : 		return this->IsJoyStickTwistXMin(MinimumPercent);

  000c5	51		 push	 ecx
  000c6	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  000c9	d9 1c 24	 fstp	 DWORD PTR [esp]
  000cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	e8 00 00 00 00	 call	 ?IsJoyStickTwistXMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistXMin
  000d4	e9 22 01 00 00	 jmp	 $LN22@GetIsJoy

; 1234 : 		break;

  000d9	e9 1d 01 00 00	 jmp	 $LN22@GetIsJoy
$LN14@GetIsJoy:

; 1235 : 	case 8:
; 1236 : 		return this->IsJoyStickTwistXMax(MinimumPercent);

  000de	51		 push	 ecx
  000df	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  000e2	d9 1c 24	 fstp	 DWORD PTR [esp]
  000e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e8	e8 00 00 00 00	 call	 ?IsJoyStickTwistXMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistXMax
  000ed	e9 09 01 00 00	 jmp	 $LN22@GetIsJoy

; 1237 : 		break;

  000f2	e9 04 01 00 00	 jmp	 $LN22@GetIsJoy
$LN13@GetIsJoy:

; 1238 : 	case 9:
; 1239 : 		return this->IsJoyStickTwistYMin(MinimumPercent);

  000f7	51		 push	 ecx
  000f8	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  000fb	d9 1c 24	 fstp	 DWORD PTR [esp]
  000fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	e8 00 00 00 00	 call	 ?IsJoyStickTwistYMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistYMin
  00106	e9 f0 00 00 00	 jmp	 $LN22@GetIsJoy

; 1240 : 		break;

  0010b	e9 eb 00 00 00	 jmp	 $LN22@GetIsJoy
$LN12@GetIsJoy:

; 1241 : 	case 10:
; 1242 : 		return this->IsJoyStickTwistYMax(MinimumPercent);

  00110	51		 push	 ecx
  00111	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  00114	d9 1c 24	 fstp	 DWORD PTR [esp]
  00117	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	e8 00 00 00 00	 call	 ?IsJoyStickTwistYMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistYMax
  0011f	e9 d7 00 00 00	 jmp	 $LN22@GetIsJoy

; 1243 : 		break;

  00124	e9 d2 00 00 00	 jmp	 $LN22@GetIsJoy
$LN11@GetIsJoy:

; 1244 : 	case 11:
; 1245 : 		return this->IsJoyStickTwistZMin(MinimumPercent);

  00129	51		 push	 ecx
  0012a	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  0012d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00130	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00133	e8 00 00 00 00	 call	 ?IsJoyStickTwistZMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistZMin
  00138	e9 be 00 00 00	 jmp	 $LN22@GetIsJoy

; 1246 : 		break;

  0013d	e9 b9 00 00 00	 jmp	 $LN22@GetIsJoy
$LN10@GetIsJoy:

; 1247 : 	case 12:
; 1248 : 		return this->IsJoyStickTwistZMax(MinimumPercent);

  00142	51		 push	 ecx
  00143	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  00146	d9 1c 24	 fstp	 DWORD PTR [esp]
  00149	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014c	e8 00 00 00 00	 call	 ?IsJoyStickTwistZMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistZMax
  00151	e9 a5 00 00 00	 jmp	 $LN22@GetIsJoy

; 1249 : 		break;

  00156	e9 a0 00 00 00	 jmp	 $LN22@GetIsJoy
$LN9@GetIsJoy:

; 1250 : 	case 13:
; 1251 : 		return this->IsJoyStickSliderAMin(MinimumPercent);

  0015b	51		 push	 ecx
  0015c	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  0015f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00162	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00165	e8 00 00 00 00	 call	 ?IsJoyStickSliderAMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderAMin
  0016a	e9 8c 00 00 00	 jmp	 $LN22@GetIsJoy

; 1252 : 		break;

  0016f	e9 87 00 00 00	 jmp	 $LN22@GetIsJoy
$LN8@GetIsJoy:

; 1253 : 	case 14:
; 1254 : 		return this->IsJoyStickSliderAMax(MinimumPercent);

  00174	51		 push	 ecx
  00175	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  00178	d9 1c 24	 fstp	 DWORD PTR [esp]
  0017b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017e	e8 00 00 00 00	 call	 ?IsJoyStickSliderAMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderAMax
  00183	eb 76		 jmp	 SHORT $LN22@GetIsJoy

; 1255 : 		break;

  00185	eb 74		 jmp	 SHORT $LN22@GetIsJoy
$LN7@GetIsJoy:

; 1256 : 	case 15:
; 1257 : 		return this->IsJoyStickSliderBMin(MinimumPercent);

  00187	51		 push	 ecx
  00188	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  0018b	d9 1c 24	 fstp	 DWORD PTR [esp]
  0018e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	e8 00 00 00 00	 call	 ?IsJoyStickSliderBMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderBMin
  00196	eb 63		 jmp	 SHORT $LN22@GetIsJoy

; 1258 : 		break;

  00198	eb 61		 jmp	 SHORT $LN22@GetIsJoy
$LN6@GetIsJoy:

; 1259 : 	case 16:
; 1260 : 		return this->IsJoyStickSliderBMax(MinimumPercent);

  0019a	51		 push	 ecx
  0019b	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  0019e	d9 1c 24	 fstp	 DWORD PTR [esp]
  001a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a4	e8 00 00 00 00	 call	 ?IsJoyStickSliderBMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderBMax
  001a9	eb 50		 jmp	 SHORT $LN22@GetIsJoy

; 1261 : 		break;

  001ab	eb 4e		 jmp	 SHORT $LN22@GetIsJoy
$LN5@GetIsJoy:

; 1262 : 	case 17:
; 1263 : 		return this->IsJoyStickSliderCMin(MinimumPercent);

  001ad	51		 push	 ecx
  001ae	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  001b1	d9 1c 24	 fstp	 DWORD PTR [esp]
  001b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b7	e8 00 00 00 00	 call	 ?IsJoyStickSliderCMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderCMin
  001bc	eb 3d		 jmp	 SHORT $LN22@GetIsJoy

; 1264 : 		break;

  001be	eb 3b		 jmp	 SHORT $LN22@GetIsJoy
$LN4@GetIsJoy:

; 1265 : 	case 18:
; 1266 : 		return this->IsJoyStickSliderCMax(MinimumPercent);

  001c0	51		 push	 ecx
  001c1	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  001c4	d9 1c 24	 fstp	 DWORD PTR [esp]
  001c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ca	e8 00 00 00 00	 call	 ?IsJoyStickSliderCMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderCMax
  001cf	eb 2a		 jmp	 SHORT $LN22@GetIsJoy

; 1267 : 		break;

  001d1	eb 28		 jmp	 SHORT $LN22@GetIsJoy
$LN3@GetIsJoy:

; 1268 : 	case 19:
; 1269 : 		return this->IsJoyStickSliderDMin(MinimumPercent);

  001d3	51		 push	 ecx
  001d4	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  001d7	d9 1c 24	 fstp	 DWORD PTR [esp]
  001da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001dd	e8 00 00 00 00	 call	 ?IsJoyStickSliderDMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderDMin
  001e2	eb 17		 jmp	 SHORT $LN22@GetIsJoy

; 1270 : 		break;

  001e4	eb 15		 jmp	 SHORT $LN22@GetIsJoy
$LN2@GetIsJoy:

; 1271 : 	case 20:
; 1272 : 		return this->IsJoyStickSliderDMax(MinimumPercent);

  001e6	51		 push	 ecx
  001e7	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  001ea	d9 1c 24	 fstp	 DWORD PTR [esp]
  001ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f0	e8 00 00 00 00	 call	 ?IsJoyStickSliderDMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderDMax
  001f5	eb 04		 jmp	 SHORT $LN22@GetIsJoy

; 1273 : 		break;

  001f7	eb 02		 jmp	 SHORT $LN22@GetIsJoy
$LN1@GetIsJoy:

; 1274 : 	default:
; 1275 : 		return NULL;

  001f9	32 c0		 xor	 al, al
$LN22@GetIsJoy:

; 1276 : 		break;
; 1277 : 	}
; 1278 : }

  001fb	5f		 pop	 edi
  001fc	5e		 pop	 esi
  001fd	5b		 pop	 ebx
  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c2 08 00	 ret	 8
$LN26@GetIsJoy:
  00204	00 00 00 00	 DD	 $LN21@GetIsJoy
  00208	00 00 00 00	 DD	 $LN20@GetIsJoy
  0020c	00 00 00 00	 DD	 $LN19@GetIsJoy
  00210	00 00 00 00	 DD	 $LN18@GetIsJoy
  00214	00 00 00 00	 DD	 $LN17@GetIsJoy
  00218	00 00 00 00	 DD	 $LN16@GetIsJoy
  0021c	00 00 00 00	 DD	 $LN15@GetIsJoy
  00220	00 00 00 00	 DD	 $LN14@GetIsJoy
  00224	00 00 00 00	 DD	 $LN13@GetIsJoy
  00228	00 00 00 00	 DD	 $LN12@GetIsJoy
  0022c	00 00 00 00	 DD	 $LN11@GetIsJoy
  00230	00 00 00 00	 DD	 $LN10@GetIsJoy
  00234	00 00 00 00	 DD	 $LN9@GetIsJoy
  00238	00 00 00 00	 DD	 $LN8@GetIsJoy
  0023c	00 00 00 00	 DD	 $LN7@GetIsJoy
  00240	00 00 00 00	 DD	 $LN6@GetIsJoy
  00244	00 00 00 00	 DD	 $LN5@GetIsJoy
  00248	00 00 00 00	 DD	 $LN4@GetIsJoy
  0024c	00 00 00 00	 DD	 $LN3@GetIsJoy
  00250	00 00 00 00	 DD	 $LN2@GetIsJoy
?GetIsJoy@DeviceHandler@@QAE_NHM@Z ENDP			; DeviceHandler::GetIsJoy
_TEXT	ENDS
PUBLIC	?IsJoyStickSliderD@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderD
PUBLIC	?IsJoyStickSliderC@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderC
PUBLIC	?IsJoyStickSliderB@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderB
PUBLIC	?IsJoyStickSliderA@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderA
PUBLIC	?IsJoyStickTwistZ@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistZ
PUBLIC	?IsJoyStickTwistY@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistY
PUBLIC	?IsJoyStickTwistX@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistX
PUBLIC	?IsJoyStickZ@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickZ
PUBLIC	?IsJoyStickY@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickY
PUBLIC	?IsJoyStickX@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickX
PUBLIC	?GetIsJoyUndirectional@DeviceHandler@@QAE_NHM@Z	; DeviceHandler::GetIsJoyUndirectional
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetIsJoyUndirectional@DeviceHandler@@QAE_NHM@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Joystick$ = 8						; size = 4
_MinimumPercent$ = 12					; size = 4
?GetIsJoyUndirectional@DeviceHandler@@QAE_NHM@Z PROC	; DeviceHandler::GetIsJoyUndirectional, COMDAT
; _this$ = ecx

; 1280 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1281 : 	switch(Joystick)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Joystick$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00015	83 e9 01	 sub	 ecx, 1
  00018	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  0001b	83 7d b8 09	 cmp	 DWORD PTR tv64[ebp], 9
  0001f	0f 87 da 00 00
	00		 ja	 $LN1@GetIsJoyUn
  00025	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  00028	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN16@GetIsJoyUn[edx*4]
$LN11@GetIsJoyUn:

; 1282 : 	{
; 1283 : 	case 1:
; 1284 : 		return this->IsJoyStickX(MinimumPercent);

  0002f	51		 push	 ecx
  00030	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  00033	d9 1c 24	 fstp	 DWORD PTR [esp]
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?IsJoyStickX@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickX
  0003e	e9 be 00 00 00	 jmp	 $LN12@GetIsJoyUn

; 1285 : 		break;

  00043	e9 b9 00 00 00	 jmp	 $LN12@GetIsJoyUn
$LN10@GetIsJoyUn:

; 1286 : 	case 2:
; 1287 : 		return this->IsJoyStickY(MinimumPercent);

  00048	51		 push	 ecx
  00049	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  0004c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?IsJoyStickY@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickY
  00057	e9 a5 00 00 00	 jmp	 $LN12@GetIsJoyUn

; 1288 : 		break;

  0005c	e9 a0 00 00 00	 jmp	 $LN12@GetIsJoyUn
$LN9@GetIsJoyUn:

; 1289 : 	case 3:
; 1290 : 		return this->IsJoyStickZ(MinimumPercent);

  00061	51		 push	 ecx
  00062	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  00065	d9 1c 24	 fstp	 DWORD PTR [esp]
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006b	e8 00 00 00 00	 call	 ?IsJoyStickZ@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickZ
  00070	e9 8c 00 00 00	 jmp	 $LN12@GetIsJoyUn

; 1291 : 		break;

  00075	e9 87 00 00 00	 jmp	 $LN12@GetIsJoyUn
$LN8@GetIsJoyUn:

; 1292 : 	case 4:
; 1293 : 		return this->IsJoyStickTwistX(MinimumPercent);

  0007a	51		 push	 ecx
  0007b	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  0007e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?IsJoyStickTwistX@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistX
  00089	eb 76		 jmp	 SHORT $LN12@GetIsJoyUn

; 1294 : 		break;

  0008b	eb 74		 jmp	 SHORT $LN12@GetIsJoyUn
$LN7@GetIsJoyUn:

; 1295 : 	case 5:
; 1296 : 		return this->IsJoyStickTwistY(MinimumPercent);

  0008d	51		 push	 ecx
  0008e	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  00091	d9 1c 24	 fstp	 DWORD PTR [esp]
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	e8 00 00 00 00	 call	 ?IsJoyStickTwistY@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistY
  0009c	eb 63		 jmp	 SHORT $LN12@GetIsJoyUn

; 1297 : 		break;

  0009e	eb 61		 jmp	 SHORT $LN12@GetIsJoyUn
$LN6@GetIsJoyUn:

; 1298 : 	case 6:
; 1299 : 		return this->IsJoyStickTwistZ(MinimumPercent);

  000a0	51		 push	 ecx
  000a1	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  000a4	d9 1c 24	 fstp	 DWORD PTR [esp]
  000a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	e8 00 00 00 00	 call	 ?IsJoyStickTwistZ@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistZ
  000af	eb 50		 jmp	 SHORT $LN12@GetIsJoyUn

; 1300 : 		break;

  000b1	eb 4e		 jmp	 SHORT $LN12@GetIsJoyUn
$LN5@GetIsJoyUn:

; 1301 : 	case 7:
; 1302 : 		return this->IsJoyStickSliderA(MinimumPercent);

  000b3	51		 push	 ecx
  000b4	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  000b7	d9 1c 24	 fstp	 DWORD PTR [esp]
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?IsJoyStickSliderA@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderA
  000c2	eb 3d		 jmp	 SHORT $LN12@GetIsJoyUn

; 1303 : 		break;

  000c4	eb 3b		 jmp	 SHORT $LN12@GetIsJoyUn
$LN4@GetIsJoyUn:

; 1304 : 	case 8:
; 1305 : 		return this->IsJoyStickSliderB(MinimumPercent);

  000c6	51		 push	 ecx
  000c7	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  000ca	d9 1c 24	 fstp	 DWORD PTR [esp]
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	e8 00 00 00 00	 call	 ?IsJoyStickSliderB@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderB
  000d5	eb 2a		 jmp	 SHORT $LN12@GetIsJoyUn

; 1306 : 		break;

  000d7	eb 28		 jmp	 SHORT $LN12@GetIsJoyUn
$LN3@GetIsJoyUn:

; 1307 : 	case 9:
; 1308 : 		return this->IsJoyStickSliderC(MinimumPercent);

  000d9	51		 push	 ecx
  000da	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  000dd	d9 1c 24	 fstp	 DWORD PTR [esp]
  000e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e3	e8 00 00 00 00	 call	 ?IsJoyStickSliderC@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderC
  000e8	eb 17		 jmp	 SHORT $LN12@GetIsJoyUn

; 1309 : 		break;

  000ea	eb 15		 jmp	 SHORT $LN12@GetIsJoyUn
$LN2@GetIsJoyUn:

; 1310 : 	case 10:
; 1311 : 		return this->IsJoyStickSliderD(MinimumPercent);

  000ec	51		 push	 ecx
  000ed	d9 45 0c	 fld	 DWORD PTR _MinimumPercent$[ebp]
  000f0	d9 1c 24	 fstp	 DWORD PTR [esp]
  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	e8 00 00 00 00	 call	 ?IsJoyStickSliderD@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderD
  000fb	eb 04		 jmp	 SHORT $LN12@GetIsJoyUn

; 1312 : 		break;

  000fd	eb 02		 jmp	 SHORT $LN12@GetIsJoyUn
$LN1@GetIsJoyUn:

; 1313 : 	default:
; 1314 : 		return NULL;

  000ff	32 c0		 xor	 al, al
$LN12@GetIsJoyUn:

; 1315 : 		break;
; 1316 : 	}
; 1317 : }

  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 08 00	 ret	 8
  0010a	8b ff		 npad	 2
$LN16@GetIsJoyUn:
  0010c	00 00 00 00	 DD	 $LN11@GetIsJoyUn
  00110	00 00 00 00	 DD	 $LN10@GetIsJoyUn
  00114	00 00 00 00	 DD	 $LN9@GetIsJoyUn
  00118	00 00 00 00	 DD	 $LN8@GetIsJoyUn
  0011c	00 00 00 00	 DD	 $LN7@GetIsJoyUn
  00120	00 00 00 00	 DD	 $LN6@GetIsJoyUn
  00124	00 00 00 00	 DD	 $LN5@GetIsJoyUn
  00128	00 00 00 00	 DD	 $LN4@GetIsJoyUn
  0012c	00 00 00 00	 DD	 $LN3@GetIsJoyUn
  00130	00 00 00 00	 DD	 $LN2@GetIsJoyUn
?GetIsJoyUndirectional@DeviceHandler@@QAE_NHM@Z ENDP	; DeviceHandler::GetIsJoyUndirectional
_TEXT	ENDS
PUBLIC	?HatRotateRight@DeviceHandler@@QAE_NHH@Z	; DeviceHandler::HatRotateRight
PUBLIC	?HatRotateLeft@DeviceHandler@@QAE_NHH@Z		; DeviceHandler::HatRotateLeft
PUBLIC	?HatRotate@DeviceHandler@@QAE_NHH@Z		; DeviceHandler::HatRotate
; Function compile flags: /Odtp /ZI
;	COMDAT ?HatRotate@DeviceHandler@@QAE_NHH@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
_Hat$ = 8						; size = 4
_MaximumLag$ = 12					; size = 4
?HatRotate@DeviceHandler@@QAE_NHH@Z PROC		; DeviceHandler::HatRotate, COMDAT
; _this$ = ecx

; 1319 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1320 : 	return (this->HatRotateLeft(Hat,MaximumLag)||this->HatRotateRight(Hat,MaximumLag));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _MaximumLag$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _Hat$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?HatRotateLeft@DeviceHandler@@QAE_NHH@Z ; DeviceHandler::HatRotateLeft
  0001c	0f b6 d0	 movzx	 edx, al
  0001f	85 d2		 test	 edx, edx
  00021	75 20		 jne	 SHORT $LN3@HatRotate
  00023	8b 45 0c	 mov	 eax, DWORD PTR _MaximumLag$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _Hat$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?HatRotateRight@DeviceHandler@@QAE_NHH@Z ; DeviceHandler::HatRotateRight
  00033	0f b6 d0	 movzx	 edx, al
  00036	85 d2		 test	 edx, edx
  00038	75 09		 jne	 SHORT $LN3@HatRotate
  0003a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
  00041	eb 07		 jmp	 SHORT $LN4@HatRotate
$LN3@HatRotate:
  00043	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
$LN4@HatRotate:
  0004a	8a 45 b8	 mov	 al, BYTE PTR tv76[ebp]

; 1321 : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
?HatRotate@DeviceHandler@@QAE_NHH@Z ENDP		; DeviceHandler::HatRotate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?HatRotateLeft@DeviceHandler@@QAE_NHH@Z
_TEXT	SEGMENT
_j$91742 = -28						; size = 4
_start$91739 = -24					; size = 4
_pos$91738 = -20					; size = 4
_lasti$91737 = -16					; size = 4
_i$91736 = -12						; size = 4
_FlagOfFirst$91735 = -5					; size = 1
_this$ = -4						; size = 4
_Hat$ = 8						; size = 4
_MaximumLag$ = 12					; size = 4
?HatRotateLeft@DeviceHandler@@QAE_NHH@Z PROC		; DeviceHandler::HatRotateLeft, COMDAT
; _this$ = ecx

; 1323 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1324 : 	if(this->HatAngles[Hat][0]!=-1)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  0000f	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 bc 01 5c 11
	00 00 ff	 cmp	 DWORD PTR [ecx+eax+4444], -1
  00020	0f 84 53 01 00
	00		 je	 $LN18@HatRotateL

; 1325 : 	{
; 1326 : 		bool FlagOfFirst;
; 1327 : 		int i;
; 1328 : 		int lasti;
; 1329 : 		int pos;
; 1330 : 		unsigned int start=this->HatAngles[Hat][0]/45;

  00026	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  00029	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 84 01 5c 11
	00 00		 mov	 eax, DWORD PTR [ecx+eax+4444]
  00039	99		 cdq
  0003a	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  0003f	f7 f9		 idiv	 ecx
  00041	89 45 e8	 mov	 DWORD PTR _start$91739[ebp], eax

; 1331 : 		FlagOfFirst=false;

  00044	c6 45 fb 00	 mov	 BYTE PTR _FlagOfFirst$91735[ebp], 0

; 1332 : 		i=0;

  00048	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$91736[ebp], 0

; 1333 : 		if(start==0)

  0004f	83 7d e8 00	 cmp	 DWORD PTR _start$91739[ebp], 0
  00053	75 09		 jne	 SHORT $LN17@HatRotateL

; 1334 : 			pos=7;

  00055	c7 45 ec 07 00
	00 00		 mov	 DWORD PTR _pos$91738[ebp], 7

; 1335 : 		else

  0005c	eb 09		 jmp	 SHORT $LN16@HatRotateL
$LN17@HatRotateL:

; 1336 : 			pos=start-1;

  0005e	8b 45 e8	 mov	 eax, DWORD PTR _start$91739[ebp]
  00061	83 e8 01	 sub	 eax, 1
  00064	89 45 ec	 mov	 DWORD PTR _pos$91738[ebp], eax
$LN16@HatRotateL:

; 1337 : 
; 1338 : 		for(int j=0;j<9;j++)

  00067	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _j$91742[ebp], 0
  0006e	eb 09		 jmp	 SHORT $LN15@HatRotateL
$LN14@HatRotateL:
  00070	8b 45 e4	 mov	 eax, DWORD PTR _j$91742[ebp]
  00073	83 c0 01	 add	 eax, 1
  00076	89 45 e4	 mov	 DWORD PTR _j$91742[ebp], eax
$LN15@HatRotateL:
  00079	83 7d e4 09	 cmp	 DWORD PTR _j$91742[ebp], 9
  0007d	0f 8d f6 00 00
	00		 jge	 $LN18@HatRotateL

; 1339 : 		{
; 1340 : 			if(i==99)

  00083	83 7d f4 63	 cmp	 DWORD PTR _i$91736[ebp], 99 ; 00000063H
  00087	75 07		 jne	 SHORT $LN12@HatRotateL

; 1341 : 				return false;

  00089	32 c0		 xor	 al, al
  0008b	e9 eb 00 00 00	 jmp	 $LN19@HatRotateL
$LN12@HatRotateL:

; 1342 : 
; 1343 : 			lasti=i;

  00090	8b 45 f4	 mov	 eax, DWORD PTR _i$91736[ebp]
  00093	89 45 f0	 mov	 DWORD PTR _lasti$91737[ebp], eax

; 1344 : 
; 1345 : 			for(pos++;(this->HatAngles[Hat][i]==pos*45||this->HatAngles[Hat][i]==-1)&&i-lasti<=MaximumLag;i++);

  00096	8b 45 ec	 mov	 eax, DWORD PTR _pos$91738[ebp]
  00099	83 c0 01	 add	 eax, 1
  0009c	89 45 ec	 mov	 DWORD PTR _pos$91738[ebp], eax
  0009f	eb 09		 jmp	 SHORT $LN11@HatRotateL
$LN10@HatRotateL:
  000a1	8b 45 f4	 mov	 eax, DWORD PTR _i$91736[ebp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 45 f4	 mov	 DWORD PTR _i$91736[ebp], eax
$LN11@HatRotateL:
  000aa	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  000ad	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	8d 94 01 5c 11
	00 00		 lea	 edx, DWORD PTR [ecx+eax+4444]
  000bd	8b 45 ec	 mov	 eax, DWORD PTR _pos$91738[ebp]
  000c0	6b c0 2d	 imul	 eax, 45			; 0000002dH
  000c3	8b 4d f4	 mov	 ecx, DWORD PTR _i$91736[ebp]
  000c6	39 04 8a	 cmp	 DWORD PTR [edx+ecx*4], eax
  000c9	74 1c		 je	 SHORT $LN8@HatRotateL
  000cb	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  000ce	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  000d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	8d 94 01 5c 11
	00 00		 lea	 edx, DWORD PTR [ecx+eax+4444]
  000de	8b 45 f4	 mov	 eax, DWORD PTR _i$91736[ebp]
  000e1	83 3c 82 ff	 cmp	 DWORD PTR [edx+eax*4], -1
  000e5	75 0d		 jne	 SHORT $LN9@HatRotateL
$LN8@HatRotateL:
  000e7	8b 45 f4	 mov	 eax, DWORD PTR _i$91736[ebp]
  000ea	2b 45 f0	 sub	 eax, DWORD PTR _lasti$91737[ebp]
  000ed	3b 45 0c	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  000f0	7f 02		 jg	 SHORT $LN9@HatRotateL
  000f2	eb ad		 jmp	 SHORT $LN10@HatRotateL
$LN9@HatRotateL:

; 1346 : 
; 1347 : 			if(i-lasti>MaximumLag)

  000f4	8b 45 f4	 mov	 eax, DWORD PTR _i$91736[ebp]
  000f7	2b 45 f0	 sub	 eax, DWORD PTR _lasti$91737[ebp]
  000fa	3b 45 0c	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  000fd	7e 04		 jle	 SHORT $LN7@HatRotateL

; 1348 : 				return false;

  000ff	32 c0		 xor	 al, al
  00101	eb 78		 jmp	 SHORT $LN19@HatRotateL
$LN7@HatRotateL:

; 1349 : 
; 1350 : 			if(pos==7)

  00103	83 7d ec 07	 cmp	 DWORD PTR _pos$91738[ebp], 7
  00107	75 29		 jne	 SHORT $LN6@HatRotateL

; 1351 : 			{
; 1352 : 				if(this->HatAngles[Hat][i]!=0)

  00109	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  0010c	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  00112	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	8d 94 01 5c 11
	00 00		 lea	 edx, DWORD PTR [ecx+eax+4444]
  0011c	8b 45 f4	 mov	 eax, DWORD PTR _i$91736[ebp]
  0011f	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  00123	74 04		 je	 SHORT $LN5@HatRotateL

; 1353 : 					return false;

  00125	32 c0		 xor	 al, al
  00127	eb 52		 jmp	 SHORT $LN19@HatRotateL
$LN5@HatRotateL:

; 1354 : 
; 1355 : 				pos=-1;

  00129	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _pos$91738[ebp], -1

; 1356 : 			}
; 1357 : 			else

  00130	eb 28		 jmp	 SHORT $LN4@HatRotateL
$LN6@HatRotateL:

; 1358 : 				if(this->HatAngles[Hat][i]!=(pos+1)*45)

  00132	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  00135	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  0013b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013e	8d 94 01 5c 11
	00 00		 lea	 edx, DWORD PTR [ecx+eax+4444]
  00145	8b 45 ec	 mov	 eax, DWORD PTR _pos$91738[ebp]
  00148	83 c0 01	 add	 eax, 1
  0014b	6b c0 2d	 imul	 eax, 45			; 0000002dH
  0014e	8b 4d f4	 mov	 ecx, DWORD PTR _i$91736[ebp]
  00151	39 04 8a	 cmp	 DWORD PTR [edx+ecx*4], eax
  00154	74 04		 je	 SHORT $LN4@HatRotateL

; 1359 : 					return false;

  00156	32 c0		 xor	 al, al
  00158	eb 21		 jmp	 SHORT $LN19@HatRotateL
$LN4@HatRotateL:

; 1360 : 
; 1361 : 			if(pos==start&&FlagOfFirst)

  0015a	8b 45 ec	 mov	 eax, DWORD PTR _pos$91738[ebp]
  0015d	3b 45 e8	 cmp	 eax, DWORD PTR _start$91739[ebp]
  00160	75 0e		 jne	 SHORT $LN2@HatRotateL
  00162	0f b6 45 fb	 movzx	 eax, BYTE PTR _FlagOfFirst$91735[ebp]
  00166	85 c0		 test	 eax, eax
  00168	74 06		 je	 SHORT $LN2@HatRotateL

; 1362 : 				return true;

  0016a	b0 01		 mov	 al, 1
  0016c	eb 0d		 jmp	 SHORT $LN19@HatRotateL

; 1363 : 			else

  0016e	eb 04		 jmp	 SHORT $LN1@HatRotateL
$LN2@HatRotateL:

; 1364 : 				FlagOfFirst=true;

  00170	c6 45 fb 01	 mov	 BYTE PTR _FlagOfFirst$91735[ebp], 1
$LN1@HatRotateL:

; 1365 : 		}

  00174	e9 f7 fe ff ff	 jmp	 $LN14@HatRotateL
$LN18@HatRotateL:

; 1366 : 	}
; 1367 : 
; 1368 : 	return false;

  00179	32 c0		 xor	 al, al
$LN19@HatRotateL:

; 1369 : }

  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	5b		 pop	 ebx
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 08 00	 ret	 8
?HatRotateLeft@DeviceHandler@@QAE_NHH@Z ENDP		; DeviceHandler::HatRotateLeft
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?HatRotateRight@DeviceHandler@@QAE_NHH@Z
_TEXT	SEGMENT
_j$91771 = -28						; size = 4
_start$91768 = -24					; size = 4
_pos$91767 = -20					; size = 4
_lasti$91766 = -16					; size = 4
_i$91765 = -12						; size = 4
_FlagOfFirst$91764 = -5					; size = 1
_this$ = -4						; size = 4
_Hat$ = 8						; size = 4
_MaximumLag$ = 12					; size = 4
?HatRotateRight@DeviceHandler@@QAE_NHH@Z PROC		; DeviceHandler::HatRotateRight, COMDAT
; _this$ = ecx

; 1371 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1372 : 	if(this->HatAngles[Hat][0]!=-1)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  0000f	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 bc 01 5c 11
	00 00 ff	 cmp	 DWORD PTR [ecx+eax+4444], -1
  00020	0f 84 56 01 00
	00		 je	 $LN18@HatRotateR

; 1373 : 	{
; 1374 : 		bool FlagOfFirst;
; 1375 : 		int i;
; 1376 : 		int lasti;
; 1377 : 		int pos;
; 1378 : 		unsigned int start=this->HatAngles[Hat][0]/45;

  00026	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  00029	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 84 01 5c 11
	00 00		 mov	 eax, DWORD PTR [ecx+eax+4444]
  00039	99		 cdq
  0003a	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  0003f	f7 f9		 idiv	 ecx
  00041	89 45 e8	 mov	 DWORD PTR _start$91768[ebp], eax

; 1379 : 		FlagOfFirst=false;

  00044	c6 45 fb 00	 mov	 BYTE PTR _FlagOfFirst$91764[ebp], 0

; 1380 : 		i=0;

  00048	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$91765[ebp], 0

; 1381 : 		if(start==7)

  0004f	83 7d e8 07	 cmp	 DWORD PTR _start$91768[ebp], 7
  00053	75 09		 jne	 SHORT $LN17@HatRotateR

; 1382 : 			pos=0;

  00055	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pos$91767[ebp], 0

; 1383 : 		else

  0005c	eb 09		 jmp	 SHORT $LN16@HatRotateR
$LN17@HatRotateR:

; 1384 : 			pos=start+1;

  0005e	8b 45 e8	 mov	 eax, DWORD PTR _start$91768[ebp]
  00061	83 c0 01	 add	 eax, 1
  00064	89 45 ec	 mov	 DWORD PTR _pos$91767[ebp], eax
$LN16@HatRotateR:

; 1385 : 
; 1386 : 		for(int j=0;j<9;j++)

  00067	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _j$91771[ebp], 0
  0006e	eb 09		 jmp	 SHORT $LN15@HatRotateR
$LN14@HatRotateR:
  00070	8b 45 e4	 mov	 eax, DWORD PTR _j$91771[ebp]
  00073	83 c0 01	 add	 eax, 1
  00076	89 45 e4	 mov	 DWORD PTR _j$91771[ebp], eax
$LN15@HatRotateR:
  00079	83 7d e4 09	 cmp	 DWORD PTR _j$91771[ebp], 9
  0007d	0f 8d f9 00 00
	00		 jge	 $LN18@HatRotateR

; 1387 : 		{
; 1388 : 			if(i==99)

  00083	83 7d f4 63	 cmp	 DWORD PTR _i$91765[ebp], 99 ; 00000063H
  00087	75 07		 jne	 SHORT $LN12@HatRotateR

; 1389 : 				return false;

  00089	32 c0		 xor	 al, al
  0008b	e9 ee 00 00 00	 jmp	 $LN19@HatRotateR
$LN12@HatRotateR:

; 1390 : 
; 1391 : 			lasti=i;

  00090	8b 45 f4	 mov	 eax, DWORD PTR _i$91765[ebp]
  00093	89 45 f0	 mov	 DWORD PTR _lasti$91766[ebp], eax

; 1392 : 
; 1393 : 			for(pos--;(this->HatAngles[Hat][i]==pos*45||this->HatAngles[Hat][i]==-1)&&i-lasti<=MaximumLag;i++);

  00096	8b 45 ec	 mov	 eax, DWORD PTR _pos$91767[ebp]
  00099	83 e8 01	 sub	 eax, 1
  0009c	89 45 ec	 mov	 DWORD PTR _pos$91767[ebp], eax
  0009f	eb 09		 jmp	 SHORT $LN11@HatRotateR
$LN10@HatRotateR:
  000a1	8b 45 f4	 mov	 eax, DWORD PTR _i$91765[ebp]
  000a4	83 c0 01	 add	 eax, 1
  000a7	89 45 f4	 mov	 DWORD PTR _i$91765[ebp], eax
$LN11@HatRotateR:
  000aa	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  000ad	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	8d 94 01 5c 11
	00 00		 lea	 edx, DWORD PTR [ecx+eax+4444]
  000bd	8b 45 ec	 mov	 eax, DWORD PTR _pos$91767[ebp]
  000c0	6b c0 2d	 imul	 eax, 45			; 0000002dH
  000c3	8b 4d f4	 mov	 ecx, DWORD PTR _i$91765[ebp]
  000c6	39 04 8a	 cmp	 DWORD PTR [edx+ecx*4], eax
  000c9	74 1c		 je	 SHORT $LN8@HatRotateR
  000cb	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  000ce	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  000d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	8d 94 01 5c 11
	00 00		 lea	 edx, DWORD PTR [ecx+eax+4444]
  000de	8b 45 f4	 mov	 eax, DWORD PTR _i$91765[ebp]
  000e1	83 3c 82 ff	 cmp	 DWORD PTR [edx+eax*4], -1
  000e5	75 0d		 jne	 SHORT $LN9@HatRotateR
$LN8@HatRotateR:
  000e7	8b 45 f4	 mov	 eax, DWORD PTR _i$91765[ebp]
  000ea	2b 45 f0	 sub	 eax, DWORD PTR _lasti$91766[ebp]
  000ed	3b 45 0c	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  000f0	7f 02		 jg	 SHORT $LN9@HatRotateR
  000f2	eb ad		 jmp	 SHORT $LN10@HatRotateR
$LN9@HatRotateR:

; 1394 : 
; 1395 : 			if(i-lasti>MaximumLag)

  000f4	8b 45 f4	 mov	 eax, DWORD PTR _i$91765[ebp]
  000f7	2b 45 f0	 sub	 eax, DWORD PTR _lasti$91766[ebp]
  000fa	3b 45 0c	 cmp	 eax, DWORD PTR _MaximumLag$[ebp]
  000fd	7e 04		 jle	 SHORT $LN7@HatRotateR

; 1396 : 				return false;

  000ff	32 c0		 xor	 al, al
  00101	eb 7b		 jmp	 SHORT $LN19@HatRotateR
$LN7@HatRotateR:

; 1397 : 
; 1398 : 			if(pos==0)

  00103	83 7d ec 00	 cmp	 DWORD PTR _pos$91767[ebp], 0
  00107	75 2c		 jne	 SHORT $LN6@HatRotateR

; 1399 : 			{
; 1400 : 				if(this->HatAngles[Hat][i]!=45*7)

  00109	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  0010c	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  00112	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	8d 94 01 5c 11
	00 00		 lea	 edx, DWORD PTR [ecx+eax+4444]
  0011c	8b 45 f4	 mov	 eax, DWORD PTR _i$91765[ebp]
  0011f	81 3c 82 3b 01
	00 00		 cmp	 DWORD PTR [edx+eax*4], 315 ; 0000013bH
  00126	74 04		 je	 SHORT $LN5@HatRotateR

; 1401 : 					return false;

  00128	32 c0		 xor	 al, al
  0012a	eb 52		 jmp	 SHORT $LN19@HatRotateR
$LN5@HatRotateR:

; 1402 : 
; 1403 : 				pos=8;

  0012c	c7 45 ec 08 00
	00 00		 mov	 DWORD PTR _pos$91767[ebp], 8

; 1404 : 			}
; 1405 : 			else

  00133	eb 28		 jmp	 SHORT $LN4@HatRotateR
$LN6@HatRotateR:

; 1406 : 				if(this->HatAngles[Hat][i]!=(pos-1)*45)

  00135	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  00138	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  0013e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00141	8d 94 01 5c 11
	00 00		 lea	 edx, DWORD PTR [ecx+eax+4444]
  00148	8b 45 ec	 mov	 eax, DWORD PTR _pos$91767[ebp]
  0014b	83 e8 01	 sub	 eax, 1
  0014e	6b c0 2d	 imul	 eax, 45			; 0000002dH
  00151	8b 4d f4	 mov	 ecx, DWORD PTR _i$91765[ebp]
  00154	39 04 8a	 cmp	 DWORD PTR [edx+ecx*4], eax
  00157	74 04		 je	 SHORT $LN4@HatRotateR

; 1407 : 					return false;

  00159	32 c0		 xor	 al, al
  0015b	eb 21		 jmp	 SHORT $LN19@HatRotateR
$LN4@HatRotateR:

; 1408 : 
; 1409 : 			if(pos==start&&FlagOfFirst)

  0015d	8b 45 ec	 mov	 eax, DWORD PTR _pos$91767[ebp]
  00160	3b 45 e8	 cmp	 eax, DWORD PTR _start$91768[ebp]
  00163	75 0e		 jne	 SHORT $LN2@HatRotateR
  00165	0f b6 45 fb	 movzx	 eax, BYTE PTR _FlagOfFirst$91764[ebp]
  00169	85 c0		 test	 eax, eax
  0016b	74 06		 je	 SHORT $LN2@HatRotateR

; 1410 : 				return true;

  0016d	b0 01		 mov	 al, 1
  0016f	eb 0d		 jmp	 SHORT $LN19@HatRotateR

; 1411 : 			else

  00171	eb 04		 jmp	 SHORT $LN1@HatRotateR
$LN2@HatRotateR:

; 1412 : 				FlagOfFirst=true;

  00173	c6 45 fb 01	 mov	 BYTE PTR _FlagOfFirst$91764[ebp], 1
$LN1@HatRotateR:

; 1413 : 		}

  00177	e9 f4 fe ff ff	 jmp	 $LN14@HatRotateR
$LN18@HatRotateR:

; 1414 : 	}
; 1415 : 
; 1416 : 	return false;

  0017c	32 c0		 xor	 al, al
$LN19@HatRotateR:

; 1417 : }

  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c2 08 00	 ret	 8
?HatRotateRight@DeviceHandler@@QAE_NHH@Z ENDP		; DeviceHandler::HatRotateRight
_TEXT	ENDS
PUBLIC	?IsHoldFor@DeviceHandler@@QAE_NHH@Z		; DeviceHandler::IsHoldFor
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsHoldFor@DeviceHandler@@QAE_NHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_Button$ = 8						; size = 4
_Length$ = 12						; size = 4
?IsHoldFor@DeviceHandler@@QAE_NHH@Z PROC		; DeviceHandler::IsHoldFor, COMDAT
; _this$ = ecx

; 1419 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1420 : 	int i;
; 1421 : 
; 1422 : 	for(i=0;this->Buttons[Button][i]&&i<Length;i++);

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN5@IsHoldFor@2
$LN4@IsHoldFor@2:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN5@IsHoldFor@2:
  0001e	8b 45 08	 mov	 eax, DWORD PTR _Button$[ebp]
  00021	6b c0 64	 imul	 eax, 100		; 00000064H
  00024	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	0f b6 54 01 03	 movzx	 edx, BYTE PTR [ecx+eax+3]
  0002f	85 d2		 test	 edx, edx
  00031	74 0a		 je	 SHORT $LN3@IsHoldFor@2
  00033	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00036	3b 45 0c	 cmp	 eax, DWORD PTR _Length$[ebp]
  00039	7d 02		 jge	 SHORT $LN3@IsHoldFor@2
  0003b	eb d8		 jmp	 SHORT $LN4@IsHoldFor@2
$LN3@IsHoldFor@2:

; 1423 : 
; 1424 : 	if(i==Length)

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00040	3b 45 0c	 cmp	 eax, DWORD PTR _Length$[ebp]
  00043	75 06		 jne	 SHORT $LN2@IsHoldFor@2

; 1425 : 		return true;

  00045	b0 01		 mov	 al, 1
  00047	eb 04		 jmp	 SHORT $LN6@IsHoldFor@2

; 1426 : 	else

  00049	eb 02		 jmp	 SHORT $LN6@IsHoldFor@2
$LN2@IsHoldFor@2:

; 1427 : 		return false;

  0004b	32 c0		 xor	 al, al
$LN6@IsHoldFor@2:

; 1428 : }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
?IsHoldFor@DeviceHandler@@QAE_NHH@Z ENDP		; DeviceHandler::IsHoldFor
_TEXT	ENDS
PUBLIC	?IsHatPosition@DeviceHandler@@QAE_NHH@Z		; DeviceHandler::IsHatPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsHatPosition@DeviceHandler@@QAE_NHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Hat$ = 8						; size = 4
_Position$ = 12						; size = 4
?IsHatPosition@DeviceHandler@@QAE_NHH@Z PROC		; DeviceHandler::IsHatPosition, COMDAT
; _this$ = ecx

; 1430 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1431 : 	if(Hat<4&&Hat>=0)

  0000c	83 7d 08 04	 cmp	 DWORD PTR _Hat$[ebp], 4
  00010	7d 20		 jge	 SHORT $LN2@IsHatPosit
  00012	83 7d 08 00	 cmp	 DWORD PTR _Hat$[ebp], 0
  00016	7c 1a		 jl	 SHORT $LN2@IsHatPosit

; 1432 : 		if(this->GetHatAngle(Hat)==Position*45)

  00018	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?GetHatAngle@DeviceHandler@@QAEHH@Z ; DeviceHandler::GetHatAngle
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _Position$[ebp]
  00027	6b c9 2d	 imul	 ecx, 45			; 0000002dH
  0002a	3b c1		 cmp	 eax, ecx
  0002c	75 04		 jne	 SHORT $LN2@IsHatPosit

; 1433 : 			return true;

  0002e	b0 01		 mov	 al, 1
  00030	eb 02		 jmp	 SHORT $LN3@IsHatPosit
$LN2@IsHatPosit:

; 1434 : 	
; 1435 : 	return false;

  00032	32 c0		 xor	 al, al
$LN3@IsHatPosit:

; 1436 : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?IsHatPosition@DeviceHandler@@QAE_NHH@Z ENDP		; DeviceHandler::IsHatPosition
_TEXT	ENDS
PUBLIC	?IsMashed@DeviceHandler@@QAE_NHH@Z		; DeviceHandler::IsMashed
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsMashed@DeviceHandler@@QAE_NHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_Button$ = 8						; size = 4
_MinimumMashSpeed$ = 12					; size = 4
?IsMashed@DeviceHandler@@QAE_NHH@Z PROC			; DeviceHandler::IsMashed, COMDAT
; _this$ = ecx

; 1438 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1439 : 	int i;
; 1440 : 
; 1441 : 	if(Button>=0&&Button<32)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _Button$[ebp], 0
  00010	7c 70		 jl	 SHORT $LN7@IsMashed@3
  00012	83 7d 08 20	 cmp	 DWORD PTR _Button$[ebp], 32 ; 00000020H
  00016	7d 6a		 jge	 SHORT $LN7@IsMashed@3

; 1442 : 		if(this->Buttons[Button][0]&&!this->Buttons[Button][1])

  00018	8b 45 08	 mov	 eax, DWORD PTR _Button$[ebp]
  0001b	6b c0 64	 imul	 eax, 100		; 00000064H
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	0f b6 54 01 03	 movzx	 edx, BYTE PTR [ecx+eax+3]
  00026	85 d2		 test	 edx, edx
  00028	74 58		 je	 SHORT $LN7@IsMashed@3
  0002a	8b 45 08	 mov	 eax, DWORD PTR _Button$[ebp]
  0002d	6b c0 64	 imul	 eax, 100		; 00000064H
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	0f b6 54 01 04	 movzx	 edx, BYTE PTR [ecx+eax+4]
  00038	85 d2		 test	 edx, edx
  0003a	75 46		 jne	 SHORT $LN7@IsMashed@3

; 1443 : 		{
; 1444 : 			for(i=2;!this->Buttons[Button][i]&&i<MinimumMashSpeed+1;i++);

  0003c	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _i$[ebp], 2
  00043	eb 09		 jmp	 SHORT $LN5@IsMashed@3
$LN4@IsMashed@3:
  00045	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00048	83 c0 01	 add	 eax, 1
  0004b	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN5@IsMashed@3:
  0004e	8b 45 08	 mov	 eax, DWORD PTR _Button$[ebp]
  00051	6b c0 64	 imul	 eax, 100		; 00000064H
  00054	03 45 f8	 add	 eax, DWORD PTR _i$[ebp]
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	0f b6 54 01 03	 movzx	 edx, BYTE PTR [ecx+eax+3]
  0005f	85 d2		 test	 edx, edx
  00061	75 0d		 jne	 SHORT $LN3@IsMashed@3
  00063	8b 45 0c	 mov	 eax, DWORD PTR _MinimumMashSpeed$[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	39 45 f8	 cmp	 DWORD PTR _i$[ebp], eax
  0006c	7d 02		 jge	 SHORT $LN3@IsMashed@3
  0006e	eb d5		 jmp	 SHORT $LN4@IsMashed@3
$LN3@IsMashed@3:

; 1445 : 			if(i!=MinimumMashSpeed)

  00070	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00073	3b 45 0c	 cmp	 eax, DWORD PTR _MinimumMashSpeed$[ebp]
  00076	74 06		 je	 SHORT $LN2@IsMashed@3

; 1446 : 				return true;

  00078	b0 01		 mov	 al, 1
  0007a	eb 08		 jmp	 SHORT $LN8@IsMashed@3

; 1447 : 			else

  0007c	eb 04		 jmp	 SHORT $LN7@IsMashed@3
$LN2@IsMashed@3:

; 1448 : 				return false;

  0007e	32 c0		 xor	 al, al
  00080	eb 02		 jmp	 SHORT $LN8@IsMashed@3
$LN7@IsMashed@3:

; 1449 : 		}
; 1450 : 
; 1451 : 	return false;

  00082	32 c0		 xor	 al, al
$LN8@IsMashed@3:

; 1452 : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 08 00	 ret	 8
?IsMashed@DeviceHandler@@QAE_NHH@Z ENDP			; DeviceHandler::IsMashed
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsPressed@DeviceHandler@@QAE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Button$ = 8						; size = 4
?IsPressed@DeviceHandler@@QAE_NH@Z PROC			; DeviceHandler::IsPressed, COMDAT
; _this$ = ecx

; 1454 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1455 : 	return this->Buttons[Button][0];

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Button$[ebp]
  0000f	6b c0 64	 imul	 eax, 100		; 00000064H
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8a 44 01 03	 mov	 al, BYTE PTR [ecx+eax+3]

; 1456 : }

  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi
  0001b	5b		 pop	 ebx
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?IsPressed@DeviceHandler@@QAE_NH@Z ENDP			; DeviceHandler::IsPressed
_TEXT	ENDS
PUBLIC	?JoyStickASliderPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickASliderPosition
PUBLIC	__real@0000000000000000
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?IsJoyStickSliderA@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderA@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickSliderA, COMDAT
; _this$ = ecx

; 1458 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1459 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick

; 1460 : 	{
; 1461 : 		if(this->JoyStickASliderPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick

; 1462 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 47		 jmp	 SHORT $LN8@IsJoyStick
$LN6@IsJoyStick:

; 1463 : 	}

  00034	eb 43		 jmp	 SHORT $LN1@IsJoyStick
$LN7@IsJoyStick:

; 1464 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 1a		 jp	 SHORT $LN4@IsJoyStick

; 1465 : 	{
; 1466 : 		if(this->JoyStickASliderPosition()<Percent)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	de d9		 fcompp
  00053	df e0		 fnstsw	 ax
  00055	f6 c4 41	 test	 ah, 65			; 00000041H
  00058	75 04		 jne	 SHORT $LN3@IsJoyStick

; 1467 : 			return true;

  0005a	b0 01		 mov	 al, 1
  0005c	eb 1d		 jmp	 SHORT $LN8@IsJoyStick
$LN3@IsJoyStick:

; 1468 : 	}
; 1469 : 	else

  0005e	eb 19		 jmp	 SHORT $LN1@IsJoyStick
$LN4@IsJoyStick:

; 1470 : 		if(this->JoyStickASliderPosition()==0)

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
  00068	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0006e	df e0		 fnstsw	 ax
  00070	f6 c4 44	 test	 ah, 68			; 00000044H
  00073	7a 04		 jp	 SHORT $LN1@IsJoyStick

; 1471 : 			return true;

  00075	b0 01		 mov	 al, 1
  00077	eb 02		 jmp	 SHORT $LN8@IsJoyStick
$LN1@IsJoyStick:

; 1472 : 
; 1473 : 	return false;

  00079	32 c0		 xor	 al, al
$LN8@IsJoyStick:

; 1474 : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?IsJoyStickSliderA@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickSliderA
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?IsJoyStickSliderAMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderAMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderAMax, COMDAT
; _this$ = ecx

; 1476 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1477 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@2

; 1478 : 	{
; 1479 : 		if(this->JoyStickASliderPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@2

; 1480 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 4d		 jmp	 SHORT $LN8@IsJoyStick@2
$LN6@IsJoyStick@2:

; 1481 : 	}

  00034	eb 49		 jmp	 SHORT $LN1@IsJoyStick@2
$LN7@IsJoyStick@2:

; 1482 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 20		 jp	 SHORT $LN4@IsJoyStick@2

; 1483 : 	{
; 1484 : 		if(this->JoyStickASliderPosition()>Percent*-1)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 05	 test	 ah, 5
  0005e	7a 04		 jp	 SHORT $LN3@IsJoyStick@2

; 1485 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@2
$LN3@IsJoyStick@2:

; 1486 : 	}
; 1487 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@2
$LN4@IsJoyStick@2:

; 1488 : 		if(this->JoyStickASliderPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@2

; 1489 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@2
$LN1@IsJoyStick@2:

; 1490 : 
; 1491 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@2:

; 1492 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickSliderAMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderAMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderAMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderAMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderAMin, COMDAT
; _this$ = ecx

; 1494 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1495 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 20		 jne	 SHORT $LN7@IsJoyStick@3

; 1496 : 	{
; 1497 : 		if(this->JoyStickASliderPosition()<Percent*-1)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  0002d	de d9		 fcompp
  0002f	df e0		 fnstsw	 ax
  00031	f6 c4 41	 test	 ah, 65			; 00000041H
  00034	75 04		 jne	 SHORT $LN6@IsJoyStick@3

; 1498 : 			return true;

  00036	b0 01		 mov	 al, 1
  00038	eb 47		 jmp	 SHORT $LN8@IsJoyStick@3
$LN6@IsJoyStick@3:

; 1499 : 	}

  0003a	eb 43		 jmp	 SHORT $LN1@IsJoyStick@3
$LN7@IsJoyStick@3:

; 1500 : 	else if(Percent<0)

  0003c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0003f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00045	df e0		 fnstsw	 ax
  00047	f6 c4 05	 test	 ah, 5
  0004a	7a 1a		 jp	 SHORT $LN4@IsJoyStick@3

; 1501 : 	{
; 1502 : 		if(this->JoyStickASliderPosition()<Percent)

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
  00054	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 41	 test	 ah, 65			; 00000041H
  0005e	75 04		 jne	 SHORT $LN3@IsJoyStick@3

; 1503 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@3
$LN3@IsJoyStick@3:

; 1504 : 	}
; 1505 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@3
$LN4@IsJoyStick@3:

; 1506 : 		if(this->JoyStickASliderPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@3

; 1507 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@3
$LN1@IsJoyStick@3:

; 1508 : 
; 1509 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@3:

; 1510 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickSliderAMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderAMin
_TEXT	ENDS
PUBLIC	?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickBSliderPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickSliderB@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderB@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickSliderB, COMDAT
; _this$ = ecx

; 1512 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1513 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@4

; 1514 : 	{
; 1515 : 		if(this->JoyStickBSliderPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@4

; 1516 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 47		 jmp	 SHORT $LN8@IsJoyStick@4
$LN6@IsJoyStick@4:

; 1517 : 	}

  00034	eb 43		 jmp	 SHORT $LN1@IsJoyStick@4
$LN7@IsJoyStick@4:

; 1518 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 1a		 jp	 SHORT $LN4@IsJoyStick@4

; 1519 : 	{
; 1520 : 		if(this->JoyStickBSliderPosition()<Percent)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	de d9		 fcompp
  00053	df e0		 fnstsw	 ax
  00055	f6 c4 41	 test	 ah, 65			; 00000041H
  00058	75 04		 jne	 SHORT $LN3@IsJoyStick@4

; 1521 : 			return true;

  0005a	b0 01		 mov	 al, 1
  0005c	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@4
$LN3@IsJoyStick@4:

; 1522 : 	}
; 1523 : 	else

  0005e	eb 19		 jmp	 SHORT $LN1@IsJoyStick@4
$LN4@IsJoyStick@4:

; 1524 : 		if(this->JoyStickBSliderPosition()==0)

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
  00068	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0006e	df e0		 fnstsw	 ax
  00070	f6 c4 44	 test	 ah, 68			; 00000044H
  00073	7a 04		 jp	 SHORT $LN1@IsJoyStick@4

; 1525 : 			return true;

  00075	b0 01		 mov	 al, 1
  00077	eb 02		 jmp	 SHORT $LN8@IsJoyStick@4
$LN1@IsJoyStick@4:

; 1526 : 
; 1527 : 	return false;

  00079	32 c0		 xor	 al, al
$LN8@IsJoyStick@4:

; 1528 : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?IsJoyStickSliderB@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickSliderB
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderBMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderBMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderBMax, COMDAT
; _this$ = ecx

; 1530 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1531 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@5

; 1532 : 	{
; 1533 : 		if(this->JoyStickBSliderPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@5

; 1534 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 4d		 jmp	 SHORT $LN8@IsJoyStick@5
$LN6@IsJoyStick@5:

; 1535 : 	}

  00034	eb 49		 jmp	 SHORT $LN1@IsJoyStick@5
$LN7@IsJoyStick@5:

; 1536 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 20		 jp	 SHORT $LN4@IsJoyStick@5

; 1537 : 	{
; 1538 : 		if(this->JoyStickBSliderPosition()>Percent*-1)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 05	 test	 ah, 5
  0005e	7a 04		 jp	 SHORT $LN3@IsJoyStick@5

; 1539 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@5
$LN3@IsJoyStick@5:

; 1540 : 	}
; 1541 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@5
$LN4@IsJoyStick@5:

; 1542 : 		if(this->JoyStickBSliderPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@5

; 1543 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@5
$LN1@IsJoyStick@5:

; 1544 : 
; 1545 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@5:

; 1546 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickSliderBMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderBMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderBMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderBMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderBMin, COMDAT
; _this$ = ecx

; 1548 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1549 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 20		 jne	 SHORT $LN7@IsJoyStick@6

; 1550 : 	{
; 1551 : 		if(this->JoyStickBSliderPosition()<Percent*-1)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  0002d	de d9		 fcompp
  0002f	df e0		 fnstsw	 ax
  00031	f6 c4 41	 test	 ah, 65			; 00000041H
  00034	75 04		 jne	 SHORT $LN6@IsJoyStick@6

; 1552 : 			return true;

  00036	b0 01		 mov	 al, 1
  00038	eb 47		 jmp	 SHORT $LN8@IsJoyStick@6
$LN6@IsJoyStick@6:

; 1553 : 	}

  0003a	eb 43		 jmp	 SHORT $LN1@IsJoyStick@6
$LN7@IsJoyStick@6:

; 1554 : 	else if(Percent<0)

  0003c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0003f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00045	df e0		 fnstsw	 ax
  00047	f6 c4 05	 test	 ah, 5
  0004a	7a 1a		 jp	 SHORT $LN4@IsJoyStick@6

; 1555 : 	{
; 1556 : 		if(this->JoyStickBSliderPosition()<Percent)

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
  00054	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 41	 test	 ah, 65			; 00000041H
  0005e	75 04		 jne	 SHORT $LN3@IsJoyStick@6

; 1557 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@6
$LN3@IsJoyStick@6:

; 1558 : 	}
; 1559 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@6
$LN4@IsJoyStick@6:

; 1560 : 		if(this->JoyStickBSliderPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@6

; 1561 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@6
$LN1@IsJoyStick@6:

; 1562 : 
; 1563 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@6:

; 1564 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickSliderBMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderBMin
_TEXT	ENDS
PUBLIC	?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickCSliderPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickSliderC@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderC@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickSliderC, COMDAT
; _this$ = ecx

; 1566 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1567 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@7

; 1568 : 	{
; 1569 : 		if(this->JoyStickCSliderPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@7

; 1570 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 47		 jmp	 SHORT $LN8@IsJoyStick@7
$LN6@IsJoyStick@7:

; 1571 : 	}

  00034	eb 43		 jmp	 SHORT $LN1@IsJoyStick@7
$LN7@IsJoyStick@7:

; 1572 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 1a		 jp	 SHORT $LN4@IsJoyStick@7

; 1573 : 	{
; 1574 : 		if(this->JoyStickCSliderPosition()<Percent)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	de d9		 fcompp
  00053	df e0		 fnstsw	 ax
  00055	f6 c4 41	 test	 ah, 65			; 00000041H
  00058	75 04		 jne	 SHORT $LN3@IsJoyStick@7

; 1575 : 			return true;

  0005a	b0 01		 mov	 al, 1
  0005c	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@7
$LN3@IsJoyStick@7:

; 1576 : 	}
; 1577 : 	else

  0005e	eb 19		 jmp	 SHORT $LN1@IsJoyStick@7
$LN4@IsJoyStick@7:

; 1578 : 		if(this->JoyStickCSliderPosition()==0)

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
  00068	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0006e	df e0		 fnstsw	 ax
  00070	f6 c4 44	 test	 ah, 68			; 00000044H
  00073	7a 04		 jp	 SHORT $LN1@IsJoyStick@7

; 1579 : 			return true;

  00075	b0 01		 mov	 al, 1
  00077	eb 02		 jmp	 SHORT $LN8@IsJoyStick@7
$LN1@IsJoyStick@7:

; 1580 : 
; 1581 : 	return false;

  00079	32 c0		 xor	 al, al
$LN8@IsJoyStick@7:

; 1582 : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?IsJoyStickSliderC@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickSliderC
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderCMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderCMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderCMax, COMDAT
; _this$ = ecx

; 1584 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1585 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@8

; 1586 : 	{
; 1587 : 		if(this->JoyStickCSliderPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@8

; 1588 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 4d		 jmp	 SHORT $LN8@IsJoyStick@8
$LN6@IsJoyStick@8:

; 1589 : 	}

  00034	eb 49		 jmp	 SHORT $LN1@IsJoyStick@8
$LN7@IsJoyStick@8:

; 1590 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 20		 jp	 SHORT $LN4@IsJoyStick@8

; 1591 : 	{
; 1592 : 		if(this->JoyStickCSliderPosition()>Percent*-1)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 05	 test	 ah, 5
  0005e	7a 04		 jp	 SHORT $LN3@IsJoyStick@8

; 1593 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@8
$LN3@IsJoyStick@8:

; 1594 : 	}
; 1595 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@8
$LN4@IsJoyStick@8:

; 1596 : 		if(this->JoyStickCSliderPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@8

; 1597 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@8
$LN1@IsJoyStick@8:

; 1598 : 
; 1599 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@8:

; 1600 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickSliderCMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderCMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderCMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderCMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderCMin, COMDAT
; _this$ = ecx

; 1602 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1603 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 20		 jne	 SHORT $LN7@IsJoyStick@9

; 1604 : 	{
; 1605 : 		if(this->JoyStickCSliderPosition()<Percent*-1)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  0002d	de d9		 fcompp
  0002f	df e0		 fnstsw	 ax
  00031	f6 c4 41	 test	 ah, 65			; 00000041H
  00034	75 04		 jne	 SHORT $LN6@IsJoyStick@9

; 1606 : 			return true;

  00036	b0 01		 mov	 al, 1
  00038	eb 47		 jmp	 SHORT $LN8@IsJoyStick@9
$LN6@IsJoyStick@9:

; 1607 : 	}

  0003a	eb 43		 jmp	 SHORT $LN1@IsJoyStick@9
$LN7@IsJoyStick@9:

; 1608 : 	else if(Percent<0)

  0003c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0003f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00045	df e0		 fnstsw	 ax
  00047	f6 c4 05	 test	 ah, 5
  0004a	7a 1a		 jp	 SHORT $LN4@IsJoyStick@9

; 1609 : 	{
; 1610 : 		if(this->JoyStickCSliderPosition()<Percent)

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
  00054	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 41	 test	 ah, 65			; 00000041H
  0005e	75 04		 jne	 SHORT $LN3@IsJoyStick@9

; 1611 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@9
$LN3@IsJoyStick@9:

; 1612 : 	}
; 1613 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@9
$LN4@IsJoyStick@9:

; 1614 : 		if(this->JoyStickCSliderPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@9

; 1615 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@9
$LN1@IsJoyStick@9:

; 1616 : 
; 1617 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@9:

; 1618 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickSliderCMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderCMin
_TEXT	ENDS
PUBLIC	?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickDSliderPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickSliderD@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderD@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickSliderD, COMDAT
; _this$ = ecx

; 1620 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1621 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@10

; 1622 : 	{
; 1623 : 		if(this->JoyStickDSliderPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@10

; 1624 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 47		 jmp	 SHORT $LN8@IsJoyStick@10
$LN6@IsJoyStick@10:

; 1625 : 	}

  00034	eb 43		 jmp	 SHORT $LN1@IsJoyStick@10
$LN7@IsJoyStick@10:

; 1626 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 1a		 jp	 SHORT $LN4@IsJoyStick@10

; 1627 : 	{
; 1628 : 		if(this->JoyStickDSliderPosition()<Percent)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	de d9		 fcompp
  00053	df e0		 fnstsw	 ax
  00055	f6 c4 41	 test	 ah, 65			; 00000041H
  00058	75 04		 jne	 SHORT $LN3@IsJoyStick@10

; 1629 : 			return true;

  0005a	b0 01		 mov	 al, 1
  0005c	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@10
$LN3@IsJoyStick@10:

; 1630 : 	}
; 1631 : 	else

  0005e	eb 19		 jmp	 SHORT $LN1@IsJoyStick@10
$LN4@IsJoyStick@10:

; 1632 : 		if(this->JoyStickDSliderPosition()==0)

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
  00068	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0006e	df e0		 fnstsw	 ax
  00070	f6 c4 44	 test	 ah, 68			; 00000044H
  00073	7a 04		 jp	 SHORT $LN1@IsJoyStick@10

; 1633 : 			return true;

  00075	b0 01		 mov	 al, 1
  00077	eb 02		 jmp	 SHORT $LN8@IsJoyStick@10
$LN1@IsJoyStick@10:

; 1634 : 
; 1635 : 	return false;

  00079	32 c0		 xor	 al, al
$LN8@IsJoyStick@10:

; 1636 : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?IsJoyStickSliderD@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickSliderD
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderDMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderDMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderDMax, COMDAT
; _this$ = ecx

; 1638 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1639 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@11

; 1640 : 	{
; 1641 : 		if(this->JoyStickDSliderPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@11

; 1642 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 4d		 jmp	 SHORT $LN8@IsJoyStick@11
$LN6@IsJoyStick@11:

; 1643 : 	}

  00034	eb 49		 jmp	 SHORT $LN1@IsJoyStick@11
$LN7@IsJoyStick@11:

; 1644 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 20		 jp	 SHORT $LN4@IsJoyStick@11

; 1645 : 	{
; 1646 : 		if(this->JoyStickDSliderPosition()>Percent*-1)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 05	 test	 ah, 5
  0005e	7a 04		 jp	 SHORT $LN3@IsJoyStick@11

; 1647 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@11
$LN3@IsJoyStick@11:

; 1648 : 	}
; 1649 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@11
$LN4@IsJoyStick@11:

; 1650 : 		if(this->JoyStickDSliderPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@11

; 1651 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@11
$LN1@IsJoyStick@11:

; 1652 : 
; 1653 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@11:

; 1654 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickSliderDMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderDMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderDMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderDMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderDMin, COMDAT
; _this$ = ecx

; 1656 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1657 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 20		 jne	 SHORT $LN7@IsJoyStick@12

; 1658 : 	{
; 1659 : 		if(this->JoyStickDSliderPosition()<Percent*-1)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  0002d	de d9		 fcompp
  0002f	df e0		 fnstsw	 ax
  00031	f6 c4 41	 test	 ah, 65			; 00000041H
  00034	75 04		 jne	 SHORT $LN6@IsJoyStick@12

; 1660 : 			return true;

  00036	b0 01		 mov	 al, 1
  00038	eb 47		 jmp	 SHORT $LN8@IsJoyStick@12
$LN6@IsJoyStick@12:

; 1661 : 	}

  0003a	eb 43		 jmp	 SHORT $LN1@IsJoyStick@12
$LN7@IsJoyStick@12:

; 1662 : 	else if(Percent<0)

  0003c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0003f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00045	df e0		 fnstsw	 ax
  00047	f6 c4 05	 test	 ah, 5
  0004a	7a 1a		 jp	 SHORT $LN4@IsJoyStick@12

; 1663 : 	{
; 1664 : 		if(this->JoyStickDSliderPosition()<Percent)

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
  00054	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 41	 test	 ah, 65			; 00000041H
  0005e	75 04		 jne	 SHORT $LN3@IsJoyStick@12

; 1665 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@12
$LN3@IsJoyStick@12:

; 1666 : 	}
; 1667 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@12
$LN4@IsJoyStick@12:

; 1668 : 		if(this->JoyStickDSliderPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@12

; 1669 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@12
$LN1@IsJoyStick@12:

; 1670 : 
; 1671 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@12:

; 1672 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickSliderDMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderDMin
_TEXT	ENDS
PUBLIC	?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickXTwistPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickTwistX@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistX@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickTwistX, COMDAT
; _this$ = ecx

; 1674 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1675 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@13

; 1676 : 	{
; 1677 : 		if(this->JoyStickXTwistPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@13

; 1678 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 47		 jmp	 SHORT $LN8@IsJoyStick@13
$LN6@IsJoyStick@13:

; 1679 : 	}

  00034	eb 43		 jmp	 SHORT $LN1@IsJoyStick@13
$LN7@IsJoyStick@13:

; 1680 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 1a		 jp	 SHORT $LN4@IsJoyStick@13

; 1681 : 	{
; 1682 : 		if(this->JoyStickXTwistPosition()<Percent)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	de d9		 fcompp
  00053	df e0		 fnstsw	 ax
  00055	f6 c4 41	 test	 ah, 65			; 00000041H
  00058	75 04		 jne	 SHORT $LN3@IsJoyStick@13

; 1683 : 			return true;

  0005a	b0 01		 mov	 al, 1
  0005c	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@13
$LN3@IsJoyStick@13:

; 1684 : 	}
; 1685 : 	else

  0005e	eb 19		 jmp	 SHORT $LN1@IsJoyStick@13
$LN4@IsJoyStick@13:

; 1686 : 		if(this->JoyStickXTwistPosition()==0)

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
  00068	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0006e	df e0		 fnstsw	 ax
  00070	f6 c4 44	 test	 ah, 68			; 00000044H
  00073	7a 04		 jp	 SHORT $LN1@IsJoyStick@13

; 1687 : 			return true;

  00075	b0 01		 mov	 al, 1
  00077	eb 02		 jmp	 SHORT $LN8@IsJoyStick@13
$LN1@IsJoyStick@13:

; 1688 : 
; 1689 : 	return false;

  00079	32 c0		 xor	 al, al
$LN8@IsJoyStick@13:

; 1690 : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?IsJoyStickTwistX@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickTwistX
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickTwistXMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistXMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickTwistXMax, COMDAT
; _this$ = ecx

; 1692 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1693 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@14

; 1694 : 	{
; 1695 : 		if(this->JoyStickXTwistPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@14

; 1696 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 4d		 jmp	 SHORT $LN8@IsJoyStick@14
$LN6@IsJoyStick@14:

; 1697 : 	}

  00034	eb 49		 jmp	 SHORT $LN1@IsJoyStick@14
$LN7@IsJoyStick@14:

; 1698 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 20		 jp	 SHORT $LN4@IsJoyStick@14

; 1699 : 	{
; 1700 : 		if(this->JoyStickXTwistPosition()>Percent*-1)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 05	 test	 ah, 5
  0005e	7a 04		 jp	 SHORT $LN3@IsJoyStick@14

; 1701 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@14
$LN3@IsJoyStick@14:

; 1702 : 	}
; 1703 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@14
$LN4@IsJoyStick@14:

; 1704 : 		if(this->JoyStickXTwistPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@14

; 1705 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@14
$LN1@IsJoyStick@14:

; 1706 : 
; 1707 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@14:

; 1708 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickTwistXMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickTwistXMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickTwistXMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistXMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickTwistXMin, COMDAT
; _this$ = ecx

; 1710 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1711 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 20		 jne	 SHORT $LN7@IsJoyStick@15

; 1712 : 	{
; 1713 : 		if(this->JoyStickXTwistPosition()<Percent*-1)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  0002d	de d9		 fcompp
  0002f	df e0		 fnstsw	 ax
  00031	f6 c4 41	 test	 ah, 65			; 00000041H
  00034	75 04		 jne	 SHORT $LN6@IsJoyStick@15

; 1714 : 			return true;

  00036	b0 01		 mov	 al, 1
  00038	eb 47		 jmp	 SHORT $LN8@IsJoyStick@15
$LN6@IsJoyStick@15:

; 1715 : 	}

  0003a	eb 43		 jmp	 SHORT $LN1@IsJoyStick@15
$LN7@IsJoyStick@15:

; 1716 : 	else if(Percent<0)

  0003c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0003f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00045	df e0		 fnstsw	 ax
  00047	f6 c4 05	 test	 ah, 5
  0004a	7a 1a		 jp	 SHORT $LN4@IsJoyStick@15

; 1717 : 	{
; 1718 : 		if(this->JoyStickXTwistPosition()<Percent)

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
  00054	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 41	 test	 ah, 65			; 00000041H
  0005e	75 04		 jne	 SHORT $LN3@IsJoyStick@15

; 1719 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@15
$LN3@IsJoyStick@15:

; 1720 : 	}
; 1721 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@15
$LN4@IsJoyStick@15:

; 1722 : 		if(this->JoyStickXTwistPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@15

; 1723 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@15
$LN1@IsJoyStick@15:

; 1724 : 
; 1725 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@15:

; 1726 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickTwistXMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickTwistXMin
_TEXT	ENDS
PUBLIC	?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickYTwistPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickTwistY@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistY@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickTwistY, COMDAT
; _this$ = ecx

; 1728 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1729 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@16

; 1730 : 	{
; 1731 : 		if(this->JoyStickYTwistPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@16

; 1732 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 47		 jmp	 SHORT $LN8@IsJoyStick@16
$LN6@IsJoyStick@16:

; 1733 : 	}

  00034	eb 43		 jmp	 SHORT $LN1@IsJoyStick@16
$LN7@IsJoyStick@16:

; 1734 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 1a		 jp	 SHORT $LN4@IsJoyStick@16

; 1735 : 	{
; 1736 : 		if(this->JoyStickYTwistPosition()<Percent)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	de d9		 fcompp
  00053	df e0		 fnstsw	 ax
  00055	f6 c4 41	 test	 ah, 65			; 00000041H
  00058	75 04		 jne	 SHORT $LN3@IsJoyStick@16

; 1737 : 			return true;

  0005a	b0 01		 mov	 al, 1
  0005c	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@16
$LN3@IsJoyStick@16:

; 1738 : 	}
; 1739 : 	else

  0005e	eb 19		 jmp	 SHORT $LN1@IsJoyStick@16
$LN4@IsJoyStick@16:

; 1740 : 		if(this->JoyStickYTwistPosition()==0)

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
  00068	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0006e	df e0		 fnstsw	 ax
  00070	f6 c4 44	 test	 ah, 68			; 00000044H
  00073	7a 04		 jp	 SHORT $LN1@IsJoyStick@16

; 1741 : 			return true;

  00075	b0 01		 mov	 al, 1
  00077	eb 02		 jmp	 SHORT $LN8@IsJoyStick@16
$LN1@IsJoyStick@16:

; 1742 : 
; 1743 : 	return false;

  00079	32 c0		 xor	 al, al
$LN8@IsJoyStick@16:

; 1744 : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?IsJoyStickTwistY@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickTwistY
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickTwistYMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistYMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickTwistYMax, COMDAT
; _this$ = ecx

; 1746 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1747 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@17

; 1748 : 	{
; 1749 : 		if(this->JoyStickYTwistPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@17

; 1750 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 4d		 jmp	 SHORT $LN8@IsJoyStick@17
$LN6@IsJoyStick@17:

; 1751 : 	}

  00034	eb 49		 jmp	 SHORT $LN1@IsJoyStick@17
$LN7@IsJoyStick@17:

; 1752 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 20		 jp	 SHORT $LN4@IsJoyStick@17

; 1753 : 	{
; 1754 : 		if(this->JoyStickYTwistPosition()>Percent*-1)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 05	 test	 ah, 5
  0005e	7a 04		 jp	 SHORT $LN3@IsJoyStick@17

; 1755 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@17
$LN3@IsJoyStick@17:

; 1756 : 	}
; 1757 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@17
$LN4@IsJoyStick@17:

; 1758 : 		if(this->JoyStickYTwistPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@17

; 1759 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@17
$LN1@IsJoyStick@17:

; 1760 : 
; 1761 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@17:

; 1762 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickTwistYMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickTwistYMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickTwistYMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistYMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickTwistYMin, COMDAT
; _this$ = ecx

; 1764 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1765 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 20		 jne	 SHORT $LN7@IsJoyStick@18

; 1766 : 	{
; 1767 : 		if(this->JoyStickYTwistPosition()<Percent*-1)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  0002d	de d9		 fcompp
  0002f	df e0		 fnstsw	 ax
  00031	f6 c4 41	 test	 ah, 65			; 00000041H
  00034	75 04		 jne	 SHORT $LN6@IsJoyStick@18

; 1768 : 			return true;

  00036	b0 01		 mov	 al, 1
  00038	eb 47		 jmp	 SHORT $LN8@IsJoyStick@18
$LN6@IsJoyStick@18:

; 1769 : 	}

  0003a	eb 43		 jmp	 SHORT $LN1@IsJoyStick@18
$LN7@IsJoyStick@18:

; 1770 : 	else if(Percent<0)

  0003c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0003f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00045	df e0		 fnstsw	 ax
  00047	f6 c4 05	 test	 ah, 5
  0004a	7a 1a		 jp	 SHORT $LN4@IsJoyStick@18

; 1771 : 	{
; 1772 : 		if(this->JoyStickYTwistPosition()<Percent)

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
  00054	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 41	 test	 ah, 65			; 00000041H
  0005e	75 04		 jne	 SHORT $LN3@IsJoyStick@18

; 1773 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@18
$LN3@IsJoyStick@18:

; 1774 : 	}
; 1775 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@18
$LN4@IsJoyStick@18:

; 1776 : 		if(this->JoyStickYTwistPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@18

; 1777 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@18
$LN1@IsJoyStick@18:

; 1778 : 
; 1779 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@18:

; 1780 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickTwistYMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickTwistYMin
_TEXT	ENDS
PUBLIC	?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickZTwistPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickTwistZ@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistZ@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickTwistZ, COMDAT
; _this$ = ecx

; 1782 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1783 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@19

; 1784 : 	{
; 1785 : 		if(this->JoyStickZTwistPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@19

; 1786 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 47		 jmp	 SHORT $LN8@IsJoyStick@19
$LN6@IsJoyStick@19:

; 1787 : 	}

  00034	eb 43		 jmp	 SHORT $LN1@IsJoyStick@19
$LN7@IsJoyStick@19:

; 1788 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 1a		 jp	 SHORT $LN4@IsJoyStick@19

; 1789 : 	{
; 1790 : 		if(this->JoyStickZTwistPosition()<Percent)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	de d9		 fcompp
  00053	df e0		 fnstsw	 ax
  00055	f6 c4 41	 test	 ah, 65			; 00000041H
  00058	75 04		 jne	 SHORT $LN3@IsJoyStick@19

; 1791 : 			return true;

  0005a	b0 01		 mov	 al, 1
  0005c	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@19
$LN3@IsJoyStick@19:

; 1792 : 	}
; 1793 : 	else

  0005e	eb 19		 jmp	 SHORT $LN1@IsJoyStick@19
$LN4@IsJoyStick@19:

; 1794 : 		if(this->JoyStickZTwistPosition()==0)

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
  00068	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0006e	df e0		 fnstsw	 ax
  00070	f6 c4 44	 test	 ah, 68			; 00000044H
  00073	7a 04		 jp	 SHORT $LN1@IsJoyStick@19

; 1795 : 			return true;

  00075	b0 01		 mov	 al, 1
  00077	eb 02		 jmp	 SHORT $LN8@IsJoyStick@19
$LN1@IsJoyStick@19:

; 1796 : 
; 1797 : 	return false;

  00079	32 c0		 xor	 al, al
$LN8@IsJoyStick@19:

; 1798 : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?IsJoyStickTwistZ@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickTwistZ
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickTwistZMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistZMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickTwistZMax, COMDAT
; _this$ = ecx

; 1800 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1801 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@20

; 1802 : 	{
; 1803 : 		if(this->JoyStickZTwistPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@20

; 1804 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 4d		 jmp	 SHORT $LN8@IsJoyStick@20
$LN6@IsJoyStick@20:

; 1805 : 	}

  00034	eb 49		 jmp	 SHORT $LN1@IsJoyStick@20
$LN7@IsJoyStick@20:

; 1806 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 20		 jp	 SHORT $LN4@IsJoyStick@20

; 1807 : 	{
; 1808 : 		if(this->JoyStickZTwistPosition()>Percent*-1)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 05	 test	 ah, 5
  0005e	7a 04		 jp	 SHORT $LN3@IsJoyStick@20

; 1809 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@20
$LN3@IsJoyStick@20:

; 1810 : 	}
; 1811 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@20
$LN4@IsJoyStick@20:

; 1812 : 		if(this->JoyStickZTwistPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@20

; 1813 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@20
$LN1@IsJoyStick@20:

; 1814 : 
; 1815 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@20:

; 1816 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickTwistZMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickTwistZMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickTwistZMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistZMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickTwistZMin, COMDAT
; _this$ = ecx

; 1818 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1819 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 20		 jne	 SHORT $LN7@IsJoyStick@21

; 1820 : 	{
; 1821 : 		if(this->JoyStickZTwistPosition()<Percent*-1)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  0002d	de d9		 fcompp
  0002f	df e0		 fnstsw	 ax
  00031	f6 c4 41	 test	 ah, 65			; 00000041H
  00034	75 04		 jne	 SHORT $LN6@IsJoyStick@21

; 1822 : 			return true;

  00036	b0 01		 mov	 al, 1
  00038	eb 47		 jmp	 SHORT $LN8@IsJoyStick@21
$LN6@IsJoyStick@21:

; 1823 : 	}

  0003a	eb 43		 jmp	 SHORT $LN1@IsJoyStick@21
$LN7@IsJoyStick@21:

; 1824 : 	else if(Percent<0)

  0003c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0003f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00045	df e0		 fnstsw	 ax
  00047	f6 c4 05	 test	 ah, 5
  0004a	7a 1a		 jp	 SHORT $LN4@IsJoyStick@21

; 1825 : 	{
; 1826 : 		if(this->JoyStickZTwistPosition()<Percent)

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
  00054	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 41	 test	 ah, 65			; 00000041H
  0005e	75 04		 jne	 SHORT $LN3@IsJoyStick@21

; 1827 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@21
$LN3@IsJoyStick@21:

; 1828 : 	}
; 1829 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@21
$LN4@IsJoyStick@21:

; 1830 : 		if(this->JoyStickZTwistPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@21

; 1831 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@21
$LN1@IsJoyStick@21:

; 1832 : 
; 1833 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@21:

; 1834 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickTwistZMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickTwistZMin
_TEXT	ENDS
PUBLIC	?JoyStickXPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickXPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickX@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickX@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickX, COMDAT
; _this$ = ecx

; 1836 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1837 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@22

; 1838 : 	{
; 1839 : 		if(this->JoyStickXPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@22

; 1840 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 47		 jmp	 SHORT $LN8@IsJoyStick@22
$LN6@IsJoyStick@22:

; 1841 : 	}

  00034	eb 43		 jmp	 SHORT $LN1@IsJoyStick@22
$LN7@IsJoyStick@22:

; 1842 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 1a		 jp	 SHORT $LN4@IsJoyStick@22

; 1843 : 	{
; 1844 : 		if(this->JoyStickXPosition()<Percent)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	de d9		 fcompp
  00053	df e0		 fnstsw	 ax
  00055	f6 c4 41	 test	 ah, 65			; 00000041H
  00058	75 04		 jne	 SHORT $LN3@IsJoyStick@22

; 1845 : 			return true;

  0005a	b0 01		 mov	 al, 1
  0005c	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@22
$LN3@IsJoyStick@22:

; 1846 : 	}
; 1847 : 	else

  0005e	eb 19		 jmp	 SHORT $LN1@IsJoyStick@22
$LN4@IsJoyStick@22:

; 1848 : 		if(this->JoyStickXPosition()==0)

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
  00068	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0006e	df e0		 fnstsw	 ax
  00070	f6 c4 44	 test	 ah, 68			; 00000044H
  00073	7a 04		 jp	 SHORT $LN1@IsJoyStick@22

; 1849 : 			return true;

  00075	b0 01		 mov	 al, 1
  00077	eb 02		 jmp	 SHORT $LN8@IsJoyStick@22
$LN1@IsJoyStick@22:

; 1850 : 
; 1851 : 	return false;

  00079	32 c0		 xor	 al, al
$LN8@IsJoyStick@22:

; 1852 : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?IsJoyStickX@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickX
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickXMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickXMax@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickXMax, COMDAT
; _this$ = ecx

; 1854 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1855 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@23

; 1856 : 	{
; 1857 : 		if(this->JoyStickXPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@23

; 1858 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 4d		 jmp	 SHORT $LN8@IsJoyStick@23
$LN6@IsJoyStick@23:

; 1859 : 	}

  00034	eb 49		 jmp	 SHORT $LN1@IsJoyStick@23
$LN7@IsJoyStick@23:

; 1860 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 20		 jp	 SHORT $LN4@IsJoyStick@23

; 1861 : 	{
; 1862 : 		if(this->JoyStickXPosition()>Percent*-1)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 05	 test	 ah, 5
  0005e	7a 04		 jp	 SHORT $LN3@IsJoyStick@23

; 1863 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@23
$LN3@IsJoyStick@23:

; 1864 : 	}
; 1865 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@23
$LN4@IsJoyStick@23:

; 1866 : 		if(this->JoyStickXPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@23

; 1867 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@23
$LN1@IsJoyStick@23:

; 1868 : 
; 1869 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@23:

; 1870 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickXMax@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickXMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickXMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickXMin@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickXMin, COMDAT
; _this$ = ecx

; 1872 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1873 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 20		 jne	 SHORT $LN7@IsJoyStick@24

; 1874 : 	{
; 1875 : 		if(this->JoyStickXPosition()<Percent*-1)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  0002d	de d9		 fcompp
  0002f	df e0		 fnstsw	 ax
  00031	f6 c4 41	 test	 ah, 65			; 00000041H
  00034	75 04		 jne	 SHORT $LN6@IsJoyStick@24

; 1876 : 			return true;

  00036	b0 01		 mov	 al, 1
  00038	eb 47		 jmp	 SHORT $LN8@IsJoyStick@24
$LN6@IsJoyStick@24:

; 1877 : 	}

  0003a	eb 43		 jmp	 SHORT $LN1@IsJoyStick@24
$LN7@IsJoyStick@24:

; 1878 : 	else if(Percent<0)

  0003c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0003f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00045	df e0		 fnstsw	 ax
  00047	f6 c4 05	 test	 ah, 5
  0004a	7a 1a		 jp	 SHORT $LN4@IsJoyStick@24

; 1879 : 	{
; 1880 : 		if(this->JoyStickXPosition()<Percent)

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
  00054	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 41	 test	 ah, 65			; 00000041H
  0005e	75 04		 jne	 SHORT $LN3@IsJoyStick@24

; 1881 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@24
$LN3@IsJoyStick@24:

; 1882 : 	}
; 1883 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@24
$LN4@IsJoyStick@24:

; 1884 : 		if(this->JoyStickXPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@24

; 1885 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@24
$LN1@IsJoyStick@24:

; 1886 : 
; 1887 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@24:

; 1888 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickXMin@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickXMin
_TEXT	ENDS
PUBLIC	?JoyStickYPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickYPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickY@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickY@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickY, COMDAT
; _this$ = ecx

; 1890 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1891 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@25

; 1892 : 	{
; 1893 : 		if(this->JoyStickYPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@25

; 1894 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 47		 jmp	 SHORT $LN8@IsJoyStick@25
$LN6@IsJoyStick@25:

; 1895 : 	}

  00034	eb 43		 jmp	 SHORT $LN1@IsJoyStick@25
$LN7@IsJoyStick@25:

; 1896 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 1a		 jp	 SHORT $LN4@IsJoyStick@25

; 1897 : 	{
; 1898 : 		if(this->JoyStickYPosition()<Percent)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	de d9		 fcompp
  00053	df e0		 fnstsw	 ax
  00055	f6 c4 41	 test	 ah, 65			; 00000041H
  00058	75 04		 jne	 SHORT $LN3@IsJoyStick@25

; 1899 : 			return true;

  0005a	b0 01		 mov	 al, 1
  0005c	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@25
$LN3@IsJoyStick@25:

; 1900 : 	}
; 1901 : 	else

  0005e	eb 19		 jmp	 SHORT $LN1@IsJoyStick@25
$LN4@IsJoyStick@25:

; 1902 : 		if(this->JoyStickYPosition()==0)

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
  00068	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0006e	df e0		 fnstsw	 ax
  00070	f6 c4 44	 test	 ah, 68			; 00000044H
  00073	7a 04		 jp	 SHORT $LN1@IsJoyStick@25

; 1903 : 			return true;

  00075	b0 01		 mov	 al, 1
  00077	eb 02		 jmp	 SHORT $LN8@IsJoyStick@25
$LN1@IsJoyStick@25:

; 1904 : 
; 1905 : 	return false;

  00079	32 c0		 xor	 al, al
$LN8@IsJoyStick@25:

; 1906 : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?IsJoyStickY@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickY
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickYMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickYMax@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickYMax, COMDAT
; _this$ = ecx

; 1908 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1909 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@26

; 1910 : 	{
; 1911 : 		if(this->JoyStickYPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@26

; 1912 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 4d		 jmp	 SHORT $LN8@IsJoyStick@26
$LN6@IsJoyStick@26:

; 1913 : 	}

  00034	eb 49		 jmp	 SHORT $LN1@IsJoyStick@26
$LN7@IsJoyStick@26:

; 1914 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 20		 jp	 SHORT $LN4@IsJoyStick@26

; 1915 : 	{
; 1916 : 		if(this->JoyStickYPosition()>Percent*-1)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 05	 test	 ah, 5
  0005e	7a 04		 jp	 SHORT $LN3@IsJoyStick@26

; 1917 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@26
$LN3@IsJoyStick@26:

; 1918 : 	}
; 1919 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@26
$LN4@IsJoyStick@26:

; 1920 : 		if(this->JoyStickYPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@26

; 1921 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@26
$LN1@IsJoyStick@26:

; 1922 : 
; 1923 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@26:

; 1924 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickYMax@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickYMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickYMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickYMin@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickYMin, COMDAT
; _this$ = ecx

; 1926 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1927 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 20		 jne	 SHORT $LN7@IsJoyStick@27

; 1928 : 	{
; 1929 : 		if(this->JoyStickYPosition()<Percent*-1)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  0002d	de d9		 fcompp
  0002f	df e0		 fnstsw	 ax
  00031	f6 c4 41	 test	 ah, 65			; 00000041H
  00034	75 04		 jne	 SHORT $LN6@IsJoyStick@27

; 1930 : 			return true;

  00036	b0 01		 mov	 al, 1
  00038	eb 47		 jmp	 SHORT $LN8@IsJoyStick@27
$LN6@IsJoyStick@27:

; 1931 : 	}

  0003a	eb 43		 jmp	 SHORT $LN1@IsJoyStick@27
$LN7@IsJoyStick@27:

; 1932 : 	else if(Percent<0)

  0003c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0003f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00045	df e0		 fnstsw	 ax
  00047	f6 c4 05	 test	 ah, 5
  0004a	7a 1a		 jp	 SHORT $LN4@IsJoyStick@27

; 1933 : 	{
; 1934 : 		if(this->JoyStickYPosition()<Percent)

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
  00054	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 41	 test	 ah, 65			; 00000041H
  0005e	75 04		 jne	 SHORT $LN3@IsJoyStick@27

; 1935 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@27
$LN3@IsJoyStick@27:

; 1936 : 	}
; 1937 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@27
$LN4@IsJoyStick@27:

; 1938 : 		if(this->JoyStickYPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@27

; 1939 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@27
$LN1@IsJoyStick@27:

; 1940 : 
; 1941 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@27:

; 1942 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickYMin@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickYMin
_TEXT	ENDS
PUBLIC	?JoyStickZPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickZPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickZ@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickZ@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickZ, COMDAT
; _this$ = ecx

; 1944 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1945 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@28

; 1946 : 	{
; 1947 : 		if(this->JoyStickZPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@28

; 1948 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 47		 jmp	 SHORT $LN8@IsJoyStick@28
$LN6@IsJoyStick@28:

; 1949 : 	}

  00034	eb 43		 jmp	 SHORT $LN1@IsJoyStick@28
$LN7@IsJoyStick@28:

; 1950 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 1a		 jp	 SHORT $LN4@IsJoyStick@28

; 1951 : 	{
; 1952 : 		if(this->JoyStickZPosition()<Percent)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	de d9		 fcompp
  00053	df e0		 fnstsw	 ax
  00055	f6 c4 41	 test	 ah, 65			; 00000041H
  00058	75 04		 jne	 SHORT $LN3@IsJoyStick@28

; 1953 : 			return true;

  0005a	b0 01		 mov	 al, 1
  0005c	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@28
$LN3@IsJoyStick@28:

; 1954 : 	}
; 1955 : 	else

  0005e	eb 19		 jmp	 SHORT $LN1@IsJoyStick@28
$LN4@IsJoyStick@28:

; 1956 : 		if(this->JoyStickZPosition()==0)

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
  00068	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0006e	df e0		 fnstsw	 ax
  00070	f6 c4 44	 test	 ah, 68			; 00000044H
  00073	7a 04		 jp	 SHORT $LN1@IsJoyStick@28

; 1957 : 			return true;

  00075	b0 01		 mov	 al, 1
  00077	eb 02		 jmp	 SHORT $LN8@IsJoyStick@28
$LN1@IsJoyStick@28:

; 1958 : 
; 1959 : 	return false;

  00079	32 c0		 xor	 al, al
$LN8@IsJoyStick@28:

; 1960 : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?IsJoyStickZ@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickZ
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickZMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickZMax@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickZMax, COMDAT
; _this$ = ecx

; 1962 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1963 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 1a		 jne	 SHORT $LN7@IsJoyStick@29

; 1964 : 	{
; 1965 : 		if(this->JoyStickZPosition()>Percent)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	de d9		 fcompp
  00029	df e0		 fnstsw	 ax
  0002b	f6 c4 05	 test	 ah, 5
  0002e	7a 04		 jp	 SHORT $LN6@IsJoyStick@29

; 1966 : 			return true;

  00030	b0 01		 mov	 al, 1
  00032	eb 4d		 jmp	 SHORT $LN8@IsJoyStick@29
$LN6@IsJoyStick@29:

; 1967 : 	}

  00034	eb 49		 jmp	 SHORT $LN1@IsJoyStick@29
$LN7@IsJoyStick@29:

; 1968 : 	else if(Percent<0)

  00036	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00039	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  0003f	df e0		 fnstsw	 ax
  00041	f6 c4 05	 test	 ah, 5
  00044	7a 20		 jp	 SHORT $LN4@IsJoyStick@29

; 1969 : 	{
; 1970 : 		if(this->JoyStickZPosition()>Percent*-1)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
  0004e	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00051	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 05	 test	 ah, 5
  0005e	7a 04		 jp	 SHORT $LN3@IsJoyStick@29

; 1971 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@29
$LN3@IsJoyStick@29:

; 1972 : 	}
; 1973 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@29
$LN4@IsJoyStick@29:

; 1974 : 		if(this->JoyStickZPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@29

; 1975 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@29
$LN1@IsJoyStick@29:

; 1976 : 
; 1977 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@29:

; 1978 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickZMax@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickZMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickZMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickZMin@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickZMin, COMDAT
; _this$ = ecx

; 1980 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1981 : 	if(Percent>0)

  0000c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0000f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00015	df e0		 fnstsw	 ax
  00017	f6 c4 41	 test	 ah, 65			; 00000041H
  0001a	75 20		 jne	 SHORT $LN7@IsJoyStick@30

; 1982 : 	{
; 1983 : 		if(this->JoyStickZPosition()<Percent*-1)

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
  00024	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00027	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bff0000000000000
  0002d	de d9		 fcompp
  0002f	df e0		 fnstsw	 ax
  00031	f6 c4 41	 test	 ah, 65			; 00000041H
  00034	75 04		 jne	 SHORT $LN6@IsJoyStick@30

; 1984 : 			return true;

  00036	b0 01		 mov	 al, 1
  00038	eb 47		 jmp	 SHORT $LN8@IsJoyStick@30
$LN6@IsJoyStick@30:

; 1985 : 	}

  0003a	eb 43		 jmp	 SHORT $LN1@IsJoyStick@30
$LN7@IsJoyStick@30:

; 1986 : 	else if(Percent<0)

  0003c	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  0003f	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00045	df e0		 fnstsw	 ax
  00047	f6 c4 05	 test	 ah, 5
  0004a	7a 1a		 jp	 SHORT $LN4@IsJoyStick@30

; 1987 : 	{
; 1988 : 		if(this->JoyStickZPosition()<Percent)

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
  00054	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00057	de d9		 fcompp
  00059	df e0		 fnstsw	 ax
  0005b	f6 c4 41	 test	 ah, 65			; 00000041H
  0005e	75 04		 jne	 SHORT $LN3@IsJoyStick@30

; 1989 : 			return true;

  00060	b0 01		 mov	 al, 1
  00062	eb 1d		 jmp	 SHORT $LN8@IsJoyStick@30
$LN3@IsJoyStick@30:

; 1990 : 	}
; 1991 : 	else

  00064	eb 19		 jmp	 SHORT $LN1@IsJoyStick@30
$LN4@IsJoyStick@30:

; 1992 : 		if(this->JoyStickZPosition()==0)

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
  0006e	dc 1d 00 00 00
	00		 fcomp	 QWORD PTR __real@0000000000000000
  00074	df e0		 fnstsw	 ax
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN1@IsJoyStick@30

; 1993 : 			return true;

  0007b	b0 01		 mov	 al, 1
  0007d	eb 02		 jmp	 SHORT $LN8@IsJoyStick@30
$LN1@IsJoyStick@30:

; 1994 : 
; 1995 : 	return false;

  0007f	32 c0		 xor	 al, al
$LN8@IsJoyStick@30:

; 1996 : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?IsJoyStickZMin@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickZMin
_TEXT	ENDS
PUBLIC	??_C@_06NOADDNNE@Center?$AA@			; `string'
PUBLIC	??_C@_0L@FOKBDNEF@North?9West?$AA@		; `string'
PUBLIC	??_C@_04KCPCHGPD@West?$AA@			; `string'
PUBLIC	??_C@_0L@FPKCNJEA@South?9West?$AA@		; `string'
PUBLIC	??_C@_05HNHILFBE@South?$AA@			; `string'
PUBLIC	??_C@_0L@MKOAIKPF@South?9East?$AA@		; `string'
PUBLIC	??_C@_04DHLACFEG@East?$AA@			; `string'
PUBLIC	??_C@_0L@MLODGOPA@North?9East?$AA@		; `string'
PUBLIC	??_C@_05FPOHJMOI@North?$AA@			; `string'
PUBLIC	?AngleToChar@DeviceHandler@@QAEPADH@Z		; DeviceHandler::AngleToChar
;	COMDAT ??_C@_06NOADDNNE@Center?$AA@
CONST	SEGMENT
??_C@_06NOADDNNE@Center?$AA@ DB 'Center', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FOKBDNEF@North?9West?$AA@
CONST	SEGMENT
??_C@_0L@FOKBDNEF@North?9West?$AA@ DB 'North-West', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KCPCHGPD@West?$AA@
CONST	SEGMENT
??_C@_04KCPCHGPD@West?$AA@ DB 'West', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FPKCNJEA@South?9West?$AA@
CONST	SEGMENT
??_C@_0L@FPKCNJEA@South?9West?$AA@ DB 'South-West', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HNHILFBE@South?$AA@
CONST	SEGMENT
??_C@_05HNHILFBE@South?$AA@ DB 'South', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MKOAIKPF@South?9East?$AA@
CONST	SEGMENT
??_C@_0L@MKOAIKPF@South?9East?$AA@ DB 'South-East', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DHLACFEG@East?$AA@
CONST	SEGMENT
??_C@_04DHLACFEG@East?$AA@ DB 'East', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MLODGOPA@North?9East?$AA@
CONST	SEGMENT
??_C@_0L@MLODGOPA@North?9East?$AA@ DB 'North-East', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FPOHJMOI@North?$AA@
CONST	SEGMENT
??_C@_05FPOHJMOI@North?$AA@ DB 'North', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?AngleToChar@DeviceHandler@@QAEPADH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Angle$ = 8						; size = 4
?AngleToChar@DeviceHandler@@QAEPADH@Z PROC		; DeviceHandler::AngleToChar, COMDAT
; _this$ = ecx

; 1998 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1999 : 	switch(Angle)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Angle$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00012	81 7d b8 b4 00
	00 00		 cmp	 DWORD PTR tv64[ebp], 180 ; 000000b4H
  00019	7f 23		 jg	 SHORT $LN14@AngleToCha
  0001b	81 7d b8 b4 00
	00 00		 cmp	 DWORD PTR tv64[ebp], 180 ; 000000b4H
  00022	74 5b		 je	 SHORT $LN5@AngleToCha
  00024	81 7d b8 87 00
	00 00		 cmp	 DWORD PTR tv64[ebp], 135 ; 00000087H
  0002b	77 76		 ja	 SHORT $LN1@AngleToCha
  0002d	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00030	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN15@AngleToCha[ecx]
  00037	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN16@AngleToCha[edx*4]
$LN14@AngleToCha:
  0003e	81 7d b8 e1 00
	00 00		 cmp	 DWORD PTR tv64[ebp], 225 ; 000000e1H
  00045	74 41		 je	 SHORT $LN4@AngleToCha
  00047	81 7d b8 0e 01
	00 00		 cmp	 DWORD PTR tv64[ebp], 270 ; 0000010eH
  0004e	74 41		 je	 SHORT $LN3@AngleToCha
  00050	81 7d b8 3b 01
	00 00		 cmp	 DWORD PTR tv64[ebp], 315 ; 0000013bH
  00057	74 41		 je	 SHORT $LN2@AngleToCha
  00059	eb 48		 jmp	 SHORT $LN1@AngleToCha
$LN9@AngleToCha:

; 2000 : 	{
; 2001 : 	case 0:
; 2002 : 		return "North";

  0005b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05FPOHJMOI@North?$AA@
  00060	eb 4d		 jmp	 SHORT $LN12@AngleToCha

; 2003 : 		break;

  00062	eb 46		 jmp	 SHORT $LN10@AngleToCha
$LN8@AngleToCha:

; 2004 : 	case 45:
; 2005 : 		return "North-East";

  00064	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@MLODGOPA@North?9East?$AA@
  00069	eb 44		 jmp	 SHORT $LN12@AngleToCha

; 2006 : 		break;

  0006b	eb 3d		 jmp	 SHORT $LN10@AngleToCha
$LN7@AngleToCha:

; 2007 : 	case 90:
; 2008 : 		return "East";

  0006d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04DHLACFEG@East?$AA@
  00072	eb 3b		 jmp	 SHORT $LN12@AngleToCha

; 2009 : 		break;

  00074	eb 34		 jmp	 SHORT $LN10@AngleToCha
$LN6@AngleToCha:

; 2010 : 	case 135:
; 2011 : 		return "South-East";

  00076	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@MKOAIKPF@South?9East?$AA@
  0007b	eb 32		 jmp	 SHORT $LN12@AngleToCha

; 2012 : 		break;

  0007d	eb 2b		 jmp	 SHORT $LN10@AngleToCha
$LN5@AngleToCha:

; 2013 : 	case 180:
; 2014 : 		return "South";

  0007f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05HNHILFBE@South?$AA@
  00084	eb 29		 jmp	 SHORT $LN12@AngleToCha

; 2015 : 		break;

  00086	eb 22		 jmp	 SHORT $LN10@AngleToCha
$LN4@AngleToCha:

; 2016 : 	case 225:
; 2017 : 		return "South-West";

  00088	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@FPKCNJEA@South?9West?$AA@
  0008d	eb 20		 jmp	 SHORT $LN12@AngleToCha

; 2018 : 		break;

  0008f	eb 19		 jmp	 SHORT $LN10@AngleToCha
$LN3@AngleToCha:

; 2019 : 	case 270:
; 2020 : 		return "West";

  00091	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04KCPCHGPD@West?$AA@
  00096	eb 17		 jmp	 SHORT $LN12@AngleToCha

; 2021 : 		break;

  00098	eb 10		 jmp	 SHORT $LN10@AngleToCha
$LN2@AngleToCha:

; 2022 : 	case 315:
; 2023 : 		return "North-West";

  0009a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@FOKBDNEF@North?9West?$AA@
  0009f	eb 0e		 jmp	 SHORT $LN12@AngleToCha

; 2024 : 		break;

  000a1	eb 07		 jmp	 SHORT $LN10@AngleToCha
$LN1@AngleToCha:

; 2025 : 	case -1:
; 2026 : 	default:
; 2027 : 		return "Center";

  000a3	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06NOADDNNE@Center?$AA@
  000a8	eb 05		 jmp	 SHORT $LN12@AngleToCha
$LN10@AngleToCha:

; 2028 : 		break;
; 2029 : 	}
; 2030 : 
; 2031 : 	return "Center";

  000aa	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_06NOADDNNE@Center?$AA@
$LN12@AngleToCha:

; 2032 : }

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 04 00	 ret	 4
$LN16@AngleToCha:
  000b8	00 00 00 00	 DD	 $LN9@AngleToCha
  000bc	00 00 00 00	 DD	 $LN8@AngleToCha
  000c0	00 00 00 00	 DD	 $LN7@AngleToCha
  000c4	00 00 00 00	 DD	 $LN6@AngleToCha
  000c8	00 00 00 00	 DD	 $LN1@AngleToCha
$LN15@AngleToCha:
  000cc	00		 DB	 0
  000cd	04		 DB	 4
  000ce	04		 DB	 4
  000cf	04		 DB	 4
  000d0	04		 DB	 4
  000d1	04		 DB	 4
  000d2	04		 DB	 4
  000d3	04		 DB	 4
  000d4	04		 DB	 4
  000d5	04		 DB	 4
  000d6	04		 DB	 4
  000d7	04		 DB	 4
  000d8	04		 DB	 4
  000d9	04		 DB	 4
  000da	04		 DB	 4
  000db	04		 DB	 4
  000dc	04		 DB	 4
  000dd	04		 DB	 4
  000de	04		 DB	 4
  000df	04		 DB	 4
  000e0	04		 DB	 4
  000e1	04		 DB	 4
  000e2	04		 DB	 4
  000e3	04		 DB	 4
  000e4	04		 DB	 4
  000e5	04		 DB	 4
  000e6	04		 DB	 4
  000e7	04		 DB	 4
  000e8	04		 DB	 4
  000e9	04		 DB	 4
  000ea	04		 DB	 4
  000eb	04		 DB	 4
  000ec	04		 DB	 4
  000ed	04		 DB	 4
  000ee	04		 DB	 4
  000ef	04		 DB	 4
  000f0	04		 DB	 4
  000f1	04		 DB	 4
  000f2	04		 DB	 4
  000f3	04		 DB	 4
  000f4	04		 DB	 4
  000f5	04		 DB	 4
  000f6	04		 DB	 4
  000f7	04		 DB	 4
  000f8	04		 DB	 4
  000f9	01		 DB	 1
  000fa	04		 DB	 4
  000fb	04		 DB	 4
  000fc	04		 DB	 4
  000fd	04		 DB	 4
  000fe	04		 DB	 4
  000ff	04		 DB	 4
  00100	04		 DB	 4
  00101	04		 DB	 4
  00102	04		 DB	 4
  00103	04		 DB	 4
  00104	04		 DB	 4
  00105	04		 DB	 4
  00106	04		 DB	 4
  00107	04		 DB	 4
  00108	04		 DB	 4
  00109	04		 DB	 4
  0010a	04		 DB	 4
  0010b	04		 DB	 4
  0010c	04		 DB	 4
  0010d	04		 DB	 4
  0010e	04		 DB	 4
  0010f	04		 DB	 4
  00110	04		 DB	 4
  00111	04		 DB	 4
  00112	04		 DB	 4
  00113	04		 DB	 4
  00114	04		 DB	 4
  00115	04		 DB	 4
  00116	04		 DB	 4
  00117	04		 DB	 4
  00118	04		 DB	 4
  00119	04		 DB	 4
  0011a	04		 DB	 4
  0011b	04		 DB	 4
  0011c	04		 DB	 4
  0011d	04		 DB	 4
  0011e	04		 DB	 4
  0011f	04		 DB	 4
  00120	04		 DB	 4
  00121	04		 DB	 4
  00122	04		 DB	 4
  00123	04		 DB	 4
  00124	04		 DB	 4
  00125	04		 DB	 4
  00126	02		 DB	 2
  00127	04		 DB	 4
  00128	04		 DB	 4
  00129	04		 DB	 4
  0012a	04		 DB	 4
  0012b	04		 DB	 4
  0012c	04		 DB	 4
  0012d	04		 DB	 4
  0012e	04		 DB	 4
  0012f	04		 DB	 4
  00130	04		 DB	 4
  00131	04		 DB	 4
  00132	04		 DB	 4
  00133	04		 DB	 4
  00134	04		 DB	 4
  00135	04		 DB	 4
  00136	04		 DB	 4
  00137	04		 DB	 4
  00138	04		 DB	 4
  00139	04		 DB	 4
  0013a	04		 DB	 4
  0013b	04		 DB	 4
  0013c	04		 DB	 4
  0013d	04		 DB	 4
  0013e	04		 DB	 4
  0013f	04		 DB	 4
  00140	04		 DB	 4
  00141	04		 DB	 4
  00142	04		 DB	 4
  00143	04		 DB	 4
  00144	04		 DB	 4
  00145	04		 DB	 4
  00146	04		 DB	 4
  00147	04		 DB	 4
  00148	04		 DB	 4
  00149	04		 DB	 4
  0014a	04		 DB	 4
  0014b	04		 DB	 4
  0014c	04		 DB	 4
  0014d	04		 DB	 4
  0014e	04		 DB	 4
  0014f	04		 DB	 4
  00150	04		 DB	 4
  00151	04		 DB	 4
  00152	04		 DB	 4
  00153	03		 DB	 3
?AngleToChar@DeviceHandler@@QAEPADH@Z ENDP		; DeviceHandler::AngleToChar
_TEXT	ENDS
PUBLIC	?GetCurrentDevice$@DeviceHandler@@QAEPADXZ	; DeviceHandler::GetCurrentDevice$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCurrentDevice$@DeviceHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentDevice$@DeviceHandler@@QAEPADXZ PROC		; DeviceHandler::GetCurrentDevice$, COMDAT
; _this$ = ecx

; 2034 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2035 : 	return this->CurrentDevice$;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 84 0c 00
	00		 mov	 eax, DWORD PTR [eax+3204]

; 2036 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetCurrentDevice$@DeviceHandler@@QAEPADXZ ENDP		; DeviceHandler::GetCurrentDevice$
_TEXT	ENDS
PUBLIC	?GetHatAngle$@DeviceHandler@@QAEPADH@Z		; DeviceHandler::GetHatAngle$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetHatAngle$@DeviceHandler@@QAEPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Hat$ = 8						; size = 4
?GetHatAngle$@DeviceHandler@@QAEPADH@Z PROC		; DeviceHandler::GetHatAngle$, COMDAT
; _this$ = ecx

; 2038 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2039 : 	return this->AngleToChar(this->GetHatAngle(Hat));

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetHatAngle@DeviceHandler@@QAEHH@Z ; DeviceHandler::GetHatAngle
  00018	50		 push	 eax
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?AngleToChar@DeviceHandler@@QAEPADH@Z ; DeviceHandler::AngleToChar

; 2040 : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?GetHatAngle$@DeviceHandler@@QAEPADH@Z ENDP		; DeviceHandler::GetHatAngle$
_TEXT	ENDS
PUBLIC	??_C@_0BE@PIIAIIKG@JoyStickSliderD?5Max?$AA@	; `string'
PUBLIC	??_C@_0BE@OKALGMMJ@JoyStickSliderD?5Min?$AA@	; `string'
PUBLIC	??_C@_0BE@OFIFLIBO@JoyStickSliderC?5Max?$AA@	; `string'
PUBLIC	??_C@_0BE@PHAOFMHB@JoyStickSliderC?5Min?$AA@	; `string'
PUBLIC	??_C@_0BE@CONJGLLL@JoyStickSliderB?5Max?$AA@	; `string'
PUBLIC	??_C@_0BE@DMFCIPNE@JoyStickSliderB?5Min?$AA@	; `string'
PUBLIC	??_C@_0BE@KIENBJBF@JoyStickSliderA?5Max?$AA@	; `string'
PUBLIC	??_C@_0BE@LKMGPNHK@JoyStickSliderA?5Min?$AA@	; `string'
PUBLIC	??_C@_0BD@BJAMJJJD@JoyStickTwistZ?5Max?$AA@	; `string'
PUBLIC	??_C@_0BD@LIHHNPM@JoyStickTwistZ?5Min?$AA@	; `string'
PUBLIC	??_C@_0BD@JPJIOLDN@JoyStickTwistY?5Max?$AA@	; `string'
PUBLIC	??_C@_0BD@INBDAPFC@JoyStickTwistY?5Min?$AA@	; `string'
PUBLIC	??_C@_0BD@FEMEDIJI@JoyStickTwistX?5Max?$AA@	; `string'
PUBLIC	??_C@_0BD@EGEPNMPH@JoyStickTwistX?5Min?$AA@	; `string'
PUBLIC	??_C@_0O@LPBINPLP@JoyStickZ?5Max?$AA@		; `string'
PUBLIC	??_C@_0O@KNJDDLNA@JoyStickZ?5Min?$AA@		; `string'
PUBLIC	??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@		; `string'
PUBLIC	??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@		; `string'
PUBLIC	??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@		; `string'
PUBLIC	??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@		; `string'
PUBLIC	??_C@_0BB@EOADNADO@Hat?54?5North?9West?$AA@	; `string'
PUBLIC	??_C@_0L@FCEANDBO@Hat?54?5West?$AA@		; `string'
PUBLIC	??_C@_0BB@EPAADEDL@Hat?54?5South?9West?$AA@	; `string'
PUBLIC	??_C@_0M@KDDDJJHE@Hat?54?5South?$AA@		; `string'
PUBLIC	??_C@_0BB@NKECGHIO@Hat?54?5South?9East?$AA@	; `string'
PUBLIC	??_C@_0L@MHACIAKL@Hat?54?5East?$AA@		; `string'
PUBLIC	??_C@_0BB@NLEBIDIL@Hat?54?5North?9East?$AA@	; `string'
PUBLIC	??_C@_0M@IBKMLAII@Hat?54?5North?$AA@		; `string'
PUBLIC	??_C@_0BB@DDHANGGG@Hat?53?5North?9West?$AA@	; `string'
PUBLIC	??_C@_0L@JHOHONJA@Hat?53?5West?$AA@		; `string'
PUBLIC	??_C@_0BB@DCHDDCGD@Hat?53?5South?9West?$AA@	; `string'
PUBLIC	??_C@_0M@KJPGJAGN@Hat?53?5South?$AA@		; `string'
PUBLIC	??_C@_0BB@KHDBGBNG@Hat?53?5South?9East?$AA@	; `string'
PUBLIC	??_C@_0L@CKFLOCF@Hat?53?5East?$AA@		; `string'
PUBLIC	??_C@_0BB@KGDCIFND@Hat?53?5North?9East?$AA@	; `string'
PUBLIC	??_C@_0M@ILGJLJJB@Hat?53?5North?$AA@		; `string'
PUBLIC	??_C@_0BB@OOOGAPOD@Hat?52?5North?9West?$AA@	; `string'
PUBLIC	??_C@_0L@DBJAOGCE@Hat?52?5West?$AA@		; `string'
PUBLIC	??_C@_0BB@OPOFOLOG@Hat?52?5South?9West?$AA@	; `string'
PUBLIC	??_C@_0M@GFFMJAPD@Hat?52?5South?$AA@		; `string'
PUBLIC	??_C@_0BB@HKKHLIFD@Hat?52?5South?9East?$AA@	; `string'
PUBLIC	??_C@_0L@KENCLFJB@Hat?52?5East?$AA@		; `string'
PUBLIC	??_C@_0BB@HLKEFMFG@Hat?52?5North?9East?$AA@	; `string'
PUBLIC	??_C@_0M@EHMDLJAP@Hat?52?5North?$AA@		; `string'
PUBLIC	??_C@_0BB@FDCMGDCN@Hat?51?5North?9West?$AA@	; `string'
PUBLIC	??_C@_0L@HIPMLJ@Hat?51?5West?$AA@		; `string'
PUBLIC	??_C@_0BB@FCCPIHCI@Hat?51?5South?9West?$AA@	; `string'
PUBLIC	??_C@_0M@OLNDJHBA@Hat?51?5South?$AA@		; `string'
PUBLIC	??_C@_0BB@MHGNNEJN@Hat?51?5South?9East?$AA@	; `string'
PUBLIC	??_C@_0L@JFDKKPAM@Hat?51?5East?$AA@		; `string'
PUBLIC	??_C@_0BB@MGGODAJI@Hat?51?5North?9East?$AA@	; `string'
PUBLIC	??_C@_0M@MJEMLOOM@Hat?51?5North?$AA@		; `string'
PUBLIC	??_C@_09JDNBCKDK@Button?531?$AA@		; `string'
PUBLIC	??_C@_09IKMKBLHL@Button?530?$AA@		; `string'
PUBLIC	??_C@_09FKMKMKAF@Button?529?$AA@		; `string'
PUBLIC	??_C@_09EDNBPLEE@Button?528?$AA@		; `string'
PUBLIC	??_C@_09MEEJOHIL@Button?527?$AA@		; `string'
PUBLIC	??_C@_09NNFCNGMK@Button?526?$AA@		; `string'
PUBLIC	??_C@_09PGHPIFAJ@Button?525?$AA@		; `string'
PUBLIC	??_C@_09OPGELEEI@Button?524?$AA@		; `string'
PUBLIC	??_C@_09KACFCCIP@Button?523?$AA@		; `string'
PUBLIC	??_C@_09LJDOBDMO@Button?522?$AA@		; `string'
PUBLIC	??_C@_09JCBDEAAN@Button?521?$AA@		; `string'
PUBLIC	??_C@_09ILAIHBEM@Button?520?$AA@		; `string'
PUBLIC	??_C@_09FIIMHEFM@Button?519?$AA@		; `string'
PUBLIC	??_C@_09EBJHEFBN@Button?518?$AA@		; `string'
PUBLIC	??_C@_09MGAPFJNC@Button?517?$AA@		; `string'
PUBLIC	??_C@_09NPBEGIJD@Button?516?$AA@		; `string'
PUBLIC	??_C@_09PEDJDLFA@Button?515?$AA@		; `string'
PUBLIC	??_C@_09ONCCAKBB@Button?514?$AA@		; `string'
PUBLIC	??_C@_09KCGDJMNG@Button?513?$AA@		; `string'
PUBLIC	??_C@_09LLHIKNJH@Button?512?$AA@		; `string'
PUBLIC	??_C@_09JAFFPOFE@Button?511?$AA@		; `string'
PUBLIC	??_C@_09IJEOMPBF@Button?510?$AA@		; `string'
PUBLIC	??_C@_08HDOEEPDN@Button?59?$AA@			; `string'
PUBLIC	??_C@_08GKPPHOHM@Button?58?$AA@			; `string'
PUBLIC	??_C@_08ONGHGCLD@Button?57?$AA@			; `string'
PUBLIC	??_C@_08PEHMFDPC@Button?56?$AA@			; `string'
PUBLIC	??_C@_08NPFBAADB@Button?55?$AA@			; `string'
PUBLIC	??_C@_08MGEKDBHA@Button?54?$AA@			; `string'
PUBLIC	??_C@_08IJALKHLH@Button?53?$AA@			; `string'
PUBLIC	??_C@_08JABAJGPG@Button?52?$AA@			; `string'
PUBLIC	??_C@_08LLDNMFDF@Button?51?$AA@			; `string'
PUBLIC	??_C@_08KCCGPEHE@Button?50?$AA@			; `string'
PUBLIC	?IntToInputName@DeviceHandler@@QAEPADH@Z	; DeviceHandler::IntToInputName
;	COMDAT ??_C@_0BE@PIIAIIKG@JoyStickSliderD?5Max?$AA@
CONST	SEGMENT
??_C@_0BE@PIIAIIKG@JoyStickSliderD?5Max?$AA@ DB 'JoyStickSliderD Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OKALGMMJ@JoyStickSliderD?5Min?$AA@
CONST	SEGMENT
??_C@_0BE@OKALGMMJ@JoyStickSliderD?5Min?$AA@ DB 'JoyStickSliderD Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OFIFLIBO@JoyStickSliderC?5Max?$AA@
CONST	SEGMENT
??_C@_0BE@OFIFLIBO@JoyStickSliderC?5Max?$AA@ DB 'JoyStickSliderC Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PHAOFMHB@JoyStickSliderC?5Min?$AA@
CONST	SEGMENT
??_C@_0BE@PHAOFMHB@JoyStickSliderC?5Min?$AA@ DB 'JoyStickSliderC Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CONJGLLL@JoyStickSliderB?5Max?$AA@
CONST	SEGMENT
??_C@_0BE@CONJGLLL@JoyStickSliderB?5Max?$AA@ DB 'JoyStickSliderB Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DMFCIPNE@JoyStickSliderB?5Min?$AA@
CONST	SEGMENT
??_C@_0BE@DMFCIPNE@JoyStickSliderB?5Min?$AA@ DB 'JoyStickSliderB Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KIENBJBF@JoyStickSliderA?5Max?$AA@
CONST	SEGMENT
??_C@_0BE@KIENBJBF@JoyStickSliderA?5Max?$AA@ DB 'JoyStickSliderA Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LKMGPNHK@JoyStickSliderA?5Min?$AA@
CONST	SEGMENT
??_C@_0BE@LKMGPNHK@JoyStickSliderA?5Min?$AA@ DB 'JoyStickSliderA Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BJAMJJJD@JoyStickTwistZ?5Max?$AA@
CONST	SEGMENT
??_C@_0BD@BJAMJJJD@JoyStickTwistZ?5Max?$AA@ DB 'JoyStickTwistZ Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LIHHNPM@JoyStickTwistZ?5Min?$AA@
CONST	SEGMENT
??_C@_0BD@LIHHNPM@JoyStickTwistZ?5Min?$AA@ DB 'JoyStickTwistZ Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JPJIOLDN@JoyStickTwistY?5Max?$AA@
CONST	SEGMENT
??_C@_0BD@JPJIOLDN@JoyStickTwistY?5Max?$AA@ DB 'JoyStickTwistY Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@INBDAPFC@JoyStickTwistY?5Min?$AA@
CONST	SEGMENT
??_C@_0BD@INBDAPFC@JoyStickTwistY?5Min?$AA@ DB 'JoyStickTwistY Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEMEDIJI@JoyStickTwistX?5Max?$AA@
CONST	SEGMENT
??_C@_0BD@FEMEDIJI@JoyStickTwistX?5Max?$AA@ DB 'JoyStickTwistX Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EGEPNMPH@JoyStickTwistX?5Min?$AA@
CONST	SEGMENT
??_C@_0BD@EGEPNMPH@JoyStickTwistX?5Min?$AA@ DB 'JoyStickTwistX Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LPBINPLP@JoyStickZ?5Max?$AA@
CONST	SEGMENT
??_C@_0O@LPBINPLP@JoyStickZ?5Max?$AA@ DB 'JoyStickZ Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KNJDDLNA@JoyStickZ?5Min?$AA@
CONST	SEGMENT
??_C@_0O@KNJDDLNA@JoyStickZ?5Min?$AA@ DB 'JoyStickZ Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@
CONST	SEGMENT
??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@ DB 'JoyStickY Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@
CONST	SEGMENT
??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@ DB 'JoyStickY Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@
CONST	SEGMENT
??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@ DB 'JoyStickX Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@
CONST	SEGMENT
??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@ DB 'JoyStickX Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EOADNADO@Hat?54?5North?9West?$AA@
CONST	SEGMENT
??_C@_0BB@EOADNADO@Hat?54?5North?9West?$AA@ DB 'Hat 4 North-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCEANDBO@Hat?54?5West?$AA@
CONST	SEGMENT
??_C@_0L@FCEANDBO@Hat?54?5West?$AA@ DB 'Hat 4 West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EPAADEDL@Hat?54?5South?9West?$AA@
CONST	SEGMENT
??_C@_0BB@EPAADEDL@Hat?54?5South?9West?$AA@ DB 'Hat 4 South-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KDDDJJHE@Hat?54?5South?$AA@
CONST	SEGMENT
??_C@_0M@KDDDJJHE@Hat?54?5South?$AA@ DB 'Hat 4 South', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NKECGHIO@Hat?54?5South?9East?$AA@
CONST	SEGMENT
??_C@_0BB@NKECGHIO@Hat?54?5South?9East?$AA@ DB 'Hat 4 South-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MHACIAKL@Hat?54?5East?$AA@
CONST	SEGMENT
??_C@_0L@MHACIAKL@Hat?54?5East?$AA@ DB 'Hat 4 East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NLEBIDIL@Hat?54?5North?9East?$AA@
CONST	SEGMENT
??_C@_0BB@NLEBIDIL@Hat?54?5North?9East?$AA@ DB 'Hat 4 North-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IBKMLAII@Hat?54?5North?$AA@
CONST	SEGMENT
??_C@_0M@IBKMLAII@Hat?54?5North?$AA@ DB 'Hat 4 North', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DDHANGGG@Hat?53?5North?9West?$AA@
CONST	SEGMENT
??_C@_0BB@DDHANGGG@Hat?53?5North?9West?$AA@ DB 'Hat 3 North-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JHOHONJA@Hat?53?5West?$AA@
CONST	SEGMENT
??_C@_0L@JHOHONJA@Hat?53?5West?$AA@ DB 'Hat 3 West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DCHDDCGD@Hat?53?5South?9West?$AA@
CONST	SEGMENT
??_C@_0BB@DCHDDCGD@Hat?53?5South?9West?$AA@ DB 'Hat 3 South-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KJPGJAGN@Hat?53?5South?$AA@
CONST	SEGMENT
??_C@_0M@KJPGJAGN@Hat?53?5South?$AA@ DB 'Hat 3 South', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KHDBGBNG@Hat?53?5South?9East?$AA@
CONST	SEGMENT
??_C@_0BB@KHDBGBNG@Hat?53?5South?9East?$AA@ DB 'Hat 3 South-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CKFLOCF@Hat?53?5East?$AA@
CONST	SEGMENT
??_C@_0L@CKFLOCF@Hat?53?5East?$AA@ DB 'Hat 3 East', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KGDCIFND@Hat?53?5North?9East?$AA@
CONST	SEGMENT
??_C@_0BB@KGDCIFND@Hat?53?5North?9East?$AA@ DB 'Hat 3 North-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ILGJLJJB@Hat?53?5North?$AA@
CONST	SEGMENT
??_C@_0M@ILGJLJJB@Hat?53?5North?$AA@ DB 'Hat 3 North', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OOOGAPOD@Hat?52?5North?9West?$AA@
CONST	SEGMENT
??_C@_0BB@OOOGAPOD@Hat?52?5North?9West?$AA@ DB 'Hat 2 North-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DBJAOGCE@Hat?52?5West?$AA@
CONST	SEGMENT
??_C@_0L@DBJAOGCE@Hat?52?5West?$AA@ DB 'Hat 2 West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OPOFOLOG@Hat?52?5South?9West?$AA@
CONST	SEGMENT
??_C@_0BB@OPOFOLOG@Hat?52?5South?9West?$AA@ DB 'Hat 2 South-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GFFMJAPD@Hat?52?5South?$AA@
CONST	SEGMENT
??_C@_0M@GFFMJAPD@Hat?52?5South?$AA@ DB 'Hat 2 South', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HKKHLIFD@Hat?52?5South?9East?$AA@
CONST	SEGMENT
??_C@_0BB@HKKHLIFD@Hat?52?5South?9East?$AA@ DB 'Hat 2 South-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KENCLFJB@Hat?52?5East?$AA@
CONST	SEGMENT
??_C@_0L@KENCLFJB@Hat?52?5East?$AA@ DB 'Hat 2 East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HLKEFMFG@Hat?52?5North?9East?$AA@
CONST	SEGMENT
??_C@_0BB@HLKEFMFG@Hat?52?5North?9East?$AA@ DB 'Hat 2 North-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EHMDLJAP@Hat?52?5North?$AA@
CONST	SEGMENT
??_C@_0M@EHMDLJAP@Hat?52?5North?$AA@ DB 'Hat 2 North', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FDCMGDCN@Hat?51?5North?9West?$AA@
CONST	SEGMENT
??_C@_0BB@FDCMGDCN@Hat?51?5North?9West?$AA@ DB 'Hat 1 North-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HIPMLJ@Hat?51?5West?$AA@
CONST	SEGMENT
??_C@_0L@HIPMLJ@Hat?51?5West?$AA@ DB 'Hat 1 West', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCCPIHCI@Hat?51?5South?9West?$AA@
CONST	SEGMENT
??_C@_0BB@FCCPIHCI@Hat?51?5South?9West?$AA@ DB 'Hat 1 South-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OLNDJHBA@Hat?51?5South?$AA@
CONST	SEGMENT
??_C@_0M@OLNDJHBA@Hat?51?5South?$AA@ DB 'Hat 1 South', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MHGNNEJN@Hat?51?5South?9East?$AA@
CONST	SEGMENT
??_C@_0BB@MHGNNEJN@Hat?51?5South?9East?$AA@ DB 'Hat 1 South-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JFDKKPAM@Hat?51?5East?$AA@
CONST	SEGMENT
??_C@_0L@JFDKKPAM@Hat?51?5East?$AA@ DB 'Hat 1 East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MGGODAJI@Hat?51?5North?9East?$AA@
CONST	SEGMENT
??_C@_0BB@MGGODAJI@Hat?51?5North?9East?$AA@ DB 'Hat 1 North-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MJEMLOOM@Hat?51?5North?$AA@
CONST	SEGMENT
??_C@_0M@MJEMLOOM@Hat?51?5North?$AA@ DB 'Hat 1 North', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JDNBCKDK@Button?531?$AA@
CONST	SEGMENT
??_C@_09JDNBCKDK@Button?531?$AA@ DB 'Button 31', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IKMKBLHL@Button?530?$AA@
CONST	SEGMENT
??_C@_09IKMKBLHL@Button?530?$AA@ DB 'Button 30', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FKMKMKAF@Button?529?$AA@
CONST	SEGMENT
??_C@_09FKMKMKAF@Button?529?$AA@ DB 'Button 29', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EDNBPLEE@Button?528?$AA@
CONST	SEGMENT
??_C@_09EDNBPLEE@Button?528?$AA@ DB 'Button 28', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MEEJOHIL@Button?527?$AA@
CONST	SEGMENT
??_C@_09MEEJOHIL@Button?527?$AA@ DB 'Button 27', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NNFCNGMK@Button?526?$AA@
CONST	SEGMENT
??_C@_09NNFCNGMK@Button?526?$AA@ DB 'Button 26', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PGHPIFAJ@Button?525?$AA@
CONST	SEGMENT
??_C@_09PGHPIFAJ@Button?525?$AA@ DB 'Button 25', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPGELEEI@Button?524?$AA@
CONST	SEGMENT
??_C@_09OPGELEEI@Button?524?$AA@ DB 'Button 24', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KACFCCIP@Button?523?$AA@
CONST	SEGMENT
??_C@_09KACFCCIP@Button?523?$AA@ DB 'Button 23', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LJDOBDMO@Button?522?$AA@
CONST	SEGMENT
??_C@_09LJDOBDMO@Button?522?$AA@ DB 'Button 22', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JCBDEAAN@Button?521?$AA@
CONST	SEGMENT
??_C@_09JCBDEAAN@Button?521?$AA@ DB 'Button 21', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ILAIHBEM@Button?520?$AA@
CONST	SEGMENT
??_C@_09ILAIHBEM@Button?520?$AA@ DB 'Button 20', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FIIMHEFM@Button?519?$AA@
CONST	SEGMENT
??_C@_09FIIMHEFM@Button?519?$AA@ DB 'Button 19', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EBJHEFBN@Button?518?$AA@
CONST	SEGMENT
??_C@_09EBJHEFBN@Button?518?$AA@ DB 'Button 18', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MGAPFJNC@Button?517?$AA@
CONST	SEGMENT
??_C@_09MGAPFJNC@Button?517?$AA@ DB 'Button 17', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NPBEGIJD@Button?516?$AA@
CONST	SEGMENT
??_C@_09NPBEGIJD@Button?516?$AA@ DB 'Button 16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PEDJDLFA@Button?515?$AA@
CONST	SEGMENT
??_C@_09PEDJDLFA@Button?515?$AA@ DB 'Button 15', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ONCCAKBB@Button?514?$AA@
CONST	SEGMENT
??_C@_09ONCCAKBB@Button?514?$AA@ DB 'Button 14', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KCGDJMNG@Button?513?$AA@
CONST	SEGMENT
??_C@_09KCGDJMNG@Button?513?$AA@ DB 'Button 13', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LLHIKNJH@Button?512?$AA@
CONST	SEGMENT
??_C@_09LLHIKNJH@Button?512?$AA@ DB 'Button 12', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JAFFPOFE@Button?511?$AA@
CONST	SEGMENT
??_C@_09JAFFPOFE@Button?511?$AA@ DB 'Button 11', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IJEOMPBF@Button?510?$AA@
CONST	SEGMENT
??_C@_09IJEOMPBF@Button?510?$AA@ DB 'Button 10', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HDOEEPDN@Button?59?$AA@
CONST	SEGMENT
??_C@_08HDOEEPDN@Button?59?$AA@ DB 'Button 9', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GKPPHOHM@Button?58?$AA@
CONST	SEGMENT
??_C@_08GKPPHOHM@Button?58?$AA@ DB 'Button 8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08ONGHGCLD@Button?57?$AA@
CONST	SEGMENT
??_C@_08ONGHGCLD@Button?57?$AA@ DB 'Button 7', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PEHMFDPC@Button?56?$AA@
CONST	SEGMENT
??_C@_08PEHMFDPC@Button?56?$AA@ DB 'Button 6', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NPFBAADB@Button?55?$AA@
CONST	SEGMENT
??_C@_08NPFBAADB@Button?55?$AA@ DB 'Button 5', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MGEKDBHA@Button?54?$AA@
CONST	SEGMENT
??_C@_08MGEKDBHA@Button?54?$AA@ DB 'Button 4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IJALKHLH@Button?53?$AA@
CONST	SEGMENT
??_C@_08IJALKHLH@Button?53?$AA@ DB 'Button 3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JABAJGPG@Button?52?$AA@
CONST	SEGMENT
??_C@_08JABAJGPG@Button?52?$AA@ DB 'Button 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLDNMFDF@Button?51?$AA@
CONST	SEGMENT
??_C@_08LLDNMFDF@Button?51?$AA@ DB 'Button 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KCCGPEHE@Button?50?$AA@
CONST	SEGMENT
??_C@_08KCCGPEHE@Button?50?$AA@ DB 'Button 0', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?IntToInputName@DeviceHandler@@QAEPADH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?IntToInputName@DeviceHandler@@QAEPADH@Z PROC		; DeviceHandler::IntToInputName, COMDAT
; _this$ = ecx

; 2042 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2043 : 	switch(InputType)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _InputType$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00012	83 7d b8 53	 cmp	 DWORD PTR tv64[ebp], 83	; 00000053H
  00016	0f 87 a5 04 00
	00		 ja	 $LN1@IntToInput
  0001c	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  0001f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN90@IntToInput[ecx*4]
$LN85@IntToInput:

; 2044 : 	{
; 2045 : 	case 0:
; 2046 : 		return "Button 0";

  00026	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08KCCGPEHE@Button?50?$AA@
  0002b	e9 9d 04 00 00	 jmp	 $LN88@IntToInput

; 2047 : 		break;

  00030	e9 93 04 00 00	 jmp	 $LN86@IntToInput
$LN84@IntToInput:

; 2048 : 	case 1:
; 2049 : 		return "Button 1";

  00035	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08LLDNMFDF@Button?51?$AA@
  0003a	e9 8e 04 00 00	 jmp	 $LN88@IntToInput

; 2050 : 		break;

  0003f	e9 84 04 00 00	 jmp	 $LN86@IntToInput
$LN83@IntToInput:

; 2051 : 	case 2:
; 2052 : 		return "Button 2";

  00044	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08JABAJGPG@Button?52?$AA@
  00049	e9 7f 04 00 00	 jmp	 $LN88@IntToInput

; 2053 : 		break;

  0004e	e9 75 04 00 00	 jmp	 $LN86@IntToInput
$LN82@IntToInput:

; 2054 : 	case 3:
; 2055 : 		return "Button 3";

  00053	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08IJALKHLH@Button?53?$AA@
  00058	e9 70 04 00 00	 jmp	 $LN88@IntToInput

; 2056 : 		break;

  0005d	e9 66 04 00 00	 jmp	 $LN86@IntToInput
$LN81@IntToInput:

; 2057 : 	case 4:
; 2058 : 		return "Button 4";

  00062	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08MGEKDBHA@Button?54?$AA@
  00067	e9 61 04 00 00	 jmp	 $LN88@IntToInput

; 2059 : 		break;

  0006c	e9 57 04 00 00	 jmp	 $LN86@IntToInput
$LN80@IntToInput:

; 2060 : 	case 5:
; 2061 : 		return "Button 5";

  00071	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08NPFBAADB@Button?55?$AA@
  00076	e9 52 04 00 00	 jmp	 $LN88@IntToInput

; 2062 : 		break;

  0007b	e9 48 04 00 00	 jmp	 $LN86@IntToInput
$LN79@IntToInput:

; 2063 : 	case 6:
; 2064 : 		return "Button 6";

  00080	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08PEHMFDPC@Button?56?$AA@
  00085	e9 43 04 00 00	 jmp	 $LN88@IntToInput

; 2065 : 		break;

  0008a	e9 39 04 00 00	 jmp	 $LN86@IntToInput
$LN78@IntToInput:

; 2066 : 	case 7:
; 2067 : 		return "Button 7";

  0008f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08ONGHGCLD@Button?57?$AA@
  00094	e9 34 04 00 00	 jmp	 $LN88@IntToInput

; 2068 : 		break;

  00099	e9 2a 04 00 00	 jmp	 $LN86@IntToInput
$LN77@IntToInput:

; 2069 : 	case 8:
; 2070 : 		return "Button 8";

  0009e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08GKPPHOHM@Button?58?$AA@
  000a3	e9 25 04 00 00	 jmp	 $LN88@IntToInput

; 2071 : 		break;

  000a8	e9 1b 04 00 00	 jmp	 $LN86@IntToInput
$LN76@IntToInput:

; 2072 : 	case 9:
; 2073 : 		return "Button 9";

  000ad	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08HDOEEPDN@Button?59?$AA@
  000b2	e9 16 04 00 00	 jmp	 $LN88@IntToInput

; 2074 : 		break;

  000b7	e9 0c 04 00 00	 jmp	 $LN86@IntToInput
$LN75@IntToInput:

; 2075 : 	case 10:
; 2076 : 		return "Button 10";

  000bc	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09IJEOMPBF@Button?510?$AA@
  000c1	e9 07 04 00 00	 jmp	 $LN88@IntToInput

; 2077 : 		break;

  000c6	e9 fd 03 00 00	 jmp	 $LN86@IntToInput
$LN74@IntToInput:

; 2078 : 	case 11:
; 2079 : 		return "Button 11";

  000cb	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09JAFFPOFE@Button?511?$AA@
  000d0	e9 f8 03 00 00	 jmp	 $LN88@IntToInput

; 2080 : 		break;

  000d5	e9 ee 03 00 00	 jmp	 $LN86@IntToInput
$LN73@IntToInput:

; 2081 : 	case 12:
; 2082 : 		return "Button 12";

  000da	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09LLHIKNJH@Button?512?$AA@
  000df	e9 e9 03 00 00	 jmp	 $LN88@IntToInput

; 2083 : 		break;

  000e4	e9 df 03 00 00	 jmp	 $LN86@IntToInput
$LN72@IntToInput:

; 2084 : 	case 13:
; 2085 : 		return "Button 13";

  000e9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09KCGDJMNG@Button?513?$AA@
  000ee	e9 da 03 00 00	 jmp	 $LN88@IntToInput

; 2086 : 		break;

  000f3	e9 d0 03 00 00	 jmp	 $LN86@IntToInput
$LN71@IntToInput:

; 2087 : 	case 14:
; 2088 : 		return "Button 14";

  000f8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09ONCCAKBB@Button?514?$AA@
  000fd	e9 cb 03 00 00	 jmp	 $LN88@IntToInput

; 2089 : 		break;

  00102	e9 c1 03 00 00	 jmp	 $LN86@IntToInput
$LN70@IntToInput:

; 2090 : 	case 15:
; 2091 : 		return "Button 15";

  00107	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09PEDJDLFA@Button?515?$AA@
  0010c	e9 bc 03 00 00	 jmp	 $LN88@IntToInput

; 2092 : 		break;

  00111	e9 b2 03 00 00	 jmp	 $LN86@IntToInput
$LN69@IntToInput:

; 2093 : 	case 16:
; 2094 : 		return "Button 16";

  00116	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09NPBEGIJD@Button?516?$AA@
  0011b	e9 ad 03 00 00	 jmp	 $LN88@IntToInput

; 2095 : 		break;

  00120	e9 a3 03 00 00	 jmp	 $LN86@IntToInput
$LN68@IntToInput:

; 2096 : 	case 17:
; 2097 : 		return "Button 17";

  00125	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09MGAPFJNC@Button?517?$AA@
  0012a	e9 9e 03 00 00	 jmp	 $LN88@IntToInput

; 2098 : 		break;

  0012f	e9 94 03 00 00	 jmp	 $LN86@IntToInput
$LN67@IntToInput:

; 2099 : 	case 18:
; 2100 : 		return "Button 18";

  00134	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09EBJHEFBN@Button?518?$AA@
  00139	e9 8f 03 00 00	 jmp	 $LN88@IntToInput

; 2101 : 		break;

  0013e	e9 85 03 00 00	 jmp	 $LN86@IntToInput
$LN66@IntToInput:

; 2102 : 	case 19:
; 2103 : 		return "Button 19";

  00143	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09FIIMHEFM@Button?519?$AA@
  00148	e9 80 03 00 00	 jmp	 $LN88@IntToInput

; 2104 : 		break;

  0014d	e9 76 03 00 00	 jmp	 $LN86@IntToInput
$LN65@IntToInput:

; 2105 : 	case 20:
; 2106 : 		return "Button 20";

  00152	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09ILAIHBEM@Button?520?$AA@
  00157	e9 71 03 00 00	 jmp	 $LN88@IntToInput

; 2107 : 		break;

  0015c	e9 67 03 00 00	 jmp	 $LN86@IntToInput
$LN64@IntToInput:

; 2108 : 	case 21:
; 2109 : 		return "Button 21";

  00161	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09JCBDEAAN@Button?521?$AA@
  00166	e9 62 03 00 00	 jmp	 $LN88@IntToInput

; 2110 : 		break;

  0016b	e9 58 03 00 00	 jmp	 $LN86@IntToInput
$LN63@IntToInput:

; 2111 : 	case 22:
; 2112 : 		return "Button 22";

  00170	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09LJDOBDMO@Button?522?$AA@
  00175	e9 53 03 00 00	 jmp	 $LN88@IntToInput

; 2113 : 		break;

  0017a	e9 49 03 00 00	 jmp	 $LN86@IntToInput
$LN62@IntToInput:

; 2114 : 	case 23:
; 2115 : 		return "Button 23";

  0017f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09KACFCCIP@Button?523?$AA@
  00184	e9 44 03 00 00	 jmp	 $LN88@IntToInput

; 2116 : 		break;

  00189	e9 3a 03 00 00	 jmp	 $LN86@IntToInput
$LN61@IntToInput:

; 2117 : 	case 24:
; 2118 : 		return "Button 24";

  0018e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09OPGELEEI@Button?524?$AA@
  00193	e9 35 03 00 00	 jmp	 $LN88@IntToInput

; 2119 : 		break;

  00198	e9 2b 03 00 00	 jmp	 $LN86@IntToInput
$LN60@IntToInput:

; 2120 : 	case 25:
; 2121 : 		return "Button 25";

  0019d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09PGHPIFAJ@Button?525?$AA@
  001a2	e9 26 03 00 00	 jmp	 $LN88@IntToInput

; 2122 : 		break;

  001a7	e9 1c 03 00 00	 jmp	 $LN86@IntToInput
$LN59@IntToInput:

; 2123 : 	case 26:
; 2124 : 		return "Button 26";

  001ac	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09NNFCNGMK@Button?526?$AA@
  001b1	e9 17 03 00 00	 jmp	 $LN88@IntToInput

; 2125 : 		break;

  001b6	e9 0d 03 00 00	 jmp	 $LN86@IntToInput
$LN58@IntToInput:

; 2126 : 	case 27:
; 2127 : 		return "Button 27";

  001bb	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09MEEJOHIL@Button?527?$AA@
  001c0	e9 08 03 00 00	 jmp	 $LN88@IntToInput

; 2128 : 		break;

  001c5	e9 fe 02 00 00	 jmp	 $LN86@IntToInput
$LN57@IntToInput:

; 2129 : 	case 28:
; 2130 : 		return "Button 28";

  001ca	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09EDNBPLEE@Button?528?$AA@
  001cf	e9 f9 02 00 00	 jmp	 $LN88@IntToInput

; 2131 : 		break;

  001d4	e9 ef 02 00 00	 jmp	 $LN86@IntToInput
$LN56@IntToInput:

; 2132 : 	case 29:
; 2133 : 		return "Button 29";

  001d9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09FKMKMKAF@Button?529?$AA@
  001de	e9 ea 02 00 00	 jmp	 $LN88@IntToInput

; 2134 : 		break;

  001e3	e9 e0 02 00 00	 jmp	 $LN86@IntToInput
$LN55@IntToInput:

; 2135 : 	case 30:
; 2136 : 		return "Button 30";

  001e8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09IKMKBLHL@Button?530?$AA@
  001ed	e9 db 02 00 00	 jmp	 $LN88@IntToInput

; 2137 : 		break;

  001f2	e9 d1 02 00 00	 jmp	 $LN86@IntToInput
$LN54@IntToInput:

; 2138 : 	case 31:
; 2139 : 		return "Button 31";

  001f7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_09JDNBCKDK@Button?531?$AA@
  001fc	e9 cc 02 00 00	 jmp	 $LN88@IntToInput

; 2140 : 		break;

  00201	e9 c2 02 00 00	 jmp	 $LN86@IntToInput
$LN53@IntToInput:

; 2141 : 	case 32:
; 2142 : 		return "Hat 1 North";

  00206	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@MJEMLOOM@Hat?51?5North?$AA@
  0020b	e9 bd 02 00 00	 jmp	 $LN88@IntToInput

; 2143 : 		break;

  00210	e9 b3 02 00 00	 jmp	 $LN86@IntToInput
$LN52@IntToInput:

; 2144 : 	case 33:
; 2145 : 		return "Hat 1 North-East";

  00215	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@MGGODAJI@Hat?51?5North?9East?$AA@
  0021a	e9 ae 02 00 00	 jmp	 $LN88@IntToInput

; 2146 : 		break;

  0021f	e9 a4 02 00 00	 jmp	 $LN86@IntToInput
$LN51@IntToInput:

; 2147 : 	case 34:
; 2148 : 		return "Hat 1 East";

  00224	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@JFDKKPAM@Hat?51?5East?$AA@
  00229	e9 9f 02 00 00	 jmp	 $LN88@IntToInput

; 2149 : 		break;

  0022e	e9 95 02 00 00	 jmp	 $LN86@IntToInput
$LN50@IntToInput:

; 2150 : 	case 35:
; 2151 : 		return "Hat 1 South-East";

  00233	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@MHGNNEJN@Hat?51?5South?9East?$AA@
  00238	e9 90 02 00 00	 jmp	 $LN88@IntToInput

; 2152 : 		break;

  0023d	e9 86 02 00 00	 jmp	 $LN86@IntToInput
$LN49@IntToInput:

; 2153 : 	case 36:
; 2154 : 		return "Hat 1 South";

  00242	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@OLNDJHBA@Hat?51?5South?$AA@
  00247	e9 81 02 00 00	 jmp	 $LN88@IntToInput

; 2155 : 		break;

  0024c	e9 77 02 00 00	 jmp	 $LN86@IntToInput
$LN48@IntToInput:

; 2156 : 	case 37:
; 2157 : 		return "Hat 1 South-West";

  00251	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@FCCPIHCI@Hat?51?5South?9West?$AA@
  00256	e9 72 02 00 00	 jmp	 $LN88@IntToInput

; 2158 : 		break;

  0025b	e9 68 02 00 00	 jmp	 $LN86@IntToInput
$LN47@IntToInput:

; 2159 : 	case 38:
; 2160 : 		return "Hat 1 West";

  00260	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@HIPMLJ@Hat?51?5West?$AA@
  00265	e9 63 02 00 00	 jmp	 $LN88@IntToInput

; 2161 : 		break;

  0026a	e9 59 02 00 00	 jmp	 $LN86@IntToInput
$LN46@IntToInput:

; 2162 : 	case 39:
; 2163 : 		return "Hat 1 North-West";

  0026f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@FDCMGDCN@Hat?51?5North?9West?$AA@
  00274	e9 54 02 00 00	 jmp	 $LN88@IntToInput

; 2164 : 		break;

  00279	e9 4a 02 00 00	 jmp	 $LN86@IntToInput
$LN45@IntToInput:

; 2165 : 	case 40:
; 2166 : 		return "Hat 2 North";

  0027e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@EHMDLJAP@Hat?52?5North?$AA@
  00283	e9 45 02 00 00	 jmp	 $LN88@IntToInput

; 2167 : 		break;

  00288	e9 3b 02 00 00	 jmp	 $LN86@IntToInput
$LN44@IntToInput:

; 2168 : 	case 41:
; 2169 : 		return "Hat 2 North-East";

  0028d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@HLKEFMFG@Hat?52?5North?9East?$AA@
  00292	e9 36 02 00 00	 jmp	 $LN88@IntToInput

; 2170 : 		break;

  00297	e9 2c 02 00 00	 jmp	 $LN86@IntToInput
$LN43@IntToInput:

; 2171 : 	case 42:
; 2172 : 		return "Hat 2 East";

  0029c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@KENCLFJB@Hat?52?5East?$AA@
  002a1	e9 27 02 00 00	 jmp	 $LN88@IntToInput

; 2173 : 		break;

  002a6	e9 1d 02 00 00	 jmp	 $LN86@IntToInput
$LN42@IntToInput:

; 2174 : 	case 43:
; 2175 : 		return "Hat 2 South-East";

  002ab	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@HKKHLIFD@Hat?52?5South?9East?$AA@
  002b0	e9 18 02 00 00	 jmp	 $LN88@IntToInput

; 2176 : 		break;

  002b5	e9 0e 02 00 00	 jmp	 $LN86@IntToInput
$LN41@IntToInput:

; 2177 : 	case 44:
; 2178 : 		return "Hat 2 South";

  002ba	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@GFFMJAPD@Hat?52?5South?$AA@
  002bf	e9 09 02 00 00	 jmp	 $LN88@IntToInput

; 2179 : 		break;

  002c4	e9 ff 01 00 00	 jmp	 $LN86@IntToInput
$LN40@IntToInput:

; 2180 : 	case 45:
; 2181 : 		return "Hat 2 South-West";

  002c9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@OPOFOLOG@Hat?52?5South?9West?$AA@
  002ce	e9 fa 01 00 00	 jmp	 $LN88@IntToInput

; 2182 : 		break;

  002d3	e9 f0 01 00 00	 jmp	 $LN86@IntToInput
$LN39@IntToInput:

; 2183 : 	case 46:
; 2184 : 		return "Hat 2 West";

  002d8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@DBJAOGCE@Hat?52?5West?$AA@
  002dd	e9 eb 01 00 00	 jmp	 $LN88@IntToInput

; 2185 : 		break;

  002e2	e9 e1 01 00 00	 jmp	 $LN86@IntToInput
$LN38@IntToInput:

; 2186 : 	case 47:
; 2187 : 		return "Hat 2 North-West";

  002e7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@OOOGAPOD@Hat?52?5North?9West?$AA@
  002ec	e9 dc 01 00 00	 jmp	 $LN88@IntToInput

; 2188 : 		break;

  002f1	e9 d2 01 00 00	 jmp	 $LN86@IntToInput
$LN37@IntToInput:

; 2189 : 	case 48:
; 2190 : 		return "Hat 3 North";

  002f6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@ILGJLJJB@Hat?53?5North?$AA@
  002fb	e9 cd 01 00 00	 jmp	 $LN88@IntToInput

; 2191 : 		break;

  00300	e9 c3 01 00 00	 jmp	 $LN86@IntToInput
$LN36@IntToInput:

; 2192 : 	case 49:
; 2193 : 		return "Hat 3 North-East";

  00305	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@KGDCIFND@Hat?53?5North?9East?$AA@
  0030a	e9 be 01 00 00	 jmp	 $LN88@IntToInput

; 2194 : 		break;

  0030f	e9 b4 01 00 00	 jmp	 $LN86@IntToInput
$LN35@IntToInput:

; 2195 : 	case 50:
; 2196 : 		return "Hat 3 East";

  00314	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@CKFLOCF@Hat?53?5East?$AA@
  00319	e9 af 01 00 00	 jmp	 $LN88@IntToInput

; 2197 : 		break;

  0031e	e9 a5 01 00 00	 jmp	 $LN86@IntToInput
$LN34@IntToInput:

; 2198 : 	case 51:
; 2199 : 		return "Hat 3 South-East";

  00323	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@KHDBGBNG@Hat?53?5South?9East?$AA@
  00328	e9 a0 01 00 00	 jmp	 $LN88@IntToInput

; 2200 : 		break;

  0032d	e9 96 01 00 00	 jmp	 $LN86@IntToInput
$LN33@IntToInput:

; 2201 : 	case 52:
; 2202 : 		return "Hat 3 South";

  00332	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@KJPGJAGN@Hat?53?5South?$AA@
  00337	e9 91 01 00 00	 jmp	 $LN88@IntToInput

; 2203 : 		break;

  0033c	e9 87 01 00 00	 jmp	 $LN86@IntToInput
$LN32@IntToInput:

; 2204 : 	case 53:
; 2205 : 		return "Hat 3 South-West";

  00341	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@DCHDDCGD@Hat?53?5South?9West?$AA@
  00346	e9 82 01 00 00	 jmp	 $LN88@IntToInput

; 2206 : 		break;

  0034b	e9 78 01 00 00	 jmp	 $LN86@IntToInput
$LN31@IntToInput:

; 2207 : 	case 54:
; 2208 : 		return "Hat 3 West";

  00350	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@JHOHONJA@Hat?53?5West?$AA@
  00355	e9 73 01 00 00	 jmp	 $LN88@IntToInput

; 2209 : 		break;

  0035a	e9 69 01 00 00	 jmp	 $LN86@IntToInput
$LN30@IntToInput:

; 2210 : 	case 55:
; 2211 : 		return "Hat 3 North-West";

  0035f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@DDHANGGG@Hat?53?5North?9West?$AA@
  00364	e9 64 01 00 00	 jmp	 $LN88@IntToInput

; 2212 : 		break;

  00369	e9 5a 01 00 00	 jmp	 $LN86@IntToInput
$LN29@IntToInput:

; 2213 : 	case 56:
; 2214 : 		return "Hat 4 North";

  0036e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@IBKMLAII@Hat?54?5North?$AA@
  00373	e9 55 01 00 00	 jmp	 $LN88@IntToInput

; 2215 : 		break;

  00378	e9 4b 01 00 00	 jmp	 $LN86@IntToInput
$LN28@IntToInput:

; 2216 : 	case 57:
; 2217 : 		return "Hat 4 North-East";

  0037d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@NLEBIDIL@Hat?54?5North?9East?$AA@
  00382	e9 46 01 00 00	 jmp	 $LN88@IntToInput

; 2218 : 		break;

  00387	e9 3c 01 00 00	 jmp	 $LN86@IntToInput
$LN27@IntToInput:

; 2219 : 	case 58:
; 2220 : 		return "Hat 4 East";

  0038c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@MHACIAKL@Hat?54?5East?$AA@
  00391	e9 37 01 00 00	 jmp	 $LN88@IntToInput

; 2221 : 		break;

  00396	e9 2d 01 00 00	 jmp	 $LN86@IntToInput
$LN26@IntToInput:

; 2222 : 	case 59:
; 2223 : 		return "Hat 4 South-East";

  0039b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@NKECGHIO@Hat?54?5South?9East?$AA@
  003a0	e9 28 01 00 00	 jmp	 $LN88@IntToInput

; 2224 : 		break;

  003a5	e9 1e 01 00 00	 jmp	 $LN86@IntToInput
$LN25@IntToInput:

; 2225 : 	case 60:
; 2226 : 		return "Hat 4 South";

  003aa	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0M@KDDDJJHE@Hat?54?5South?$AA@
  003af	e9 19 01 00 00	 jmp	 $LN88@IntToInput

; 2227 : 		break;

  003b4	e9 0f 01 00 00	 jmp	 $LN86@IntToInput
$LN24@IntToInput:

; 2228 : 	case 61:
; 2229 : 		return "Hat 4 South-West";

  003b9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@EPAADEDL@Hat?54?5South?9West?$AA@
  003be	e9 0a 01 00 00	 jmp	 $LN88@IntToInput

; 2230 : 		break;

  003c3	e9 00 01 00 00	 jmp	 $LN86@IntToInput
$LN23@IntToInput:

; 2231 : 	case 62:
; 2232 : 		return "Hat 4 West";

  003c8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0L@FCEANDBO@Hat?54?5West?$AA@
  003cd	e9 fb 00 00 00	 jmp	 $LN88@IntToInput

; 2233 : 		break;

  003d2	e9 f1 00 00 00	 jmp	 $LN86@IntToInput
$LN22@IntToInput:

; 2234 : 	case 63:
; 2235 : 		return "Hat 4 North-West";

  003d7	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BB@EOADNADO@Hat?54?5North?9West?$AA@
  003dc	e9 ec 00 00 00	 jmp	 $LN88@IntToInput

; 2236 : 		break;

  003e1	e9 e2 00 00 00	 jmp	 $LN86@IntToInput
$LN21@IntToInput:

; 2237 : 	case 64:
; 2238 : 		return "JoyStickX Min";

  003e6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@
  003eb	e9 dd 00 00 00	 jmp	 $LN88@IntToInput

; 2239 : 		break;

  003f0	e9 d3 00 00 00	 jmp	 $LN86@IntToInput
$LN20@IntToInput:

; 2240 : 	case 65:
; 2241 : 		return "JoyStickX Max";

  003f5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@
  003fa	e9 ce 00 00 00	 jmp	 $LN88@IntToInput

; 2242 : 		break;

  003ff	e9 c4 00 00 00	 jmp	 $LN86@IntToInput
$LN19@IntToInput:

; 2243 : 	case 66:
; 2244 : 		return "JoyStickY Min";

  00404	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@
  00409	e9 bf 00 00 00	 jmp	 $LN88@IntToInput

; 2245 : 		break;

  0040e	e9 b5 00 00 00	 jmp	 $LN86@IntToInput
$LN18@IntToInput:

; 2246 : 	case 67:
; 2247 : 		return "JoyStickY Max";

  00413	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@
  00418	e9 b0 00 00 00	 jmp	 $LN88@IntToInput

; 2248 : 		break;

  0041d	e9 a6 00 00 00	 jmp	 $LN86@IntToInput
$LN17@IntToInput:

; 2249 : 	case 68:
; 2250 : 		return "JoyStickZ Min";

  00422	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@KNJDDLNA@JoyStickZ?5Min?$AA@
  00427	e9 a1 00 00 00	 jmp	 $LN88@IntToInput

; 2251 : 		break;

  0042c	e9 97 00 00 00	 jmp	 $LN86@IntToInput
$LN16@IntToInput:

; 2252 : 	case 69:
; 2253 : 		return "JoyStickZ Max";

  00431	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@LPBINPLP@JoyStickZ?5Max?$AA@
  00436	e9 92 00 00 00	 jmp	 $LN88@IntToInput

; 2254 : 		break;

  0043b	e9 88 00 00 00	 jmp	 $LN86@IntToInput
$LN15@IntToInput:

; 2255 : 	case 70:
; 2256 : 		return "JoyStickTwistX Min";

  00440	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@EGEPNMPH@JoyStickTwistX?5Min?$AA@
  00445	e9 83 00 00 00	 jmp	 $LN88@IntToInput

; 2257 : 		break;

  0044a	eb 7c		 jmp	 SHORT $LN86@IntToInput
$LN14@IntToInput:

; 2258 : 	case 71:
; 2259 : 		return "JoyStickTwistX Max";

  0044c	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@FEMEDIJI@JoyStickTwistX?5Max?$AA@
  00451	eb 7a		 jmp	 SHORT $LN88@IntToInput

; 2260 : 		break;

  00453	eb 73		 jmp	 SHORT $LN86@IntToInput
$LN13@IntToInput:

; 2261 : 	case 72:
; 2262 : 		return "JoyStickTwistY Min";

  00455	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@INBDAPFC@JoyStickTwistY?5Min?$AA@
  0045a	eb 71		 jmp	 SHORT $LN88@IntToInput

; 2263 : 		break;

  0045c	eb 6a		 jmp	 SHORT $LN86@IntToInput
$LN12@IntToInput:

; 2264 : 	case 73:
; 2265 : 		return "JoyStickTwistY Max";

  0045e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@JPJIOLDN@JoyStickTwistY?5Max?$AA@
  00463	eb 68		 jmp	 SHORT $LN88@IntToInput

; 2266 : 		break;

  00465	eb 61		 jmp	 SHORT $LN86@IntToInput
$LN11@IntToInput:

; 2267 : 	case 74:
; 2268 : 		return "JoyStickTwistZ Min";

  00467	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@LIHHNPM@JoyStickTwistZ?5Min?$AA@
  0046c	eb 5f		 jmp	 SHORT $LN88@IntToInput

; 2269 : 		break;

  0046e	eb 58		 jmp	 SHORT $LN86@IntToInput
$LN10@IntToInput:

; 2270 : 	case 75:
; 2271 : 		return "JoyStickTwistZ Max";

  00470	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BD@BJAMJJJD@JoyStickTwistZ?5Max?$AA@
  00475	eb 56		 jmp	 SHORT $LN88@IntToInput

; 2272 : 		break;

  00477	eb 4f		 jmp	 SHORT $LN86@IntToInput
$LN9@IntToInput:

; 2273 : 	case 76:
; 2274 : 		return "JoyStickSliderA Min";

  00479	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@LKMGPNHK@JoyStickSliderA?5Min?$AA@
  0047e	eb 4d		 jmp	 SHORT $LN88@IntToInput

; 2275 : 		break;

  00480	eb 46		 jmp	 SHORT $LN86@IntToInput
$LN8@IntToInput:

; 2276 : 	case 77:
; 2277 : 		return "JoyStickSliderA Max";

  00482	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@KIENBJBF@JoyStickSliderA?5Max?$AA@
  00487	eb 44		 jmp	 SHORT $LN88@IntToInput

; 2278 : 		break;

  00489	eb 3d		 jmp	 SHORT $LN86@IntToInput
$LN7@IntToInput:

; 2279 : 	case 78:
; 2280 : 		return "JoyStickSliderB Min";

  0048b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@DMFCIPNE@JoyStickSliderB?5Min?$AA@
  00490	eb 3b		 jmp	 SHORT $LN88@IntToInput

; 2281 : 		break;

  00492	eb 34		 jmp	 SHORT $LN86@IntToInput
$LN6@IntToInput:

; 2282 : 	case 79:
; 2283 : 		return "JoyStickSliderB Max";

  00494	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@CONJGLLL@JoyStickSliderB?5Max?$AA@
  00499	eb 32		 jmp	 SHORT $LN88@IntToInput

; 2284 : 		break;

  0049b	eb 2b		 jmp	 SHORT $LN86@IntToInput
$LN5@IntToInput:

; 2285 : 	case 80:
; 2286 : 		return "JoyStickSliderC Min";

  0049d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@PHAOFMHB@JoyStickSliderC?5Min?$AA@
  004a2	eb 29		 jmp	 SHORT $LN88@IntToInput

; 2287 : 		break;

  004a4	eb 22		 jmp	 SHORT $LN86@IntToInput
$LN4@IntToInput:

; 2288 : 	case 81:
; 2289 : 		return "JoyStickSliderC Max";

  004a6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@OFIFLIBO@JoyStickSliderC?5Max?$AA@
  004ab	eb 20		 jmp	 SHORT $LN88@IntToInput

; 2290 : 		break;

  004ad	eb 19		 jmp	 SHORT $LN86@IntToInput
$LN3@IntToInput:

; 2291 : 	case 82:
; 2292 : 		return "JoyStickSliderD Min";

  004af	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@OKALGMMJ@JoyStickSliderD?5Min?$AA@
  004b4	eb 17		 jmp	 SHORT $LN88@IntToInput

; 2293 : 		break;

  004b6	eb 10		 jmp	 SHORT $LN86@IntToInput
$LN2@IntToInput:

; 2294 : 	case 83:
; 2295 : 		return "JoyStickSliderD Max";

  004b8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BE@PIIAIIKG@JoyStickSliderD?5Max?$AA@
  004bd	eb 0e		 jmp	 SHORT $LN88@IntToInput

; 2296 : 		break;

  004bf	eb 07		 jmp	 SHORT $LN86@IntToInput
$LN1@IntToInput:

; 2297 : 	default:
; 2298 : 		return "";

  004c1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  004c6	eb 05		 jmp	 SHORT $LN88@IntToInput
$LN86@IntToInput:

; 2299 : 		break;
; 2300 : 	}
; 2301 : 
; 2302 : 	return "";

  004c8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN88@IntToInput:

; 2303 : }

  004cd	5f		 pop	 edi
  004ce	5e		 pop	 esi
  004cf	5b		 pop	 ebx
  004d0	8b e5		 mov	 esp, ebp
  004d2	5d		 pop	 ebp
  004d3	c2 04 00	 ret	 4
  004d6	8b ff		 npad	 2
$LN90@IntToInput:
  004d8	00 00 00 00	 DD	 $LN85@IntToInput
  004dc	00 00 00 00	 DD	 $LN84@IntToInput
  004e0	00 00 00 00	 DD	 $LN83@IntToInput
  004e4	00 00 00 00	 DD	 $LN82@IntToInput
  004e8	00 00 00 00	 DD	 $LN81@IntToInput
  004ec	00 00 00 00	 DD	 $LN80@IntToInput
  004f0	00 00 00 00	 DD	 $LN79@IntToInput
  004f4	00 00 00 00	 DD	 $LN78@IntToInput
  004f8	00 00 00 00	 DD	 $LN77@IntToInput
  004fc	00 00 00 00	 DD	 $LN76@IntToInput
  00500	00 00 00 00	 DD	 $LN75@IntToInput
  00504	00 00 00 00	 DD	 $LN74@IntToInput
  00508	00 00 00 00	 DD	 $LN73@IntToInput
  0050c	00 00 00 00	 DD	 $LN72@IntToInput
  00510	00 00 00 00	 DD	 $LN71@IntToInput
  00514	00 00 00 00	 DD	 $LN70@IntToInput
  00518	00 00 00 00	 DD	 $LN69@IntToInput
  0051c	00 00 00 00	 DD	 $LN68@IntToInput
  00520	00 00 00 00	 DD	 $LN67@IntToInput
  00524	00 00 00 00	 DD	 $LN66@IntToInput
  00528	00 00 00 00	 DD	 $LN65@IntToInput
  0052c	00 00 00 00	 DD	 $LN64@IntToInput
  00530	00 00 00 00	 DD	 $LN63@IntToInput
  00534	00 00 00 00	 DD	 $LN62@IntToInput
  00538	00 00 00 00	 DD	 $LN61@IntToInput
  0053c	00 00 00 00	 DD	 $LN60@IntToInput
  00540	00 00 00 00	 DD	 $LN59@IntToInput
  00544	00 00 00 00	 DD	 $LN58@IntToInput
  00548	00 00 00 00	 DD	 $LN57@IntToInput
  0054c	00 00 00 00	 DD	 $LN56@IntToInput
  00550	00 00 00 00	 DD	 $LN55@IntToInput
  00554	00 00 00 00	 DD	 $LN54@IntToInput
  00558	00 00 00 00	 DD	 $LN53@IntToInput
  0055c	00 00 00 00	 DD	 $LN52@IntToInput
  00560	00 00 00 00	 DD	 $LN51@IntToInput
  00564	00 00 00 00	 DD	 $LN50@IntToInput
  00568	00 00 00 00	 DD	 $LN49@IntToInput
  0056c	00 00 00 00	 DD	 $LN48@IntToInput
  00570	00 00 00 00	 DD	 $LN47@IntToInput
  00574	00 00 00 00	 DD	 $LN46@IntToInput
  00578	00 00 00 00	 DD	 $LN45@IntToInput
  0057c	00 00 00 00	 DD	 $LN44@IntToInput
  00580	00 00 00 00	 DD	 $LN43@IntToInput
  00584	00 00 00 00	 DD	 $LN42@IntToInput
  00588	00 00 00 00	 DD	 $LN41@IntToInput
  0058c	00 00 00 00	 DD	 $LN40@IntToInput
  00590	00 00 00 00	 DD	 $LN39@IntToInput
  00594	00 00 00 00	 DD	 $LN38@IntToInput
  00598	00 00 00 00	 DD	 $LN37@IntToInput
  0059c	00 00 00 00	 DD	 $LN36@IntToInput
  005a0	00 00 00 00	 DD	 $LN35@IntToInput
  005a4	00 00 00 00	 DD	 $LN34@IntToInput
  005a8	00 00 00 00	 DD	 $LN33@IntToInput
  005ac	00 00 00 00	 DD	 $LN32@IntToInput
  005b0	00 00 00 00	 DD	 $LN31@IntToInput
  005b4	00 00 00 00	 DD	 $LN30@IntToInput
  005b8	00 00 00 00	 DD	 $LN29@IntToInput
  005bc	00 00 00 00	 DD	 $LN28@IntToInput
  005c0	00 00 00 00	 DD	 $LN27@IntToInput
  005c4	00 00 00 00	 DD	 $LN26@IntToInput
  005c8	00 00 00 00	 DD	 $LN25@IntToInput
  005cc	00 00 00 00	 DD	 $LN24@IntToInput
  005d0	00 00 00 00	 DD	 $LN23@IntToInput
  005d4	00 00 00 00	 DD	 $LN22@IntToInput
  005d8	00 00 00 00	 DD	 $LN21@IntToInput
  005dc	00 00 00 00	 DD	 $LN20@IntToInput
  005e0	00 00 00 00	 DD	 $LN19@IntToInput
  005e4	00 00 00 00	 DD	 $LN18@IntToInput
  005e8	00 00 00 00	 DD	 $LN17@IntToInput
  005ec	00 00 00 00	 DD	 $LN16@IntToInput
  005f0	00 00 00 00	 DD	 $LN15@IntToInput
  005f4	00 00 00 00	 DD	 $LN14@IntToInput
  005f8	00 00 00 00	 DD	 $LN13@IntToInput
  005fc	00 00 00 00	 DD	 $LN12@IntToInput
  00600	00 00 00 00	 DD	 $LN11@IntToInput
  00604	00 00 00 00	 DD	 $LN10@IntToInput
  00608	00 00 00 00	 DD	 $LN9@IntToInput
  0060c	00 00 00 00	 DD	 $LN8@IntToInput
  00610	00 00 00 00	 DD	 $LN7@IntToInput
  00614	00 00 00 00	 DD	 $LN6@IntToInput
  00618	00 00 00 00	 DD	 $LN5@IntToInput
  0061c	00 00 00 00	 DD	 $LN4@IntToInput
  00620	00 00 00 00	 DD	 $LN3@IntToInput
  00624	00 00 00 00	 DD	 $LN2@IntToInput
?IntToInputName@DeviceHandler@@QAEPADH@Z ENDP		; DeviceHandler::IntToInputName
_TEXT	ENDS
PUBLIC	?MouseBindDown$@DeviceHandler@@QAEPADXZ		; DeviceHandler::MouseBindDown$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindDown$@DeviceHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindDown$@DeviceHandler@@QAEPADXZ PROC		; DeviceHandler::MouseBindDown$, COMDAT
; _this$ = ecx

; 2305 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2306 : 	return this->IntToInputName(this->MouseDown);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 94 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3220]
  00015	51		 push	 ecx
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?IntToInputName@DeviceHandler@@QAEPADH@Z ; DeviceHandler::IntToInputName

; 2307 : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?MouseBindDown$@DeviceHandler@@QAEPADXZ ENDP		; DeviceHandler::MouseBindDown$
_TEXT	ENDS
PUBLIC	?MouseBindLeft$@DeviceHandler@@QAEPADXZ		; DeviceHandler::MouseBindLeft$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindLeft$@DeviceHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindLeft$@DeviceHandler@@QAEPADXZ PROC		; DeviceHandler::MouseBindLeft$, COMDAT
; _this$ = ecx

; 2309 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2310 : 	return this->IntToInputName(this->MouseLeft);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 98 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3224]
  00015	51		 push	 ecx
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?IntToInputName@DeviceHandler@@QAEPADH@Z ; DeviceHandler::IntToInputName

; 2311 : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?MouseBindLeft$@DeviceHandler@@QAEPADXZ ENDP		; DeviceHandler::MouseBindLeft$
_TEXT	ENDS
PUBLIC	?MouseBindRight$@DeviceHandler@@QAEPADXZ	; DeviceHandler::MouseBindRight$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindRight$@DeviceHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindRight$@DeviceHandler@@QAEPADXZ PROC		; DeviceHandler::MouseBindRight$, COMDAT
; _this$ = ecx

; 2313 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2314 : 	return this->IntToInputName(this->MouseRight);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 9c 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3228]
  00015	51		 push	 ecx
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?IntToInputName@DeviceHandler@@QAEPADH@Z ; DeviceHandler::IntToInputName

; 2315 : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?MouseBindRight$@DeviceHandler@@QAEPADXZ ENDP		; DeviceHandler::MouseBindRight$
_TEXT	ENDS
PUBLIC	?MouseBindUp$@DeviceHandler@@QAEPADXZ		; DeviceHandler::MouseBindUp$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindUp$@DeviceHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindUp$@DeviceHandler@@QAEPADXZ PROC		; DeviceHandler::MouseBindUp$, COMDAT
; _this$ = ecx

; 2317 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2318 : 	return this->IntToInputName(this->MouseUp);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 a8 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3240]
  00015	51		 push	 ecx
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?IntToInputName@DeviceHandler@@QAEPADH@Z ; DeviceHandler::IntToInputName

; 2319 : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?MouseBindUp$@DeviceHandler@@QAEPADXZ ENDP		; DeviceHandler::MouseBindUp$
_TEXT	ENDS
PUBLIC	?GetJoyPosition@DeviceHandler@@QAEMH@Z		; DeviceHandler::GetJoyPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetJoyPosition@DeviceHandler@@QAEMH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Joystick$ = 8						; size = 4
?GetJoyPosition@DeviceHandler@@QAEMH@Z PROC		; DeviceHandler::GetJoyPosition, COMDAT
; _this$ = ecx

; 2321 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2322 : 	switch(Joystick)

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Joystick$[ebp]
  0000f	89 45 b8	 mov	 DWORD PTR tv64[ebp], eax
  00012	8b 4d b8	 mov	 ecx, DWORD PTR tv64[ebp]
  00015	83 e9 01	 sub	 ecx, 1
  00018	89 4d b8	 mov	 DWORD PTR tv64[ebp], ecx
  0001b	83 7d b8 09	 cmp	 DWORD PTR tv64[ebp], 9
  0001f	0f 87 82 00 00
	00		 ja	 $LN1@GetJoyPosi
  00025	8b 55 b8	 mov	 edx, DWORD PTR tv64[ebp]
  00028	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN16@GetJoyPosi[edx*4]
$LN11@GetJoyPosi:

; 2323 : 	{
; 2324 : 	case 1:
; 2325 : 		return this->JoyStickXPosition();

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
  00037	eb 70		 jmp	 SHORT $LN12@GetJoyPosi

; 2326 : 		break;

  00039	eb 6e		 jmp	 SHORT $LN12@GetJoyPosi
$LN10@GetJoyPosi:

; 2327 : 	case 2:
; 2328 : 		return this->JoyStickYPosition();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
  00043	eb 64		 jmp	 SHORT $LN12@GetJoyPosi

; 2329 : 		break;

  00045	eb 62		 jmp	 SHORT $LN12@GetJoyPosi
$LN9@GetJoyPosi:

; 2330 : 	case 3:
; 2331 : 		return this->JoyStickZPosition();

  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
  0004f	eb 58		 jmp	 SHORT $LN12@GetJoyPosi

; 2332 : 		break;

  00051	eb 56		 jmp	 SHORT $LN12@GetJoyPosi
$LN8@GetJoyPosi:

; 2333 : 	case 4:
; 2334 : 		return this->JoyStickXTwistPosition();

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
  0005b	eb 4c		 jmp	 SHORT $LN12@GetJoyPosi

; 2335 : 		break;

  0005d	eb 4a		 jmp	 SHORT $LN12@GetJoyPosi
$LN7@GetJoyPosi:

; 2336 : 	case 5:
; 2337 : 		return this->JoyStickYTwistPosition();

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
  00067	eb 40		 jmp	 SHORT $LN12@GetJoyPosi

; 2338 : 		break;

  00069	eb 3e		 jmp	 SHORT $LN12@GetJoyPosi
$LN6@GetJoyPosi:

; 2339 : 	case 6:
; 2340 : 		return this->JoyStickZTwistPosition();

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
  00073	eb 34		 jmp	 SHORT $LN12@GetJoyPosi

; 2341 : 		break;

  00075	eb 32		 jmp	 SHORT $LN12@GetJoyPosi
$LN5@GetJoyPosi:

; 2342 : 	case 7:
; 2343 : 		return this->JoyStickASliderPosition();

  00077	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
  0007f	eb 28		 jmp	 SHORT $LN12@GetJoyPosi

; 2344 : 		break;

  00081	eb 26		 jmp	 SHORT $LN12@GetJoyPosi
$LN4@GetJoyPosi:

; 2345 : 	case 8:
; 2346 : 		return this->JoyStickBSliderPosition();

  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
  0008b	eb 1c		 jmp	 SHORT $LN12@GetJoyPosi

; 2347 : 		break;

  0008d	eb 1a		 jmp	 SHORT $LN12@GetJoyPosi
$LN3@GetJoyPosi:

; 2348 : 	case 9:
; 2349 : 		return this->JoyStickCSliderPosition();

  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
  00097	eb 10		 jmp	 SHORT $LN12@GetJoyPosi

; 2350 : 		break;

  00099	eb 0e		 jmp	 SHORT $LN12@GetJoyPosi
$LN2@GetJoyPosi:

; 2351 : 	case 10:
; 2352 : 		return this->JoyStickDSliderPosition();

  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	e8 00 00 00 00	 call	 ?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
  000a3	eb 04		 jmp	 SHORT $LN12@GetJoyPosi

; 2353 : 		break;

  000a5	eb 02		 jmp	 SHORT $LN12@GetJoyPosi
$LN1@GetJoyPosi:

; 2354 : 	default:
; 2355 : 		return NULL;

  000a7	d9 ee		 fldz
$LN12@GetJoyPosi:

; 2356 : 		break;
; 2357 : 	}
; 2358 : }

  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
  000b2	8b ff		 npad	 2
$LN16@GetJoyPosi:
  000b4	00 00 00 00	 DD	 $LN11@GetJoyPosi
  000b8	00 00 00 00	 DD	 $LN10@GetJoyPosi
  000bc	00 00 00 00	 DD	 $LN9@GetJoyPosi
  000c0	00 00 00 00	 DD	 $LN8@GetJoyPosi
  000c4	00 00 00 00	 DD	 $LN7@GetJoyPosi
  000c8	00 00 00 00	 DD	 $LN6@GetJoyPosi
  000cc	00 00 00 00	 DD	 $LN5@GetJoyPosi
  000d0	00 00 00 00	 DD	 $LN4@GetJoyPosi
  000d4	00 00 00 00	 DD	 $LN3@GetJoyPosi
  000d8	00 00 00 00	 DD	 $LN2@GetJoyPosi
?GetJoyPosition@DeviceHandler@@QAEMH@Z ENDP		; DeviceHandler::GetJoyPosition
_TEXT	ENDS
PUBLIC	?GetPercentBindX@DeviceHandler@@QAEMXZ		; DeviceHandler::GetPercentBindX
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetPercentBindX@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPercentBindX@DeviceHandler@@QAEMXZ PROC		; DeviceHandler::GetPercentBindX, COMDAT
; _this$ = ecx

; 2360 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2361 : 	return this->PercentBindX;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	d9 80 88 0c 00
	00		 fld	 DWORD PTR [eax+3208]

; 2362 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetPercentBindX@DeviceHandler@@QAEMXZ ENDP		; DeviceHandler::GetPercentBindX
_TEXT	ENDS
PUBLIC	?GetPercentBindY@DeviceHandler@@QAEMXZ		; DeviceHandler::GetPercentBindY
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetPercentBindY@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPercentBindY@DeviceHandler@@QAEMXZ PROC		; DeviceHandler::GetPercentBindY, COMDAT
; _this$ = ecx

; 2364 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2365 : 	return this->PercentBindY;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	d9 80 8c 0c 00
	00		 fld	 DWORD PTR [eax+3212]

; 2366 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetPercentBindY@DeviceHandler@@QAEMXZ ENDP		; DeviceHandler::GetPercentBindY
_TEXT	ENDS
PUBLIC	__real@40dfffc000000000
;	COMDAT __real@40dfffc000000000
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?JoyStickASliderPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickASliderPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickASliderPosition, COMDAT
; _this$ = ecx

; 2368 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2369 : 	return ((float)(this->JoyStickSliderA[0]-32767))/32767;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 9c 17 00
	00		 mov	 ecx, DWORD PTR [eax+6044]
  00015	81 e9 ff 7f 00
	00		 sub	 ecx, 32767		; 00007fffH
  0001b	89 4d b4	 mov	 DWORD PTR tv74[ebp], ecx
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv74[ebp+4], 0
  00025	df 6d b4	 fild	 QWORD PTR tv74[ebp]
  00028	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@40dfffc000000000
  0002e	d9 5d b0	 fstp	 DWORD PTR tv79[ebp]
  00031	d9 45 b0	 fld	 DWORD PTR tv79[ebp]

; 2370 : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickASliderPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickBSliderPosition, COMDAT
; _this$ = ecx

; 2372 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2373 : 	return ((float)(this->JoyStickSliderB[0]-32767))/32767;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 2c 19 00
	00		 mov	 ecx, DWORD PTR [eax+6444]
  00015	81 e9 ff 7f 00
	00		 sub	 ecx, 32767		; 00007fffH
  0001b	89 4d b4	 mov	 DWORD PTR tv74[ebp], ecx
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv74[ebp+4], 0
  00025	df 6d b4	 fild	 QWORD PTR tv74[ebp]
  00028	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@40dfffc000000000
  0002e	d9 5d b0	 fstp	 DWORD PTR tv79[ebp]
  00031	d9 45 b0	 fld	 DWORD PTR tv79[ebp]

; 2374 : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickBSliderPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickCSliderPosition, COMDAT
; _this$ = ecx

; 2376 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2377 : 	return ((float)(this->JoyStickSliderC[0]-32767))/32767;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 bc 1a 00
	00		 mov	 ecx, DWORD PTR [eax+6844]
  00015	81 e9 ff 7f 00
	00		 sub	 ecx, 32767		; 00007fffH
  0001b	89 4d b4	 mov	 DWORD PTR tv74[ebp], ecx
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv74[ebp+4], 0
  00025	df 6d b4	 fild	 QWORD PTR tv74[ebp]
  00028	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@40dfffc000000000
  0002e	d9 5d b0	 fstp	 DWORD PTR tv79[ebp]
  00031	d9 45 b0	 fld	 DWORD PTR tv79[ebp]

; 2378 : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickCSliderPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickDSliderPosition, COMDAT
; _this$ = ecx

; 2380 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2381 : 	return ((float)(this->JoyStickSliderD[0]-32767))/32767;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 4c 1c 00
	00		 mov	 ecx, DWORD PTR [eax+7244]
  00015	81 e9 ff 7f 00
	00		 sub	 ecx, 32767		; 00007fffH
  0001b	89 4d b4	 mov	 DWORD PTR tv74[ebp], ecx
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv74[ebp+4], 0
  00025	df 6d b4	 fild	 QWORD PTR tv74[ebp]
  00028	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@40dfffc000000000
  0002e	d9 5d b0	 fstp	 DWORD PTR tv79[ebp]
  00031	d9 45 b0	 fld	 DWORD PTR tv79[ebp]

; 2382 : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickDSliderPosition
_TEXT	ENDS
PUBLIC	__real@408f400000000000
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?JoyStickXPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
?JoyStickXPosition@DeviceHandler@@QAEMXZ PROC		; DeviceHandler::JoyStickXPosition, COMDAT
; _this$ = ecx

; 2384 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2385 : 	return ((float)this->JoyStickX[0])/1000;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	db 80 ac 0c 00
	00		 fild	 DWORD PTR [eax+3244]
  00015	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@408f400000000000
  0001b	d9 5d b8	 fstp	 DWORD PTR tv74[ebp]
  0001e	d9 45 b8	 fld	 DWORD PTR tv74[ebp]

; 2386 : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?JoyStickXPosition@DeviceHandler@@QAEMXZ ENDP		; DeviceHandler::JoyStickXPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickYPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
?JoyStickYPosition@DeviceHandler@@QAEMXZ PROC		; DeviceHandler::JoyStickYPosition, COMDAT
; _this$ = ecx

; 2388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2389 : 	return ((float)this->JoyStickY[0])/1000;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	db 80 3c 0e 00
	00		 fild	 DWORD PTR [eax+3644]
  00015	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@408f400000000000
  0001b	d9 5d b8	 fstp	 DWORD PTR tv74[ebp]
  0001e	d9 45 b8	 fld	 DWORD PTR tv74[ebp]

; 2390 : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?JoyStickYPosition@DeviceHandler@@QAEMXZ ENDP		; DeviceHandler::JoyStickYPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickZPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
?JoyStickZPosition@DeviceHandler@@QAEMXZ PROC		; DeviceHandler::JoyStickZPosition, COMDAT
; _this$ = ecx

; 2392 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2393 : 	return ((float)this->JoyStickZ[0])/1000;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	db 80 cc 0f 00
	00		 fild	 DWORD PTR [eax+4044]
  00015	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@408f400000000000
  0001b	d9 5d b8	 fstp	 DWORD PTR tv74[ebp]
  0001e	d9 45 b8	 fld	 DWORD PTR tv74[ebp]

; 2394 : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?JoyStickZPosition@DeviceHandler@@QAEMXZ ENDP		; DeviceHandler::JoyStickZPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickXTwistPosition, COMDAT
; _this$ = ecx

; 2396 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2397 : 	return ((float)(this->JoyStickTwistX[0]-32767))/32767;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 dc 1d 00
	00		 mov	 ecx, DWORD PTR [eax+7644]
  00015	81 e9 ff 7f 00
	00		 sub	 ecx, 32767		; 00007fffH
  0001b	89 4d b4	 mov	 DWORD PTR tv74[ebp], ecx
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv74[ebp+4], 0
  00025	df 6d b4	 fild	 QWORD PTR tv74[ebp]
  00028	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@40dfffc000000000
  0002e	d9 5d b0	 fstp	 DWORD PTR tv79[ebp]
  00031	d9 45 b0	 fld	 DWORD PTR tv79[ebp]

; 2398 : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickXTwistPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickYTwistPosition, COMDAT
; _this$ = ecx

; 2400 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2401 : 	return ((float)(this->JoyStickTwistY[0]-32767))/32767;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 6c 1f 00
	00		 mov	 ecx, DWORD PTR [eax+8044]
  00015	81 e9 ff 7f 00
	00		 sub	 ecx, 32767		; 00007fffH
  0001b	89 4d b4	 mov	 DWORD PTR tv74[ebp], ecx
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv74[ebp+4], 0
  00025	df 6d b4	 fild	 QWORD PTR tv74[ebp]
  00028	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@40dfffc000000000
  0002e	d9 5d b0	 fstp	 DWORD PTR tv79[ebp]
  00031	d9 45 b0	 fld	 DWORD PTR tv79[ebp]

; 2402 : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickYTwistPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickZTwistPosition, COMDAT
; _this$ = ecx

; 2404 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2405 : 	return ((float)(this->JoyStickTwistZ[0]-32767))/32767;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 88 fc 20 00
	00		 mov	 ecx, DWORD PTR [eax+8444]
  00015	81 e9 ff 7f 00
	00		 sub	 ecx, 32767		; 00007fffH
  0001b	89 4d b4	 mov	 DWORD PTR tv74[ebp], ecx
  0001e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv74[ebp+4], 0
  00025	df 6d b4	 fild	 QWORD PTR tv74[ebp]
  00028	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@40dfffc000000000
  0002e	d9 5d b0	 fstp	 DWORD PTR tv79[ebp]
  00031	d9 45 b0	 fld	 DWORD PTR tv79[ebp]

; 2406 : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickZTwistPosition
_TEXT	ENDS
PUBLIC	?CharToAngle@DeviceHandler@@QAEHPAD@Z		; DeviceHandler::CharToAngle
; Function compile flags: /Odtp /ZI
;	COMDAT ?CharToAngle@DeviceHandler@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Angle$ = 8						; size = 4
?CharToAngle@DeviceHandler@@QAEHPAD@Z PROC		; DeviceHandler::CharToAngle, COMDAT
; _this$ = ecx

; 2408 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2409 : 	if(Angle=="North")

  0000c	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _Angle$[ebp], OFFSET ??_C@_05FPOHJMOI@North?$AA@
  00013	75 0c		 jne	 SHORT $LN18@CharToAngl

; 2410 : 		return 0;

  00015	33 c0		 xor	 eax, eax
  00017	e9 a1 00 00 00	 jmp	 $LN19@CharToAngl
  0001c	e9 99 00 00 00	 jmp	 $LN17@CharToAngl
$LN18@CharToAngl:

; 2411 : 	else if(Angle=="North-East")

  00021	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _Angle$[ebp], OFFSET ??_C@_0L@MLODGOPA@North?9East?$AA@
  00028	75 0f		 jne	 SHORT $LN16@CharToAngl

; 2412 : 		return 45;

  0002a	b8 2d 00 00 00	 mov	 eax, 45			; 0000002dH
  0002f	e9 89 00 00 00	 jmp	 $LN19@CharToAngl
  00034	e9 81 00 00 00	 jmp	 $LN17@CharToAngl
$LN16@CharToAngl:

; 2413 : 	else if(Angle=="East")

  00039	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _Angle$[ebp], OFFSET ??_C@_04DHLACFEG@East?$AA@
  00040	75 09		 jne	 SHORT $LN14@CharToAngl

; 2414 : 		return 90;

  00042	b8 5a 00 00 00	 mov	 eax, 90			; 0000005aH
  00047	eb 74		 jmp	 SHORT $LN19@CharToAngl
  00049	eb 6f		 jmp	 SHORT $LN17@CharToAngl
$LN14@CharToAngl:

; 2415 : 	else if(Angle=="South-East")

  0004b	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _Angle$[ebp], OFFSET ??_C@_0L@MKOAIKPF@South?9East?$AA@
  00052	75 09		 jne	 SHORT $LN12@CharToAngl

; 2416 : 		return 135;

  00054	b8 87 00 00 00	 mov	 eax, 135		; 00000087H
  00059	eb 62		 jmp	 SHORT $LN19@CharToAngl
  0005b	eb 5d		 jmp	 SHORT $LN17@CharToAngl
$LN12@CharToAngl:

; 2417 : 	else if(Angle=="South")

  0005d	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _Angle$[ebp], OFFSET ??_C@_05HNHILFBE@South?$AA@
  00064	75 09		 jne	 SHORT $LN10@CharToAngl

; 2418 : 		return 180;

  00066	b8 b4 00 00 00	 mov	 eax, 180		; 000000b4H
  0006b	eb 50		 jmp	 SHORT $LN19@CharToAngl
  0006d	eb 4b		 jmp	 SHORT $LN17@CharToAngl
$LN10@CharToAngl:

; 2419 : 	else if(Angle=="South-West")

  0006f	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _Angle$[ebp], OFFSET ??_C@_0L@FPKCNJEA@South?9West?$AA@
  00076	75 09		 jne	 SHORT $LN8@CharToAngl

; 2420 : 		return 225;

  00078	b8 e1 00 00 00	 mov	 eax, 225		; 000000e1H
  0007d	eb 3e		 jmp	 SHORT $LN19@CharToAngl
  0007f	eb 39		 jmp	 SHORT $LN17@CharToAngl
$LN8@CharToAngl:

; 2421 : 	else if(Angle=="West")

  00081	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _Angle$[ebp], OFFSET ??_C@_04KCPCHGPD@West?$AA@
  00088	75 09		 jne	 SHORT $LN6@CharToAngl

; 2422 : 		return 270;

  0008a	b8 0e 01 00 00	 mov	 eax, 270		; 0000010eH
  0008f	eb 2c		 jmp	 SHORT $LN19@CharToAngl
  00091	eb 27		 jmp	 SHORT $LN17@CharToAngl
$LN6@CharToAngl:

; 2423 : 	else if(Angle=="North-West")

  00093	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _Angle$[ebp], OFFSET ??_C@_0L@FOKBDNEF@North?9West?$AA@
  0009a	75 09		 jne	 SHORT $LN4@CharToAngl

; 2424 : 		return 315;

  0009c	b8 3b 01 00 00	 mov	 eax, 315		; 0000013bH
  000a1	eb 1a		 jmp	 SHORT $LN19@CharToAngl
  000a3	eb 15		 jmp	 SHORT $LN17@CharToAngl
$LN4@CharToAngl:

; 2425 : 	else if(Angle=="Center")

  000a5	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _Angle$[ebp], OFFSET ??_C@_06NOADDNNE@Center?$AA@
  000ac	75 07		 jne	 SHORT $LN2@CharToAngl

; 2426 : 		return -1;

  000ae	83 c8 ff	 or	 eax, -1
  000b1	eb 0a		 jmp	 SHORT $LN19@CharToAngl

; 2427 : 	else

  000b3	eb 05		 jmp	 SHORT $LN17@CharToAngl
$LN2@CharToAngl:

; 2428 : 		return -1;

  000b5	83 c8 ff	 or	 eax, -1
  000b8	eb 03		 jmp	 SHORT $LN19@CharToAngl
$LN17@CharToAngl:

; 2429 : 
; 2430 : 	return -1;

  000ba	83 c8 ff	 or	 eax, -1
$LN19@CharToAngl:

; 2431 : }

  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 04 00	 ret	 4
?CharToAngle@DeviceHandler@@QAEHPAD@Z ENDP		; DeviceHandler::CharToAngle
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?CharToInputInt@DeviceHandler@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputName$ = 8						; size = 4
?CharToInputInt@DeviceHandler@@QAEHPAD@Z PROC		; DeviceHandler::CharToInputInt, COMDAT
; _this$ = ecx

; 2433 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2434 : 	if(InputName=="Button 0")

  0000c	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_08KCCGPEHE@Button?50?$AA@
  00013	75 0c		 jne	 SHORT $LN170@CharToInpu

; 2435 : 		return 0;

  00015	33 c0		 xor	 eax, eax
  00017	e9 c0 07 00 00	 jmp	 $LN171@CharToInpu
  0001c	e9 b8 07 00 00	 jmp	 $LN169@CharToInpu
$LN170@CharToInpu:

; 2436 : 	else if(InputName=="Button 1")

  00021	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_08LLDNMFDF@Button?51?$AA@
  00028	75 0f		 jne	 SHORT $LN168@CharToInpu

; 2437 : 		return 1;

  0002a	b8 01 00 00 00	 mov	 eax, 1
  0002f	e9 a8 07 00 00	 jmp	 $LN171@CharToInpu
  00034	e9 a0 07 00 00	 jmp	 $LN169@CharToInpu
$LN168@CharToInpu:

; 2438 : 	else if(InputName=="Button 2")

  00039	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_08JABAJGPG@Button?52?$AA@
  00040	75 0f		 jne	 SHORT $LN166@CharToInpu

; 2439 : 		return 2;

  00042	b8 02 00 00 00	 mov	 eax, 2
  00047	e9 90 07 00 00	 jmp	 $LN171@CharToInpu
  0004c	e9 88 07 00 00	 jmp	 $LN169@CharToInpu
$LN166@CharToInpu:

; 2440 : 	else if(InputName=="Button 3")

  00051	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_08IJALKHLH@Button?53?$AA@
  00058	75 0f		 jne	 SHORT $LN164@CharToInpu

; 2441 : 		return 3;

  0005a	b8 03 00 00 00	 mov	 eax, 3
  0005f	e9 78 07 00 00	 jmp	 $LN171@CharToInpu
  00064	e9 70 07 00 00	 jmp	 $LN169@CharToInpu
$LN164@CharToInpu:

; 2442 : 	else if(InputName=="Button 4")

  00069	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_08MGEKDBHA@Button?54?$AA@
  00070	75 0f		 jne	 SHORT $LN162@CharToInpu

; 2443 : 		return 4;

  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	e9 60 07 00 00	 jmp	 $LN171@CharToInpu
  0007c	e9 58 07 00 00	 jmp	 $LN169@CharToInpu
$LN162@CharToInpu:

; 2444 : 	else if(InputName=="Button 5")

  00081	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_08NPFBAADB@Button?55?$AA@
  00088	75 0f		 jne	 SHORT $LN160@CharToInpu

; 2445 : 		return 5;

  0008a	b8 05 00 00 00	 mov	 eax, 5
  0008f	e9 48 07 00 00	 jmp	 $LN171@CharToInpu
  00094	e9 40 07 00 00	 jmp	 $LN169@CharToInpu
$LN160@CharToInpu:

; 2446 : 	else if(InputName=="Button 6")

  00099	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_08PEHMFDPC@Button?56?$AA@
  000a0	75 0f		 jne	 SHORT $LN158@CharToInpu

; 2447 : 		return 6;

  000a2	b8 06 00 00 00	 mov	 eax, 6
  000a7	e9 30 07 00 00	 jmp	 $LN171@CharToInpu
  000ac	e9 28 07 00 00	 jmp	 $LN169@CharToInpu
$LN158@CharToInpu:

; 2448 : 	else if(InputName=="Button 7")

  000b1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_08ONGHGCLD@Button?57?$AA@
  000b8	75 0f		 jne	 SHORT $LN156@CharToInpu

; 2449 : 		return 7;

  000ba	b8 07 00 00 00	 mov	 eax, 7
  000bf	e9 18 07 00 00	 jmp	 $LN171@CharToInpu
  000c4	e9 10 07 00 00	 jmp	 $LN169@CharToInpu
$LN156@CharToInpu:

; 2450 : 	else if(InputName=="Button 8")

  000c9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_08GKPPHOHM@Button?58?$AA@
  000d0	75 0f		 jne	 SHORT $LN154@CharToInpu

; 2451 : 		return 8;

  000d2	b8 08 00 00 00	 mov	 eax, 8
  000d7	e9 00 07 00 00	 jmp	 $LN171@CharToInpu
  000dc	e9 f8 06 00 00	 jmp	 $LN169@CharToInpu
$LN154@CharToInpu:

; 2452 : 	else if(InputName=="Button 9")

  000e1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_08HDOEEPDN@Button?59?$AA@
  000e8	75 0f		 jne	 SHORT $LN152@CharToInpu

; 2453 : 		return 9;

  000ea	b8 09 00 00 00	 mov	 eax, 9
  000ef	e9 e8 06 00 00	 jmp	 $LN171@CharToInpu
  000f4	e9 e0 06 00 00	 jmp	 $LN169@CharToInpu
$LN152@CharToInpu:

; 2454 : 	else if(InputName=="Button 10")

  000f9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09IJEOMPBF@Button?510?$AA@
  00100	75 0f		 jne	 SHORT $LN150@CharToInpu

; 2455 : 		return 10;

  00102	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00107	e9 d0 06 00 00	 jmp	 $LN171@CharToInpu
  0010c	e9 c8 06 00 00	 jmp	 $LN169@CharToInpu
$LN150@CharToInpu:

; 2456 : 	else if(InputName=="Button 11")

  00111	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09JAFFPOFE@Button?511?$AA@
  00118	75 0f		 jne	 SHORT $LN148@CharToInpu

; 2457 : 		return 11;

  0011a	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  0011f	e9 b8 06 00 00	 jmp	 $LN171@CharToInpu
  00124	e9 b0 06 00 00	 jmp	 $LN169@CharToInpu
$LN148@CharToInpu:

; 2458 : 	else if(InputName=="Button 12")

  00129	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09LLHIKNJH@Button?512?$AA@
  00130	75 0f		 jne	 SHORT $LN146@CharToInpu

; 2459 : 		return 12;

  00132	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00137	e9 a0 06 00 00	 jmp	 $LN171@CharToInpu
  0013c	e9 98 06 00 00	 jmp	 $LN169@CharToInpu
$LN146@CharToInpu:

; 2460 : 	else if(InputName=="Button 13")

  00141	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09KCGDJMNG@Button?513?$AA@
  00148	75 0f		 jne	 SHORT $LN144@CharToInpu

; 2461 : 		return 13;

  0014a	b8 0d 00 00 00	 mov	 eax, 13			; 0000000dH
  0014f	e9 88 06 00 00	 jmp	 $LN171@CharToInpu
  00154	e9 80 06 00 00	 jmp	 $LN169@CharToInpu
$LN144@CharToInpu:

; 2462 : 	else if(InputName=="Button 14")

  00159	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09ONCCAKBB@Button?514?$AA@
  00160	75 0f		 jne	 SHORT $LN142@CharToInpu

; 2463 : 		return 14;

  00162	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH
  00167	e9 70 06 00 00	 jmp	 $LN171@CharToInpu
  0016c	e9 68 06 00 00	 jmp	 $LN169@CharToInpu
$LN142@CharToInpu:

; 2464 : 	else if(InputName=="Button 15")

  00171	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09PEDJDLFA@Button?515?$AA@
  00178	75 0f		 jne	 SHORT $LN140@CharToInpu

; 2465 : 		return 15;

  0017a	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  0017f	e9 58 06 00 00	 jmp	 $LN171@CharToInpu
  00184	e9 50 06 00 00	 jmp	 $LN169@CharToInpu
$LN140@CharToInpu:

; 2466 : 	else if(InputName=="Button 16")

  00189	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09NPBEGIJD@Button?516?$AA@
  00190	75 0f		 jne	 SHORT $LN138@CharToInpu

; 2467 : 		return 16;

  00192	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00197	e9 40 06 00 00	 jmp	 $LN171@CharToInpu
  0019c	e9 38 06 00 00	 jmp	 $LN169@CharToInpu
$LN138@CharToInpu:

; 2468 : 	else if(InputName=="Button 17")

  001a1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09MGAPFJNC@Button?517?$AA@
  001a8	75 0f		 jne	 SHORT $LN136@CharToInpu

; 2469 : 		return 17;

  001aa	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  001af	e9 28 06 00 00	 jmp	 $LN171@CharToInpu
  001b4	e9 20 06 00 00	 jmp	 $LN169@CharToInpu
$LN136@CharToInpu:

; 2470 : 	else if(InputName=="Button 18")

  001b9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09EBJHEFBN@Button?518?$AA@
  001c0	75 0f		 jne	 SHORT $LN134@CharToInpu

; 2471 : 		return 18;

  001c2	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  001c7	e9 10 06 00 00	 jmp	 $LN171@CharToInpu
  001cc	e9 08 06 00 00	 jmp	 $LN169@CharToInpu
$LN134@CharToInpu:

; 2472 : 	else if(InputName=="Button 19")

  001d1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09FIIMHEFM@Button?519?$AA@
  001d8	75 0f		 jne	 SHORT $LN132@CharToInpu

; 2473 : 		return 19;

  001da	b8 13 00 00 00	 mov	 eax, 19			; 00000013H
  001df	e9 f8 05 00 00	 jmp	 $LN171@CharToInpu
  001e4	e9 f0 05 00 00	 jmp	 $LN169@CharToInpu
$LN132@CharToInpu:

; 2474 : 	else if(InputName=="Button 20")

  001e9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09ILAIHBEM@Button?520?$AA@
  001f0	75 0f		 jne	 SHORT $LN130@CharToInpu

; 2475 : 		return 20;

  001f2	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  001f7	e9 e0 05 00 00	 jmp	 $LN171@CharToInpu
  001fc	e9 d8 05 00 00	 jmp	 $LN169@CharToInpu
$LN130@CharToInpu:

; 2476 : 	else if(InputName=="Button 21")

  00201	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09JCBDEAAN@Button?521?$AA@
  00208	75 0f		 jne	 SHORT $LN128@CharToInpu

; 2477 : 		return 21;

  0020a	b8 15 00 00 00	 mov	 eax, 21			; 00000015H
  0020f	e9 c8 05 00 00	 jmp	 $LN171@CharToInpu
  00214	e9 c0 05 00 00	 jmp	 $LN169@CharToInpu
$LN128@CharToInpu:

; 2478 : 	else if(InputName=="Button 22")

  00219	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09LJDOBDMO@Button?522?$AA@
  00220	75 0f		 jne	 SHORT $LN126@CharToInpu

; 2479 : 		return 22;

  00222	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00227	e9 b0 05 00 00	 jmp	 $LN171@CharToInpu
  0022c	e9 a8 05 00 00	 jmp	 $LN169@CharToInpu
$LN126@CharToInpu:

; 2480 : 	else if(InputName=="Button 23")

  00231	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09KACFCCIP@Button?523?$AA@
  00238	75 0f		 jne	 SHORT $LN124@CharToInpu

; 2481 : 		return 23;

  0023a	b8 17 00 00 00	 mov	 eax, 23			; 00000017H
  0023f	e9 98 05 00 00	 jmp	 $LN171@CharToInpu
  00244	e9 90 05 00 00	 jmp	 $LN169@CharToInpu
$LN124@CharToInpu:

; 2482 : 	else if(InputName=="Button 24")

  00249	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09OPGELEEI@Button?524?$AA@
  00250	75 0f		 jne	 SHORT $LN122@CharToInpu

; 2483 : 		return 24;

  00252	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00257	e9 80 05 00 00	 jmp	 $LN171@CharToInpu
  0025c	e9 78 05 00 00	 jmp	 $LN169@CharToInpu
$LN122@CharToInpu:

; 2484 : 	else if(InputName=="Button 25")

  00261	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09PGHPIFAJ@Button?525?$AA@
  00268	75 0f		 jne	 SHORT $LN120@CharToInpu

; 2485 : 		return 25;

  0026a	b8 19 00 00 00	 mov	 eax, 25			; 00000019H
  0026f	e9 68 05 00 00	 jmp	 $LN171@CharToInpu
  00274	e9 60 05 00 00	 jmp	 $LN169@CharToInpu
$LN120@CharToInpu:

; 2486 : 	else if(InputName=="Button 26")

  00279	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09NNFCNGMK@Button?526?$AA@
  00280	75 0f		 jne	 SHORT $LN118@CharToInpu

; 2487 : 		return 26;

  00282	b8 1a 00 00 00	 mov	 eax, 26			; 0000001aH
  00287	e9 50 05 00 00	 jmp	 $LN171@CharToInpu
  0028c	e9 48 05 00 00	 jmp	 $LN169@CharToInpu
$LN118@CharToInpu:

; 2488 : 	else if(InputName=="Button 27")

  00291	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09MEEJOHIL@Button?527?$AA@
  00298	75 0f		 jne	 SHORT $LN116@CharToInpu

; 2489 : 		return 27;

  0029a	b8 1b 00 00 00	 mov	 eax, 27			; 0000001bH
  0029f	e9 38 05 00 00	 jmp	 $LN171@CharToInpu
  002a4	e9 30 05 00 00	 jmp	 $LN169@CharToInpu
$LN116@CharToInpu:

; 2490 : 	else if(InputName=="Button 28")

  002a9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09EDNBPLEE@Button?528?$AA@
  002b0	75 0f		 jne	 SHORT $LN114@CharToInpu

; 2491 : 		return 28;

  002b2	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  002b7	e9 20 05 00 00	 jmp	 $LN171@CharToInpu
  002bc	e9 18 05 00 00	 jmp	 $LN169@CharToInpu
$LN114@CharToInpu:

; 2492 : 	else if(InputName=="Button 29")

  002c1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09FKMKMKAF@Button?529?$AA@
  002c8	75 0f		 jne	 SHORT $LN112@CharToInpu

; 2493 : 		return 29;

  002ca	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  002cf	e9 08 05 00 00	 jmp	 $LN171@CharToInpu
  002d4	e9 00 05 00 00	 jmp	 $LN169@CharToInpu
$LN112@CharToInpu:

; 2494 : 	else if(InputName=="Button 30")

  002d9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09IKMKBLHL@Button?530?$AA@
  002e0	75 0f		 jne	 SHORT $LN110@CharToInpu

; 2495 : 		return 30;

  002e2	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH
  002e7	e9 f0 04 00 00	 jmp	 $LN171@CharToInpu
  002ec	e9 e8 04 00 00	 jmp	 $LN169@CharToInpu
$LN110@CharToInpu:

; 2496 : 	else if(InputName=="Button 31")

  002f1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_09JDNBCKDK@Button?531?$AA@
  002f8	75 0f		 jne	 SHORT $LN108@CharToInpu

; 2497 : 		return 31;

  002fa	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  002ff	e9 d8 04 00 00	 jmp	 $LN171@CharToInpu
  00304	e9 d0 04 00 00	 jmp	 $LN169@CharToInpu
$LN108@CharToInpu:

; 2498 : 	else if(InputName=="Hat 1 North")

  00309	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@MJEMLOOM@Hat?51?5North?$AA@
  00310	75 0f		 jne	 SHORT $LN106@CharToInpu

; 2499 : 		return 32;

  00312	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00317	e9 c0 04 00 00	 jmp	 $LN171@CharToInpu
  0031c	e9 b8 04 00 00	 jmp	 $LN169@CharToInpu
$LN106@CharToInpu:

; 2500 : 	else if(InputName=="Hat 1 North-East")

  00321	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@MGGODAJI@Hat?51?5North?9East?$AA@
  00328	75 0f		 jne	 SHORT $LN104@CharToInpu

; 2501 : 		return 33;

  0032a	b8 21 00 00 00	 mov	 eax, 33			; 00000021H
  0032f	e9 a8 04 00 00	 jmp	 $LN171@CharToInpu
  00334	e9 a0 04 00 00	 jmp	 $LN169@CharToInpu
$LN104@CharToInpu:

; 2502 : 	else if(InputName=="Hat 1 East")

  00339	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@JFDKKPAM@Hat?51?5East?$AA@
  00340	75 0f		 jne	 SHORT $LN102@CharToInpu

; 2503 : 		return 34;

  00342	b8 22 00 00 00	 mov	 eax, 34			; 00000022H
  00347	e9 90 04 00 00	 jmp	 $LN171@CharToInpu
  0034c	e9 88 04 00 00	 jmp	 $LN169@CharToInpu
$LN102@CharToInpu:

; 2504 : 	else if(InputName=="Hat 1 South-East")

  00351	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@MHGNNEJN@Hat?51?5South?9East?$AA@
  00358	75 0f		 jne	 SHORT $LN100@CharToInpu

; 2505 : 		return 35;

  0035a	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  0035f	e9 78 04 00 00	 jmp	 $LN171@CharToInpu
  00364	e9 70 04 00 00	 jmp	 $LN169@CharToInpu
$LN100@CharToInpu:

; 2506 : 	else if(InputName=="Hat 1 South")

  00369	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@OLNDJHBA@Hat?51?5South?$AA@
  00370	75 0f		 jne	 SHORT $LN98@CharToInpu

; 2507 : 		return 36;

  00372	b8 24 00 00 00	 mov	 eax, 36			; 00000024H
  00377	e9 60 04 00 00	 jmp	 $LN171@CharToInpu
  0037c	e9 58 04 00 00	 jmp	 $LN169@CharToInpu
$LN98@CharToInpu:

; 2508 : 	else if(InputName=="Hat 1 South-West")

  00381	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@FCCPIHCI@Hat?51?5South?9West?$AA@
  00388	75 0f		 jne	 SHORT $LN96@CharToInpu

; 2509 : 		return 37;

  0038a	b8 25 00 00 00	 mov	 eax, 37			; 00000025H
  0038f	e9 48 04 00 00	 jmp	 $LN171@CharToInpu
  00394	e9 40 04 00 00	 jmp	 $LN169@CharToInpu
$LN96@CharToInpu:

; 2510 : 	else if(InputName=="Hat 1 West")

  00399	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@HIPMLJ@Hat?51?5West?$AA@
  003a0	75 0f		 jne	 SHORT $LN94@CharToInpu

; 2511 : 		return 38;

  003a2	b8 26 00 00 00	 mov	 eax, 38			; 00000026H
  003a7	e9 30 04 00 00	 jmp	 $LN171@CharToInpu
  003ac	e9 28 04 00 00	 jmp	 $LN169@CharToInpu
$LN94@CharToInpu:

; 2512 : 	else if(InputName=="Hat 1 North-West")

  003b1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@FDCMGDCN@Hat?51?5North?9West?$AA@
  003b8	75 0f		 jne	 SHORT $LN92@CharToInpu

; 2513 : 		return 39;

  003ba	b8 27 00 00 00	 mov	 eax, 39			; 00000027H
  003bf	e9 18 04 00 00	 jmp	 $LN171@CharToInpu
  003c4	e9 10 04 00 00	 jmp	 $LN169@CharToInpu
$LN92@CharToInpu:

; 2514 : 	else if(InputName=="Hat 2 North")

  003c9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@EHMDLJAP@Hat?52?5North?$AA@
  003d0	75 0f		 jne	 SHORT $LN90@CharToInpu

; 2515 : 		return 40;

  003d2	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  003d7	e9 00 04 00 00	 jmp	 $LN171@CharToInpu
  003dc	e9 f8 03 00 00	 jmp	 $LN169@CharToInpu
$LN90@CharToInpu:

; 2516 : 	else if(InputName=="Hat 2 North-East")

  003e1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@HLKEFMFG@Hat?52?5North?9East?$AA@
  003e8	75 0f		 jne	 SHORT $LN88@CharToInpu

; 2517 : 		return 41;

  003ea	b8 29 00 00 00	 mov	 eax, 41			; 00000029H
  003ef	e9 e8 03 00 00	 jmp	 $LN171@CharToInpu
  003f4	e9 e0 03 00 00	 jmp	 $LN169@CharToInpu
$LN88@CharToInpu:

; 2518 : 	else if(InputName=="Hat 2 East")

  003f9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@KENCLFJB@Hat?52?5East?$AA@
  00400	75 0f		 jne	 SHORT $LN86@CharToInpu

; 2519 : 		return 42;

  00402	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH
  00407	e9 d0 03 00 00	 jmp	 $LN171@CharToInpu
  0040c	e9 c8 03 00 00	 jmp	 $LN169@CharToInpu
$LN86@CharToInpu:

; 2520 : 	else if(InputName=="Hat 2 South-East")

  00411	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@HKKHLIFD@Hat?52?5South?9East?$AA@
  00418	75 0f		 jne	 SHORT $LN84@CharToInpu

; 2521 : 		return 43;

  0041a	b8 2b 00 00 00	 mov	 eax, 43			; 0000002bH
  0041f	e9 b8 03 00 00	 jmp	 $LN171@CharToInpu
  00424	e9 b0 03 00 00	 jmp	 $LN169@CharToInpu
$LN84@CharToInpu:

; 2522 : 	else if(InputName=="Hat 2 South")

  00429	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@GFFMJAPD@Hat?52?5South?$AA@
  00430	75 0f		 jne	 SHORT $LN82@CharToInpu

; 2523 : 		return 44;

  00432	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  00437	e9 a0 03 00 00	 jmp	 $LN171@CharToInpu
  0043c	e9 98 03 00 00	 jmp	 $LN169@CharToInpu
$LN82@CharToInpu:

; 2524 : 	else if(InputName=="Hat 2 South-West")

  00441	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@OPOFOLOG@Hat?52?5South?9West?$AA@
  00448	75 0f		 jne	 SHORT $LN80@CharToInpu

; 2525 : 		return 45;

  0044a	b8 2d 00 00 00	 mov	 eax, 45			; 0000002dH
  0044f	e9 88 03 00 00	 jmp	 $LN171@CharToInpu
  00454	e9 80 03 00 00	 jmp	 $LN169@CharToInpu
$LN80@CharToInpu:

; 2526 : 	else if(InputName=="Hat 2 West")

  00459	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@DBJAOGCE@Hat?52?5West?$AA@
  00460	75 0f		 jne	 SHORT $LN78@CharToInpu

; 2527 : 		return 46;

  00462	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  00467	e9 70 03 00 00	 jmp	 $LN171@CharToInpu
  0046c	e9 68 03 00 00	 jmp	 $LN169@CharToInpu
$LN78@CharToInpu:

; 2528 : 	else if(InputName=="Hat 2 North-West")

  00471	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@OOOGAPOD@Hat?52?5North?9West?$AA@
  00478	75 0f		 jne	 SHORT $LN76@CharToInpu

; 2529 : 		return 47;

  0047a	b8 2f 00 00 00	 mov	 eax, 47			; 0000002fH
  0047f	e9 58 03 00 00	 jmp	 $LN171@CharToInpu
  00484	e9 50 03 00 00	 jmp	 $LN169@CharToInpu
$LN76@CharToInpu:

; 2530 : 	else if(InputName=="Hat 3 North")

  00489	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@ILGJLJJB@Hat?53?5North?$AA@
  00490	75 0f		 jne	 SHORT $LN74@CharToInpu

; 2531 : 		return 48;

  00492	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  00497	e9 40 03 00 00	 jmp	 $LN171@CharToInpu
  0049c	e9 38 03 00 00	 jmp	 $LN169@CharToInpu
$LN74@CharToInpu:

; 2532 : 	else if(InputName=="Hat 3 North-East")

  004a1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@KGDCIFND@Hat?53?5North?9East?$AA@
  004a8	75 0f		 jne	 SHORT $LN72@CharToInpu

; 2533 : 		return 49;

  004aa	b8 31 00 00 00	 mov	 eax, 49			; 00000031H
  004af	e9 28 03 00 00	 jmp	 $LN171@CharToInpu
  004b4	e9 20 03 00 00	 jmp	 $LN169@CharToInpu
$LN72@CharToInpu:

; 2534 : 	else if(InputName=="Hat 3 East")

  004b9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@CKFLOCF@Hat?53?5East?$AA@
  004c0	75 0f		 jne	 SHORT $LN70@CharToInpu

; 2535 : 		return 50;

  004c2	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  004c7	e9 10 03 00 00	 jmp	 $LN171@CharToInpu
  004cc	e9 08 03 00 00	 jmp	 $LN169@CharToInpu
$LN70@CharToInpu:

; 2536 : 	else if(InputName=="Hat 3 South-East")

  004d1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@KHDBGBNG@Hat?53?5South?9East?$AA@
  004d8	75 0f		 jne	 SHORT $LN68@CharToInpu

; 2537 : 		return 51;

  004da	b8 33 00 00 00	 mov	 eax, 51			; 00000033H
  004df	e9 f8 02 00 00	 jmp	 $LN171@CharToInpu
  004e4	e9 f0 02 00 00	 jmp	 $LN169@CharToInpu
$LN68@CharToInpu:

; 2538 : 	else if(InputName=="Hat 3 South")

  004e9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@KJPGJAGN@Hat?53?5South?$AA@
  004f0	75 0f		 jne	 SHORT $LN66@CharToInpu

; 2539 : 		return 52;

  004f2	b8 34 00 00 00	 mov	 eax, 52			; 00000034H
  004f7	e9 e0 02 00 00	 jmp	 $LN171@CharToInpu
  004fc	e9 d8 02 00 00	 jmp	 $LN169@CharToInpu
$LN66@CharToInpu:

; 2540 : 	else if(InputName=="Hat 3 South-West")

  00501	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@DCHDDCGD@Hat?53?5South?9West?$AA@
  00508	75 0f		 jne	 SHORT $LN64@CharToInpu

; 2541 : 		return 53;

  0050a	b8 35 00 00 00	 mov	 eax, 53			; 00000035H
  0050f	e9 c8 02 00 00	 jmp	 $LN171@CharToInpu
  00514	e9 c0 02 00 00	 jmp	 $LN169@CharToInpu
$LN64@CharToInpu:

; 2542 : 	else if(InputName=="Hat 3 West")

  00519	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@JHOHONJA@Hat?53?5West?$AA@
  00520	75 0f		 jne	 SHORT $LN62@CharToInpu

; 2543 : 		return 54;

  00522	b8 36 00 00 00	 mov	 eax, 54			; 00000036H
  00527	e9 b0 02 00 00	 jmp	 $LN171@CharToInpu
  0052c	e9 a8 02 00 00	 jmp	 $LN169@CharToInpu
$LN62@CharToInpu:

; 2544 : 	else if(InputName=="Hat 3 North-West")

  00531	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@DDHANGGG@Hat?53?5North?9West?$AA@
  00538	75 0f		 jne	 SHORT $LN60@CharToInpu

; 2545 : 		return 55;

  0053a	b8 37 00 00 00	 mov	 eax, 55			; 00000037H
  0053f	e9 98 02 00 00	 jmp	 $LN171@CharToInpu
  00544	e9 90 02 00 00	 jmp	 $LN169@CharToInpu
$LN60@CharToInpu:

; 2546 : 	else if(InputName=="Hat 4 North")

  00549	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@IBKMLAII@Hat?54?5North?$AA@
  00550	75 0f		 jne	 SHORT $LN58@CharToInpu

; 2547 : 		return 56;

  00552	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00557	e9 80 02 00 00	 jmp	 $LN171@CharToInpu
  0055c	e9 78 02 00 00	 jmp	 $LN169@CharToInpu
$LN58@CharToInpu:

; 2548 : 	else if(InputName=="Hat 4 North-East")

  00561	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@NLEBIDIL@Hat?54?5North?9East?$AA@
  00568	75 0f		 jne	 SHORT $LN56@CharToInpu

; 2549 : 		return 57;

  0056a	b8 39 00 00 00	 mov	 eax, 57			; 00000039H
  0056f	e9 68 02 00 00	 jmp	 $LN171@CharToInpu
  00574	e9 60 02 00 00	 jmp	 $LN169@CharToInpu
$LN56@CharToInpu:

; 2550 : 	else if(InputName=="Hat 4 East")

  00579	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@MHACIAKL@Hat?54?5East?$AA@
  00580	75 0f		 jne	 SHORT $LN54@CharToInpu

; 2551 : 		return 58;

  00582	b8 3a 00 00 00	 mov	 eax, 58			; 0000003aH
  00587	e9 50 02 00 00	 jmp	 $LN171@CharToInpu
  0058c	e9 48 02 00 00	 jmp	 $LN169@CharToInpu
$LN54@CharToInpu:

; 2552 : 	else if(InputName=="Hat 4 South-East")

  00591	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@NKECGHIO@Hat?54?5South?9East?$AA@
  00598	75 0f		 jne	 SHORT $LN52@CharToInpu

; 2553 : 		return 59;

  0059a	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  0059f	e9 38 02 00 00	 jmp	 $LN171@CharToInpu
  005a4	e9 30 02 00 00	 jmp	 $LN169@CharToInpu
$LN52@CharToInpu:

; 2554 : 	else if(InputName=="Hat 4 South")

  005a9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@KDDDJJHE@Hat?54?5South?$AA@
  005b0	75 0f		 jne	 SHORT $LN50@CharToInpu

; 2555 : 		return 60;

  005b2	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  005b7	e9 20 02 00 00	 jmp	 $LN171@CharToInpu
  005bc	e9 18 02 00 00	 jmp	 $LN169@CharToInpu
$LN50@CharToInpu:

; 2556 : 	else if(InputName=="Hat 4 South-West")

  005c1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@EPAADEDL@Hat?54?5South?9West?$AA@
  005c8	75 0f		 jne	 SHORT $LN48@CharToInpu

; 2557 : 		return 61;

  005ca	b8 3d 00 00 00	 mov	 eax, 61			; 0000003dH
  005cf	e9 08 02 00 00	 jmp	 $LN171@CharToInpu
  005d4	e9 00 02 00 00	 jmp	 $LN169@CharToInpu
$LN48@CharToInpu:

; 2558 : 	else if(InputName=="Hat 4 West")

  005d9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@FCEANDBO@Hat?54?5West?$AA@
  005e0	75 0f		 jne	 SHORT $LN46@CharToInpu

; 2559 : 		return 62;

  005e2	b8 3e 00 00 00	 mov	 eax, 62			; 0000003eH
  005e7	e9 f0 01 00 00	 jmp	 $LN171@CharToInpu
  005ec	e9 e8 01 00 00	 jmp	 $LN169@CharToInpu
$LN46@CharToInpu:

; 2560 : 	else if(InputName=="Hat 4 North-West")

  005f1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@EOADNADO@Hat?54?5North?9West?$AA@
  005f8	75 0f		 jne	 SHORT $LN44@CharToInpu

; 2561 : 		return 63;

  005fa	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  005ff	e9 d8 01 00 00	 jmp	 $LN171@CharToInpu
  00604	e9 d0 01 00 00	 jmp	 $LN169@CharToInpu
$LN44@CharToInpu:

; 2562 : 	else if(InputName=="JoyStickX Min")

  00609	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@
  00610	75 0f		 jne	 SHORT $LN42@CharToInpu

; 2563 : 		return 64;

  00612	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00617	e9 c0 01 00 00	 jmp	 $LN171@CharToInpu
  0061c	e9 b8 01 00 00	 jmp	 $LN169@CharToInpu
$LN42@CharToInpu:

; 2564 : 	else if(InputName=="JoyStickX Max")

  00621	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@
  00628	75 0f		 jne	 SHORT $LN40@CharToInpu

; 2565 : 		return 65;

  0062a	b8 41 00 00 00	 mov	 eax, 65			; 00000041H
  0062f	e9 a8 01 00 00	 jmp	 $LN171@CharToInpu
  00634	e9 a0 01 00 00	 jmp	 $LN169@CharToInpu
$LN40@CharToInpu:

; 2566 : 	else if(InputName=="JoyStickY Min")

  00639	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@
  00640	75 0f		 jne	 SHORT $LN38@CharToInpu

; 2567 : 		return 66;

  00642	b8 42 00 00 00	 mov	 eax, 66			; 00000042H
  00647	e9 90 01 00 00	 jmp	 $LN171@CharToInpu
  0064c	e9 88 01 00 00	 jmp	 $LN169@CharToInpu
$LN38@CharToInpu:

; 2568 : 	else if(InputName=="JoyStickY Max")

  00651	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@
  00658	75 0f		 jne	 SHORT $LN36@CharToInpu

; 2569 : 		return 67;

  0065a	b8 43 00 00 00	 mov	 eax, 67			; 00000043H
  0065f	e9 78 01 00 00	 jmp	 $LN171@CharToInpu
  00664	e9 70 01 00 00	 jmp	 $LN169@CharToInpu
$LN36@CharToInpu:

; 2570 : 	else if(InputName=="JoyStickZ Min")

  00669	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0O@KNJDDLNA@JoyStickZ?5Min?$AA@
  00670	75 0f		 jne	 SHORT $LN34@CharToInpu

; 2571 : 		return 68;

  00672	b8 44 00 00 00	 mov	 eax, 68			; 00000044H
  00677	e9 60 01 00 00	 jmp	 $LN171@CharToInpu
  0067c	e9 58 01 00 00	 jmp	 $LN169@CharToInpu
$LN34@CharToInpu:

; 2572 : 	else if(InputName=="JoyStickZ Max")

  00681	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0O@LPBINPLP@JoyStickZ?5Max?$AA@
  00688	75 0f		 jne	 SHORT $LN32@CharToInpu

; 2573 : 		return 69;

  0068a	b8 45 00 00 00	 mov	 eax, 69			; 00000045H
  0068f	e9 48 01 00 00	 jmp	 $LN171@CharToInpu
  00694	e9 40 01 00 00	 jmp	 $LN169@CharToInpu
$LN32@CharToInpu:

; 2574 : 	else if(InputName=="JoyStickTwistX Min")

  00699	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BD@EGEPNMPH@JoyStickTwistX?5Min?$AA@
  006a0	75 0f		 jne	 SHORT $LN30@CharToInpu

; 2575 : 		return 70;

  006a2	b8 46 00 00 00	 mov	 eax, 70			; 00000046H
  006a7	e9 30 01 00 00	 jmp	 $LN171@CharToInpu
  006ac	e9 28 01 00 00	 jmp	 $LN169@CharToInpu
$LN30@CharToInpu:

; 2576 : 	else if(InputName=="JoyStickTwistX Max")

  006b1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BD@FEMEDIJI@JoyStickTwistX?5Max?$AA@
  006b8	75 0f		 jne	 SHORT $LN28@CharToInpu

; 2577 : 		return 71;

  006ba	b8 47 00 00 00	 mov	 eax, 71			; 00000047H
  006bf	e9 18 01 00 00	 jmp	 $LN171@CharToInpu
  006c4	e9 10 01 00 00	 jmp	 $LN169@CharToInpu
$LN28@CharToInpu:

; 2578 : 	else if(InputName=="JoyStickTwistY Min")

  006c9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BD@INBDAPFC@JoyStickTwistY?5Min?$AA@
  006d0	75 0f		 jne	 SHORT $LN26@CharToInpu

; 2579 : 		return 72;

  006d2	b8 48 00 00 00	 mov	 eax, 72			; 00000048H
  006d7	e9 00 01 00 00	 jmp	 $LN171@CharToInpu
  006dc	e9 f8 00 00 00	 jmp	 $LN169@CharToInpu
$LN26@CharToInpu:

; 2580 : 	else if(InputName=="JoyStickTwistY Max")

  006e1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BD@JPJIOLDN@JoyStickTwistY?5Max?$AA@
  006e8	75 0f		 jne	 SHORT $LN24@CharToInpu

; 2581 : 		return 73;

  006ea	b8 49 00 00 00	 mov	 eax, 73			; 00000049H
  006ef	e9 e8 00 00 00	 jmp	 $LN171@CharToInpu
  006f4	e9 e0 00 00 00	 jmp	 $LN169@CharToInpu
$LN24@CharToInpu:

; 2582 : 	else if(InputName=="JoyStickTwistZ Min")

  006f9	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BD@LIHHNPM@JoyStickTwistZ?5Min?$AA@
  00700	75 0f		 jne	 SHORT $LN22@CharToInpu

; 2583 : 		return 74;

  00702	b8 4a 00 00 00	 mov	 eax, 74			; 0000004aH
  00707	e9 d0 00 00 00	 jmp	 $LN171@CharToInpu
  0070c	e9 c8 00 00 00	 jmp	 $LN169@CharToInpu
$LN22@CharToInpu:

; 2584 : 	else if(InputName=="JoyStickTwistZ Max")

  00711	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BD@BJAMJJJD@JoyStickTwistZ?5Max?$AA@
  00718	75 0f		 jne	 SHORT $LN20@CharToInpu

; 2585 : 		return 75;

  0071a	b8 4b 00 00 00	 mov	 eax, 75			; 0000004bH
  0071f	e9 b8 00 00 00	 jmp	 $LN171@CharToInpu
  00724	e9 b0 00 00 00	 jmp	 $LN169@CharToInpu
$LN20@CharToInpu:

; 2586 : 	else if(InputName=="JoyStickSliderA Min")

  00729	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@LKMGPNHK@JoyStickSliderA?5Min?$AA@
  00730	75 0f		 jne	 SHORT $LN18@CharToInpu

; 2587 : 		return 76;

  00732	b8 4c 00 00 00	 mov	 eax, 76			; 0000004cH
  00737	e9 a0 00 00 00	 jmp	 $LN171@CharToInpu
  0073c	e9 98 00 00 00	 jmp	 $LN169@CharToInpu
$LN18@CharToInpu:

; 2588 : 	else if(InputName=="JoyStickSliderA Max")

  00741	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@KIENBJBF@JoyStickSliderA?5Max?$AA@
  00748	75 0f		 jne	 SHORT $LN16@CharToInpu

; 2589 : 		return 77;

  0074a	b8 4d 00 00 00	 mov	 eax, 77			; 0000004dH
  0074f	e9 88 00 00 00	 jmp	 $LN171@CharToInpu
  00754	e9 80 00 00 00	 jmp	 $LN169@CharToInpu
$LN16@CharToInpu:

; 2590 : 	else if(InputName=="JoyStickSliderB Min")

  00759	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@DMFCIPNE@JoyStickSliderB?5Min?$AA@
  00760	75 09		 jne	 SHORT $LN14@CharToInpu

; 2591 : 		return 78;

  00762	b8 4e 00 00 00	 mov	 eax, 78			; 0000004eH
  00767	eb 73		 jmp	 SHORT $LN171@CharToInpu
  00769	eb 6e		 jmp	 SHORT $LN169@CharToInpu
$LN14@CharToInpu:

; 2592 : 	else if(InputName=="JoyStickSliderB Max")

  0076b	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@CONJGLLL@JoyStickSliderB?5Max?$AA@
  00772	75 09		 jne	 SHORT $LN12@CharToInpu

; 2593 : 		return 79;

  00774	b8 4f 00 00 00	 mov	 eax, 79			; 0000004fH
  00779	eb 61		 jmp	 SHORT $LN171@CharToInpu
  0077b	eb 5c		 jmp	 SHORT $LN169@CharToInpu
$LN12@CharToInpu:

; 2594 : 	else if(InputName=="JoyStickSliderC Min")

  0077d	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@PHAOFMHB@JoyStickSliderC?5Min?$AA@
  00784	75 09		 jne	 SHORT $LN10@CharToInpu

; 2595 : 		return 80;

  00786	b8 50 00 00 00	 mov	 eax, 80			; 00000050H
  0078b	eb 4f		 jmp	 SHORT $LN171@CharToInpu
  0078d	eb 4a		 jmp	 SHORT $LN169@CharToInpu
$LN10@CharToInpu:

; 2596 : 	else if(InputName=="JoyStickSliderC Max")

  0078f	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@OFIFLIBO@JoyStickSliderC?5Max?$AA@
  00796	75 09		 jne	 SHORT $LN8@CharToInpu

; 2597 : 		return 81;

  00798	b8 51 00 00 00	 mov	 eax, 81			; 00000051H
  0079d	eb 3d		 jmp	 SHORT $LN171@CharToInpu
  0079f	eb 38		 jmp	 SHORT $LN169@CharToInpu
$LN8@CharToInpu:

; 2598 : 	else if(InputName=="JoyStickSliderD Min")

  007a1	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@OKALGMMJ@JoyStickSliderD?5Min?$AA@
  007a8	75 09		 jne	 SHORT $LN6@CharToInpu

; 2599 : 		return 82;

  007aa	b8 52 00 00 00	 mov	 eax, 82			; 00000052H
  007af	eb 2b		 jmp	 SHORT $LN171@CharToInpu
  007b1	eb 26		 jmp	 SHORT $LN169@CharToInpu
$LN6@CharToInpu:

; 2600 : 	else if(InputName=="JoyStickSliderD Max")

  007b3	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@PIIAIIKG@JoyStickSliderD?5Max?$AA@
  007ba	75 09		 jne	 SHORT $LN4@CharToInpu

; 2601 : 		return 83;

  007bc	b8 53 00 00 00	 mov	 eax, 83			; 00000053H
  007c1	eb 19		 jmp	 SHORT $LN171@CharToInpu
  007c3	eb 14		 jmp	 SHORT $LN169@CharToInpu
$LN4@CharToInpu:

; 2602 : 	else if(InputName==""||InputName==NULL)

  007c5	81 7d 08 00 00
	00 00		 cmp	 DWORD PTR _InputName$[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
  007cc	74 06		 je	 SHORT $LN1@CharToInpu
  007ce	83 7d 08 00	 cmp	 DWORD PTR _InputName$[ebp], 0
  007d2	75 05		 jne	 SHORT $LN169@CharToInpu
$LN1@CharToInpu:

; 2603 : 		return -1;

  007d4	83 c8 ff	 or	 eax, -1
  007d7	eb 03		 jmp	 SHORT $LN171@CharToInpu
$LN169@CharToInpu:

; 2604 : 
; 2605 : 	return -1;

  007d9	83 c8 ff	 or	 eax, -1
$LN171@CharToInpu:

; 2606 : }

  007dc	5f		 pop	 edi
  007dd	5e		 pop	 esi
  007de	5b		 pop	 ebx
  007df	8b e5		 mov	 esp, ebp
  007e1	5d		 pop	 ebp
  007e2	c2 04 00	 ret	 4
?CharToInputInt@DeviceHandler@@QAEHPAD@Z ENDP		; DeviceHandler::CharToInputInt
_TEXT	ENDS
PUBLIC	?GetCurrentDevice@DeviceHandler@@QAEHXZ		; DeviceHandler::GetCurrentDevice
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCurrentDevice@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentDevice@DeviceHandler@@QAEHXZ PROC		; DeviceHandler::GetCurrentDevice, COMDAT
; _this$ = ecx

; 2608 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2609 : 	return this->CurrentDevice;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 90 0c 00
	00		 mov	 eax, DWORD PTR [eax+3216]

; 2610 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetCurrentDevice@DeviceHandler@@QAEHXZ ENDP		; DeviceHandler::GetCurrentDevice
_TEXT	ENDS
PUBLIC	?GetFirstInput@DeviceHandler@@QAEHM@Z		; DeviceHandler::GetFirstInput
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetFirstInput@DeviceHandler@@QAEHM@Z
_TEXT	SEGMENT
_i$92652 = -16						; size = 4
_i$92647 = -12						; size = 4
_i$92642 = -8						; size = 4
_this$ = -4						; size = 4
_MinimumPercent$ = 8					; size = 4
?GetFirstInput@DeviceHandler@@QAEHM@Z PROC		; DeviceHandler::GetFirstInput, COMDAT
; _this$ = ecx

; 2612 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2613 : 	for(int i=0;i<32;i++)

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$92642[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN12@GetFirstIn
$LN11@GetFirstIn:
  00015	8b 45 f8	 mov	 eax, DWORD PTR _i$92642[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 f8	 mov	 DWORD PTR _i$92642[ebp], eax
$LN12@GetFirstIn:
  0001e	83 7d f8 20	 cmp	 DWORD PTR _i$92642[ebp], 32 ; 00000020H
  00022	7d 1d		 jge	 SHORT $LN10@GetFirstIn

; 2614 : 		if(this->IsPressed(i))

  00024	8b 45 f8	 mov	 eax, DWORD PTR _i$92642[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?IsPressed@DeviceHandler@@QAE_NH@Z ; DeviceHandler::IsPressed
  00030	0f b6 c8	 movzx	 ecx, al
  00033	85 c9		 test	 ecx, ecx
  00035	74 08		 je	 SHORT $LN9@GetFirstIn

; 2615 : 			return i;

  00037	8b 45 f8	 mov	 eax, DWORD PTR _i$92642[ebp]
  0003a	e9 89 00 00 00	 jmp	 $LN13@GetFirstIn
$LN9@GetFirstIn:

; 2616 : 
; 2617 : 	for(int i=0;i<4;i++)

  0003f	eb d4		 jmp	 SHORT $LN11@GetFirstIn
$LN10@GetFirstIn:
  00041	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$92647[ebp], 0
  00048	eb 09		 jmp	 SHORT $LN8@GetFirstIn
$LN7@GetFirstIn:
  0004a	8b 45 f4	 mov	 eax, DWORD PTR _i$92647[ebp]
  0004d	83 c0 01	 add	 eax, 1
  00050	89 45 f4	 mov	 DWORD PTR _i$92647[ebp], eax
$LN8@GetFirstIn:
  00053	83 7d f4 04	 cmp	 DWORD PTR _i$92647[ebp], 4
  00057	7d 30		 jge	 SHORT $LN6@GetFirstIn

; 2618 : 		if(this->GetHatAngle(i)!=-1)

  00059	8b 45 f4	 mov	 eax, DWORD PTR _i$92647[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?GetHatAngle@DeviceHandler@@QAEHH@Z ; DeviceHandler::GetHatAngle
  00065	83 f8 ff	 cmp	 eax, -1
  00068	74 1d		 je	 SHORT $LN5@GetFirstIn

; 2619 : 			return (((this->GetHatAngle(i)/45)+32)+(i*8));

  0006a	8b 45 f4	 mov	 eax, DWORD PTR _i$92647[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?GetHatAngle@DeviceHandler@@QAEHH@Z ; DeviceHandler::GetHatAngle
  00076	99		 cdq
  00077	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  0007c	f7 f9		 idiv	 ecx
  0007e	8b 55 f4	 mov	 edx, DWORD PTR _i$92647[ebp]
  00081	8d 44 d0 20	 lea	 eax, DWORD PTR [eax+edx*8+32]
  00085	eb 41		 jmp	 SHORT $LN13@GetFirstIn
$LN5@GetFirstIn:

; 2620 : 
; 2621 : 	for(int i=1;i<21;i++)

  00087	eb c1		 jmp	 SHORT $LN7@GetFirstIn
$LN6@GetFirstIn:
  00089	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _i$92652[ebp], 1
  00090	eb 09		 jmp	 SHORT $LN4@GetFirstIn
$LN3@GetFirstIn:
  00092	8b 45 f0	 mov	 eax, DWORD PTR _i$92652[ebp]
  00095	83 c0 01	 add	 eax, 1
  00098	89 45 f0	 mov	 DWORD PTR _i$92652[ebp], eax
$LN4@GetFirstIn:
  0009b	83 7d f0 15	 cmp	 DWORD PTR _i$92652[ebp], 21 ; 00000015H
  0009f	7d 24		 jge	 SHORT $LN2@GetFirstIn

; 2622 : 		if(this->GetIsJoy(i,MinimumPercent))

  000a1	51		 push	 ecx
  000a2	d9 45 08	 fld	 DWORD PTR _MinimumPercent$[ebp]
  000a5	d9 1c 24	 fstp	 DWORD PTR [esp]
  000a8	8b 45 f0	 mov	 eax, DWORD PTR _i$92652[ebp]
  000ab	50		 push	 eax
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	e8 00 00 00 00	 call	 ?GetIsJoy@DeviceHandler@@QAE_NHM@Z ; DeviceHandler::GetIsJoy
  000b4	0f b6 c8	 movzx	 ecx, al
  000b7	85 c9		 test	 ecx, ecx
  000b9	74 08		 je	 SHORT $LN1@GetFirstIn

; 2623 : 			return i+63;

  000bb	8b 45 f0	 mov	 eax, DWORD PTR _i$92652[ebp]
  000be	83 c0 3f	 add	 eax, 63			; 0000003fH
  000c1	eb 05		 jmp	 SHORT $LN13@GetFirstIn
$LN1@GetFirstIn:

; 2624 : 
; 2625 : 	return -1;

  000c3	eb cd		 jmp	 SHORT $LN3@GetFirstIn
$LN2@GetFirstIn:
  000c5	83 c8 ff	 or	 eax, -1
$LN13@GetFirstIn:

; 2626 : }

  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 04 00	 ret	 4
?GetFirstInput@DeviceHandler@@QAEHM@Z ENDP		; DeviceHandler::GetFirstInput
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetHatAngle@DeviceHandler@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Hat$ = 8						; size = 4
?GetHatAngle@DeviceHandler@@QAEHH@Z PROC		; DeviceHandler::GetHatAngle, COMDAT
; _this$ = ecx

; 2628 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2629 : 	return this->HatAngles[Hat][0];

  0000c	8b 45 08	 mov	 eax, DWORD PTR _Hat$[ebp]
  0000f	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 84 01 5c 11
	00 00		 mov	 eax, DWORD PTR [ecx+eax+4444]

; 2630 : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetHatAngle@DeviceHandler@@QAEHH@Z ENDP		; DeviceHandler::GetHatAngle
_TEXT	ENDS
PUBLIC	?GetMouseSpeedX@DeviceHandler@@QAEHXZ		; DeviceHandler::GetMouseSpeedX
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMouseSpeedX@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseSpeedX@DeviceHandler@@QAEHXZ PROC		; DeviceHandler::GetMouseSpeedX, COMDAT
; _this$ = ecx

; 2632 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2633 : 	return this->MouseSyncX;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 a0 0c 00
	00		 mov	 eax, DWORD PTR [eax+3232]

; 2634 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetMouseSpeedX@DeviceHandler@@QAEHXZ ENDP		; DeviceHandler::GetMouseSpeedX
_TEXT	ENDS
PUBLIC	?GetMouseSpeedY@DeviceHandler@@QAEHXZ		; DeviceHandler::GetMouseSpeedY
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMouseSpeedY@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseSpeedY@DeviceHandler@@QAEHXZ PROC		; DeviceHandler::GetMouseSpeedY, COMDAT
; _this$ = ecx

; 2636 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2637 : 	return this->MouseSyncY;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 a4 0c 00
	00		 mov	 eax, DWORD PTR [eax+3236]

; 2638 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?GetMouseSpeedY@DeviceHandler@@QAEHXZ ENDP		; DeviceHandler::GetMouseSpeedY
_TEXT	ENDS
PUBLIC	?InputBound@DeviceHandler@@QAEHH@Z		; DeviceHandler::InputBound
; Function compile flags: /Odtp /ZI
;	COMDAT ?InputBound@DeviceHandler@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?InputBound@DeviceHandler@@QAEHH@Z PROC			; DeviceHandler::InputBound, COMDAT
; _this$ = ecx

; 2640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2641 : 	if(this->GetIsGenericInput(InputType))

  0000c	8b 45 08	 mov	 eax, DWORD PTR _InputType$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?GetIsGenericInput@DeviceHandler@@QAE_NH@Z ; DeviceHandler::GetIsGenericInput
  00018	0f b6 c8	 movzx	 ecx, al
  0001b	85 c9		 test	 ecx, ecx
  0001d	74 09		 je	 SHORT $LN2@InputBound

; 2642 : 		return 1;

  0001f	b8 01 00 00 00	 mov	 eax, 1
  00024	eb 04		 jmp	 SHORT $LN3@InputBound

; 2643 : 	else

  00026	eb 02		 jmp	 SHORT $LN3@InputBound
$LN2@InputBound:

; 2644 : 		return 0;

  00028	33 c0		 xor	 eax, eax
$LN3@InputBound:

; 2645 : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?InputBound@DeviceHandler@@QAEHH@Z ENDP			; DeviceHandler::InputBound
_TEXT	ENDS
PUBLIC	?InputBound@DeviceHandler@@QAEHHM@Z		; DeviceHandler::InputBound
; Function compile flags: /Odtp /ZI
;	COMDAT ?InputBound@DeviceHandler@@QAEHHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
_Percent$ = 12						; size = 4
?InputBound@DeviceHandler@@QAEHHM@Z PROC		; DeviceHandler::InputBound, COMDAT
; _this$ = ecx

; 2647 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2648 : 	if(this->GetIsGenericInput(InputType,Percent))

  0000c	51		 push	 ecx
  0000d	d9 45 0c	 fld	 DWORD PTR _Percent$[ebp]
  00010	d9 1c 24	 fstp	 DWORD PTR [esp]
  00013	8b 45 08	 mov	 eax, DWORD PTR _InputType$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?GetIsGenericInput@DeviceHandler@@QAE_NHM@Z ; DeviceHandler::GetIsGenericInput
  0001f	0f b6 c8	 movzx	 ecx, al
  00022	85 c9		 test	 ecx, ecx
  00024	74 09		 je	 SHORT $LN2@InputBound@2

; 2649 : 		return 1;

  00026	b8 01 00 00 00	 mov	 eax, 1
  0002b	eb 04		 jmp	 SHORT $LN1@InputBound@2

; 2650 : 	else

  0002d	eb 02		 jmp	 SHORT $LN1@InputBound@2
$LN2@InputBound@2:

; 2651 : 		return 0;

  0002f	33 c0		 xor	 eax, eax
$LN1@InputBound@2:

; 2652 : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
?InputBound@DeviceHandler@@QAEHHM@Z ENDP		; DeviceHandler::InputBound
_TEXT	ENDS
PUBLIC	?MouseBindDown@DeviceHandler@@QAEHXZ		; DeviceHandler::MouseBindDown
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindDown@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindDown@DeviceHandler@@QAEHXZ PROC		; DeviceHandler::MouseBindDown, COMDAT
; _this$ = ecx

; 2654 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2655 : 	return this->MouseDown;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 94 0c 00
	00		 mov	 eax, DWORD PTR [eax+3220]

; 2656 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?MouseBindDown@DeviceHandler@@QAEHXZ ENDP		; DeviceHandler::MouseBindDown
_TEXT	ENDS
PUBLIC	?MouseBindLeft@DeviceHandler@@QAEHXZ		; DeviceHandler::MouseBindLeft
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindLeft@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindLeft@DeviceHandler@@QAEHXZ PROC		; DeviceHandler::MouseBindLeft, COMDAT
; _this$ = ecx

; 2658 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2659 : 	return this->MouseLeft;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 98 0c 00
	00		 mov	 eax, DWORD PTR [eax+3224]

; 2660 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?MouseBindLeft@DeviceHandler@@QAEHXZ ENDP		; DeviceHandler::MouseBindLeft
_TEXT	ENDS
PUBLIC	?MouseBindRight@DeviceHandler@@QAEHXZ		; DeviceHandler::MouseBindRight
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindRight@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindRight@DeviceHandler@@QAEHXZ PROC		; DeviceHandler::MouseBindRight, COMDAT
; _this$ = ecx

; 2662 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2663 : 	return this->MouseRight;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 9c 0c 00
	00		 mov	 eax, DWORD PTR [eax+3228]

; 2664 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?MouseBindRight@DeviceHandler@@QAEHXZ ENDP		; DeviceHandler::MouseBindRight
_TEXT	ENDS
PUBLIC	?MouseBindUp@DeviceHandler@@QAEHXZ		; DeviceHandler::MouseBindUp
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindUp@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindUp@DeviceHandler@@QAEHXZ PROC			; DeviceHandler::MouseBindUp, COMDAT
; _this$ = ecx

; 2666 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2667 : 	return this->MouseUp;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 80 a8 0c 00
	00		 mov	 eax, DWORD PTR [eax+3240]

; 2668 : }

  00015	5f		 pop	 edi
  00016	5e		 pop	 esi
  00017	5b		 pop	 ebx
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?MouseBindUp@DeviceHandler@@QAEHXZ ENDP			; DeviceHandler::MouseBindUp
_TEXT	ENDS
PUBLIC	?BindMouseXLeft@DeviceHandler@@QAEXPAD@Z	; DeviceHandler::BindMouseXLeft
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXLeft@DeviceHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseXLeft@DeviceHandler@@QAEXPAD@Z PROC		; DeviceHandler::BindMouseXLeft, COMDAT
; _this$ = ecx

; 2670 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2671 : 	this->MouseLeft=this->CharToInputInt(InputType);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _InputType$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	89 81 98 0c 00
	00		 mov	 DWORD PTR [ecx+3224], eax

; 2672 : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?BindMouseXLeft@DeviceHandler@@QAEXPAD@Z ENDP		; DeviceHandler::BindMouseXLeft
_TEXT	ENDS
PUBLIC	?BindMouseXLeft@DeviceHandler@@QAEXH@Z		; DeviceHandler::BindMouseXLeft
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXLeft@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseXLeft@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::BindMouseXLeft, COMDAT
; _this$ = ecx

; 2674 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2675 : 	this->MouseLeft=InputType;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _InputType$[ebp]
  00012	89 88 98 0c 00
	00		 mov	 DWORD PTR [eax+3224], ecx

; 2676 : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?BindMouseXLeft@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::BindMouseXLeft
_TEXT	ENDS
PUBLIC	?BindMouseXRight@DeviceHandler@@QAEXPAD@Z	; DeviceHandler::BindMouseXRight
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXRight@DeviceHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseXRight@DeviceHandler@@QAEXPAD@Z PROC		; DeviceHandler::BindMouseXRight, COMDAT
; _this$ = ecx

; 2678 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2679 : 	this->MouseRight=this->CharToInputInt(InputType);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _InputType$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	89 81 9c 0c 00
	00		 mov	 DWORD PTR [ecx+3228], eax

; 2680 : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?BindMouseXRight@DeviceHandler@@QAEXPAD@Z ENDP		; DeviceHandler::BindMouseXRight
_TEXT	ENDS
PUBLIC	?BindMouseXRight@DeviceHandler@@QAEXH@Z		; DeviceHandler::BindMouseXRight
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXRight@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseXRight@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::BindMouseXRight, COMDAT
; _this$ = ecx

; 2682 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2683 : 	this->MouseRight=InputType;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _InputType$[ebp]
  00012	89 88 9c 0c 00
	00		 mov	 DWORD PTR [eax+3228], ecx

; 2684 : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?BindMouseXRight@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::BindMouseXRight
_TEXT	ENDS
PUBLIC	?BindMouseYDown@DeviceHandler@@QAEXPAD@Z	; DeviceHandler::BindMouseYDown
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYDown@DeviceHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseYDown@DeviceHandler@@QAEXPAD@Z PROC		; DeviceHandler::BindMouseYDown, COMDAT
; _this$ = ecx

; 2686 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2687 : 	this->MouseDown=this->CharToInputInt(InputType);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _InputType$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	89 81 94 0c 00
	00		 mov	 DWORD PTR [ecx+3220], eax

; 2688 : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?BindMouseYDown@DeviceHandler@@QAEXPAD@Z ENDP		; DeviceHandler::BindMouseYDown
_TEXT	ENDS
PUBLIC	?BindMouseYDown@DeviceHandler@@QAEXH@Z		; DeviceHandler::BindMouseYDown
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYDown@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseYDown@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::BindMouseYDown, COMDAT
; _this$ = ecx

; 2690 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2691 : 	this->MouseDown=InputType;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _InputType$[ebp]
  00012	89 88 94 0c 00
	00		 mov	 DWORD PTR [eax+3220], ecx

; 2692 : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?BindMouseYDown@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::BindMouseYDown
_TEXT	ENDS
PUBLIC	?BindMouseYUp@DeviceHandler@@QAEXPAD@Z		; DeviceHandler::BindMouseYUp
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYUp@DeviceHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseYUp@DeviceHandler@@QAEXPAD@Z PROC		; DeviceHandler::BindMouseYUp, COMDAT
; _this$ = ecx

; 2694 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2695 : 	this->MouseUp=this->CharToInputInt(InputType);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _InputType$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	89 81 a8 0c 00
	00		 mov	 DWORD PTR [ecx+3240], eax

; 2696 : }

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?BindMouseYUp@DeviceHandler@@QAEXPAD@Z ENDP		; DeviceHandler::BindMouseYUp
_TEXT	ENDS
PUBLIC	?BindMouseYUp@DeviceHandler@@QAEXH@Z		; DeviceHandler::BindMouseYUp
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYUp@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseYUp@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::BindMouseYUp, COMDAT
; _this$ = ecx

; 2698 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2699 : 	this->MouseUp=InputType;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _InputType$[ebp]
  00012	89 88 a8 0c 00
	00		 mov	 DWORD PTR [eax+3240], ecx

; 2700 : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?BindMouseYUp@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::BindMouseYUp
_TEXT	ENDS
PUBLIC	?SetCurrentDevice@DeviceHandler@@QAEXPAD@Z	; DeviceHandler::SetCurrentDevice
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetCurrentDevice@DeviceHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_test$ = -8						; size = 4
_this$ = -4						; size = 4
_Device$ = 8						; size = 4
?SetCurrentDevice@DeviceHandler@@QAEXPAD@Z PROC		; DeviceHandler::SetCurrentDevice, COMDAT
; _this$ = ecx

; 2702 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2703 : 	char* test;
; 2704 : 	int i;
; 2705 : 	
; 2706 : 	dbPerformChecklistControlDevices();

  0000c	e8 00 00 00 00	 call	 ?dbPerformChecklistControlDevices@@YAXXZ ; dbPerformChecklistControlDevices

; 2707 : 	for(i=1;(test=dbChecklistString(i))!=Device&&test!=NULL&&test!="";i++);

  00011	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00018	eb 09		 jmp	 SHORT $LN6@SetCurrent
$LN5@SetCurrent:
  0001a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0001d	83 c0 01	 add	 eax, 1
  00020	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN6@SetCurrent:
  00023	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?dbChecklistString@@YAPADH@Z ; dbChecklistString
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR _test$[ebp], eax
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _test$[ebp]
  00035	3b 4d 08	 cmp	 ecx, DWORD PTR _Device$[ebp]
  00038	74 11		 je	 SHORT $LN4@SetCurrent
  0003a	83 7d f8 00	 cmp	 DWORD PTR _test$[ebp], 0
  0003e	74 0b		 je	 SHORT $LN4@SetCurrent
  00040	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _test$[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00047	74 02		 je	 SHORT $LN4@SetCurrent
  00049	eb cf		 jmp	 SHORT $LN5@SetCurrent
$LN4@SetCurrent:

; 2708 : 	if(test!=NULL&&test!="")

  0004b	83 7d f8 00	 cmp	 DWORD PTR _test$[ebp], 0
  0004f	74 5a		 je	 SHORT $LN3@SetCurrent
  00051	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _test$[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00058	74 51		 je	 SHORT $LN3@SetCurrent

; 2709 : 	{
; 2710 : 		this->CurrentDevice=i;

  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00060	89 88 90 0c 00
	00		 mov	 DWORD PTR [eax+3216], ecx

; 2711 : 		this->CurrentDevice$=Device;

  00066	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _Device$[ebp]
  0006c	89 88 84 0c 00
	00		 mov	 DWORD PTR [eax+3204], ecx

; 2712 : 		dbSetControlDevice(this->CurrentDevice$);

  00072	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 88 84 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3204]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ?dbSetControlDevice@@YAXPAD@Z ; dbSetControlDevice
  00081	83 c4 04	 add	 esp, 4

; 2713 : 
; 2714 : 		if(dbChecklistValueA(this->CurrentDevice)==1)

  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00087	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ?dbChecklistValueA@@YAHH@Z ; dbChecklistValueA
  00093	83 c4 04	 add	 esp, 4
  00096	83 f8 01	 cmp	 eax, 1
  00099	75 09		 jne	 SHORT $LN2@SetCurrent

; 2715 : 			this->ForceFeedback=true;

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1

; 2716 : 		else

  000a2	eb 07		 jmp	 SHORT $LN3@SetCurrent
$LN2@SetCurrent:

; 2717 : 			this->ForceFeedback=false;

  000a4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a7	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
$LN3@SetCurrent:

; 2718 : 	}
; 2719 : 	dbEmptyChecklist();

  000ab	e8 00 00 00 00	 call	 ?dbEmptyChecklist@@YAXXZ ; dbEmptyChecklist

; 2720 : 
; 2721 : 	return;
; 2722 : }

  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
?SetCurrentDevice@DeviceHandler@@QAEXPAD@Z ENDP		; DeviceHandler::SetCurrentDevice
_TEXT	ENDS
PUBLIC	?SetCurrentDevice@DeviceHandler@@QAEXH@Z	; DeviceHandler::SetCurrentDevice
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetCurrentDevice@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_test$ = -8						; size = 4
_this$ = -4						; size = 4
_Device$ = 8						; size = 4
?SetCurrentDevice@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::SetCurrentDevice, COMDAT
; _this$ = ecx

; 2724 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2725 : 	char* test;
; 2726 : 	
; 2727 : 	dbPerformChecklistControlDevices();

  0000c	e8 00 00 00 00	 call	 ?dbPerformChecklistControlDevices@@YAXXZ ; dbPerformChecklistControlDevices

; 2728 : 	test=dbChecklistString(Device);

  00011	8b 45 08	 mov	 eax, DWORD PTR _Device$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?dbChecklistString@@YAPADH@Z ; dbChecklistString
  0001a	83 c4 04	 add	 esp, 4
  0001d	89 45 f8	 mov	 DWORD PTR _test$[ebp], eax

; 2729 : 	if(test!=NULL&&test!="")

  00020	83 7d f8 00	 cmp	 DWORD PTR _test$[ebp], 0
  00024	74 5a		 je	 SHORT $LN3@SetCurrent@2
  00026	81 7d f8 00 00
	00 00		 cmp	 DWORD PTR _test$[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
  0002d	74 51		 je	 SHORT $LN3@SetCurrent@2

; 2730 : 	{
; 2731 : 		this->CurrentDevice=Device;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 4d 08	 mov	 ecx, DWORD PTR _Device$[ebp]
  00035	89 88 90 0c 00
	00		 mov	 DWORD PTR [eax+3216], ecx

; 2732 : 		this->CurrentDevice$=test;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _test$[ebp]
  00041	89 88 84 0c 00
	00		 mov	 DWORD PTR [eax+3204], ecx

; 2733 : 		dbSetControlDevice(this->CurrentDevice$);

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 88 84 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3204]
  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ?dbSetControlDevice@@YAXPAD@Z ; dbSetControlDevice
  00056	83 c4 04	 add	 esp, 4

; 2734 : 
; 2735 : 		if(dbChecklistValueA(this->CurrentDevice)==1)

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 88 90 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3216]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 ?dbChecklistValueA@@YAHH@Z ; dbChecklistValueA
  00068	83 c4 04	 add	 esp, 4
  0006b	83 f8 01	 cmp	 eax, 1
  0006e	75 09		 jne	 SHORT $LN2@SetCurrent@2

; 2736 : 			this->ForceFeedback=true;

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	c6 40 01 01	 mov	 BYTE PTR [eax+1], 1

; 2737 : 		else

  00077	eb 07		 jmp	 SHORT $LN3@SetCurrent@2
$LN2@SetCurrent@2:

; 2738 : 			this->ForceFeedback=false;

  00079	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0
$LN3@SetCurrent@2:

; 2739 : 	}
; 2740 : 	dbEmptyChecklist();

  00080	e8 00 00 00 00	 call	 ?dbEmptyChecklist@@YAXXZ ; dbEmptyChecklist

; 2741 : 
; 2742 : 	return;
; 2743 : }

  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
?SetCurrentDevice@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::SetCurrentDevice
_TEXT	ENDS
PUBLIC	?SetForceFeedback@DeviceHandler@@QAEX_N@Z	; DeviceHandler::SetForceFeedback
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetForceFeedback@DeviceHandler@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_OnOff$ = 8						; size = 1
?SetForceFeedback@DeviceHandler@@QAEX_N@Z PROC		; DeviceHandler::SetForceFeedback, COMDAT
; _this$ = ecx

; 2745 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2746 : 	if(this->ForceFeedback)

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00013	85 c9		 test	 ecx, ecx
  00015	74 09		 je	 SHORT $LN2@SetForceFe

; 2747 : 		this->ForceFeedbackOn=true;

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	c6 40 02 01	 mov	 BYTE PTR [eax+2], 1

; 2748 : 	else

  0001e	eb 07		 jmp	 SHORT $LN3@SetForceFe
$LN2@SetForceFe:

; 2749 : 		this->ForceFeedbackOn=false;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0
$LN3@SetForceFe:

; 2750 : 
; 2751 : 	return;
; 2752 : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?SetForceFeedback@DeviceHandler@@QAEX_N@Z ENDP		; DeviceHandler::SetForceFeedback
_TEXT	ENDS
PUBLIC	?SetMouse@DeviceHandler@@QAEXPAVMouseHandler@@@Z ; DeviceHandler::SetMouse
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouse@DeviceHandler@@QAEXPAVMouseHandler@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Mouse$ = 8						; size = 4
?SetMouse@DeviceHandler@@QAEXPAVMouseHandler@@@Z PROC	; DeviceHandler::SetMouse, COMDAT
; _this$ = ecx

; 2754 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2755 : 	this->CurrentMouse=Mouse;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _Mouse$[ebp]
  00012	89 88 8c 22 00
	00		 mov	 DWORD PTR [eax+8844], ecx

; 2756 : 
; 2757 : 	if(Mouse!=NULL)

  00018	83 7d 08 00	 cmp	 DWORD PTR _Mouse$[ebp], 0
  0001c	74 08		 je	 SHORT $LN2@SetMouse@2

; 2758 : 		this->Bound=true;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c6 00 01	 mov	 BYTE PTR [eax], 1

; 2759 : 	else

  00024	eb 06		 jmp	 SHORT $LN3@SetMouse@2
$LN2@SetMouse@2:

; 2760 : 		this->Bound=false;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN3@SetMouse@2:

; 2761 : 
; 2762 : 	return;
; 2763 : }

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?SetMouse@DeviceHandler@@QAEXPAVMouseHandler@@@Z ENDP	; DeviceHandler::SetMouse
_TEXT	ENDS
PUBLIC	?SetMouseSpeedX@DeviceHandler@@QAEXH@Z		; DeviceHandler::SetMouseSpeedX
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouseSpeedX@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
?SetMouseSpeedX@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::SetMouseSpeedX, COMDAT
; _this$ = ecx

; 2765 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2766 : 	if(X<0)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _X$[ebp], 0
  00010	7d 02		 jge	 SHORT $LN1@SetMouseSp@3

; 2767 : 		return;

  00012	eb 0c		 jmp	 SHORT $LN2@SetMouseSp@3
$LN1@SetMouseSp@3:

; 2768 : 
; 2769 : 	this->MouseSyncX=X;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _X$[ebp]
  0001a	89 88 a0 0c 00
	00		 mov	 DWORD PTR [eax+3232], ecx
$LN2@SetMouseSp@3:

; 2770 : 
; 2771 : 	return;
; 2772 : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?SetMouseSpeedX@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::SetMouseSpeedX
_TEXT	ENDS
PUBLIC	?SetMouseSpeedY@DeviceHandler@@QAEXH@Z		; DeviceHandler::SetMouseSpeedY
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouseSpeedY@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Y$ = 8							; size = 4
?SetMouseSpeedY@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::SetMouseSpeedY, COMDAT
; _this$ = ecx

; 2774 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2775 : 	if(Y<0)

  0000c	83 7d 08 00	 cmp	 DWORD PTR _Y$[ebp], 0
  00010	7d 02		 jge	 SHORT $LN1@SetMouseSp@4

; 2776 : 		return;

  00012	eb 0c		 jmp	 SHORT $LN2@SetMouseSp@4
$LN1@SetMouseSp@4:

; 2777 : 
; 2778 : 	this->MouseSyncY=Y;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _Y$[ebp]
  0001a	89 88 a4 0c 00
	00		 mov	 DWORD PTR [eax+3236], ecx
$LN2@SetMouseSp@4:

; 2779 : 
; 2780 : 	return;
; 2781 : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?SetMouseSpeedY@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::SetMouseSpeedY
_TEXT	ENDS
PUBLIC	?SetPercentBindX@DeviceHandler@@QAEXM@Z		; DeviceHandler::SetPercentBindX
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetPercentBindX@DeviceHandler@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?SetPercentBindX@DeviceHandler@@QAEXM@Z PROC		; DeviceHandler::SetPercentBindX, COMDAT
; _this$ = ecx

; 2783 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2784 : 	this->PercentBindX=Percent;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00012	d9 98 88 0c 00
	00		 fstp	 DWORD PTR [eax+3208]

; 2785 : 
; 2786 : 	return;
; 2787 : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetPercentBindX@DeviceHandler@@QAEXM@Z ENDP		; DeviceHandler::SetPercentBindX
_TEXT	ENDS
PUBLIC	?SetPercentBindY@DeviceHandler@@QAEXM@Z		; DeviceHandler::SetPercentBindY
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetPercentBindY@DeviceHandler@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?SetPercentBindY@DeviceHandler@@QAEXM@Z PROC		; DeviceHandler::SetPercentBindY, COMDAT
; _this$ = ecx

; 2789 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2790 : 	this->PercentBindY=Percent;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	d9 45 08	 fld	 DWORD PTR _Percent$[ebp]
  00012	d9 98 8c 0c 00
	00		 fstp	 DWORD PTR [eax+3212]

; 2791 : 
; 2792 : 	return;
; 2793 : }

  00018	5f		 pop	 edi
  00019	5e		 pop	 esi
  0001a	5b		 pop	 ebx
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?SetPercentBindY@DeviceHandler@@QAEXM@Z ENDP		; DeviceHandler::SetPercentBindY
_TEXT	ENDS
PUBLIC	?Update@DeviceHandler@@QAEXXZ			; DeviceHandler::Update
EXTRN	?dbJoystickSliderD@@YAHXZ:PROC			; dbJoystickSliderD
EXTRN	?dbJoystickSliderC@@YAHXZ:PROC			; dbJoystickSliderC
EXTRN	?dbJoystickSliderB@@YAHXZ:PROC			; dbJoystickSliderB
EXTRN	?dbJoystickSliderA@@YAHXZ:PROC			; dbJoystickSliderA
EXTRN	?dbJoystickTwistZ@@YAHXZ:PROC			; dbJoystickTwistZ
EXTRN	?dbJoystickTwistY@@YAHXZ:PROC			; dbJoystickTwistY
EXTRN	?dbJoystickTwistX@@YAHXZ:PROC			; dbJoystickTwistX
EXTRN	?dbJoystickZ@@YAHXZ:PROC			; dbJoystickZ
EXTRN	?dbJoystickY@@YAHXZ:PROC			; dbJoystickY
EXTRN	?dbJoystickX@@YAHXZ:PROC			; dbJoystickX
EXTRN	?dbJoystickHatAngle@@YAHH@Z:PROC		; dbJoystickHatAngle
EXTRN	?dbJoystickFireX@@YAHH@Z:PROC			; dbJoystickFireX
; Function compile flags: /Odtp /ZI
;	COMDAT ?Update@DeviceHandler@@QAEXXZ
_TEXT	SEGMENT
_i$92794 = -24						; size = 4
_i$92790 = -20						; size = 4
_j$92786 = -16						; size = 4
_j$92782 = -12						; size = 4
_i$92778 = -8						; size = 4
_this$ = -4						; size = 4
?Update@DeviceHandler@@QAEXXZ PROC			; DeviceHandler::Update, COMDAT
; _this$ = ecx

; 2795 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2796 : 	if(this->CurrentDevice$!=NULL&&this->CurrentDevice$!="")

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	83 b8 84 0c 00
	00 00		 cmp	 DWORD PTR [eax+3204], 0
  00016	0f 84 f2 02 00
	00		 je	 $LN21@Update@3
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	81 b8 84 0c 00
	00 00 00 00 00	 cmp	 DWORD PTR [eax+3204], OFFSET ??_C@_00CNPNBAHC@?$AA@
  00029	0f 84 df 02 00
	00		 je	 $LN21@Update@3

; 2797 : 	{
; 2798 : 		for(int i=99;i>0;i--)

  0002f	c7 45 f8 63 00
	00 00		 mov	 DWORD PTR _i$92778[ebp], 99 ; 00000063H
  00036	eb 09		 jmp	 SHORT $LN20@Update@3
$LN19@Update@3:
  00038	8b 45 f8	 mov	 eax, DWORD PTR _i$92778[ebp]
  0003b	83 e8 01	 sub	 eax, 1
  0003e	89 45 f8	 mov	 DWORD PTR _i$92778[ebp], eax
$LN20@Update@3:
  00041	83 7d f8 00	 cmp	 DWORD PTR _i$92778[ebp], 0
  00045	0f 8e 94 01 00
	00		 jle	 $LN18@Update@3

; 2799 : 		{
; 2800 : 			for(int j=31;j>=0;j--)

  0004b	c7 45 f4 1f 00
	00 00		 mov	 DWORD PTR _j$92782[ebp], 31 ; 0000001fH
  00052	eb 09		 jmp	 SHORT $LN17@Update@3
$LN16@Update@3:
  00054	8b 45 f4	 mov	 eax, DWORD PTR _j$92782[ebp]
  00057	83 e8 01	 sub	 eax, 1
  0005a	89 45 f4	 mov	 DWORD PTR _j$92782[ebp], eax
$LN17@Update@3:
  0005d	83 7d f4 00	 cmp	 DWORD PTR _j$92782[ebp], 0
  00061	7c 26		 jl	 SHORT $LN15@Update@3

; 2801 : 				this->Buttons[j][i]=this->Buttons[j][i-1];

  00063	8b 45 f4	 mov	 eax, DWORD PTR _j$92782[ebp]
  00066	6b c0 64	 imul	 eax, 100		; 00000064H
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	8d 54 01 03	 lea	 edx, DWORD PTR [ecx+eax+3]
  00070	8b 45 f4	 mov	 eax, DWORD PTR _j$92782[ebp]
  00073	6b c0 64	 imul	 eax, 100		; 00000064H
  00076	03 45 f8	 add	 eax, DWORD PTR _i$92778[ebp]
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	8b 75 f8	 mov	 esi, DWORD PTR _i$92778[ebp]
  0007f	8a 54 32 ff	 mov	 dl, BYTE PTR [edx+esi-1]
  00083	88 54 01 03	 mov	 BYTE PTR [ecx+eax+3], dl
  00087	eb cb		 jmp	 SHORT $LN16@Update@3
$LN15@Update@3:

; 2802 : 
; 2803 : 			for(int j=0;j<4;j++)

  00089	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$92786[ebp], 0
  00090	eb 09		 jmp	 SHORT $LN14@Update@3
$LN13@Update@3:
  00092	8b 45 f0	 mov	 eax, DWORD PTR _j$92786[ebp]
  00095	83 c0 01	 add	 eax, 1
  00098	89 45 f0	 mov	 DWORD PTR _j$92786[ebp], eax
$LN14@Update@3:
  0009b	83 7d f0 04	 cmp	 DWORD PTR _j$92786[ebp], 4
  0009f	7d 35		 jge	 SHORT $LN12@Update@3

; 2804 : 				this->HatAngles[j][i]=this->HatAngles[j][i-1];

  000a1	8b 45 f0	 mov	 eax, DWORD PTR _j$92786[ebp]
  000a4	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	8d 94 01 5c 11
	00 00		 lea	 edx, DWORD PTR [ecx+eax+4444]
  000b4	8b 45 f0	 mov	 eax, DWORD PTR _j$92786[ebp]
  000b7	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  000bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	8d 84 01 5c 11
	00 00		 lea	 eax, DWORD PTR [ecx+eax+4444]
  000c7	8b 4d f8	 mov	 ecx, DWORD PTR _i$92778[ebp]
  000ca	8b 75 f8	 mov	 esi, DWORD PTR _i$92778[ebp]
  000cd	8b 54 b2 fc	 mov	 edx, DWORD PTR [edx+esi*4-4]
  000d1	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
  000d4	eb bc		 jmp	 SHORT $LN13@Update@3
$LN12@Update@3:

; 2805 : 
; 2806 : 			this->JoyStickX[i]=this->JoyStickX[i-1];

  000d6	8b 45 f8	 mov	 eax, DWORD PTR _i$92778[ebp]
  000d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	8b 55 f8	 mov	 edx, DWORD PTR _i$92778[ebp]
  000df	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  000e2	8b 94 96 a8 0c
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+3240]
  000e9	89 94 81 ac 0c
	00 00		 mov	 DWORD PTR [ecx+eax*4+3244], edx

; 2807 : 			this->JoyStickY[i]=this->JoyStickY[i-1];

  000f0	8b 45 f8	 mov	 eax, DWORD PTR _i$92778[ebp]
  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	8b 55 f8	 mov	 edx, DWORD PTR _i$92778[ebp]
  000f9	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  000fc	8b 94 96 38 0e
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+3640]
  00103	89 94 81 3c 0e
	00 00		 mov	 DWORD PTR [ecx+eax*4+3644], edx

; 2808 : 			this->JoyStickZ[i]=this->JoyStickZ[i-1];

  0010a	8b 45 f8	 mov	 eax, DWORD PTR _i$92778[ebp]
  0010d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	8b 55 f8	 mov	 edx, DWORD PTR _i$92778[ebp]
  00113	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00116	8b 94 96 c8 0f
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+4040]
  0011d	89 94 81 cc 0f
	00 00		 mov	 DWORD PTR [ecx+eax*4+4044], edx

; 2809 : 			this->JoyStickSliderA[i]=this->JoyStickSliderA[i-1];

  00124	8b 45 f8	 mov	 eax, DWORD PTR _i$92778[ebp]
  00127	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012a	8b 55 f8	 mov	 edx, DWORD PTR _i$92778[ebp]
  0012d	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00130	8b 94 96 98 17
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+6040]
  00137	89 94 81 9c 17
	00 00		 mov	 DWORD PTR [ecx+eax*4+6044], edx

; 2810 : 			this->JoyStickSliderB[i]=this->JoyStickSliderB[i-1];

  0013e	8b 45 f8	 mov	 eax, DWORD PTR _i$92778[ebp]
  00141	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00144	8b 55 f8	 mov	 edx, DWORD PTR _i$92778[ebp]
  00147	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0014a	8b 94 96 28 19
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+6440]
  00151	89 94 81 2c 19
	00 00		 mov	 DWORD PTR [ecx+eax*4+6444], edx

; 2811 : 			this->JoyStickSliderC[i]=this->JoyStickSliderC[i-1];

  00158	8b 45 f8	 mov	 eax, DWORD PTR _i$92778[ebp]
  0015b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	8b 55 f8	 mov	 edx, DWORD PTR _i$92778[ebp]
  00161	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00164	8b 94 96 b8 1a
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+6840]
  0016b	89 94 81 bc 1a
	00 00		 mov	 DWORD PTR [ecx+eax*4+6844], edx

; 2812 : 			this->JoyStickSliderD[i]=this->JoyStickSliderD[i-1];

  00172	8b 45 f8	 mov	 eax, DWORD PTR _i$92778[ebp]
  00175	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00178	8b 55 f8	 mov	 edx, DWORD PTR _i$92778[ebp]
  0017b	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0017e	8b 94 96 48 1c
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+7240]
  00185	89 94 81 4c 1c
	00 00		 mov	 DWORD PTR [ecx+eax*4+7244], edx

; 2813 : 			this->JoyStickTwistX[i]=this->JoyStickTwistX[i-1];

  0018c	8b 45 f8	 mov	 eax, DWORD PTR _i$92778[ebp]
  0018f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00192	8b 55 f8	 mov	 edx, DWORD PTR _i$92778[ebp]
  00195	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00198	8b 94 96 d8 1d
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+7640]
  0019f	89 94 81 dc 1d
	00 00		 mov	 DWORD PTR [ecx+eax*4+7644], edx

; 2814 : 			this->JoyStickTwistY[i]=this->JoyStickTwistY[i-1];

  001a6	8b 45 f8	 mov	 eax, DWORD PTR _i$92778[ebp]
  001a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ac	8b 55 f8	 mov	 edx, DWORD PTR _i$92778[ebp]
  001af	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  001b2	8b 94 96 68 1f
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+8040]
  001b9	89 94 81 6c 1f
	00 00		 mov	 DWORD PTR [ecx+eax*4+8044], edx

; 2815 : 			this->JoyStickTwistZ[i]=this->JoyStickTwistZ[i-1];

  001c0	8b 45 f8	 mov	 eax, DWORD PTR _i$92778[ebp]
  001c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c6	8b 55 f8	 mov	 edx, DWORD PTR _i$92778[ebp]
  001c9	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  001cc	8b 94 96 f8 20
	00 00		 mov	 edx, DWORD PTR [esi+edx*4+8440]
  001d3	89 94 81 fc 20
	00 00		 mov	 DWORD PTR [ecx+eax*4+8444], edx

; 2816 : 		}

  001da	e9 59 fe ff ff	 jmp	 $LN19@Update@3
$LN18@Update@3:

; 2817 : 
; 2818 : 		for(int i=0;i<32;i++)

  001df	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$92790[ebp], 0
  001e6	eb 09		 jmp	 SHORT $LN11@Update@3
$LN10@Update@3:
  001e8	8b 45 ec	 mov	 eax, DWORD PTR _i$92790[ebp]
  001eb	83 c0 01	 add	 eax, 1
  001ee	89 45 ec	 mov	 DWORD PTR _i$92790[ebp], eax
$LN11@Update@3:
  001f1	83 7d ec 20	 cmp	 DWORD PTR _i$92790[ebp], 32 ; 00000020H
  001f5	7d 20		 jge	 SHORT $LN9@Update@3

; 2819 : 			this->Buttons[i][0]=dbJoystickFireX(i);

  001f7	8b 45 ec	 mov	 eax, DWORD PTR _i$92790[ebp]
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 ?dbJoystickFireX@@YAHH@Z ; dbJoystickFireX
  00200	83 c4 04	 add	 esp, 4
  00203	85 c0		 test	 eax, eax
  00205	0f 95 c1	 setne	 cl
  00208	8b 55 ec	 mov	 edx, DWORD PTR _i$92790[ebp]
  0020b	6b d2 64	 imul	 edx, 100		; 00000064H
  0020e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00211	88 4c 10 03	 mov	 BYTE PTR [eax+edx+3], cl
  00215	eb d1		 jmp	 SHORT $LN10@Update@3
$LN9@Update@3:

; 2820 : 
; 2821 : 		for(int i=0;i<4;i++)

  00217	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$92794[ebp], 0
  0021e	eb 09		 jmp	 SHORT $LN8@Update@3
$LN7@Update@3:
  00220	8b 45 e8	 mov	 eax, DWORD PTR _i$92794[ebp]
  00223	83 c0 01	 add	 eax, 1
  00226	89 45 e8	 mov	 DWORD PTR _i$92794[ebp], eax
$LN8@Update@3:
  00229	83 7d e8 04	 cmp	 DWORD PTR _i$92794[ebp], 4
  0022d	7d 53		 jge	 SHORT $LN6@Update@3

; 2822 : 			if(dbJoystickHatAngle(i)!=-1)

  0022f	8b 45 e8	 mov	 eax, DWORD PTR _i$92794[ebp]
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 ?dbJoystickHatAngle@@YAHH@Z ; dbJoystickHatAngle
  00238	83 c4 04	 add	 esp, 4
  0023b	83 f8 ff	 cmp	 eax, -1
  0023e	74 29		 je	 SHORT $LN5@Update@3

; 2823 : 				this->HatAngles[i][0]=dbJoystickHatAngle(i)/100;

  00240	8b 45 e8	 mov	 eax, DWORD PTR _i$92794[ebp]
  00243	50		 push	 eax
  00244	e8 00 00 00 00	 call	 ?dbJoystickHatAngle@@YAHH@Z ; dbJoystickHatAngle
  00249	83 c4 04	 add	 esp, 4
  0024c	99		 cdq
  0024d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00252	f7 f9		 idiv	 ecx
  00254	8b 55 e8	 mov	 edx, DWORD PTR _i$92794[ebp]
  00257	69 d2 90 01 00
	00		 imul	 edx, 400		; 00000190H
  0025d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00260	89 84 11 5c 11
	00 00		 mov	 DWORD PTR [ecx+edx+4444], eax

; 2824 : 			else

  00267	eb 17		 jmp	 SHORT $LN4@Update@3
$LN5@Update@3:

; 2825 : 				this->HatAngles[i][0]=-1;

  00269	8b 45 e8	 mov	 eax, DWORD PTR _i$92794[ebp]
  0026c	69 c0 90 01 00
	00		 imul	 eax, 400		; 00000190H
  00272	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00275	c7 84 01 5c 11
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+4444], -1
$LN4@Update@3:
  00280	eb 9e		 jmp	 SHORT $LN7@Update@3
$LN6@Update@3:

; 2826 : 
; 2827 : 		this->JoyStickX[0]=dbJoystickX();

  00282	e8 00 00 00 00	 call	 ?dbJoystickX@@YAHXZ	; dbJoystickX
  00287	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0028a	89 81 ac 0c 00
	00		 mov	 DWORD PTR [ecx+3244], eax

; 2828 : 		this->JoyStickY[0]=dbJoystickY();

  00290	e8 00 00 00 00	 call	 ?dbJoystickY@@YAHXZ	; dbJoystickY
  00295	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00298	89 81 3c 0e 00
	00		 mov	 DWORD PTR [ecx+3644], eax

; 2829 : 		this->JoyStickZ[0]=dbJoystickZ();

  0029e	e8 00 00 00 00	 call	 ?dbJoystickZ@@YAHXZ	; dbJoystickZ
  002a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a6	89 81 cc 0f 00
	00		 mov	 DWORD PTR [ecx+4044], eax

; 2830 : 		this->JoyStickTwistX[0]=dbJoystickTwistX();

  002ac	e8 00 00 00 00	 call	 ?dbJoystickTwistX@@YAHXZ ; dbJoystickTwistX
  002b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002b4	89 81 dc 1d 00
	00		 mov	 DWORD PTR [ecx+7644], eax

; 2831 : 		this->JoyStickTwistY[0]=dbJoystickTwistY();

  002ba	e8 00 00 00 00	 call	 ?dbJoystickTwistY@@YAHXZ ; dbJoystickTwistY
  002bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c2	89 81 6c 1f 00
	00		 mov	 DWORD PTR [ecx+8044], eax

; 2832 : 		this->JoyStickTwistZ[0]=dbJoystickTwistZ();

  002c8	e8 00 00 00 00	 call	 ?dbJoystickTwistZ@@YAHXZ ; dbJoystickTwistZ
  002cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d0	89 81 fc 20 00
	00		 mov	 DWORD PTR [ecx+8444], eax

; 2833 : 		this->JoyStickSliderA[0]=dbJoystickSliderA();

  002d6	e8 00 00 00 00	 call	 ?dbJoystickSliderA@@YAHXZ ; dbJoystickSliderA
  002db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002de	89 81 9c 17 00
	00		 mov	 DWORD PTR [ecx+6044], eax

; 2834 : 		this->JoyStickSliderB[0]=dbJoystickSliderB();

  002e4	e8 00 00 00 00	 call	 ?dbJoystickSliderB@@YAHXZ ; dbJoystickSliderB
  002e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ec	89 81 2c 19 00
	00		 mov	 DWORD PTR [ecx+6444], eax

; 2835 : 		this->JoyStickSliderC[0]=dbJoystickSliderC();

  002f2	e8 00 00 00 00	 call	 ?dbJoystickSliderC@@YAHXZ ; dbJoystickSliderC
  002f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002fa	89 81 bc 1a 00
	00		 mov	 DWORD PTR [ecx+6844], eax

; 2836 : 		this->JoyStickSliderD[0]=dbJoystickSliderD();

  00300	e8 00 00 00 00	 call	 ?dbJoystickSliderD@@YAHXZ ; dbJoystickSliderD
  00305	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00308	89 81 4c 1c 00
	00		 mov	 DWORD PTR [ecx+7244], eax
$LN21@Update@3:

; 2837 : 	}
; 2838 : 
; 2839 : 	if(this->CurrentMouse!=NULL)

  0030e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00311	83 b8 8c 22 00
	00 00		 cmp	 DWORD PTR [eax+8844], 0
  00318	0f 84 e1 00 00
	00		 je	 $LN2@Update@3

; 2840 : 		if(this->Bound||this->CurrentMouse->GetCursorName()!="")

  0031e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00321	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00324	85 c9		 test	 ecx, ecx
  00326	75 19		 jne	 SHORT $LN1@Update@3
  00328	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0032b	8b 88 8c 22 00
	00		 mov	 ecx, DWORD PTR [eax+8844]
  00331	e8 00 00 00 00	 call	 ?GetCursorName@MouseHandler@@QAEPADXZ ; MouseHandler::GetCursorName
  00336	3d 00 00 00 00	 cmp	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0033b	0f 84 be 00 00
	00		 je	 $LN2@Update@3
$LN1@Update@3:

; 2841 : 			this->CurrentMouse->MoveMouse(this->MouseSyncX*this->InputBound(this->MouseRight,this->PercentBindX)-this->MouseSyncX*this->InputBound(this->MouseLeft,this->PercentBindX),this->MouseSyncY*this->InputBound(this->MouseDown,this->PercentBindY)-this->MouseSyncY*this->InputBound(this->MouseUp,this->PercentBindY),0);

  00341	6a 00		 push	 0
  00343	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00346	51		 push	 ecx
  00347	d9 80 8c 0c 00
	00		 fld	 DWORD PTR [eax+3212]
  0034d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00350	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00353	8b 91 94 0c 00
	00		 mov	 edx, DWORD PTR [ecx+3220]
  00359	52		 push	 edx
  0035a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0035d	e8 00 00 00 00	 call	 ?InputBound@DeviceHandler@@QAEHHM@Z ; DeviceHandler::InputBound
  00362	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00365	8b f0		 mov	 esi, eax
  00367	0f af b1 a4 0c
	00 00		 imul	 esi, DWORD PTR [ecx+3236]
  0036e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00371	51		 push	 ecx
  00372	d9 82 8c 0c 00
	00		 fld	 DWORD PTR [edx+3212]
  00378	d9 1c 24	 fstp	 DWORD PTR [esp]
  0037b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0037e	8b 88 a8 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3240]
  00384	51		 push	 ecx
  00385	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00388	e8 00 00 00 00	 call	 ?InputBound@DeviceHandler@@QAEHHM@Z ; DeviceHandler::InputBound
  0038d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00390	0f af 82 a4 0c
	00 00		 imul	 eax, DWORD PTR [edx+3236]
  00397	2b f0		 sub	 esi, eax
  00399	56		 push	 esi
  0039a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0039d	51		 push	 ecx
  0039e	d9 80 88 0c 00
	00		 fld	 DWORD PTR [eax+3208]
  003a4	d9 1c 24	 fstp	 DWORD PTR [esp]
  003a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003aa	8b 91 9c 0c 00
	00		 mov	 edx, DWORD PTR [ecx+3228]
  003b0	52		 push	 edx
  003b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b4	e8 00 00 00 00	 call	 ?InputBound@DeviceHandler@@QAEHHM@Z ; DeviceHandler::InputBound
  003b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003bc	8b f0		 mov	 esi, eax
  003be	0f af b1 a0 0c
	00 00		 imul	 esi, DWORD PTR [ecx+3232]
  003c5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003c8	51		 push	 ecx
  003c9	d9 82 88 0c 00
	00		 fld	 DWORD PTR [edx+3208]
  003cf	d9 1c 24	 fstp	 DWORD PTR [esp]
  003d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003d5	8b 88 98 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3224]
  003db	51		 push	 ecx
  003dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003df	e8 00 00 00 00	 call	 ?InputBound@DeviceHandler@@QAEHHM@Z ; DeviceHandler::InputBound
  003e4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003e7	0f af 82 a0 0c
	00 00		 imul	 eax, DWORD PTR [edx+3232]
  003ee	2b f0		 sub	 esi, eax
  003f0	56		 push	 esi
  003f1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003f4	8b 88 8c 22 00
	00		 mov	 ecx, DWORD PTR [eax+8844]
  003fa	e8 00 00 00 00	 call	 ?MoveMouse@MouseHandler@@QAEXHHH@Z ; MouseHandler::MoveMouse
$LN2@Update@3:

; 2842 : 
; 2843 : 	return;
; 2844 : }

  003ff	5f		 pop	 edi
  00400	5e		 pop	 esi
  00401	5b		 pop	 ebx
  00402	8b e5		 mov	 esp, ebp
  00404	5d		 pop	 ebp
  00405	c3		 ret	 0
?Update@DeviceHandler@@QAEXXZ ENDP			; DeviceHandler::Update
_TEXT	ENDS
END
