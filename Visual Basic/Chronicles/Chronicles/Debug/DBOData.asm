; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\Program Files\The Game Creators\Dark GDK\Include\DBO Format\DBOData.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0sBone@@QAE@XZ				; sBone::sBone
EXTRN	_memset:PROC
; Function compile flags: /Odtp /ZI
; File c:\program files\the game creators\dark gdk\include\dbo format\dbodata.cpp
;	COMDAT ??0sBone@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sBone@@QAE@XZ PROC					; sBone::sBone, COMDAT
; _this$ = ecx

; 4    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 268				; 0000010cH
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 5    : 	// clear out structure
; 6    : 	memset ( this, 0, sizeof ( sBone ) );

	push	344					; 00000158H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 7    : 	
; 8    : 	// set values to 0 and pointers to null
; 9    : 	dwNumInfluences = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+256], 0

; 10   : 	pVertices       = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 0

; 11   : 	pWeights        = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], 0

; 12   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sBone@@QAE@XZ ENDP					; sBone::sBone
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft directx sdk (august 2007)\include\d3dx9math.h
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
PUBLIC	??1sBone@@QAE@XZ				; sBone::~sBone
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
; File c:\program files\the game creators\dark gdk\include\dbo format\dbodata.cpp
;	COMDAT ??1sBone@@QAE@XZ
_TEXT	SEGMENT
$T57182 = -76						; size = 4
$T57183 = -72						; size = 4
_this$ = -4						; size = 4
??1sBone@@QAE@XZ PROC					; sBone::~sBone, COMDAT
; _this$ = ecx

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 16   : 	SAFE_DELETE_ARRAY ( pVertices );	// delete vertex array

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	SHORT $LN2@sBone
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	mov	DWORD PTR $T57182[ebp], ecx
	mov	edx, DWORD PTR $T57182[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 0
$LN2@sBone:

; 17   : 	SAFE_DELETE_ARRAY ( pWeights );		// delete weights array

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN3@sBone
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	DWORD PTR $T57183[ebp], ecx
	mov	edx, DWORD PTR $T57183[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], 0
$LN3@sBone:

; 18   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1sBone@@QAE@XZ ENDP					; sBone::~sBone
_TEXT	ENDS
PUBLIC	??0sTexture@@QAE@XZ				; sTexture::sTexture
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sTexture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sTexture@@QAE@XZ PROC				; sTexture::sTexture, COMDAT
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 22   : 	// clear out the structure
; 23   : 	memset ( this, 0, sizeof ( sTexture ) );

	push	328					; 00000148H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 24   : 
; 25   : 	// default texture settings
; 26   : 	dwBlendMode		= D3DTOP_SELECTARG1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+272], 2

; 27   : 	dwBlendArg1		= D3DTA_DIFFUSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+276], 0

; 28   : 	dwBlendArg2		= D3DTA_DIFFUSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0

; 29   : 	dwAddressU		= D3DTADDRESS_WRAP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+284], 1

; 30   : 	dwAddressV		= D3DTADDRESS_WRAP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+288], 1

; 31   : 	dwMagState		= D3DTEXF_LINEAR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 2

; 32   : 	dwMinState		= D3DTEXF_LINEAR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+296], 2

; 33   : 	dwMipState		= D3DTEXF_LINEAR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+300], 2

; 34   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sTexture@@QAE@XZ ENDP				; sTexture::sTexture
_TEXT	ENDS
PUBLIC	??1sTexture@@QAE@XZ				; sTexture::~sTexture
; Function compile flags: /Odtp /ZI
;	COMDAT ??1sTexture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sTexture@@QAE@XZ PROC				; sTexture::~sTexture, COMDAT
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	SAFE_RELEASE ( pCubeTexture );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN2@sTexture
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+264]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], 0
$LN2@sTexture:

; 39   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1sTexture@@QAE@XZ ENDP				; sTexture::~sTexture
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0sCollisionData@@QAE@XZ			; sCollisionData::sCollisionData
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sCollisionData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sCollisionData@@QAE@XZ PROC				; sCollisionData::sCollisionData, COMDAT
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 43   : 	// clear out the structure
; 44   : 	memset ( this, 0, sizeof ( sCollisionData ) );

	push	108					; 0000006cH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 45   : 
; 46   : 	bActive					= true;				// default box collision

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+52], 1

; 47   : 	eCollisionType			= COLLISION_BOX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 2

; 48   : 	bBoundProduceResult		= true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+84], 1

; 49   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sCollisionData@@QAE@XZ ENDP				; sCollisionData::sCollisionData
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft directx sdk (august 2007)\include\d3dx9math.h
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??1sCollisionData@@QAE@XZ			; sCollisionData::~sCollisionData
; Function compile flags: /Odtp /ZI
; File c:\program files\the game creators\dark gdk\include\dbo format\dbodata.cpp
;	COMDAT ??1sCollisionData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sCollisionData@@QAE@XZ PROC				; sCollisionData::~sCollisionData, COMDAT
; _this$ = ecx

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 
; 54   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1sCollisionData@@QAE@XZ ENDP				; sCollisionData::~sCollisionData
_TEXT	ENDS
PUBLIC	??0sDrawBuffer@@QAE@XZ				; sDrawBuffer::sDrawBuffer
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sDrawBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sDrawBuffer@@QAE@XZ PROC				; sDrawBuffer::sDrawBuffer, COMDAT
; _this$ = ecx

; 57   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 	memset ( this, 0, sizeof ( sDrawBuffer ) );

	push	56					; 00000038H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 59   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sDrawBuffer@@QAE@XZ ENDP				; sDrawBuffer::sDrawBuffer
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@00000000
PUBLIC	??0sMesh@@QAE@XZ				; sMesh::sMesh
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0sMesh@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sMesh@@QAE@XZ PROC					; sMesh::sMesh, COMDAT
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1152				; 00000480H
	call	??0sCollisionData@@QAE@XZ		; sCollisionData::sCollisionData

; 63   : 	// clear out the structure
; 64   : 	memset ( this, 0, sizeof ( sMesh ) );

	push	1272					; 000004f8H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 65   : 
; 66   : 	iPrimitiveType			= 4;		// default to triangle list

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 4

; 67   : 	iDrawVertexCount		= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 68   : 	iDrawPrimitives			= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 69   : 
; 70   : 	bWireframe				= false;	// fill mesh with default render flags

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 71   : 	bLight					= true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1037], 1

; 72   : 	bCull					= true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1038], 1

; 73   : 	iCullMode				= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1068], 0

; 74   : 	bFog					= true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1039], 1

; 75   : 	bAmbient				= true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1040], 1

; 76   : 	bTransparency			= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1041], 0

; 77   : 	dwAlphaTestValue		= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1044], 0

; 78   : 	bGhost					= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1048], 0

; 79   : 	iGhostMode				= 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1052], 2

; 80   : 	bVisible				= true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1049], 1

; 81   : 	bZRead					= true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1050], 1

; 82   : 	bZWrite					= true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1051], 1

; 83   : 	bZBiasActive			= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1056], 0

; 84   : 	fZBiasSlopeScale		= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1060]

; 85   : 	fZBiasDepth				= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1064]

; 86   : 
; 87   : 	// mike 160505 - added ability to draw bounds of an individual mesh
; 88   : 	bDrawBounds				= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1072], 0

; 89   : 
; 90   : 	bUsesMaterial			= false;	// default settings in case we use it (ie fade object)

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+888], 0

; 91   : 	mMaterial.Diffuse.r		= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+916]

; 92   : 	mMaterial.Diffuse.g		= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+920]

; 93   : 	mMaterial.Diffuse.b		= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+924]

; 94   : 	mMaterial.Diffuse.a		= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+928]

; 95   : 	mMaterial.Ambient.r		= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+932]

; 96   : 	mMaterial.Ambient.g		= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+936]

; 97   : 	mMaterial.Ambient.b		= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+940]

; 98   : 	mMaterial.Ambient.a		= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+944]

; 99   : 
; 100  : 	bLinked                 = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1136], 0

; 101  : 	bVertexTransform		= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1003], 0

; 102  : 
; 103  : 	// mike - 230505 - need to be able to set mip map LOD bias on a per mesh basis
; 104  : 	fMipMapLODBias			= 0.0f;		// default value in DX is 0.0f

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1076]

; 105  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sMesh@@QAE@XZ ENDP					; sMesh::sMesh
_TEXT	ENDS
PUBLIC	??_EsTexture@@QAEPAXI@Z				; sTexture::`vector deleting destructor'
PUBLIC	??_EsBone@@QAEPAXI@Z				; sBone::`vector deleting destructor'
PUBLIC	??1sMesh@@QAE@XZ				; sMesh::~sMesh
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sMesh@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sMesh@@QAE@XZ$0
__ehfuncinfo$??1sMesh@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sMesh@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1sMesh@@QAE@XZ
_TEXT	SEGMENT
tv266 = -144						; size = 4
tv194 = -144						; size = 4
tv90 = -144						; size = 4
$T57206 = -140						; size = 4
$T57207 = -136						; size = 4
$T57210 = -132						; size = 4
$T57211 = -128						; size = 4
$T57212 = -124						; size = 4
$T57213 = -120						; size = 4
$T57214 = -116						; size = 4
$T57217 = -112						; size = 4
$T57218 = -108						; size = 4
$T57219 = -104						; size = 4
$T57220 = -100						; size = 4
$T57221 = -96						; size = 4
$T57224 = -92						; size = 4
$T57225 = -88						; size = 4
$T57226 = -84						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sMesh@@QAE@XZ PROC					; sMesh::~sMesh, COMDAT
; _this$ = ecx

; 108  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sMesh@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 132				; 00000084H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 109  : 	// delete any shader effect
; 110  : 	if ( bVertexShaderEffectRefOnly==false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+66]
	test	ecx, ecx
	jne	SHORT $LN13@sMesh

; 111  : 		SAFE_DELETE ( pVertexShaderEffect );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+600], 0
	je	SHORT $LN13@sMesh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+600]
	mov	DWORD PTR $T57207[ebp], ecx
	mov	edx, DWORD PTR $T57207[ebp]
	mov	DWORD PTR $T57206[ebp], edx
	cmp	DWORD PTR $T57206[ebp], 0
	je	SHORT $LN16@sMesh
	push	1
	mov	eax, DWORD PTR $T57206[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T57206[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN17@sMesh
$LN16@sMesh:
	mov	DWORD PTR tv90[ebp], 0
$LN17@sMesh:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+600], 0
$LN13@sMesh:

; 112  : 
; 113  : 	// delete all previously created memory
; 114  : 	SAFE_DELETE_ARRAY ( pOriginalVertexData );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN11@sMesh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T57210[ebp], ecx
	mov	edx, DWORD PTR $T57210[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN11@sMesh:

; 115  : 	SAFE_DELETE_ARRAY ( pVertexData );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN10@sMesh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T57211[ebp], ecx
	mov	edx, DWORD PTR $T57211[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
$LN10@sMesh:

; 116  : 	SAFE_DELETE_ARRAY ( pIndices );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN9@sMesh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR $T57212[ebp], ecx
	mov	edx, DWORD PTR $T57212[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN9@sMesh:

; 117  : 	SAFE_DELETE_ARRAY ( pBones );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+872], 0
	je	SHORT $LN8@sMesh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+872]
	mov	DWORD PTR $T57214[ebp], ecx
	mov	edx, DWORD PTR $T57214[ebp]
	mov	DWORD PTR $T57213[ebp], edx
	cmp	DWORD PTR $T57213[ebp], 0
	je	SHORT $LN18@sMesh
	push	3
	mov	ecx, DWORD PTR $T57213[ebp]
	call	??_EsBone@@QAEPAXI@Z
	mov	DWORD PTR tv194[ebp], eax
	jmp	SHORT $LN19@sMesh
$LN18@sMesh:
	mov	DWORD PTR tv194[ebp], 0
$LN19@sMesh:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+872], 0
$LN8@sMesh:

; 118  : 	SAFE_DELETE_ARRAY ( pFrameRef );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+880], 0
	je	SHORT $LN7@sMesh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+880]
	mov	DWORD PTR $T57217[ebp], ecx
	mov	edx, DWORD PTR $T57217[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+880], 0
$LN7@sMesh:

; 119  : 	SAFE_DELETE_ARRAY ( pFrameMatrices );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+884], 0
	je	SHORT $LN6@sMesh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+884]
	mov	DWORD PTR $T57218[ebp], ecx
	mov	edx, DWORD PTR $T57218[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+884], 0
$LN6@sMesh:

; 120  : 	SAFE_DELETE_ARRAY ( pMaterialBank );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+912], 0
	je	SHORT $LN5@sMesh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+912]
	mov	DWORD PTR $T57219[ebp], ecx
	mov	edx, DWORD PTR $T57219[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+912], 0
$LN5@sMesh:

; 121  : 	SAFE_DELETE_ARRAY ( pTextures );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+904], 0
	je	SHORT $LN4@sMesh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+904]
	mov	DWORD PTR $T57221[ebp], ecx
	mov	edx, DWORD PTR $T57221[ebp]
	mov	DWORD PTR $T57220[ebp], edx
	cmp	DWORD PTR $T57220[ebp], 0
	je	SHORT $LN20@sMesh
	push	3
	mov	ecx, DWORD PTR $T57220[ebp]
	call	??_EsTexture@@QAEPAXI@Z
	mov	DWORD PTR tv266[ebp], eax
	jmp	SHORT $LN21@sMesh
$LN20@sMesh:
	mov	DWORD PTR tv266[ebp], 0
$LN21@sMesh:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+904], 0
$LN4@sMesh:

; 122  : 
; 123  : 	SAFE_DELETE_ARRAY ( pMultiMaterial );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+908], 0
	je	SHORT $LN3@sMesh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+908]
	mov	DWORD PTR $T57224[ebp], ecx
	mov	edx, DWORD PTR $T57224[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+908], 0
$LN3@sMesh:

; 124  : 	SAFE_DELETE_ARRAY ( pDrawBuffer );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN2@sMesh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR $T57225[ebp], ecx
	mov	edx, DWORD PTR $T57225[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
$LN2@sMesh:

; 125  : 	SAFE_DELETE_ARRAY ( pAttributeWorkData );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+984], 0
	je	SHORT $LN14@sMesh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+984]
	mov	DWORD PTR $T57226[ebp], ecx
	mov	edx, DWORD PTR $T57226[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+984], 0
$LN14@sMesh:

; 126  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1152				; 00000480H
	call	??1sCollisionData@@QAE@XZ		; sCollisionData::~sCollisionData
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sMesh@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1152				; 00000480H
	jmp	??1sCollisionData@@QAE@XZ		; sCollisionData::~sCollisionData
__ehhandler$??1sMesh@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-148]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sMesh@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sMesh@@QAE@XZ ENDP					; sMesh::~sMesh
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /ZI
;	COMDAT ??_EsBone@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EsBone@@QAEPAXI@Z PROC				; sBone::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1sBone@@QAE@XZ			; sBone::~sBone
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	344					; 00000158H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1sBone@@QAE@XZ			; sBone::~sBone
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EsBone@@QAEPAXI@Z ENDP				; sBone::`vector deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_EsTexture@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_EsTexture@@QAEPAXI@Z PROC				; sTexture::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1sTexture@@QAE@XZ		; sTexture::~sTexture
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	328					; 00000148H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1sTexture@@QAE@XZ			; sTexture::~sTexture
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_EsTexture@@QAEPAXI@Z ENDP				; sTexture::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	??0sFramePosition@@QAE@XZ			; sFramePosition::sFramePosition
PUBLIC	??0sFrameTransforms@@QAE@XZ			; sFrameTransforms::sFrameTransforms
PUBLIC	??0sFrame@@QAE@XZ				; sFrame::sFrame
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sFrame@@QAE@XZ
_TEXT	SEGMENT
$T57245 = -80						; size = 12
_this$ = -4						; size = 4
??0sFrame@@QAE@XZ PROC					; sFrame::sFrame, COMDAT
; _this$ = ecx

; 129  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??0sFrameTransforms@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 608				; 00000260H
	call	??0sFramePosition@@QAE@XZ

; 130  : 	// clear out structure
; 131  : 	memset ( this, 0, sizeof ( sFrame ) );

	push	804					; 00000324H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 132  : 
; 133  : 	// create identity matrices
; 134  : 	D3DXMatrixIdentity ( &matOriginal );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 272				; 00000110H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 135  : 	D3DXMatrixIdentity ( &matUserMatrix );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 608				; 00000260H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 136  : 	D3DXMatrixIdentity ( &matCombined );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 400				; 00000190H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 137  : 	D3DXMatrixIdentity ( &matTransformed );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 336				; 00000150H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 138  : 	D3DXMatrixIdentity ( &matAbsoluteWorld );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 464				; 000001d0H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 139  : 
; 140  : 	// setup vectors and orientation data
; 141  : 	vecScale = D3DXVECTOR3 ( 1.0f, 1.0f, 1.f);

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T57245[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 684				; 000002acH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 142  : 
; 143  : 	// mike 170505 - new matrix for completely custom, physics needs this for implementing it's own matrix
; 144  : 	bOverride = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+528], 0

; 145  : 	D3DXMatrixIdentity ( &matOverride );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 532				; 00000214H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 146  : 
; 147  : 	// 201007 - each limb is not excluded by default
; 148  : 	bExcluded = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+784], 0

; 149  : 
; 150  : 	// 211008 - u71 - clear state bits
; 151  : 	dwStatusBits = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+788], 0

; 152  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sFrame@@QAE@XZ ENDP					; sFrame::sFrame
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft directx sdk (august 2007)\include\d3dx9math.inl
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 303  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 304  :     x = fx;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fx$[ebp]
	fstp	DWORD PTR [eax]

; 305  :     y = fy;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fy$[ebp]
	fstp	DWORD PTR [eax+4]

; 306  :     z = fz;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fz$[ebp]
	fstp	DWORD PTR [eax+8]

; 307  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1988 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 1989 : #ifdef D3DX_DEBUG
; 1990 :     if(!pOut)
; 1991 :         return NULL;
; 1992 : #endif
; 1993 : 
; 1994 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1995 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1996 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1997 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx+48]
	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx+4]

; 1998 : 
; 1999 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

	mov	eax, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [eax]

; 2000 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 2001 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0sFrameTransforms@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sFrameTransforms@@QAE@XZ PROC			; sFrameTransforms::sFrameTransforms, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sFrameTransforms@@QAE@XZ ENDP			; sFrameTransforms::sFrameTransforms
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0sFramePosition@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sFramePosition@@QAE@XZ PROC				; sFramePosition::sFramePosition, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sFramePosition@@QAE@XZ ENDP				; sFramePosition::sFramePosition
_TEXT	ENDS
PUBLIC	??_GsFrame@@QAEPAXI@Z				; sFrame::`scalar deleting destructor'
PUBLIC	??_GsMesh@@QAEPAXI@Z				; sMesh::`scalar deleting destructor'
PUBLIC	??1sFrame@@QAE@XZ				; sFrame::~sFrame
; Function compile flags: /Odtp /ZI
; File c:\program files\the game creators\dark gdk\include\dbo format\dbodata.cpp
;	COMDAT ??1sFrame@@QAE@XZ
_TEXT	SEGMENT
tv192 = -136						; size = 4
tv171 = -136						; size = 4
tv153 = -136						; size = 4
tv141 = -136						; size = 4
tv130 = -136						; size = 4
tv89 = -136						; size = 4
tv80 = -136						; size = 4
tv71 = -136						; size = 4
$T57256 = -132						; size = 4
$T57257 = -128						; size = 4
$T57260 = -124						; size = 4
$T57261 = -120						; size = 4
$T57264 = -116						; size = 4
$T57265 = -112						; size = 4
$T57268 = -108						; size = 4
$T57269 = -104						; size = 4
$T57272 = -100						; size = 4
$T57273 = -96						; size = 4
$T57276 = -92						; size = 4
$T57277 = -88						; size = 4
$T57280 = -84						; size = 4
$T57281 = -80						; size = 4
$T57284 = -76						; size = 4
$T57285 = -72						; size = 4
_this$ = -4						; size = 4
??1sFrame@@QAE@XZ PROC					; sFrame::~sFrame, COMDAT
; _this$ = ecx

; 155  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 	// free all mesh data
; 157  : 	SAFE_DELETE ( pMesh );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+760], 0
	je	SHORT $LN8@sFrame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+760]
	mov	DWORD PTR $T57257[ebp], ecx
	mov	edx, DWORD PTR $T57257[ebp]
	mov	DWORD PTR $T57256[ebp], edx
	cmp	DWORD PTR $T57256[ebp], 0
	je	SHORT $LN11@sFrame
	push	1
	mov	ecx, DWORD PTR $T57256[ebp]
	call	??_GsMesh@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN12@sFrame
$LN11@sFrame:
	mov	DWORD PTR tv71[ebp], 0
$LN12@sFrame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+760], 0
$LN8@sFrame:

; 158  : 	SAFE_DELETE ( pShadowMesh );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+764], 0
	je	SHORT $LN7@sFrame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+764]
	mov	DWORD PTR $T57261[ebp], ecx
	mov	edx, DWORD PTR $T57261[ebp]
	mov	DWORD PTR $T57260[ebp], edx
	cmp	DWORD PTR $T57260[ebp], 0
	je	SHORT $LN13@sFrame
	push	1
	mov	ecx, DWORD PTR $T57260[ebp]
	call	??_GsMesh@@QAEPAXI@Z
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN14@sFrame
$LN13@sFrame:
	mov	DWORD PTR tv80[ebp], 0
$LN14@sFrame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+764], 0
$LN7@sFrame:

; 159  : 	SAFE_DELETE ( pBoundBox );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+768], 0
	je	SHORT $LN6@sFrame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+768]
	mov	DWORD PTR $T57265[ebp], ecx
	mov	edx, DWORD PTR $T57265[ebp]
	mov	DWORD PTR $T57264[ebp], edx
	cmp	DWORD PTR $T57264[ebp], 0
	je	SHORT $LN15@sFrame
	push	1
	mov	ecx, DWORD PTR $T57264[ebp]
	call	??_GsMesh@@QAEPAXI@Z
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN16@sFrame
$LN15@sFrame:
	mov	DWORD PTR tv89[ebp], 0
$LN16@sFrame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+768], 0
$LN6@sFrame:

; 160  : 	SAFE_DELETE ( pBoundSphere );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+772], 0
	je	SHORT $LN5@sFrame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+772]
	mov	DWORD PTR $T57269[ebp], ecx
	mov	edx, DWORD PTR $T57269[ebp]
	mov	DWORD PTR $T57268[ebp], edx
	cmp	DWORD PTR $T57268[ebp], 0
	je	SHORT $LN17@sFrame
	push	1
	mov	ecx, DWORD PTR $T57268[ebp]
	call	??_GsMesh@@QAEPAXI@Z
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN18@sFrame
$LN17@sFrame:
	mov	DWORD PTR tv130[ebp], 0
$LN18@sFrame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+772], 0
$LN5@sFrame:

; 161  : 	SAFE_DELETE ( pLOD [ 0 ] );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+776], 0
	je	SHORT $LN4@sFrame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+776]
	mov	DWORD PTR $T57273[ebp], ecx
	mov	edx, DWORD PTR $T57273[ebp]
	mov	DWORD PTR $T57272[ebp], edx
	cmp	DWORD PTR $T57272[ebp], 0
	je	SHORT $LN19@sFrame
	push	1
	mov	ecx, DWORD PTR $T57272[ebp]
	call	??_GsMesh@@QAEPAXI@Z
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN20@sFrame
$LN19@sFrame:
	mov	DWORD PTR tv141[ebp], 0
$LN20@sFrame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+776], 0
$LN4@sFrame:

; 162  : 	SAFE_DELETE ( pLOD [ 1 ] );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+780], 0
	je	SHORT $LN3@sFrame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+780]
	mov	DWORD PTR $T57277[ebp], ecx
	mov	edx, DWORD PTR $T57277[ebp]
	mov	DWORD PTR $T57276[ebp], edx
	cmp	DWORD PTR $T57276[ebp], 0
	je	SHORT $LN21@sFrame
	push	1
	mov	ecx, DWORD PTR $T57276[ebp]
	call	??_GsMesh@@QAEPAXI@Z
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN22@sFrame
$LN21@sFrame:
	mov	DWORD PTR tv153[ebp], 0
$LN22@sFrame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+780], 0
$LN3@sFrame:

; 163  : 
; 164  : 	// delete all pointers which will in turn delete all sub frames
; 165  : 	SAFE_DELETE ( pChild );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN2@sFrame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	DWORD PTR $T57281[ebp], ecx
	mov	edx, DWORD PTR $T57281[ebp]
	mov	DWORD PTR $T57280[ebp], edx
	cmp	DWORD PTR $T57280[ebp], 0
	je	SHORT $LN23@sFrame
	push	1
	mov	ecx, DWORD PTR $T57280[ebp]
	call	??_GsFrame@@QAEPAXI@Z
	mov	DWORD PTR tv171[ebp], eax
	jmp	SHORT $LN24@sFrame
$LN23@sFrame:
	mov	DWORD PTR tv171[ebp], 0
$LN24@sFrame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], 0
$LN2@sFrame:

; 166  : 	SAFE_DELETE ( pSibling );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+268], 0
	je	SHORT $LN9@sFrame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	mov	DWORD PTR $T57285[ebp], ecx
	mov	edx, DWORD PTR $T57285[ebp]
	mov	DWORD PTR $T57284[ebp], edx
	cmp	DWORD PTR $T57284[ebp], 0
	je	SHORT $LN25@sFrame
	push	1
	mov	ecx, DWORD PTR $T57284[ebp]
	call	??_GsFrame@@QAEPAXI@Z
	mov	DWORD PTR tv192[ebp], eax
	jmp	SHORT $LN26@sFrame
$LN25@sFrame:
	mov	DWORD PTR tv192[ebp], 0
$LN26@sFrame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
$LN9@sFrame:

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1sFrame@@QAE@XZ ENDP					; sFrame::~sFrame
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_GsMesh@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GsMesh@@QAEPAXI@Z PROC				; sMesh::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1sMesh@@QAE@XZ			; sMesh::~sMesh
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GsMesh@@QAEPAXI@Z ENDP				; sMesh::`scalar deleting destructor'
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_GsFrame@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GsFrame@@QAEPAXI@Z PROC				; sFrame::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1sFrame@@QAE@XZ			; sFrame::~sFrame
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GsFrame@@QAEPAXI@Z ENDP				; sFrame::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0sAnimation@@QAE@XZ				; sAnimation::sAnimation
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sAnimation@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sAnimation@@QAE@XZ PROC				; sAnimation::sAnimation, COMDAT
; _this$ = ecx

; 170  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 	memset ( szName, 0, sizeof ( szName ) );

	push	256					; 00000100H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 172  : 
; 173  : 	pFrame            = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+256], 0

; 174  : 	bLoop             = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+260], 0

; 175  : 	bLinear           = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], 1

; 176  : 	pPositionKeys     = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+284], 0

; 177  : 	dwNumPositionKeys = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0

; 178  : 	pRotateKeys       = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+288], 0

; 179  : 	dwNumRotateKeys   = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+272], 0

; 180  : 	pScaleKeys        = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0

; 181  : 	dwNumScaleKeys    = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+276], 0

; 182  : 	pMatrixKeys       = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+296], 0

; 183  : 	dwNumMatrixKeys   = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0

; 184  : 	pNext             = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+344], 0

; 185  : 
; 186  : 	dwLastPositionKey		= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+300], 0

; 187  : 	dwLastRotateKey			= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0

; 188  : 	dwLastScaleKey			= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+308], 0

; 189  : 	dwLastMatrixKey			= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+312], 0

; 190  : 	
; 191  : 	bBoneType				= 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+316], 1

; 192  : 	piBoneOffsetList		= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+320], 0

; 193  : 	iBoneOffsetListCount	= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+324], 0

; 194  : 	ppBoneFrames			= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+328], 0

; 195  : 	iBoneFrameA				= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+332], 0

; 196  : 	iBoneFrameB				= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+336], 0

; 197  : 
; 198  : 	pSharedReadAnim			= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+340], 0

; 199  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sAnimation@@QAE@XZ ENDP				; sAnimation::sAnimation
_TEXT	ENDS
PUBLIC	??_GsAnimation@@QAEPAXI@Z			; sAnimation::`scalar deleting destructor'
PUBLIC	??1sAnimation@@QAE@XZ				; sAnimation::~sAnimation
; Function compile flags: /Odtp /ZI
;	COMDAT ??1sAnimation@@QAE@XZ
_TEXT	SEGMENT
tv241 = -112						; size = 4
$T57296 = -108						; size = 4
$T57297 = -104						; size = 4
$T57298 = -100						; size = 4
$T57299 = -96						; size = 4
$T57300 = -92						; size = 4
$T57301 = -88						; size = 4
$T57302 = -84						; size = 4
$T57303 = -80						; size = 4
$T57304 = -76						; size = 4
_iFrame$56910 = -8					; size = 4
_this$ = -4						; size = 4
??1sAnimation@@QAE@XZ PROC				; sAnimation::~sAnimation, COMDAT
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 	SAFE_DELETE_ARRAY ( piBoneOffsetList );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+320], 0
	je	SHORT $LN12@sAnimation
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+320]
	mov	DWORD PTR $T57296[ebp], ecx
	mov	edx, DWORD PTR $T57296[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+320], 0
$LN12@sAnimation:

; 204  : 
; 205  : 	if ( ppBoneFrames )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+328], 0
	je	SHORT $LN11@sAnimation

; 206  : 	{
; 207  : 		for ( int iFrame = 0; iFrame < iBoneFrameA; iFrame++ )

	mov	DWORD PTR _iFrame$56910[ebp], 0
	jmp	SHORT $LN10@sAnimation
$LN9@sAnimation:
	mov	eax, DWORD PTR _iFrame$56910[ebp]
	add	eax, 1
	mov	DWORD PTR _iFrame$56910[ebp], eax
$LN10@sAnimation:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iFrame$56910[ebp]
	cmp	ecx, DWORD PTR [eax+332]
	jge	SHORT $LN11@sAnimation

; 208  : 		{
; 209  : 			SAFE_DELETE_ARRAY ( ppBoneFrames [ iFrame ] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+328]
	mov	edx, DWORD PTR _iFrame$56910[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	je	SHORT $LN7@sAnimation
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+328]
	mov	edx, DWORD PTR _iFrame$56910[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T57297[ebp], eax
	mov	ecx, DWORD PTR $T57297[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+328]
	mov	edx, DWORD PTR _iFrame$56910[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
$LN7@sAnimation:

; 210  : 		}

	jmp	SHORT $LN9@sAnimation
$LN11@sAnimation:

; 211  : 	}
; 212  : 
; 213  : 	SAFE_DELETE_ARRAY ( ppBoneFrames );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+328], 0
	je	SHORT $LN6@sAnimation
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+328]
	mov	DWORD PTR $T57298[ebp], ecx
	mov	edx, DWORD PTR $T57298[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+328], 0
$LN6@sAnimation:

; 214  : 
; 215  : 	SAFE_DELETE ( pPositionKeys );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+284], 0
	je	SHORT $LN5@sAnimation
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	mov	DWORD PTR $T57299[ebp], ecx
	mov	edx, DWORD PTR $T57299[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+284], 0
$LN5@sAnimation:

; 216  : 	SAFE_DELETE ( pRotateKeys );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+288], 0
	je	SHORT $LN4@sAnimation
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	mov	DWORD PTR $T57300[ebp], ecx
	mov	edx, DWORD PTR $T57300[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+288], 0
$LN4@sAnimation:

; 217  : 	SAFE_DELETE ( pScaleKeys );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+292], 0
	je	SHORT $LN3@sAnimation
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	DWORD PTR $T57301[ebp], ecx
	mov	edx, DWORD PTR $T57301[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0
$LN3@sAnimation:

; 218  : 	SAFE_DELETE ( pMatrixKeys );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+296], 0
	je	SHORT $LN2@sAnimation
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	DWORD PTR $T57302[ebp], ecx
	mov	edx, DWORD PTR $T57302[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+296], 0
$LN2@sAnimation:

; 219  : 	SAFE_DELETE ( pNext );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+344], 0
	je	SHORT $LN13@sAnimation
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+344]
	mov	DWORD PTR $T57304[ebp], ecx
	mov	edx, DWORD PTR $T57304[ebp]
	mov	DWORD PTR $T57303[ebp], edx
	cmp	DWORD PTR $T57303[ebp], 0
	je	SHORT $LN15@sAnimation
	push	1
	mov	ecx, DWORD PTR $T57303[ebp]
	call	??_GsAnimation@@QAEPAXI@Z
	mov	DWORD PTR tv241[ebp], eax
	jmp	SHORT $LN16@sAnimation
$LN15@sAnimation:
	mov	DWORD PTR tv241[ebp], 0
$LN16@sAnimation:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+344], 0
$LN13@sAnimation:

; 220  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1sAnimation@@QAE@XZ ENDP				; sAnimation::~sAnimation
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_GsAnimation@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GsAnimation@@QAEPAXI@Z PROC				; sAnimation::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1sAnimation@@QAE@XZ			; sAnimation::~sAnimation
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GsAnimation@@QAEPAXI@Z ENDP				; sAnimation::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0sAnimationSet@@QAE@XZ			; sAnimationSet::sAnimationSet
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sAnimationSet@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sAnimationSet@@QAE@XZ PROC				; sAnimationSet::sAnimationSet, COMDAT
; _this$ = ecx

; 223  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 224  : 	memset ( this, 0, sizeof ( sAnimationSet ) );

	push	296					; 00000128H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 225  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sAnimationSet@@QAE@XZ ENDP				; sAnimationSet::sAnimationSet
_TEXT	ENDS
PUBLIC	??_GsAnimationSet@@QAEPAXI@Z			; sAnimationSet::`scalar deleting destructor'
PUBLIC	??1sAnimationSet@@QAE@XZ			; sAnimationSet::~sAnimationSet
; Function compile flags: /Odtp /ZI
;	COMDAT ??1sAnimationSet@@QAE@XZ
_TEXT	SEGMENT
tv132 = -104						; size = 4
tv91 = -104						; size = 4
$T57313 = -100						; size = 4
$T57314 = -96						; size = 4
$T57315 = -92						; size = 4
$T57316 = -88						; size = 4
$T57317 = -84						; size = 4
$T57318 = -80						; size = 4
$T57321 = -76						; size = 4
$T57322 = -72						; size = 4
_this$ = -4						; size = 4
??1sAnimationSet@@QAE@XZ PROC				; sAnimationSet::~sAnimationSet, COMDAT
; _this$ = ecx

; 228  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 229  : 	SAFE_DELETE		  ( pvecBoundMin );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+268], 0
	je	SHORT $LN6@sAnimation@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	mov	DWORD PTR $T57313[ebp], ecx
	mov	edx, DWORD PTR $T57313[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
$LN6@sAnimation@2:

; 230  : 	SAFE_DELETE		  ( pvecBoundMax );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+272], 0
	je	SHORT $LN5@sAnimation@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	mov	DWORD PTR $T57314[ebp], ecx
	mov	edx, DWORD PTR $T57314[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+272], 0
$LN5@sAnimation@2:

; 231  : 	SAFE_DELETE		  ( pvecBoundCenter );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+276], 0
	je	SHORT $LN4@sAnimation@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	mov	DWORD PTR $T57315[ebp], ecx
	mov	edx, DWORD PTR $T57315[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+276], 0
$LN4@sAnimation@2:

; 232  : 	SAFE_DELETE		  ( pfBoundRadius );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+280], 0
	je	SHORT $LN3@sAnimation@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	mov	DWORD PTR $T57316[ebp], ecx
	mov	edx, DWORD PTR $T57316[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
$LN3@sAnimation@2:

; 233  : 	SAFE_DELETE       ( pAnimation );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+256], 0
	je	SHORT $LN2@sAnimation@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+256]
	mov	DWORD PTR $T57318[ebp], ecx
	mov	edx, DWORD PTR $T57318[ebp]
	mov	DWORD PTR $T57317[ebp], edx
	cmp	DWORD PTR $T57317[ebp], 0
	je	SHORT $LN9@sAnimation@2
	push	1
	mov	ecx, DWORD PTR $T57317[ebp]
	call	??_GsAnimation@@QAEPAXI@Z
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN10@sAnimation@2
$LN9@sAnimation@2:
	mov	DWORD PTR tv91[ebp], 0
$LN10@sAnimation@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+256], 0
$LN2@sAnimation@2:

; 234  : 	SAFE_DELETE       ( pNext );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN7@sAnimation@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	DWORD PTR $T57322[ebp], ecx
	mov	edx, DWORD PTR $T57322[ebp]
	mov	DWORD PTR $T57321[ebp], edx
	cmp	DWORD PTR $T57321[ebp], 0
	je	SHORT $LN11@sAnimation@2
	push	1
	mov	ecx, DWORD PTR $T57321[ebp]
	call	??_GsAnimationSet@@QAEPAXI@Z
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN12@sAnimation@2
$LN11@sAnimation@2:
	mov	DWORD PTR tv132[ebp], 0
$LN12@sAnimation@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], 0
$LN7@sAnimation@2:

; 235  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1sAnimationSet@@QAE@XZ ENDP				; sAnimationSet::~sAnimationSet
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_GsAnimationSet@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GsAnimationSet@@QAEPAXI@Z PROC			; sAnimationSet::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1sAnimationSet@@QAE@XZ		; sAnimationSet::~sAnimationSet
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GsAnimationSet@@QAEPAXI@Z ENDP			; sAnimationSet::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0sPositionMatrices@@QAE@XZ			; sPositionMatrices::sPositionMatrices
PUBLIC	??0sPositionVectors@@QAE@XZ			; sPositionVectors::sPositionVectors
PUBLIC	??0sPositionData@@QAE@XZ			; sPositionData::sPositionData
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sPositionData@@QAE@XZ
_TEXT	SEGMENT
$T57329 = -140						; size = 12
$T57330 = -128						; size = 12
$T57331 = -116						; size = 12
$T57332 = -104						; size = 12
$T57333 = -92						; size = 12
$T57334 = -80						; size = 12
_this$ = -4						; size = 4
??0sPositionData@@QAE@XZ PROC				; sPositionData::sPositionData, COMDAT
; _this$ = ecx

; 238  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0sPositionVectors@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	??0sPositionMatrices@@QAE@XZ

; 239  : 	memset ( this, 0, sizeof ( sPositionData ) );

	push	1028					; 00000404H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 240  : 
; 241  : 	vecPosition	= D3DXVECTOR3 ( 0, 0, 0 );		// default settings

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T57329[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 242  : 	vecRotate	= D3DXVECTOR3 ( 0, 0, 0 );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T57330[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 243  : 	vecScale    = D3DXVECTOR3 ( 1, 1, 1 );

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T57331[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 244  : 
; 245  : 	vecLook     = D3DXVECTOR3 ( 0, 0, 1 );		// look vector

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T57332[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 246  : 	vecUp       = D3DXVECTOR3 ( 0, 1, 0 );		// up vector

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T57333[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 247  : 	vecRight    = D3DXVECTOR3 ( 1, 0, 0 );		// right vector

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T57334[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 248  : 
; 249  : 	bFreeFlightRotation		= false;			// default euler rotation

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+160], 0

; 250  : 	bApplyPivot				= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+161], 0

; 251  : 	bGlued					= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+162], 0

; 252  : 	dwRotationOrder			= ROTORDER_XYZ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], 0

; 253  : 	D3DXMatrixIdentity		( &matFreeFlightRotate );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 708				; 000002c4H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 254  : 
; 255  : 	// Required for immediate limb data extraction (uses this matrix)
; 256  : 	D3DXMatrixIdentity ( &matWorld );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 644				; 00000284H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 257  : 
; 258  : 	// used for when world matrix is calculated manually
; 259  : 	bCustomWorldMatrix = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+163], 0

; 260  : 	bCustomBoneMatrix = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+180], 0

; 261  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sPositionData@@QAE@XZ ENDP				; sPositionData::sPositionData
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0sPositionVectors@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sPositionVectors@@QAE@XZ PROC			; sPositionVectors::sPositionVectors, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sPositionVectors@@QAE@XZ ENDP			; sPositionVectors::sPositionVectors
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??0sPositionMatrices@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sPositionMatrices@@QAE@XZ PROC			; sPositionMatrices::sPositionMatrices, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 384				; 00000180H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 448				; 000001c0H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 512				; 00000200H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 576				; 00000240H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 640				; 00000280H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 704				; 000002c0H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 768				; 00000300H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sPositionMatrices@@QAE@XZ ENDP			; sPositionMatrices::sPositionMatrices
_TEXT	ENDS
PUBLIC	??1sPositionData@@QAE@XZ			; sPositionData::~sPositionData
; Function compile flags: /Odtp /ZI
;	COMDAT ??1sPositionData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sPositionData@@QAE@XZ PROC				; sPositionData::~sPositionData, COMDAT
; _this$ = ecx

; 264  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 265  : 
; 266  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1sPositionData@@QAE@XZ ENDP				; sPositionData::~sPositionData
_TEXT	ENDS
PUBLIC	??1sObjectDelete@@QAE@XZ			; sObjectDelete::~sObjectDelete
PUBLIC	??1sObjectData@@QAE@XZ				; sObjectData::~sObjectData
PUBLIC	??0sObjectCustom@@QAE@XZ			; sObjectCustom::sObjectCustom
PUBLIC	??0sObjectData@@QAE@XZ				; sObjectData::sObjectData
PUBLIC	??0sObject@@QAE@XZ				; sObject::sObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sObject@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sObject@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0sObject@@QAE@XZ$1
__ehfuncinfo$??0sObject@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0sObject@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0sObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0sObject@@QAE@XZ PROC					; sObject::sObject, COMDAT
; _this$ = ecx

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sObject@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0sObjectData@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1316				; 00000524H
	call	??0sObjectCustom@@QAE@XZ		; sObjectCustom::sObjectCustom

; 270  : 	pDelete					= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1304], 0

; 271  : 	iDeleteCount			= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1308], 0

; 272  : 	iDeleteID				= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1312], 0

; 273  : 	bDisableTransform		= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1186], 0

; 274  : 	fFOV					= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1188]

; 275  : 	iInsideUniverseArea		= -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1192], -1

; 276  : 
; 277  : 	pInstanceOfObject		= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1288], 0

; 278  : 	pInstanceMeshVisible	= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1292], 0

; 279  : 	bInstanceAlphaOverride	= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1296], 0

; 280  : 	dwInstanceAlphaOverride	= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1300], 0

; 281  : 
; 282  : 	pFrame					= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 283  : 	pAnimationSet			= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 284  : 	iMeshCount				= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 285  : 	iFrameCount				= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 286  : 	ppMeshList				= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 287  : 	ppFrameList				= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 288  : 
; 289  : 	bVisible				= true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1160], 1

; 290  : 	bUniverseVisible		= true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1161], 1

; 291  : 	bNoMeshesInObject		= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1162], 0

; 292  : 	bUpdateOverallBounds	= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1163], 0

; 293  : 	bUpdateOnlyCurrentFrameBounds = true;		// false 290506 - u62 - restored pre-U6 behaviour of boundbox

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1164], 1

; 294  : 
; 295  : 	bDrawBounds				= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1175], 0

; 296  : 	bCastsAShadow			= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1179], 0

; 297  : 	pShadowMesh				= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1180], 0

; 298  : 	bExcluded				= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1185], 0

; 299  : 
; 300  : 	bOverlayObject			= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1165], 0

; 301  : 	bGhostedObject			= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1166], 0

; 302  : 	bTransparentObject		= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1167], 0

; 303  : 	bNewZLayerObject		= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1169], 0

; 304  : 	bLockedObject			= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1170], 0

; 305  : 	bStencilObject			= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1171], 0

; 306  : 	bReflectiveObject		= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1172], 0

; 307  : 	bReflectiveClipping		= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1173], 0

; 308  : 	bHadLODNeedCamDistance	= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1174], 0

; 309  : 
; 310  : 	bAnimPlaying			= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1236], 0

; 311  : 	bAnimLooping			= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1237], 0

; 312  : 	bAnimUpdateOnce			= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1238], 0

; 313  : 	fAnimFrame				= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1240]

; 314  : 	fAnimSpeed				= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+1248]

; 315  : 	fAnimLoopStart			= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1252]

; 316  : 	fAnimFrameEnd			= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1256]

; 317  : 	fAnimTotalFrames		= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1260]

; 318  : 
; 319  : 	bAnimManualSlerp		= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1264], 0

; 320  : 	fAnimSlerpStartFrame	= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1268]

; 321  : 	fAnimSlerpEndFrame		= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1272]

; 322  : 	fAnimSlerpTime			= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1280]

; 323  : 	fAnimInterp				= 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+1284]

; 324  : 
; 325  : 	bStatic						= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1176], 0

; 326  : 	bUsesItsOwnBuffers			= true; // can be changed in ObjSetup (bGlobalVBIBUsageFlag)

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1177], 1

; 327  : 	bReplaceObjectFromBuffers	= false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1178], 0

; 328  : 
; 329  : 	fLODDistance[0]				= 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1196]

; 330  : 	fLODDistance[1]				= 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+1200]

; 331  : 	iUsingWhichLOD				= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1204], 0

; 332  : 
; 333  : 	dwCameraMaskBits			= 4294967295;	// lee - 211006 - u63 - for darkshader

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1220], -1

; 334  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sObject@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1sObjectData@@QAE@XZ
__unwindfunclet$??0sObject@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1304				; 00000518H
	jmp	??1sObjectDelete@@QAE@XZ		; sObjectDelete::~sObjectDelete
__ehhandler$??0sObject@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sObject@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sObject@@QAE@XZ ENDP					; sObject::sObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sObjectData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sObjectData@@QAE@XZ$0
__ehfuncinfo$??0sObjectData@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sObjectData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??0sObjectData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0sObjectData@@QAE@XZ PROC				; sObjectData::sObjectData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sObjectData@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0sCollisionData@@QAE@XZ		; sCollisionData::sCollisionData
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	??0sPositionData@@QAE@XZ		; sPositionData::sPositionData
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sObjectData@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1sCollisionData@@QAE@XZ		; sCollisionData::~sCollisionData
__ehhandler$??0sObjectData@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sObjectData@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sObjectData@@QAE@XZ ENDP				; sObjectData::sObjectData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sObjectData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sObjectData@@QAE@XZ$0
__ehfuncinfo$??1sObjectData@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sObjectData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1sObjectData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sObjectData@@QAE@XZ PROC				; sObjectData::~sObjectData, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sObjectData@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	??1sPositionData@@QAE@XZ		; sPositionData::~sPositionData
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1sCollisionData@@QAE@XZ		; sCollisionData::~sCollisionData
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sObjectData@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1sCollisionData@@QAE@XZ		; sCollisionData::~sCollisionData
__ehhandler$??1sObjectData@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sObjectData@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sObjectData@@QAE@XZ ENDP				; sObjectData::~sObjectData
PUBLIC	??1sObjectCustom@@QAE@XZ			; sObjectCustom::~sObjectCustom
PUBLIC	??1sObject@@QAE@XZ				; sObject::~sObject
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sObject@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sObject@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1sObject@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1sObject@@QAE@XZ$2
__ehfuncinfo$??1sObject@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1sObject@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??1sObject@@QAE@XZ
_TEXT	SEGMENT
tv258 = -132						; size = 4
tv201 = -132						; size = 4
tv180 = -132						; size = 4
$T57374 = -128						; size = 4
$T57375 = -124						; size = 4
$T57376 = -120						; size = 4
$T57379 = -116						; size = 4
$T57380 = -112						; size = 4
$T57383 = -108						; size = 4
$T57384 = -104						; size = 4
$T57385 = -100						; size = 4
$T57388 = -96						; size = 4
_m$57006 = -28						; size = 4
_f$56990 = -24						; size = 4
_m$56985 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sObject@@QAE@XZ PROC					; sObject::~sObject, COMDAT
; _this$ = ecx

; 337  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sObject@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 338  : 	// lee - 290306 - u6rc3 - clear rogue meshes from meshlist
; 339  : 	// for each mesh reference, clear ptr if mesh found in frame list
; 340  : 	for ( int m=0; m<(int)iMeshCount; m++ )

	mov	DWORD PTR _m$56985[ebp], 0
	jmp	SHORT $LN17@sObject
$LN16@sObject:
	mov	eax, DWORD PTR _m$56985[ebp]
	add	eax, 1
	mov	DWORD PTR _m$56985[ebp], eax
$LN17@sObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$56985[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN15@sObject

; 341  : 		for ( int f=0; f<(int)iFrameCount; f++ )

	mov	DWORD PTR _f$56990[ebp], 0
	jmp	SHORT $LN14@sObject
$LN13@sObject:
	mov	eax, DWORD PTR _f$56990[ebp]
	add	eax, 1
	mov	DWORD PTR _f$56990[ebp], eax
$LN14@sObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _f$56990[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN12@sObject

; 342  : 			if ( ppFrameList [ f ]->pMesh==ppMeshList [ m ] )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _f$56990[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _m$56985[ebp]
	mov	eax, DWORD PTR [eax+760]
	cmp	eax, DWORD PTR [edx+ecx*4]
	jne	SHORT $LN11@sObject

; 343  : 				ppMeshList [ m ] = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _m$56985[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
$LN11@sObject:

; 344  : 	
; 345  : 	// delete any previously allocate memory
; 346  : 	SAFE_DELETE		  ( pInstanceMeshVisible );

	jmp	SHORT $LN13@sObject
$LN12@sObject:
	jmp	SHORT $LN16@sObject
$LN15@sObject:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1292], 0
	je	SHORT $LN10@sObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1292]
	mov	DWORD PTR $T57374[ebp], ecx
	mov	edx, DWORD PTR $T57374[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1292], 0
$LN10@sObject:

; 347  : 	SAFE_DELETE       ( pFrame );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN9@sObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T57376[ebp], ecx
	mov	edx, DWORD PTR $T57376[ebp]
	mov	DWORD PTR $T57375[ebp], edx
	cmp	DWORD PTR $T57375[ebp], 0
	je	SHORT $LN20@sObject
	push	1
	mov	ecx, DWORD PTR $T57375[ebp]
	call	??_GsFrame@@QAEPAXI@Z
	mov	DWORD PTR tv180[ebp], eax
	jmp	SHORT $LN21@sObject
$LN20@sObject:
	mov	DWORD PTR tv180[ebp], 0
$LN21@sObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN9@sObject:

; 348  : 	SAFE_DELETE       ( pAnimationSet );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN8@sObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T57380[ebp], ecx
	mov	edx, DWORD PTR $T57380[ebp]
	mov	DWORD PTR $T57379[ebp], edx
	cmp	DWORD PTR $T57379[ebp], 0
	je	SHORT $LN22@sObject
	push	1
	mov	ecx, DWORD PTR $T57379[ebp]
	call	??_GsAnimationSet@@QAEPAXI@Z
	mov	DWORD PTR tv201[ebp], eax
	jmp	SHORT $LN23@sObject
$LN22@sObject:
	mov	DWORD PTR tv201[ebp], 0
$LN23@sObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
$LN8@sObject:

; 349  : 	SAFE_DELETE       ( ppFrameList );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN7@sObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T57383[ebp], ecx
	mov	edx, DWORD PTR $T57383[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN7@sObject:

; 350  : 
; 351  : 	// lee - 290306 - u6rc3 - command like MAKE OBJECT FROM LIMB can store meshes without frame links
; 352  : 	for ( int m=0; m<(int)iMeshCount; m++ )

	mov	DWORD PTR _m$57006[ebp], 0
	jmp	SHORT $LN6@sObject
$LN5@sObject:
	mov	eax, DWORD PTR _m$57006[ebp]
	add	eax, 1
	mov	DWORD PTR _m$57006[ebp], eax
$LN6@sObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$57006[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN4@sObject

; 353  : 		if ( ppMeshList [ m ] )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _m$57006[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	je	SHORT $LN3@sObject

; 354  : 			SAFE_DELETE ( ppMeshList [ m ] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _m$57006[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	je	SHORT $LN3@sObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _m$57006[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T57385[ebp], eax
	mov	ecx, DWORD PTR $T57385[ebp]
	mov	DWORD PTR $T57384[ebp], ecx
	cmp	DWORD PTR $T57384[ebp], 0
	je	SHORT $LN24@sObject
	push	1
	mov	ecx, DWORD PTR $T57384[ebp]
	call	??_GsMesh@@QAEPAXI@Z
	mov	DWORD PTR tv258[ebp], eax
	jmp	SHORT $LN25@sObject
$LN24@sObject:
	mov	DWORD PTR tv258[ebp], 0
$LN25@sObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _m$57006[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
$LN3@sObject:
	jmp	SHORT $LN5@sObject
$LN4@sObject:

; 355  : 
; 356  : 	// finally clear mesh reference list
; 357  : 	SAFE_DELETE       ( ppMeshList );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN18@sObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T57388[ebp], ecx
	mov	edx, DWORD PTR $T57388[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN18@sObject:

; 358  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1316				; 00000524H
	call	??1sObjectCustom@@QAE@XZ		; sObjectCustom::~sObjectCustom
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1304				; 00000518H
	call	??1sObjectDelete@@QAE@XZ		; sObjectDelete::~sObjectDelete
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1sObjectData@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sObject@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1sObjectData@@QAE@XZ
__unwindfunclet$??1sObject@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1304				; 00000518H
	jmp	??1sObjectDelete@@QAE@XZ		; sObjectDelete::~sObjectDelete
__unwindfunclet$??1sObject@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1316				; 00000524H
	jmp	??1sObjectCustom@@QAE@XZ		; sObjectCustom::~sObjectCustom
__ehhandler$??1sObject@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-136]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sObject@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sObject@@QAE@XZ ENDP					; sObject::~sObject
; Function compile flags: /Odtp /ZI
;	COMDAT ??0sObjectCustom@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sObjectCustom@@QAE@XZ PROC				; sObjectCustom::sObjectCustom, COMDAT
; _this$ = ecx

; 361  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	// 280305 - used when objects want to store custom data for example when
; 363  : 	//        - they save and want to save out this data
; 364  : 
; 365  : 	dwCustomSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 366  : 	pCustomData  = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 367  : 
; 368  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0sObjectCustom@@QAE@XZ ENDP				; sObjectCustom::sObjectCustom
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1sObjectCustom@@QAE@XZ
_TEXT	SEGMENT
$T57402 = -72						; size = 4
_this$ = -4						; size = 4
??1sObjectCustom@@QAE@XZ PROC				; sObjectCustom::~sObjectCustom, COMDAT
; _this$ = ecx

; 372  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 373  : 	SAFE_DELETE_ARRAY ( pCustomData );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@sObjectCus
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T57402[ebp], ecx
	mov	edx, DWORD PTR $T57402[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN2@sObjectCus:

; 374  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1sObjectCustom@@QAE@XZ ENDP				; sObjectCustom::~sObjectCustom
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??1sObjectDelete@@QAE@XZ
_TEXT	SEGMENT
$T57405 = -72						; size = 4
_this$ = -4						; size = 4
??1sObjectDelete@@QAE@XZ PROC				; sObjectDelete::~sObjectDelete, COMDAT
; _this$ = ecx

; 378  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 379  : 	SAFE_DELETE_ARRAY ( pDelete );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@sObjectDel
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T57405[ebp], ecx
	mov	edx, DWORD PTR $T57405[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@sObjectDel:

; 380  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1sObjectDelete@@QAE@XZ ENDP				; sObjectDelete::~sObjectDelete
_TEXT	ENDS
END
