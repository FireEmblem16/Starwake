; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\Users\FireEmblem16\Documents\Visual Studio 2008\Projects\Chronicles\Chronicles\Source\Classes.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	__real@00000000
PUBLIC	??0Vector3@@QAE@XZ				; Vector3::Vector3
EXTRN	__fltused:DWORD
;	COMDAT __real@00000000
; File c:\users\fireemblem16\documents\visual studio 2008\projects\chronicles\chronicles\source\classes.cpp
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0Vector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Vector3@@QAE@XZ PROC					; Vector3::Vector3, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 23   : 	this->X=0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax]

; 24   : 	this->Y=0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+4]

; 25   : 	this->Z=0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]

; 26   : 
; 27   : 	return;
; 28   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@@QAE@XZ ENDP					; Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@@QAE@NNN@Z				; Vector3::Vector3
; Function compile flags: /Odtp /ZI
;	COMDAT ??0Vector3@@QAE@NNN@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 8
_Y$ = 16						; size = 8
_Z$ = 24						; size = 8
??0Vector3@@QAE@NNN@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 	this->X=X;

	fld	QWORD PTR _X$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax]

; 32   : 	this->Y=Y;

	fld	QWORD PTR _Y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 33   : 	this->Z=Z;

	fld	QWORD PTR _Z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8]

; 34   : 
; 35   : 	return;
; 36   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0Vector3@@QAE@NNN@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@@QAE@MMM@Z				; Vector3::Vector3
; Function compile flags: /Odtp /ZI
;	COMDAT ??0Vector3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
??0Vector3@@QAE@MMM@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 	this->X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _X$[ebp]
	fstp	DWORD PTR [eax]

; 40   : 	this->Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _Y$[ebp]
	fstp	DWORD PTR [eax+4]

; 41   : 	this->Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _Z$[ebp]
	fstp	DWORD PTR [eax+8]

; 42   : 
; 43   : 	return;
; 44   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@@QAE@MMM@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
PUBLIC	??0Vector3@@QAE@HHH@Z				; Vector3::Vector3
; Function compile flags: /Odtp /ZI
;	COMDAT ??0Vector3@@QAE@HHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
??0Vector3@@QAE@HHH@Z PROC				; Vector3::Vector3, COMDAT
; _this$ = ecx

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 	this->X=X;

	fild	DWORD PTR _X$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax]

; 48   : 	this->Y=Y;

	fild	DWORD PTR _Y$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 49   : 	this->Z=Z;

	fild	DWORD PTR _Z$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8]

; 50   : 
; 51   : 	return;
; 52   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0Vector3@@QAE@HHH@Z ENDP				; Vector3::Vector3
_TEXT	ENDS
PUBLIC	??1Vector3@@QAE@XZ				; Vector3::~Vector3
; Function compile flags: /Odtp /ZI
;	COMDAT ??1Vector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Vector3@@QAE@XZ PROC					; Vector3::~Vector3, COMDAT
; _this$ = ecx

; 54   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 	return;
; 56   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Vector3@@QAE@XZ ENDP					; Vector3::~Vector3
_TEXT	ENDS
PUBLIC	??8Vector3@@QAE_NV0@@Z				; Vector3::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??8Vector3@@QAE_NV0@@Z
_TEXT	SEGMENT
tv76 = -76						; size = 4
$T4534 = -69						; size = 1
_this$ = -4						; size = 4
_Vector3Two$ = 8					; size = 12
??8Vector3@@QAE_NV0@@Z PROC				; Vector3::operator==, COMDAT
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	return (X==Vector3Two.X)&&(Y==Vector3Two.Y)&&(Z==Vector3Two.Z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _Vector3Two$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR _Vector3Two$[ebp+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fld	DWORD PTR _Vector3Two$[ebp+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv76[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv76[ebp]
	mov	BYTE PTR $T4534[ebp], al
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	al, BYTE PTR $T4534[ebp]

; 60   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??8Vector3@@QAE_NV0@@Z ENDP				; Vector3::operator==
_TEXT	ENDS
PUBLIC	?GetMagnitude@Vector3@@QAEMXZ			; Vector3::GetMagnitude
PUBLIC	??8Vector3@@QAE_NN@Z				; Vector3::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??8Vector3@@QAE_NN@Z
_TEXT	SEGMENT
tv70 = -76						; size = 4
tv74 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 8
??8Vector3@@QAE_NN@Z PROC				; Vector3::operator==, COMDAT
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 	return GetMagnitude()==(float)Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fld	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@2
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator@2
$LN3@operator@2:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator@2:
	mov	al, BYTE PTR tv70[ebp]

; 64   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??8Vector3@@QAE_NN@Z ENDP				; Vector3::operator==
_TEXT	ENDS
PUBLIC	??8Vector3@@QAE_NPAN@Z				; Vector3::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??8Vector3@@QAE_NPAN@Z
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv129 = -80						; size = 4
tv90 = -76						; size = 4
tv83 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??8Vector3@@QAE_NPAN@Z PROC				; Vector3::operator==, COMDAT
; _this$ = ecx

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 	return (X==(float)Num[0])&&(Y==(float)Num[1])&&(Z==(float)Num[2]);

	mov	eax, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [eax]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@3
	mov	edx, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [edx+8]
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@3
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [ecx+16]
	fstp	DWORD PTR tv129[ebp]
	fld	DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@3
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@operator@3
$LN3@operator@3:
	mov	DWORD PTR tv80[ebp], 0
$LN4@operator@3:
	mov	al, BYTE PTR tv80[ebp]

; 68   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@@QAE_NPAN@Z ENDP				; Vector3::operator==
_TEXT	ENDS
PUBLIC	??8Vector3@@QAE_NM@Z				; Vector3::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??8Vector3@@QAE_NM@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??8Vector3@@QAE_NM@Z PROC				; Vector3::operator==, COMDAT
; _this$ = ecx

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 	return GetMagnitude()==Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fld	DWORD PTR _Num$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@4
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator@4
$LN3@operator@4:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator@4:
	mov	al, BYTE PTR tv69[ebp]

; 72   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@@QAE_NM@Z ENDP				; Vector3::operator==
_TEXT	ENDS
PUBLIC	??8Vector3@@QAE_NPAM@Z				; Vector3::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??8Vector3@@QAE_NPAM@Z
_TEXT	SEGMENT
tv77 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??8Vector3@@QAE_NPAM@Z PROC				; Vector3::operator==, COMDAT
; _this$ = ecx

; 74   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 	return (X==Num[0])&&(Y==Num[1])&&(Z==Num[2]);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@5
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@5
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@5
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator@5
$LN3@operator@5:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator@5:
	mov	al, BYTE PTR tv77[ebp]

; 76   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@@QAE_NPAM@Z ENDP				; Vector3::operator==
_TEXT	ENDS
PUBLIC	??8Vector3@@QAE_NH@Z				; Vector3::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??8Vector3@@QAE_NH@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??8Vector3@@QAE_NH@Z PROC				; Vector3::operator==, COMDAT
; _this$ = ecx

; 78   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 	return GetMagnitude()==(float)Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fild	DWORD PTR _Num$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@6
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator@6
$LN3@operator@6:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator@6:
	mov	al, BYTE PTR tv70[ebp]

; 80   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@@QAE_NH@Z ENDP				; Vector3::operator==
_TEXT	ENDS
PUBLIC	??8Vector3@@QAE_NPAH@Z				; Vector3::operator==
; Function compile flags: /Odtp /ZI
;	COMDAT ??8Vector3@@QAE_NPAH@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??8Vector3@@QAE_NPAH@Z PROC				; Vector3::operator==, COMDAT
; _this$ = ecx

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 	return (X==(float)Num[0])&&(Y==(float)Num[1])&&(Z==(float)Num[2]);

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@7
	mov	edx, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@7
	mov	ecx, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@7
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@operator@7
$LN3@operator@7:
	mov	DWORD PTR tv80[ebp], 0
$LN4@operator@7:
	mov	al, BYTE PTR tv80[ebp]

; 84   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8Vector3@@QAE_NPAH@Z ENDP				; Vector3::operator==
_TEXT	ENDS
PUBLIC	??9Vector3@@QAE_NV0@@Z				; Vector3::operator!=
; Function compile flags: /Odtp /ZI
;	COMDAT ??9Vector3@@QAE_NV0@@Z
_TEXT	SEGMENT
tv76 = -76						; size = 4
$T4564 = -69						; size = 1
_this$ = -4						; size = 4
_Vector3Two$ = 8					; size = 12
??9Vector3@@QAE_NV0@@Z PROC				; Vector3::operator!=, COMDAT
; _this$ = ecx

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 87   : 	return !((X==Vector3Two.X)&&(Y==Vector3Two.Y)&&(Z==Vector3Two.Z));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _Vector3Two$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@8
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR _Vector3Two$[ebp+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@8
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fld	DWORD PTR _Vector3Two$[ebp+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@8
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN4@operator@8
$LN3@operator@8:
	mov	DWORD PTR tv76[ebp], 1
$LN4@operator@8:
	mov	al, BYTE PTR tv76[ebp]
	mov	BYTE PTR $T4564[ebp], al
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	al, BYTE PTR $T4564[ebp]

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??9Vector3@@QAE_NV0@@Z ENDP				; Vector3::operator!=
_TEXT	ENDS
PUBLIC	??9Vector3@@QAE_NN@Z				; Vector3::operator!=
; Function compile flags: /Odtp /ZI
;	COMDAT ??9Vector3@@QAE_NN@Z
_TEXT	SEGMENT
tv70 = -76						; size = 4
tv74 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 8
??9Vector3@@QAE_NN@Z PROC				; Vector3::operator!=, COMDAT
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 	return GetMagnitude()!=(float)Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fld	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@operator@9
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator@9
$LN3@operator@9:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator@9:
	mov	al, BYTE PTR tv70[ebp]

; 92   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??9Vector3@@QAE_NN@Z ENDP				; Vector3::operator!=
_TEXT	ENDS
PUBLIC	??9Vector3@@QAE_NPAN@Z				; Vector3::operator!=
; Function compile flags: /Odtp /ZI
;	COMDAT ??9Vector3@@QAE_NPAN@Z
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv129 = -80						; size = 4
tv90 = -76						; size = 4
tv83 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??9Vector3@@QAE_NPAN@Z PROC				; Vector3::operator!=, COMDAT
; _this$ = ecx

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 	return !((X==(float)Num[0])&&(Y==(float)Num[1])&&(Z==(float)Num[2]));

	mov	eax, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [eax]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@10
	mov	edx, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [edx+8]
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@10
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [ecx+16]
	fstp	DWORD PTR tv129[ebp]
	fld	DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@10
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN4@operator@10
$LN3@operator@10:
	mov	DWORD PTR tv80[ebp], 1
$LN4@operator@10:
	mov	al, BYTE PTR tv80[ebp]

; 96   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9Vector3@@QAE_NPAN@Z ENDP				; Vector3::operator!=
_TEXT	ENDS
PUBLIC	??9Vector3@@QAE_NM@Z				; Vector3::operator!=
; Function compile flags: /Odtp /ZI
;	COMDAT ??9Vector3@@QAE_NM@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??9Vector3@@QAE_NM@Z PROC				; Vector3::operator!=, COMDAT
; _this$ = ecx

; 98   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 99   : 	return GetMagnitude()!=Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fld	DWORD PTR _Num$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@operator@11
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator@11
$LN3@operator@11:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator@11:
	mov	al, BYTE PTR tv69[ebp]

; 100  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9Vector3@@QAE_NM@Z ENDP				; Vector3::operator!=
_TEXT	ENDS
PUBLIC	??9Vector3@@QAE_NPAM@Z				; Vector3::operator!=
; Function compile flags: /Odtp /ZI
;	COMDAT ??9Vector3@@QAE_NPAM@Z
_TEXT	SEGMENT
tv77 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??9Vector3@@QAE_NPAM@Z PROC				; Vector3::operator!=, COMDAT
; _this$ = ecx

; 102  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 	return !((X==Num[0])&&(Y==Num[1])&&(Z==Num[2]));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@12
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@12
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@12
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@operator@12
$LN3@operator@12:
	mov	DWORD PTR tv77[ebp], 1
$LN4@operator@12:
	mov	al, BYTE PTR tv77[ebp]

; 104  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9Vector3@@QAE_NPAM@Z ENDP				; Vector3::operator!=
_TEXT	ENDS
PUBLIC	??9Vector3@@QAE_NH@Z				; Vector3::operator!=
; Function compile flags: /Odtp /ZI
;	COMDAT ??9Vector3@@QAE_NH@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??9Vector3@@QAE_NH@Z PROC				; Vector3::operator!=, COMDAT
; _this$ = ecx

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 	return GetMagnitude()!=(float)Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fild	DWORD PTR _Num$[ebp]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@operator@13
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator@13
$LN3@operator@13:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator@13:
	mov	al, BYTE PTR tv70[ebp]

; 108  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9Vector3@@QAE_NH@Z ENDP				; Vector3::operator!=
_TEXT	ENDS
PUBLIC	??9Vector3@@QAE_NPAH@Z				; Vector3::operator!=
; Function compile flags: /Odtp /ZI
;	COMDAT ??9Vector3@@QAE_NPAH@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??9Vector3@@QAE_NPAH@Z PROC				; Vector3::operator!=, COMDAT
; _this$ = ecx

; 110  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 111  : 	return !((X==(float)Num[0])&&(Y==(float)Num[1])&&(Z==(float)Num[2]));

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@14
	mov	edx, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@14
	mov	ecx, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator@14
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN4@operator@14
$LN3@operator@14:
	mov	DWORD PTR tv80[ebp], 1
$LN4@operator@14:
	mov	al, BYTE PTR tv80[ebp]

; 112  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9Vector3@@QAE_NPAH@Z ENDP				; Vector3::operator!=
_TEXT	ENDS
PUBLIC	??PVector3@@QAE_NV0@@Z				; Vector3::operator>=
; Function compile flags: /Odtp /ZI
;	COMDAT ??PVector3@@QAE_NV0@@Z
_TEXT	SEGMENT
tv76 = -76						; size = 4
$T4594 = -69						; size = 1
_this$ = -4						; size = 4
_Vector3Two$ = 8					; size = 12
??PVector3@@QAE_NV0@@Z PROC				; Vector3::operator>=, COMDAT
; _this$ = ecx

; 114  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 	return (X>=Vector3Two.X)&&(Y>=Vector3Two.Y)&&(Z>=Vector3Two.Z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _Vector3Two$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@15
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR _Vector3Two$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@15
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fld	DWORD PTR _Vector3Two$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@15
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@operator@15
$LN3@operator@15:
	mov	DWORD PTR tv76[ebp], 0
$LN4@operator@15:
	mov	al, BYTE PTR tv76[ebp]
	mov	BYTE PTR $T4594[ebp], al
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	al, BYTE PTR $T4594[ebp]

; 116  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??PVector3@@QAE_NV0@@Z ENDP				; Vector3::operator>=
_TEXT	ENDS
PUBLIC	??PVector3@@QAE_NN@Z				; Vector3::operator>=
; Function compile flags: /Odtp /ZI
;	COMDAT ??PVector3@@QAE_NN@Z
_TEXT	SEGMENT
tv70 = -76						; size = 4
tv74 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 8
??PVector3@@QAE_NN@Z PROC				; Vector3::operator>=, COMDAT
; _this$ = ecx

; 118  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 	return GetMagnitude()>=(float)Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fld	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@16
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator@16
$LN3@operator@16:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator@16:
	mov	al, BYTE PTR tv70[ebp]

; 120  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??PVector3@@QAE_NN@Z ENDP				; Vector3::operator>=
_TEXT	ENDS
PUBLIC	??PVector3@@QAE_NPAN@Z				; Vector3::operator>=
; Function compile flags: /Odtp /ZI
;	COMDAT ??PVector3@@QAE_NPAN@Z
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv129 = -80						; size = 4
tv90 = -76						; size = 4
tv83 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??PVector3@@QAE_NPAN@Z PROC				; Vector3::operator>=, COMDAT
; _this$ = ecx

; 122  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 	return (X>=(float)Num[0])&&(Y>=(float)Num[1])&&(Z>=(float)Num[2]);

	mov	eax, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [eax]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@17
	mov	edx, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [edx+8]
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@17
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [ecx+16]
	fstp	DWORD PTR tv129[ebp]
	fld	DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@17
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@operator@17
$LN3@operator@17:
	mov	DWORD PTR tv80[ebp], 0
$LN4@operator@17:
	mov	al, BYTE PTR tv80[ebp]

; 124  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??PVector3@@QAE_NPAN@Z ENDP				; Vector3::operator>=
_TEXT	ENDS
PUBLIC	??PVector3@@QAE_NM@Z				; Vector3::operator>=
; Function compile flags: /Odtp /ZI
;	COMDAT ??PVector3@@QAE_NM@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??PVector3@@QAE_NM@Z PROC				; Vector3::operator>=, COMDAT
; _this$ = ecx

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 	return GetMagnitude()>=Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fld	DWORD PTR _Num$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@18
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator@18
$LN3@operator@18:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator@18:
	mov	al, BYTE PTR tv69[ebp]

; 128  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??PVector3@@QAE_NM@Z ENDP				; Vector3::operator>=
_TEXT	ENDS
PUBLIC	??PVector3@@QAE_NPAM@Z				; Vector3::operator>=
; Function compile flags: /Odtp /ZI
;	COMDAT ??PVector3@@QAE_NPAM@Z
_TEXT	SEGMENT
tv77 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??PVector3@@QAE_NPAM@Z PROC				; Vector3::operator>=, COMDAT
; _this$ = ecx

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 	return (X>=Num[0])&&(Y>=Num[1])&&(Z>=Num[2]);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@19
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [eax+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@19
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@19
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator@19
$LN3@operator@19:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator@19:
	mov	al, BYTE PTR tv77[ebp]

; 132  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??PVector3@@QAE_NPAM@Z ENDP				; Vector3::operator>=
_TEXT	ENDS
PUBLIC	??PVector3@@QAE_NH@Z				; Vector3::operator>=
; Function compile flags: /Odtp /ZI
;	COMDAT ??PVector3@@QAE_NH@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??PVector3@@QAE_NH@Z PROC				; Vector3::operator>=, COMDAT
; _this$ = ecx

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 135  : 	return GetMagnitude()>=(float)Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fild	DWORD PTR _Num$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@20
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator@20
$LN3@operator@20:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator@20:
	mov	al, BYTE PTR tv70[ebp]

; 136  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??PVector3@@QAE_NH@Z ENDP				; Vector3::operator>=
_TEXT	ENDS
PUBLIC	??PVector3@@QAE_NPAH@Z				; Vector3::operator>=
; Function compile flags: /Odtp /ZI
;	COMDAT ??PVector3@@QAE_NPAH@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??PVector3@@QAE_NPAH@Z PROC				; Vector3::operator>=, COMDAT
; _this$ = ecx

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 139  : 	return (X>=(float)Num[0])&&(Y>=(float)Num[1])&&(Z>=(float)Num[2]);

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@21
	mov	edx, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@21
	mov	ecx, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@21
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@operator@21
$LN3@operator@21:
	mov	DWORD PTR tv80[ebp], 0
$LN4@operator@21:
	mov	al, BYTE PTR tv80[ebp]

; 140  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??PVector3@@QAE_NPAH@Z ENDP				; Vector3::operator>=
_TEXT	ENDS
PUBLIC	??NVector3@@QAE_NV0@@Z				; Vector3::operator<=
; Function compile flags: /Odtp /ZI
;	COMDAT ??NVector3@@QAE_NV0@@Z
_TEXT	SEGMENT
tv76 = -76						; size = 4
$T4624 = -69						; size = 1
_this$ = -4						; size = 4
_Vector3Two$ = 8					; size = 12
??NVector3@@QAE_NV0@@Z PROC				; Vector3::operator<=, COMDAT
; _this$ = ecx

; 142  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 	return (X<=Vector3Two.X)&&(Y<=Vector3Two.Y)&&(Z<=Vector3Two.Z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _Vector3Two$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@22
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR _Vector3Two$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@22
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fld	DWORD PTR _Vector3Two$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@22
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@operator@22
$LN3@operator@22:
	mov	DWORD PTR tv76[ebp], 0
$LN4@operator@22:
	mov	al, BYTE PTR tv76[ebp]
	mov	BYTE PTR $T4624[ebp], al
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	al, BYTE PTR $T4624[ebp]

; 144  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??NVector3@@QAE_NV0@@Z ENDP				; Vector3::operator<=
_TEXT	ENDS
PUBLIC	??NVector3@@QAE_NN@Z				; Vector3::operator<=
; Function compile flags: /Odtp /ZI
;	COMDAT ??NVector3@@QAE_NN@Z
_TEXT	SEGMENT
tv70 = -76						; size = 4
tv74 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 8
??NVector3@@QAE_NN@Z PROC				; Vector3::operator<=, COMDAT
; _this$ = ecx

; 146  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 	return GetMagnitude()<=(float)Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fld	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@23
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator@23
$LN3@operator@23:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator@23:
	mov	al, BYTE PTR tv70[ebp]

; 148  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??NVector3@@QAE_NN@Z ENDP				; Vector3::operator<=
_TEXT	ENDS
PUBLIC	??NVector3@@QAE_NPAN@Z				; Vector3::operator<=
; Function compile flags: /Odtp /ZI
;	COMDAT ??NVector3@@QAE_NPAN@Z
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv129 = -80						; size = 4
tv90 = -76						; size = 4
tv83 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??NVector3@@QAE_NPAN@Z PROC				; Vector3::operator<=, COMDAT
; _this$ = ecx

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 151  : 	return (X<=(float)Num[0])&&(Y<=(float)Num[1])&&(Z<=(float)Num[2]);

	mov	eax, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [eax]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@24
	mov	edx, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [edx+8]
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@24
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [ecx+16]
	fstp	DWORD PTR tv129[ebp]
	fld	DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@24
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@operator@24
$LN3@operator@24:
	mov	DWORD PTR tv80[ebp], 0
$LN4@operator@24:
	mov	al, BYTE PTR tv80[ebp]

; 152  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??NVector3@@QAE_NPAN@Z ENDP				; Vector3::operator<=
_TEXT	ENDS
PUBLIC	??NVector3@@QAE_NM@Z				; Vector3::operator<=
; Function compile flags: /Odtp /ZI
;	COMDAT ??NVector3@@QAE_NM@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??NVector3@@QAE_NM@Z PROC				; Vector3::operator<=, COMDAT
; _this$ = ecx

; 154  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 	return GetMagnitude()<=Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fld	DWORD PTR _Num$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@25
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator@25
$LN3@operator@25:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator@25:
	mov	al, BYTE PTR tv69[ebp]

; 156  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??NVector3@@QAE_NM@Z ENDP				; Vector3::operator<=
_TEXT	ENDS
PUBLIC	??NVector3@@QAE_NPAM@Z				; Vector3::operator<=
; Function compile flags: /Odtp /ZI
;	COMDAT ??NVector3@@QAE_NPAM@Z
_TEXT	SEGMENT
tv77 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??NVector3@@QAE_NPAM@Z PROC				; Vector3::operator<=, COMDAT
; _this$ = ecx

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 159  : 	return (X<=Num[0])&&(Y<=Num[1])&&(Z<=Num[2]);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@26
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [eax+4]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@26
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@26
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator@26
$LN3@operator@26:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator@26:
	mov	al, BYTE PTR tv77[ebp]

; 160  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??NVector3@@QAE_NPAM@Z ENDP				; Vector3::operator<=
_TEXT	ENDS
PUBLIC	??NVector3@@QAE_NH@Z				; Vector3::operator<=
; Function compile flags: /Odtp /ZI
;	COMDAT ??NVector3@@QAE_NH@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??NVector3@@QAE_NH@Z PROC				; Vector3::operator<=, COMDAT
; _this$ = ecx

; 162  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 	return GetMagnitude()<=(float)Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fild	DWORD PTR _Num$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@27
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator@27
$LN3@operator@27:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator@27:
	mov	al, BYTE PTR tv70[ebp]

; 164  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??NVector3@@QAE_NH@Z ENDP				; Vector3::operator<=
_TEXT	ENDS
PUBLIC	??NVector3@@QAE_NPAH@Z				; Vector3::operator<=
; Function compile flags: /Odtp /ZI
;	COMDAT ??NVector3@@QAE_NPAH@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??NVector3@@QAE_NPAH@Z PROC				; Vector3::operator<=, COMDAT
; _this$ = ecx

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 167  : 	return (X<=(float)Num[0])&&(Y<=(float)Num[1])&&(Z<=(float)Num[2]);

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@28
	mov	edx, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@28
	mov	ecx, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@28
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@operator@28
$LN3@operator@28:
	mov	DWORD PTR tv80[ebp], 0
$LN4@operator@28:
	mov	al, BYTE PTR tv80[ebp]

; 168  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??NVector3@@QAE_NPAH@Z ENDP				; Vector3::operator<=
_TEXT	ENDS
PUBLIC	??MVector3@@QAE_NV0@@Z				; Vector3::operator<
; Function compile flags: /Odtp /ZI
;	COMDAT ??MVector3@@QAE_NV0@@Z
_TEXT	SEGMENT
tv76 = -76						; size = 4
$T4654 = -69						; size = 1
_this$ = -4						; size = 4
_Vector3Two$ = 8					; size = 12
??MVector3@@QAE_NV0@@Z PROC				; Vector3::operator<, COMDAT
; _this$ = ecx

; 170  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 	return (X<Vector3Two.X)&&(Y<Vector3Two.Y)&&(Z<Vector3Two.Z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _Vector3Two$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@29
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR _Vector3Two$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@29
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fld	DWORD PTR _Vector3Two$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@29
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@operator@29
$LN3@operator@29:
	mov	DWORD PTR tv76[ebp], 0
$LN4@operator@29:
	mov	al, BYTE PTR tv76[ebp]
	mov	BYTE PTR $T4654[ebp], al
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	al, BYTE PTR $T4654[ebp]

; 172  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??MVector3@@QAE_NV0@@Z ENDP				; Vector3::operator<
_TEXT	ENDS
PUBLIC	??MVector3@@QAE_NN@Z				; Vector3::operator<
; Function compile flags: /Odtp /ZI
;	COMDAT ??MVector3@@QAE_NN@Z
_TEXT	SEGMENT
tv70 = -76						; size = 4
tv74 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 8
??MVector3@@QAE_NN@Z PROC				; Vector3::operator<, COMDAT
; _this$ = ecx

; 174  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 	return GetMagnitude()<(float)Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fld	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@30
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator@30
$LN3@operator@30:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator@30:
	mov	al, BYTE PTR tv70[ebp]

; 176  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??MVector3@@QAE_NN@Z ENDP				; Vector3::operator<
_TEXT	ENDS
PUBLIC	??MVector3@@QAE_NPAN@Z				; Vector3::operator<
; Function compile flags: /Odtp /ZI
;	COMDAT ??MVector3@@QAE_NPAN@Z
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv129 = -80						; size = 4
tv90 = -76						; size = 4
tv83 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??MVector3@@QAE_NPAN@Z PROC				; Vector3::operator<, COMDAT
; _this$ = ecx

; 178  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 179  : 	return (X<(float)Num[0])&&(Y<(float)Num[1])&&(Z<(float)Num[2]);

	mov	eax, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [eax]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@31
	mov	edx, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [edx+8]
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@31
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [ecx+16]
	fstp	DWORD PTR tv129[ebp]
	fld	DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@31
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@operator@31
$LN3@operator@31:
	mov	DWORD PTR tv80[ebp], 0
$LN4@operator@31:
	mov	al, BYTE PTR tv80[ebp]

; 180  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??MVector3@@QAE_NPAN@Z ENDP				; Vector3::operator<
_TEXT	ENDS
PUBLIC	??MVector3@@QAE_NM@Z				; Vector3::operator<
; Function compile flags: /Odtp /ZI
;	COMDAT ??MVector3@@QAE_NM@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??MVector3@@QAE_NM@Z PROC				; Vector3::operator<, COMDAT
; _this$ = ecx

; 182  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 	return GetMagnitude()<Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fld	DWORD PTR _Num$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@32
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator@32
$LN3@operator@32:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator@32:
	mov	al, BYTE PTR tv69[ebp]

; 184  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??MVector3@@QAE_NM@Z ENDP				; Vector3::operator<
_TEXT	ENDS
PUBLIC	??MVector3@@QAE_NPAM@Z				; Vector3::operator<
; Function compile flags: /Odtp /ZI
;	COMDAT ??MVector3@@QAE_NPAM@Z
_TEXT	SEGMENT
tv77 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??MVector3@@QAE_NPAM@Z PROC				; Vector3::operator<, COMDAT
; _this$ = ecx

; 186  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 	return (X<Num[0])&&(Y<Num[1])&&(Z<Num[2]);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@33
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [eax+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@33
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@33
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator@33
$LN3@operator@33:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator@33:
	mov	al, BYTE PTR tv77[ebp]

; 188  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??MVector3@@QAE_NPAM@Z ENDP				; Vector3::operator<
_TEXT	ENDS
PUBLIC	??MVector3@@QAE_NH@Z				; Vector3::operator<
; Function compile flags: /Odtp /ZI
;	COMDAT ??MVector3@@QAE_NH@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??MVector3@@QAE_NH@Z PROC				; Vector3::operator<, COMDAT
; _this$ = ecx

; 190  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 	return GetMagnitude()<(float)Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fild	DWORD PTR _Num$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@34
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator@34
$LN3@operator@34:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator@34:
	mov	al, BYTE PTR tv70[ebp]

; 192  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??MVector3@@QAE_NH@Z ENDP				; Vector3::operator<
_TEXT	ENDS
PUBLIC	??MVector3@@QAE_NPAH@Z				; Vector3::operator<
; Function compile flags: /Odtp /ZI
;	COMDAT ??MVector3@@QAE_NPAH@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??MVector3@@QAE_NPAH@Z PROC				; Vector3::operator<, COMDAT
; _this$ = ecx

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 195  : 	return (X<(float)Num[0])&&(Y<(float)Num[1])&&(Z<(float)Num[2]);

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@35
	mov	edx, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@35
	mov	ecx, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@35
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@operator@35
$LN3@operator@35:
	mov	DWORD PTR tv80[ebp], 0
$LN4@operator@35:
	mov	al, BYTE PTR tv80[ebp]

; 196  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??MVector3@@QAE_NPAH@Z ENDP				; Vector3::operator<
_TEXT	ENDS
PUBLIC	??OVector3@@QAE_NV0@@Z				; Vector3::operator>
; Function compile flags: /Odtp /ZI
;	COMDAT ??OVector3@@QAE_NV0@@Z
_TEXT	SEGMENT
tv76 = -76						; size = 4
$T4684 = -69						; size = 1
_this$ = -4						; size = 4
_Vector3Two$ = 8					; size = 12
??OVector3@@QAE_NV0@@Z PROC				; Vector3::operator>, COMDAT
; _this$ = ecx

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 	return (X>Vector3Two.X)&&(Y>Vector3Two.Y)&&(Z>Vector3Two.Z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fld	DWORD PTR _Vector3Two$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@36
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR _Vector3Two$[ebp+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@36
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fld	DWORD PTR _Vector3Two$[ebp+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@36
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@operator@36
$LN3@operator@36:
	mov	DWORD PTR tv76[ebp], 0
$LN4@operator@36:
	mov	al, BYTE PTR tv76[ebp]
	mov	BYTE PTR $T4684[ebp], al
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	al, BYTE PTR $T4684[ebp]

; 200  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??OVector3@@QAE_NV0@@Z ENDP				; Vector3::operator>
_TEXT	ENDS
PUBLIC	??OVector3@@QAE_NN@Z				; Vector3::operator>
; Function compile flags: /Odtp /ZI
;	COMDAT ??OVector3@@QAE_NN@Z
_TEXT	SEGMENT
tv70 = -76						; size = 4
tv74 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 8
??OVector3@@QAE_NN@Z PROC				; Vector3::operator>, COMDAT
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 	return GetMagnitude()>(float)Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fld	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@37
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator@37
$LN3@operator@37:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator@37:
	mov	al, BYTE PTR tv70[ebp]

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??OVector3@@QAE_NN@Z ENDP				; Vector3::operator>
_TEXT	ENDS
PUBLIC	??OVector3@@QAE_NPAN@Z				; Vector3::operator>
; Function compile flags: /Odtp /ZI
;	COMDAT ??OVector3@@QAE_NPAN@Z
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv129 = -80						; size = 4
tv90 = -76						; size = 4
tv83 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??OVector3@@QAE_NPAN@Z PROC				; Vector3::operator>, COMDAT
; _this$ = ecx

; 206  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 	return (X>(float)Num[0])&&(Y>(float)Num[1])&&(Z>(float)Num[2]);

	mov	eax, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [eax]
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@38
	mov	edx, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [edx+8]
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@38
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [ecx+16]
	fstp	DWORD PTR tv129[ebp]
	fld	DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@38
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@operator@38
$LN3@operator@38:
	mov	DWORD PTR tv80[ebp], 0
$LN4@operator@38:
	mov	al, BYTE PTR tv80[ebp]

; 208  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??OVector3@@QAE_NPAN@Z ENDP				; Vector3::operator>
_TEXT	ENDS
PUBLIC	??OVector3@@QAE_NM@Z				; Vector3::operator>
; Function compile flags: /Odtp /ZI
;	COMDAT ??OVector3@@QAE_NM@Z
_TEXT	SEGMENT
tv69 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??OVector3@@QAE_NM@Z PROC				; Vector3::operator>, COMDAT
; _this$ = ecx

; 210  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 211  : 	return GetMagnitude()>Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fld	DWORD PTR _Num$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@39
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator@39
$LN3@operator@39:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator@39:
	mov	al, BYTE PTR tv69[ebp]

; 212  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??OVector3@@QAE_NM@Z ENDP				; Vector3::operator>
_TEXT	ENDS
PUBLIC	??OVector3@@QAE_NPAM@Z				; Vector3::operator>
; Function compile flags: /Odtp /ZI
;	COMDAT ??OVector3@@QAE_NPAM@Z
_TEXT	SEGMENT
tv77 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??OVector3@@QAE_NPAM@Z PROC				; Vector3::operator>, COMDAT
; _this$ = ecx

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 	return (X>Num[0])&&(Y>Num[1])&&(Z>Num[2]);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@40
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [eax+4]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@40
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@40
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator@40
$LN3@operator@40:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator@40:
	mov	al, BYTE PTR tv77[ebp]

; 216  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??OVector3@@QAE_NPAM@Z ENDP				; Vector3::operator>
_TEXT	ENDS
PUBLIC	??OVector3@@QAE_NH@Z				; Vector3::operator>
; Function compile flags: /Odtp /ZI
;	COMDAT ??OVector3@@QAE_NH@Z
_TEXT	SEGMENT
tv70 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??OVector3@@QAE_NH@Z PROC				; Vector3::operator>, COMDAT
; _this$ = ecx

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 	return GetMagnitude()>(float)Num;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMagnitude@Vector3@@QAEMXZ		; Vector3::GetMagnitude
	fild	DWORD PTR _Num$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@operator@41
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator@41
$LN3@operator@41:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator@41:
	mov	al, BYTE PTR tv70[ebp]

; 220  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??OVector3@@QAE_NH@Z ENDP				; Vector3::operator>
_TEXT	ENDS
PUBLIC	??OVector3@@QAE_NPAH@Z				; Vector3::operator>
; Function compile flags: /Odtp /ZI
;	COMDAT ??OVector3@@QAE_NPAH@Z
_TEXT	SEGMENT
tv80 = -72						; size = 4
_this$ = -4						; size = 4
_Num$ = 8						; size = 4
??OVector3@@QAE_NPAH@Z PROC				; Vector3::operator>, COMDAT
; _this$ = ecx

; 222  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 	return (X>(float)Num[0])&&(Y>(float)Num[1])&&(Z>(float)Num[2]);

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@42
	mov	edx, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@42
	mov	ecx, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@operator@42
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@operator@42
$LN3@operator@42:
	mov	DWORD PTR tv80[ebp], 0
$LN4@operator@42:
	mov	al, BYTE PTR tv80[ebp]

; 224  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??OVector3@@QAE_NPAH@Z ENDP				; Vector3::operator>
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?pow@@YAMMH@Z					; pow
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMagnitude@Vector3@@QAEMXZ
_TEXT	SEGMENT
tv133 = -88						; size = 4
tv142 = -84						; size = 8
tv140 = -76						; size = 8
_this$ = -4						; size = 4
?GetMagnitude@Vector3@@QAEMXZ PROC			; Vector3::GetMagnitude, COMDAT
; _this$ = ecx

; 226  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 	return sqrt(pow(this->X,2)+pow(this->Y,2)+pow(this->Z,2));

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?pow@@YAMMH@Z				; pow
	add	esp, 8
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [esp]
	fstp	QWORD PTR tv140[ebp]
	call	?pow@@YAMMH@Z				; pow
	add	esp, 8
	fadd	QWORD PTR tv140[ebp]
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR [esp]
	fstp	QWORD PTR tv142[ebp]
	call	?pow@@YAMMH@Z				; pow
	add	esp, 8
	fadd	QWORD PTR tv142[ebp]
	fstp	DWORD PTR tv133[ebp]
	fld	DWORD PTR tv133[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 228  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMagnitude@Vector3@@QAEMXZ ENDP			; Vector3::GetMagnitude
_TEXT	ENDS
PUBLIC	??$_Pow_int@M@@YAMMH@Z				; _Pow_int<float>
; Function compile flags: /Odtp /ZI
; File c:\program files\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?pow@@YAMMH@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
?pow@@YAMMH@Z PROC					; pow, COMDAT

; 528  :         {return (_Pow_int(_X, _Y)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR __Y$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	??$_Pow_int@M@@YAMMH@Z			; _Pow_int<float>
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?pow@@YAMMH@Z ENDP					; pow
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /ZI
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -68						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	??4Vector3@@QAE?AV0@V0@@Z			; Vector3::operator=
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
; File c:\users\fireemblem16\documents\visual studio 2008\projects\chronicles\chronicles\source\classes.cpp
xdata$x	SEGMENT
__unwindtable$??4Vector3@@QAE?AV0@V0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4Vector3@@QAE?AV0@V0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??4Vector3@@QAE?AV0@V0@@Z$0
__ehfuncinfo$??4Vector3@@QAE?AV0@V0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??4Vector3@@QAE?AV0@V0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??4Vector3@@QAE?AV0@V0@@Z
_TEXT	SEGMENT
$T4725 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector3Two$ = 12					; size = 12
??4Vector3@@QAE?AV0@V0@@Z PROC				; Vector3::operator=, COMDAT
; _this$ = ecx

; 230  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4Vector3@@QAE?AV0@V0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4725[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 231  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 232  : 
; 233  : 	X=Vector3Two.X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _Vector3Two$[ebp]
	fstp	DWORD PTR [eax]

; 234  : 	Y=Vector3Two.Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _Vector3Two$[ebp+4]
	fstp	DWORD PTR [eax+4]

; 235  : 	Z=Vector3Two.Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _Vector3Two$[ebp+8]
	fstp	DWORD PTR [eax+8]

; 236  : 
; 237  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 238  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 239  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 240  : 
; 241  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T4725[ebp]
	or	edx, 1
	mov	DWORD PTR $T4725[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 242  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4Vector3@@QAE?AV0@V0@@Z$0:
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??4Vector3@@QAE?AV0@V0@@Z$2:
	mov	eax, DWORD PTR $T4725[ebp]
	and	eax, 1
	je	$LN6@operator@43
	and	DWORD PTR $T4725[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@operator@43:
	ret	0
__ehhandler$??4Vector3@@QAE?AV0@V0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4Vector3@@QAE?AV0@V0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4Vector3@@QAE?AV0@V0@@Z ENDP				; Vector3::operator=
PUBLIC	??4Vector3@@QAE?AV0@N@Z				; Vector3::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4Vector3@@QAE?AV0@N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4Vector3@@QAE?AV0@N@Z$1
__ehfuncinfo$??4Vector3@@QAE?AV0@N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4Vector3@@QAE?AV0@N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??4Vector3@@QAE?AV0@N@Z
_TEXT	SEGMENT
$T4742 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 8
??4Vector3@@QAE?AV0@N@Z PROC				; Vector3::operator=, COMDAT
; _this$ = ecx

; 244  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4Vector3@@QAE?AV0@N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4742[ebp], 0

; 245  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 246  : 
; 247  : 	X=Num;

	fld	QWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax]

; 248  : 	Y=Num;

	fld	QWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 249  : 	Z=Num;

	fld	QWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8]

; 250  : 
; 251  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 252  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 253  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 254  : 
; 255  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4742[ebp]
	or	edx, 1
	mov	DWORD PTR $T4742[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 256  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4Vector3@@QAE?AV0@N@Z$1:
	mov	eax, DWORD PTR $T4742[ebp]
	and	eax, 1
	je	$LN5@operator@44
	and	DWORD PTR $T4742[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@44:
	ret	0
__ehhandler$??4Vector3@@QAE?AV0@N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4Vector3@@QAE?AV0@N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4Vector3@@QAE?AV0@N@Z ENDP				; Vector3::operator=
PUBLIC	??4Vector3@@QAE?AV0@PAN@Z			; Vector3::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4Vector3@@QAE?AV0@PAN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4Vector3@@QAE?AV0@PAN@Z$1
__ehfuncinfo$??4Vector3@@QAE?AV0@PAN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4Vector3@@QAE?AV0@PAN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??4Vector3@@QAE?AV0@PAN@Z
_TEXT	SEGMENT
$T4754 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??4Vector3@@QAE?AV0@PAN@Z PROC				; Vector3::operator=, COMDAT
; _this$ = ecx

; 258  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4Vector3@@QAE?AV0@PAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4754[ebp], 0

; 259  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 260  : 
; 261  : 	X=Num[0];

	mov	eax, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 262  : 	Y=Num[1];

	mov	eax, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 263  : 	Z=Num[2];

	mov	eax, DWORD PTR _Num$[ebp]
	fld	QWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 264  : 
; 265  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 266  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 267  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 268  : 
; 269  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4754[ebp]
	or	edx, 1
	mov	DWORD PTR $T4754[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 270  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4Vector3@@QAE?AV0@PAN@Z$1:
	mov	eax, DWORD PTR $T4754[ebp]
	and	eax, 1
	je	$LN5@operator@45
	and	DWORD PTR $T4754[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@45:
	ret	0
__ehhandler$??4Vector3@@QAE?AV0@PAN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4Vector3@@QAE?AV0@PAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4Vector3@@QAE?AV0@PAN@Z ENDP				; Vector3::operator=
PUBLIC	??4Vector3@@QAE?AV0@M@Z				; Vector3::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4Vector3@@QAE?AV0@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4Vector3@@QAE?AV0@M@Z$1
__ehfuncinfo$??4Vector3@@QAE?AV0@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4Vector3@@QAE?AV0@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??4Vector3@@QAE?AV0@M@Z
_TEXT	SEGMENT
$T4766 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??4Vector3@@QAE?AV0@M@Z PROC				; Vector3::operator=, COMDAT
; _this$ = ecx

; 272  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4Vector3@@QAE?AV0@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4766[ebp], 0

; 273  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 274  : 
; 275  : 	X=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR [eax]

; 276  : 	Y=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR [eax+4]

; 277  : 	Z=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR [eax+8]

; 278  : 
; 279  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 280  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 281  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 282  : 
; 283  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4766[ebp]
	or	edx, 1
	mov	DWORD PTR $T4766[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 284  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4Vector3@@QAE?AV0@M@Z$1:
	mov	eax, DWORD PTR $T4766[ebp]
	and	eax, 1
	je	$LN5@operator@46
	and	DWORD PTR $T4766[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@46:
	ret	0
__ehhandler$??4Vector3@@QAE?AV0@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4Vector3@@QAE?AV0@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4Vector3@@QAE?AV0@M@Z ENDP				; Vector3::operator=
PUBLIC	??4Vector3@@QAE?AV0@PAM@Z			; Vector3::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4Vector3@@QAE?AV0@PAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4Vector3@@QAE?AV0@PAM@Z$1
__ehfuncinfo$??4Vector3@@QAE?AV0@PAM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4Vector3@@QAE?AV0@PAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??4Vector3@@QAE?AV0@PAM@Z
_TEXT	SEGMENT
$T4778 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??4Vector3@@QAE?AV0@PAM@Z PROC				; Vector3::operator=, COMDAT
; _this$ = ecx

; 286  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4Vector3@@QAE?AV0@PAM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4778[ebp], 0

; 287  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 288  : 
; 289  : 	X=Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]

; 290  : 	Y=Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]

; 291  : 	Z=Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Num$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]

; 292  : 
; 293  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 294  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 295  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 296  : 
; 297  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4778[ebp]
	or	edx, 1
	mov	DWORD PTR $T4778[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 298  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4Vector3@@QAE?AV0@PAM@Z$1:
	mov	eax, DWORD PTR $T4778[ebp]
	and	eax, 1
	je	$LN5@operator@47
	and	DWORD PTR $T4778[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@47:
	ret	0
__ehhandler$??4Vector3@@QAE?AV0@PAM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4Vector3@@QAE?AV0@PAM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4Vector3@@QAE?AV0@PAM@Z ENDP				; Vector3::operator=
PUBLIC	??4Vector3@@QAE?AV0@H@Z				; Vector3::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4Vector3@@QAE?AV0@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4Vector3@@QAE?AV0@H@Z$1
__ehfuncinfo$??4Vector3@@QAE?AV0@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4Vector3@@QAE?AV0@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??4Vector3@@QAE?AV0@H@Z
_TEXT	SEGMENT
$T4790 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??4Vector3@@QAE?AV0@H@Z PROC				; Vector3::operator=, COMDAT
; _this$ = ecx

; 300  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4Vector3@@QAE?AV0@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4790[ebp], 0

; 301  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 302  : 
; 303  : 	X=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax]

; 304  : 	Y=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+4]

; 305  : 	Z=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+8]

; 306  : 
; 307  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 308  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 309  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 310  : 
; 311  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4790[ebp]
	or	edx, 1
	mov	DWORD PTR $T4790[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 312  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4Vector3@@QAE?AV0@H@Z$1:
	mov	eax, DWORD PTR $T4790[ebp]
	and	eax, 1
	je	$LN5@operator@48
	and	DWORD PTR $T4790[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@48:
	ret	0
__ehhandler$??4Vector3@@QAE?AV0@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4Vector3@@QAE?AV0@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4Vector3@@QAE?AV0@H@Z ENDP				; Vector3::operator=
PUBLIC	??4Vector3@@QAE?AV0@PAH@Z			; Vector3::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4Vector3@@QAE?AV0@PAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4Vector3@@QAE?AV0@PAH@Z$1
__ehfuncinfo$??4Vector3@@QAE?AV0@PAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4Vector3@@QAE?AV0@PAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??4Vector3@@QAE?AV0@PAH@Z
_TEXT	SEGMENT
$T4802 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??4Vector3@@QAE?AV0@PAH@Z PROC				; Vector3::operator=, COMDAT
; _this$ = ecx

; 314  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4Vector3@@QAE?AV0@PAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4802[ebp], 0

; 315  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 316  : 
; 317  : 	X=Num[0];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 318  : 	Y=Num[1];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 319  : 	Z=Num[2];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 320  : 
; 321  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 322  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 323  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 324  : 
; 325  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4802[ebp]
	or	edx, 1
	mov	DWORD PTR $T4802[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 326  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4Vector3@@QAE?AV0@PAH@Z$1:
	mov	eax, DWORD PTR $T4802[ebp]
	and	eax, 1
	je	$LN5@operator@49
	and	DWORD PTR $T4802[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@49:
	ret	0
__ehhandler$??4Vector3@@QAE?AV0@PAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4Vector3@@QAE?AV0@PAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4Vector3@@QAE?AV0@PAH@Z ENDP				; Vector3::operator=
PUBLIC	??HVector3@@QAE?AV0@V0@@Z			; Vector3::operator+
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??HVector3@@QAE?AV0@V0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HVector3@@QAE?AV0@V0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??HVector3@@QAE?AV0@V0@@Z$0
__ehfuncinfo$??HVector3@@QAE?AV0@V0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??HVector3@@QAE?AV0@V0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??HVector3@@QAE?AV0@V0@@Z
_TEXT	SEGMENT
$T4815 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector3Two$ = 12					; size = 12
??HVector3@@QAE?AV0@V0@@Z PROC				; Vector3::operator+, COMDAT
; _this$ = ecx

; 328  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??HVector3@@QAE?AV0@V0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4815[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 329  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 330  : 
; 331  : 	temp.X=X+Vector3Two.X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fadd	DWORD PTR _Vector3Two$[ebp]
	fstp	DWORD PTR _temp$[ebp]

; 332  : 	temp.Y=Y+Vector3Two.Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR _Vector3Two$[ebp+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 333  : 	temp.Z=Z+Vector3Two.Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR _Vector3Two$[ebp+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 334  : 
; 335  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T4815[ebp]
	or	edx, 1
	mov	DWORD PTR $T4815[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 336  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??HVector3@@QAE?AV0@V0@@Z$0:
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??HVector3@@QAE?AV0@V0@@Z$2:
	mov	eax, DWORD PTR $T4815[ebp]
	and	eax, 1
	je	$LN6@operator@50
	and	DWORD PTR $T4815[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@operator@50:
	ret	0
__ehhandler$??HVector3@@QAE?AV0@V0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??HVector3@@QAE?AV0@V0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??HVector3@@QAE?AV0@V0@@Z ENDP				; Vector3::operator+
PUBLIC	??HVector3@@QAE?AV0@N@Z				; Vector3::operator+
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??HVector3@@QAE?AV0@N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HVector3@@QAE?AV0@N@Z$1
__ehfuncinfo$??HVector3@@QAE?AV0@N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??HVector3@@QAE?AV0@N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??HVector3@@QAE?AV0@N@Z
_TEXT	SEGMENT
$T4827 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 8
??HVector3@@QAE?AV0@N@Z PROC				; Vector3::operator+, COMDAT
; _this$ = ecx

; 338  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??HVector3@@QAE?AV0@N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4827[ebp], 0

; 339  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 340  : 
; 341  : 	temp.X=X+Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fadd	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp]

; 342  : 	temp.Y=Y+Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+4]

; 343  : 	temp.Z=Z+Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+8]

; 344  : 
; 345  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4827[ebp]
	or	edx, 1
	mov	DWORD PTR $T4827[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 346  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??HVector3@@QAE?AV0@N@Z$1:
	mov	eax, DWORD PTR $T4827[ebp]
	and	eax, 1
	je	$LN5@operator@51
	and	DWORD PTR $T4827[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@51:
	ret	0
__ehhandler$??HVector3@@QAE?AV0@N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??HVector3@@QAE?AV0@N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??HVector3@@QAE?AV0@N@Z ENDP				; Vector3::operator+
PUBLIC	??HVector3@@QAE?AV0@PAN@Z			; Vector3::operator+
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??HVector3@@QAE?AV0@PAN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HVector3@@QAE?AV0@PAN@Z$1
__ehfuncinfo$??HVector3@@QAE?AV0@PAN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??HVector3@@QAE?AV0@PAN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??HVector3@@QAE?AV0@PAN@Z
_TEXT	SEGMENT
$T4839 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??HVector3@@QAE?AV0@PAN@Z PROC				; Vector3::operator+, COMDAT
; _this$ = ecx

; 348  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??HVector3@@QAE?AV0@PAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4839[ebp], 0

; 349  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 350  : 
; 351  : 	temp.X=X+Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fadd	QWORD PTR [ecx]
	fstp	DWORD PTR _temp$[ebp]

; 352  : 	temp.Y=Y+Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fadd	QWORD PTR [ecx+8]
	fstp	DWORD PTR _temp$[ebp+4]

; 353  : 	temp.Z=Z+Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fadd	QWORD PTR [ecx+16]
	fstp	DWORD PTR _temp$[ebp+8]

; 354  : 
; 355  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4839[ebp]
	or	edx, 1
	mov	DWORD PTR $T4839[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 356  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??HVector3@@QAE?AV0@PAN@Z$1:
	mov	eax, DWORD PTR $T4839[ebp]
	and	eax, 1
	je	$LN5@operator@52
	and	DWORD PTR $T4839[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@52:
	ret	0
__ehhandler$??HVector3@@QAE?AV0@PAN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??HVector3@@QAE?AV0@PAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??HVector3@@QAE?AV0@PAN@Z ENDP				; Vector3::operator+
PUBLIC	??HVector3@@QAE?AV0@M@Z				; Vector3::operator+
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??HVector3@@QAE?AV0@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HVector3@@QAE?AV0@M@Z$1
__ehfuncinfo$??HVector3@@QAE?AV0@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??HVector3@@QAE?AV0@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??HVector3@@QAE?AV0@M@Z
_TEXT	SEGMENT
$T4851 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??HVector3@@QAE?AV0@M@Z PROC				; Vector3::operator+, COMDAT
; _this$ = ecx

; 358  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??HVector3@@QAE?AV0@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4851[ebp], 0

; 359  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 360  : 
; 361  : 	temp.X=X+Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fadd	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp]

; 362  : 	temp.Y=Y+Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+4]

; 363  : 	temp.Z=Z+Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+8]

; 364  : 
; 365  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4851[ebp]
	or	edx, 1
	mov	DWORD PTR $T4851[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 366  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??HVector3@@QAE?AV0@M@Z$1:
	mov	eax, DWORD PTR $T4851[ebp]
	and	eax, 1
	je	$LN5@operator@53
	and	DWORD PTR $T4851[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@53:
	ret	0
__ehhandler$??HVector3@@QAE?AV0@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??HVector3@@QAE?AV0@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??HVector3@@QAE?AV0@M@Z ENDP				; Vector3::operator+
PUBLIC	??HVector3@@QAE?AV0@PAM@Z			; Vector3::operator+
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??HVector3@@QAE?AV0@PAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HVector3@@QAE?AV0@PAM@Z$1
__ehfuncinfo$??HVector3@@QAE?AV0@PAM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??HVector3@@QAE?AV0@PAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??HVector3@@QAE?AV0@PAM@Z
_TEXT	SEGMENT
$T4863 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??HVector3@@QAE?AV0@PAM@Z PROC				; Vector3::operator+, COMDAT
; _this$ = ecx

; 368  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??HVector3@@QAE?AV0@PAM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4863[ebp], 0

; 369  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 370  : 
; 371  : 	temp.X=X+Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR _temp$[ebp]

; 372  : 	temp.Y=Y+Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 373  : 	temp.Z=Z+Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 374  : 
; 375  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4863[ebp]
	or	edx, 1
	mov	DWORD PTR $T4863[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 376  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??HVector3@@QAE?AV0@PAM@Z$1:
	mov	eax, DWORD PTR $T4863[ebp]
	and	eax, 1
	je	$LN5@operator@54
	and	DWORD PTR $T4863[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@54:
	ret	0
__ehhandler$??HVector3@@QAE?AV0@PAM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??HVector3@@QAE?AV0@PAM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??HVector3@@QAE?AV0@PAM@Z ENDP				; Vector3::operator+
PUBLIC	??HVector3@@QAE?AV0@H@Z				; Vector3::operator+
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??HVector3@@QAE?AV0@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HVector3@@QAE?AV0@H@Z$1
__ehfuncinfo$??HVector3@@QAE?AV0@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??HVector3@@QAE?AV0@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??HVector3@@QAE?AV0@H@Z
_TEXT	SEGMENT
$T4875 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??HVector3@@QAE?AV0@H@Z PROC				; Vector3::operator+, COMDAT
; _this$ = ecx

; 378  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??HVector3@@QAE?AV0@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4875[ebp], 0

; 379  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 380  : 
; 381  : 	temp.X=X+Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 382  : 	temp.Y=Y+Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 383  : 	temp.Z=Z+Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 384  : 
; 385  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4875[ebp]
	or	edx, 1
	mov	DWORD PTR $T4875[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 386  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??HVector3@@QAE?AV0@H@Z$1:
	mov	eax, DWORD PTR $T4875[ebp]
	and	eax, 1
	je	$LN5@operator@55
	and	DWORD PTR $T4875[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@55:
	ret	0
__ehhandler$??HVector3@@QAE?AV0@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??HVector3@@QAE?AV0@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??HVector3@@QAE?AV0@H@Z ENDP				; Vector3::operator+
PUBLIC	??HVector3@@QAE?AV0@PAH@Z			; Vector3::operator+
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??HVector3@@QAE?AV0@PAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HVector3@@QAE?AV0@PAH@Z$1
__ehfuncinfo$??HVector3@@QAE?AV0@PAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??HVector3@@QAE?AV0@PAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??HVector3@@QAE?AV0@PAH@Z
_TEXT	SEGMENT
$T4887 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??HVector3@@QAE?AV0@PAH@Z PROC				; Vector3::operator+, COMDAT
; _this$ = ecx

; 388  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??HVector3@@QAE?AV0@PAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4887[ebp], 0

; 389  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 390  : 
; 391  : 	temp.X=X+Num[0];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR _temp$[ebp]

; 392  : 	temp.Y=Y+Num[1];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 393  : 	temp.Z=Z+Num[2];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 394  : 
; 395  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4887[ebp]
	or	edx, 1
	mov	DWORD PTR $T4887[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 396  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??HVector3@@QAE?AV0@PAH@Z$1:
	mov	eax, DWORD PTR $T4887[ebp]
	and	eax, 1
	je	$LN5@operator@56
	and	DWORD PTR $T4887[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@56:
	ret	0
__ehhandler$??HVector3@@QAE?AV0@PAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??HVector3@@QAE?AV0@PAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??HVector3@@QAE?AV0@PAH@Z ENDP				; Vector3::operator+
PUBLIC	??GVector3@@QAE?AV0@V0@@Z			; Vector3::operator-
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??GVector3@@QAE?AV0@V0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??GVector3@@QAE?AV0@V0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??GVector3@@QAE?AV0@V0@@Z$0
__ehfuncinfo$??GVector3@@QAE?AV0@V0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??GVector3@@QAE?AV0@V0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??GVector3@@QAE?AV0@V0@@Z
_TEXT	SEGMENT
$T4900 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector3Two$ = 12					; size = 12
??GVector3@@QAE?AV0@V0@@Z PROC				; Vector3::operator-, COMDAT
; _this$ = ecx

; 398  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??GVector3@@QAE?AV0@V0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4900[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 399  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 400  : 
; 401  : 	temp.X=X-Vector3Two.X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR _Vector3Two$[ebp]
	fstp	DWORD PTR _temp$[ebp]

; 402  : 	temp.Y=Y-Vector3Two.Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _Vector3Two$[ebp+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 403  : 	temp.Z=Z-Vector3Two.Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _Vector3Two$[ebp+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 404  : 
; 405  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T4900[ebp]
	or	edx, 1
	mov	DWORD PTR $T4900[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 406  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??GVector3@@QAE?AV0@V0@@Z$0:
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??GVector3@@QAE?AV0@V0@@Z$2:
	mov	eax, DWORD PTR $T4900[ebp]
	and	eax, 1
	je	$LN6@operator@57
	and	DWORD PTR $T4900[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@operator@57:
	ret	0
__ehhandler$??GVector3@@QAE?AV0@V0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??GVector3@@QAE?AV0@V0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??GVector3@@QAE?AV0@V0@@Z ENDP				; Vector3::operator-
PUBLIC	??GVector3@@QAE?AV0@N@Z				; Vector3::operator-
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??GVector3@@QAE?AV0@N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??GVector3@@QAE?AV0@N@Z$1
__ehfuncinfo$??GVector3@@QAE?AV0@N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??GVector3@@QAE?AV0@N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??GVector3@@QAE?AV0@N@Z
_TEXT	SEGMENT
$T4912 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 8
??GVector3@@QAE?AV0@N@Z PROC				; Vector3::operator-, COMDAT
; _this$ = ecx

; 408  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??GVector3@@QAE?AV0@N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4912[ebp], 0

; 409  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 410  : 
; 411  : 	temp.X=X-Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fsub	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp]

; 412  : 	temp.Y=Y-Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+4]

; 413  : 	temp.Z=Z-Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+8]

; 414  : 
; 415  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4912[ebp]
	or	edx, 1
	mov	DWORD PTR $T4912[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 416  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??GVector3@@QAE?AV0@N@Z$1:
	mov	eax, DWORD PTR $T4912[ebp]
	and	eax, 1
	je	$LN5@operator@58
	and	DWORD PTR $T4912[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@58:
	ret	0
__ehhandler$??GVector3@@QAE?AV0@N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??GVector3@@QAE?AV0@N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??GVector3@@QAE?AV0@N@Z ENDP				; Vector3::operator-
PUBLIC	??GVector3@@QAE?AV0@PAN@Z			; Vector3::operator-
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??GVector3@@QAE?AV0@PAN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??GVector3@@QAE?AV0@PAN@Z$1
__ehfuncinfo$??GVector3@@QAE?AV0@PAN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??GVector3@@QAE?AV0@PAN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??GVector3@@QAE?AV0@PAN@Z
_TEXT	SEGMENT
$T4924 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??GVector3@@QAE?AV0@PAN@Z PROC				; Vector3::operator-, COMDAT
; _this$ = ecx

; 418  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??GVector3@@QAE?AV0@PAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4924[ebp], 0

; 419  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 420  : 
; 421  : 	temp.X=X-Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fsub	QWORD PTR [ecx]
	fstp	DWORD PTR _temp$[ebp]

; 422  : 	temp.Y=Y-Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fsub	QWORD PTR [ecx+8]
	fstp	DWORD PTR _temp$[ebp+4]

; 423  : 	temp.Z=Z-Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fsub	QWORD PTR [ecx+16]
	fstp	DWORD PTR _temp$[ebp+8]

; 424  : 
; 425  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4924[ebp]
	or	edx, 1
	mov	DWORD PTR $T4924[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 426  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??GVector3@@QAE?AV0@PAN@Z$1:
	mov	eax, DWORD PTR $T4924[ebp]
	and	eax, 1
	je	$LN5@operator@59
	and	DWORD PTR $T4924[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@59:
	ret	0
__ehhandler$??GVector3@@QAE?AV0@PAN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??GVector3@@QAE?AV0@PAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??GVector3@@QAE?AV0@PAN@Z ENDP				; Vector3::operator-
PUBLIC	??GVector3@@QAE?AV0@M@Z				; Vector3::operator-
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??GVector3@@QAE?AV0@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??GVector3@@QAE?AV0@M@Z$1
__ehfuncinfo$??GVector3@@QAE?AV0@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??GVector3@@QAE?AV0@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??GVector3@@QAE?AV0@M@Z
_TEXT	SEGMENT
$T4936 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??GVector3@@QAE?AV0@M@Z PROC				; Vector3::operator-, COMDAT
; _this$ = ecx

; 428  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??GVector3@@QAE?AV0@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4936[ebp], 0

; 429  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 430  : 
; 431  : 	temp.X=X-Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp]

; 432  : 	temp.Y=Y-Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+4]

; 433  : 	temp.Z=Z-Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+8]

; 434  : 
; 435  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4936[ebp]
	or	edx, 1
	mov	DWORD PTR $T4936[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 436  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??GVector3@@QAE?AV0@M@Z$1:
	mov	eax, DWORD PTR $T4936[ebp]
	and	eax, 1
	je	$LN5@operator@60
	and	DWORD PTR $T4936[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@60:
	ret	0
__ehhandler$??GVector3@@QAE?AV0@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??GVector3@@QAE?AV0@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??GVector3@@QAE?AV0@M@Z ENDP				; Vector3::operator-
PUBLIC	??GVector3@@QAE?AV0@PAM@Z			; Vector3::operator-
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??GVector3@@QAE?AV0@PAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??GVector3@@QAE?AV0@PAM@Z$1
__ehfuncinfo$??GVector3@@QAE?AV0@PAM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??GVector3@@QAE?AV0@PAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??GVector3@@QAE?AV0@PAM@Z
_TEXT	SEGMENT
$T4948 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??GVector3@@QAE?AV0@PAM@Z PROC				; Vector3::operator-, COMDAT
; _this$ = ecx

; 438  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??GVector3@@QAE?AV0@PAM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4948[ebp], 0

; 439  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 440  : 
; 441  : 	temp.X=X-Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR _temp$[ebp]

; 442  : 	temp.Y=Y-Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fsub	DWORD PTR [ecx+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 443  : 	temp.Z=Z-Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 444  : 
; 445  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4948[ebp]
	or	edx, 1
	mov	DWORD PTR $T4948[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 446  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??GVector3@@QAE?AV0@PAM@Z$1:
	mov	eax, DWORD PTR $T4948[ebp]
	and	eax, 1
	je	$LN5@operator@61
	and	DWORD PTR $T4948[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@61:
	ret	0
__ehhandler$??GVector3@@QAE?AV0@PAM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??GVector3@@QAE?AV0@PAM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??GVector3@@QAE?AV0@PAM@Z ENDP				; Vector3::operator-
PUBLIC	??GVector3@@QAE?AV0@H@Z				; Vector3::operator-
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??GVector3@@QAE?AV0@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??GVector3@@QAE?AV0@H@Z$1
__ehfuncinfo$??GVector3@@QAE?AV0@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??GVector3@@QAE?AV0@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??GVector3@@QAE?AV0@H@Z
_TEXT	SEGMENT
$T4960 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??GVector3@@QAE?AV0@H@Z PROC				; Vector3::operator-, COMDAT
; _this$ = ecx

; 448  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??GVector3@@QAE?AV0@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4960[ebp], 0

; 449  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 450  : 
; 451  : 	temp.X=X-Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 452  : 	temp.Y=Y-Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 453  : 	temp.Z=Z-Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 454  : 
; 455  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4960[ebp]
	or	edx, 1
	mov	DWORD PTR $T4960[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 456  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??GVector3@@QAE?AV0@H@Z$1:
	mov	eax, DWORD PTR $T4960[ebp]
	and	eax, 1
	je	$LN5@operator@62
	and	DWORD PTR $T4960[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@62:
	ret	0
__ehhandler$??GVector3@@QAE?AV0@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??GVector3@@QAE?AV0@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??GVector3@@QAE?AV0@H@Z ENDP				; Vector3::operator-
PUBLIC	??GVector3@@QAE?AV0@PAH@Z			; Vector3::operator-
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??GVector3@@QAE?AV0@PAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??GVector3@@QAE?AV0@PAH@Z$1
__ehfuncinfo$??GVector3@@QAE?AV0@PAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??GVector3@@QAE?AV0@PAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??GVector3@@QAE?AV0@PAH@Z
_TEXT	SEGMENT
$T4972 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??GVector3@@QAE?AV0@PAH@Z PROC				; Vector3::operator-, COMDAT
; _this$ = ecx

; 458  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??GVector3@@QAE?AV0@PAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4972[ebp], 0

; 459  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 460  : 
; 461  : 	temp.X=X-Num[0];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [ecx]
	fstp	DWORD PTR _temp$[ebp]

; 462  : 	temp.Y=Y-Num[1];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [ecx+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 463  : 	temp.Z=Z-Num[2];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [ecx+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 464  : 
; 465  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4972[ebp]
	or	edx, 1
	mov	DWORD PTR $T4972[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 466  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??GVector3@@QAE?AV0@PAH@Z$1:
	mov	eax, DWORD PTR $T4972[ebp]
	and	eax, 1
	je	$LN5@operator@63
	and	DWORD PTR $T4972[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@63:
	ret	0
__ehhandler$??GVector3@@QAE?AV0@PAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??GVector3@@QAE?AV0@PAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??GVector3@@QAE?AV0@PAH@Z ENDP				; Vector3::operator-
PUBLIC	??DVector3@@QAE?AV0@V0@@Z			; Vector3::operator*
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??DVector3@@QAE?AV0@V0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??DVector3@@QAE?AV0@V0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??DVector3@@QAE?AV0@V0@@Z$0
__ehfuncinfo$??DVector3@@QAE?AV0@V0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??DVector3@@QAE?AV0@V0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??DVector3@@QAE?AV0@V0@@Z
_TEXT	SEGMENT
$T4985 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector3Two$ = 12					; size = 12
??DVector3@@QAE?AV0@V0@@Z PROC				; Vector3::operator*, COMDAT
; _this$ = ecx

; 468  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??DVector3@@QAE?AV0@V0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4985[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 469  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 470  : 
; 471  : 	temp.X=X*Vector3Two.X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _Vector3Two$[ebp]
	fstp	DWORD PTR _temp$[ebp]

; 472  : 	temp.Y=Y*Vector3Two.Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _Vector3Two$[ebp+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 473  : 	temp.Z=Z*Vector3Two.Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _Vector3Two$[ebp+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 474  : 
; 475  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T4985[ebp]
	or	edx, 1
	mov	DWORD PTR $T4985[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 476  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??DVector3@@QAE?AV0@V0@@Z$0:
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??DVector3@@QAE?AV0@V0@@Z$2:
	mov	eax, DWORD PTR $T4985[ebp]
	and	eax, 1
	je	$LN6@operator@64
	and	DWORD PTR $T4985[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@operator@64:
	ret	0
__ehhandler$??DVector3@@QAE?AV0@V0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??DVector3@@QAE?AV0@V0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??DVector3@@QAE?AV0@V0@@Z ENDP				; Vector3::operator*
PUBLIC	??DVector3@@QAE?AV0@N@Z				; Vector3::operator*
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??DVector3@@QAE?AV0@N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??DVector3@@QAE?AV0@N@Z$1
__ehfuncinfo$??DVector3@@QAE?AV0@N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??DVector3@@QAE?AV0@N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??DVector3@@QAE?AV0@N@Z
_TEXT	SEGMENT
$T4997 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 8
??DVector3@@QAE?AV0@N@Z PROC				; Vector3::operator*, COMDAT
; _this$ = ecx

; 478  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??DVector3@@QAE?AV0@N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T4997[ebp], 0

; 479  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 480  : 
; 481  : 	temp.X=X*Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp]

; 482  : 	temp.Y=Y*Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+4]

; 483  : 	temp.Z=Z*Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+8]

; 484  : 
; 485  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T4997[ebp]
	or	edx, 1
	mov	DWORD PTR $T4997[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 486  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??DVector3@@QAE?AV0@N@Z$1:
	mov	eax, DWORD PTR $T4997[ebp]
	and	eax, 1
	je	$LN5@operator@65
	and	DWORD PTR $T4997[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@65:
	ret	0
__ehhandler$??DVector3@@QAE?AV0@N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??DVector3@@QAE?AV0@N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??DVector3@@QAE?AV0@N@Z ENDP				; Vector3::operator*
PUBLIC	??DVector3@@QAE?AV0@PAN@Z			; Vector3::operator*
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??DVector3@@QAE?AV0@PAN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??DVector3@@QAE?AV0@PAN@Z$1
__ehfuncinfo$??DVector3@@QAE?AV0@PAN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??DVector3@@QAE?AV0@PAN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??DVector3@@QAE?AV0@PAN@Z
_TEXT	SEGMENT
$T5009 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??DVector3@@QAE?AV0@PAN@Z PROC				; Vector3::operator*, COMDAT
; _this$ = ecx

; 488  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??DVector3@@QAE?AV0@PAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5009[ebp], 0

; 489  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 490  : 
; 491  : 	temp.X=X*Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fmul	QWORD PTR [ecx]
	fstp	DWORD PTR _temp$[ebp]

; 492  : 	temp.Y=Y*Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fmul	QWORD PTR [ecx+8]
	fstp	DWORD PTR _temp$[ebp+4]

; 493  : 	temp.Z=Z*Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fmul	QWORD PTR [ecx+16]
	fstp	DWORD PTR _temp$[ebp+8]

; 494  : 
; 495  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5009[ebp]
	or	edx, 1
	mov	DWORD PTR $T5009[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 496  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??DVector3@@QAE?AV0@PAN@Z$1:
	mov	eax, DWORD PTR $T5009[ebp]
	and	eax, 1
	je	$LN5@operator@66
	and	DWORD PTR $T5009[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@66:
	ret	0
__ehhandler$??DVector3@@QAE?AV0@PAN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??DVector3@@QAE?AV0@PAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??DVector3@@QAE?AV0@PAN@Z ENDP				; Vector3::operator*
PUBLIC	??DVector3@@QAE?AV0@M@Z				; Vector3::operator*
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??DVector3@@QAE?AV0@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??DVector3@@QAE?AV0@M@Z$1
__ehfuncinfo$??DVector3@@QAE?AV0@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??DVector3@@QAE?AV0@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??DVector3@@QAE?AV0@M@Z
_TEXT	SEGMENT
$T5021 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??DVector3@@QAE?AV0@M@Z PROC				; Vector3::operator*, COMDAT
; _this$ = ecx

; 498  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??DVector3@@QAE?AV0@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5021[ebp], 0

; 499  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 500  : 
; 501  : 	temp.X=X*Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp]

; 502  : 	temp.Y=Y*Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+4]

; 503  : 	temp.Z=Z*Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+8]

; 504  : 
; 505  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5021[ebp]
	or	edx, 1
	mov	DWORD PTR $T5021[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 506  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??DVector3@@QAE?AV0@M@Z$1:
	mov	eax, DWORD PTR $T5021[ebp]
	and	eax, 1
	je	$LN5@operator@67
	and	DWORD PTR $T5021[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@67:
	ret	0
__ehhandler$??DVector3@@QAE?AV0@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??DVector3@@QAE?AV0@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??DVector3@@QAE?AV0@M@Z ENDP				; Vector3::operator*
PUBLIC	??DVector3@@QAE?AV0@PAM@Z			; Vector3::operator*
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??DVector3@@QAE?AV0@PAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??DVector3@@QAE?AV0@PAM@Z$1
__ehfuncinfo$??DVector3@@QAE?AV0@PAM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??DVector3@@QAE?AV0@PAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??DVector3@@QAE?AV0@PAM@Z
_TEXT	SEGMENT
$T5033 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??DVector3@@QAE?AV0@PAM@Z PROC				; Vector3::operator*, COMDAT
; _this$ = ecx

; 508  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??DVector3@@QAE?AV0@PAM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5033[ebp], 0

; 509  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 510  : 
; 511  : 	temp.X=X*Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR _temp$[ebp]

; 512  : 	temp.Y=Y*Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fmul	DWORD PTR [ecx+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 513  : 	temp.Z=Z*Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fmul	DWORD PTR [ecx+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 514  : 
; 515  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5033[ebp]
	or	edx, 1
	mov	DWORD PTR $T5033[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 516  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??DVector3@@QAE?AV0@PAM@Z$1:
	mov	eax, DWORD PTR $T5033[ebp]
	and	eax, 1
	je	$LN5@operator@68
	and	DWORD PTR $T5033[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@68:
	ret	0
__ehhandler$??DVector3@@QAE?AV0@PAM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??DVector3@@QAE?AV0@PAM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??DVector3@@QAE?AV0@PAM@Z ENDP				; Vector3::operator*
PUBLIC	??DVector3@@QAE?AV0@H@Z				; Vector3::operator*
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??DVector3@@QAE?AV0@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??DVector3@@QAE?AV0@H@Z$1
__ehfuncinfo$??DVector3@@QAE?AV0@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??DVector3@@QAE?AV0@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??DVector3@@QAE?AV0@H@Z
_TEXT	SEGMENT
$T5045 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??DVector3@@QAE?AV0@H@Z PROC				; Vector3::operator*, COMDAT
; _this$ = ecx

; 518  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??DVector3@@QAE?AV0@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5045[ebp], 0

; 519  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 520  : 
; 521  : 	temp.X=X*Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 522  : 	temp.Y=Y*Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 523  : 	temp.Z=Z*Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 524  : 
; 525  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5045[ebp]
	or	edx, 1
	mov	DWORD PTR $T5045[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 526  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??DVector3@@QAE?AV0@H@Z$1:
	mov	eax, DWORD PTR $T5045[ebp]
	and	eax, 1
	je	$LN5@operator@69
	and	DWORD PTR $T5045[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@69:
	ret	0
__ehhandler$??DVector3@@QAE?AV0@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??DVector3@@QAE?AV0@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??DVector3@@QAE?AV0@H@Z ENDP				; Vector3::operator*
PUBLIC	??DVector3@@QAE?AV0@PAH@Z			; Vector3::operator*
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??DVector3@@QAE?AV0@PAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??DVector3@@QAE?AV0@PAH@Z$1
__ehfuncinfo$??DVector3@@QAE?AV0@PAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??DVector3@@QAE?AV0@PAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??DVector3@@QAE?AV0@PAH@Z
_TEXT	SEGMENT
$T5057 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??DVector3@@QAE?AV0@PAH@Z PROC				; Vector3::operator*, COMDAT
; _this$ = ecx

; 528  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??DVector3@@QAE?AV0@PAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5057[ebp], 0

; 529  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 530  : 
; 531  : 	temp.X=X*Num[0];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR _temp$[ebp]

; 532  : 	temp.Y=Y*Num[1];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 533  : 	temp.Z=Z*Num[2];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 534  : 
; 535  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5057[ebp]
	or	edx, 1
	mov	DWORD PTR $T5057[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 536  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??DVector3@@QAE?AV0@PAH@Z$1:
	mov	eax, DWORD PTR $T5057[ebp]
	and	eax, 1
	je	$LN5@operator@70
	and	DWORD PTR $T5057[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@70:
	ret	0
__ehhandler$??DVector3@@QAE?AV0@PAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??DVector3@@QAE?AV0@PAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??DVector3@@QAE?AV0@PAH@Z ENDP				; Vector3::operator*
PUBLIC	??KVector3@@QAE?AV0@V0@@Z			; Vector3::operator/
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??KVector3@@QAE?AV0@V0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??KVector3@@QAE?AV0@V0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??KVector3@@QAE?AV0@V0@@Z$0
__ehfuncinfo$??KVector3@@QAE?AV0@V0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??KVector3@@QAE?AV0@V0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??KVector3@@QAE?AV0@V0@@Z
_TEXT	SEGMENT
$T5070 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector3Two$ = 12					; size = 12
??KVector3@@QAE?AV0@V0@@Z PROC				; Vector3::operator/, COMDAT
; _this$ = ecx

; 538  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??KVector3@@QAE?AV0@V0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5070[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 539  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 540  : 
; 541  : 	temp.X=X/Vector3Two.X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _Vector3Two$[ebp]
	fstp	DWORD PTR _temp$[ebp]

; 542  : 	temp.Y=Y/Vector3Two.Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fdiv	DWORD PTR _Vector3Two$[ebp+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 543  : 	temp.Z=Z/Vector3Two.Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR _Vector3Two$[ebp+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 544  : 
; 545  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T5070[ebp]
	or	edx, 1
	mov	DWORD PTR $T5070[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 546  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??KVector3@@QAE?AV0@V0@@Z$0:
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??KVector3@@QAE?AV0@V0@@Z$2:
	mov	eax, DWORD PTR $T5070[ebp]
	and	eax, 1
	je	$LN6@operator@71
	and	DWORD PTR $T5070[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@operator@71:
	ret	0
__ehhandler$??KVector3@@QAE?AV0@V0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??KVector3@@QAE?AV0@V0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??KVector3@@QAE?AV0@V0@@Z ENDP				; Vector3::operator/
PUBLIC	??KVector3@@QAE?AV0@N@Z				; Vector3::operator/
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??KVector3@@QAE?AV0@N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??KVector3@@QAE?AV0@N@Z$1
__ehfuncinfo$??KVector3@@QAE?AV0@N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??KVector3@@QAE?AV0@N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??KVector3@@QAE?AV0@N@Z
_TEXT	SEGMENT
$T5082 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 8
??KVector3@@QAE?AV0@N@Z PROC				; Vector3::operator/, COMDAT
; _this$ = ecx

; 548  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??KVector3@@QAE?AV0@N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5082[ebp], 0

; 549  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 550  : 
; 551  : 	temp.X=X/Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp]

; 552  : 	temp.Y=Y/Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fdiv	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+4]

; 553  : 	temp.Z=Z/Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	QWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+8]

; 554  : 
; 555  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5082[ebp]
	or	edx, 1
	mov	DWORD PTR $T5082[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 556  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??KVector3@@QAE?AV0@N@Z$1:
	mov	eax, DWORD PTR $T5082[ebp]
	and	eax, 1
	je	$LN5@operator@72
	and	DWORD PTR $T5082[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@72:
	ret	0
__ehhandler$??KVector3@@QAE?AV0@N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??KVector3@@QAE?AV0@N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??KVector3@@QAE?AV0@N@Z ENDP				; Vector3::operator/
PUBLIC	??KVector3@@QAE?AV0@PAN@Z			; Vector3::operator/
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??KVector3@@QAE?AV0@PAN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??KVector3@@QAE?AV0@PAN@Z$1
__ehfuncinfo$??KVector3@@QAE?AV0@PAN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??KVector3@@QAE?AV0@PAN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??KVector3@@QAE?AV0@PAN@Z
_TEXT	SEGMENT
$T5094 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??KVector3@@QAE?AV0@PAN@Z PROC				; Vector3::operator/, COMDAT
; _this$ = ecx

; 558  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??KVector3@@QAE?AV0@PAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5094[ebp], 0

; 559  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 560  : 
; 561  : 	temp.X=X/Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fdiv	QWORD PTR [ecx]
	fstp	DWORD PTR _temp$[ebp]

; 562  : 	temp.Y=Y/Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fdiv	QWORD PTR [ecx+8]
	fstp	DWORD PTR _temp$[ebp+4]

; 563  : 	temp.Z=Z/Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fdiv	QWORD PTR [ecx+16]
	fstp	DWORD PTR _temp$[ebp+8]

; 564  : 
; 565  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5094[ebp]
	or	edx, 1
	mov	DWORD PTR $T5094[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 566  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??KVector3@@QAE?AV0@PAN@Z$1:
	mov	eax, DWORD PTR $T5094[ebp]
	and	eax, 1
	je	$LN5@operator@73
	and	DWORD PTR $T5094[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@73:
	ret	0
__ehhandler$??KVector3@@QAE?AV0@PAN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??KVector3@@QAE?AV0@PAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??KVector3@@QAE?AV0@PAN@Z ENDP				; Vector3::operator/
PUBLIC	??KVector3@@QAE?AV0@M@Z				; Vector3::operator/
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??KVector3@@QAE?AV0@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??KVector3@@QAE?AV0@M@Z$1
__ehfuncinfo$??KVector3@@QAE?AV0@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??KVector3@@QAE?AV0@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??KVector3@@QAE?AV0@M@Z
_TEXT	SEGMENT
$T5106 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??KVector3@@QAE?AV0@M@Z PROC				; Vector3::operator/, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??KVector3@@QAE?AV0@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5106[ebp], 0

; 569  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 570  : 
; 571  : 	temp.X=X/Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp]

; 572  : 	temp.Y=Y/Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fdiv	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+4]

; 573  : 	temp.Z=Z/Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR _Num$[ebp]
	fstp	DWORD PTR _temp$[ebp+8]

; 574  : 
; 575  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5106[ebp]
	or	edx, 1
	mov	DWORD PTR $T5106[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 576  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??KVector3@@QAE?AV0@M@Z$1:
	mov	eax, DWORD PTR $T5106[ebp]
	and	eax, 1
	je	$LN5@operator@74
	and	DWORD PTR $T5106[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@74:
	ret	0
__ehhandler$??KVector3@@QAE?AV0@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??KVector3@@QAE?AV0@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??KVector3@@QAE?AV0@M@Z ENDP				; Vector3::operator/
PUBLIC	??KVector3@@QAE?AV0@PAM@Z			; Vector3::operator/
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??KVector3@@QAE?AV0@PAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??KVector3@@QAE?AV0@PAM@Z$1
__ehfuncinfo$??KVector3@@QAE?AV0@PAM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??KVector3@@QAE?AV0@PAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??KVector3@@QAE?AV0@PAM@Z
_TEXT	SEGMENT
$T5118 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??KVector3@@QAE?AV0@PAM@Z PROC				; Vector3::operator/, COMDAT
; _this$ = ecx

; 578  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??KVector3@@QAE?AV0@PAM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5118[ebp], 0

; 579  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 580  : 
; 581  : 	temp.X=X/Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fdiv	DWORD PTR [ecx]
	fstp	DWORD PTR _temp$[ebp]

; 582  : 	temp.Y=Y/Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fdiv	DWORD PTR [ecx+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 583  : 	temp.Z=Z/Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fdiv	DWORD PTR [ecx+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 584  : 
; 585  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5118[ebp]
	or	edx, 1
	mov	DWORD PTR $T5118[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 586  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??KVector3@@QAE?AV0@PAM@Z$1:
	mov	eax, DWORD PTR $T5118[ebp]
	and	eax, 1
	je	$LN5@operator@75
	and	DWORD PTR $T5118[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@75:
	ret	0
__ehhandler$??KVector3@@QAE?AV0@PAM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??KVector3@@QAE?AV0@PAM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??KVector3@@QAE?AV0@PAM@Z ENDP				; Vector3::operator/
PUBLIC	??KVector3@@QAE?AV0@H@Z				; Vector3::operator/
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??KVector3@@QAE?AV0@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??KVector3@@QAE?AV0@H@Z$1
__ehfuncinfo$??KVector3@@QAE?AV0@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??KVector3@@QAE?AV0@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??KVector3@@QAE?AV0@H@Z
_TEXT	SEGMENT
$T5130 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??KVector3@@QAE?AV0@H@Z PROC				; Vector3::operator/, COMDAT
; _this$ = ecx

; 588  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??KVector3@@QAE?AV0@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5130[ebp], 0

; 589  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 590  : 
; 591  : 	temp.X=X/Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fdivr	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 592  : 	temp.Y=Y/Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fdivr	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 593  : 	temp.Z=Z/Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fdivr	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 594  : 
; 595  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5130[ebp]
	or	edx, 1
	mov	DWORD PTR $T5130[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 596  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??KVector3@@QAE?AV0@H@Z$1:
	mov	eax, DWORD PTR $T5130[ebp]
	and	eax, 1
	je	$LN5@operator@76
	and	DWORD PTR $T5130[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@76:
	ret	0
__ehhandler$??KVector3@@QAE?AV0@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??KVector3@@QAE?AV0@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??KVector3@@QAE?AV0@H@Z ENDP				; Vector3::operator/
PUBLIC	??KVector3@@QAE?AV0@PAH@Z			; Vector3::operator/
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??KVector3@@QAE?AV0@PAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??KVector3@@QAE?AV0@PAH@Z$1
__ehfuncinfo$??KVector3@@QAE?AV0@PAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??KVector3@@QAE?AV0@PAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??KVector3@@QAE?AV0@PAH@Z
_TEXT	SEGMENT
$T5142 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??KVector3@@QAE?AV0@PAH@Z PROC				; Vector3::operator/, COMDAT
; _this$ = ecx

; 598  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??KVector3@@QAE?AV0@PAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5142[ebp], 0

; 599  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 600  : 
; 601  : 	temp.X=X/Num[0];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fdivr	DWORD PTR [ecx]
	fstp	DWORD PTR _temp$[ebp]

; 602  : 	temp.Y=Y/Num[1];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fdivr	DWORD PTR [ecx+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 603  : 	temp.Z=Z/Num[2];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fdivr	DWORD PTR [ecx+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 604  : 
; 605  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5142[ebp]
	or	edx, 1
	mov	DWORD PTR $T5142[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 606  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??KVector3@@QAE?AV0@PAH@Z$1:
	mov	eax, DWORD PTR $T5142[ebp]
	and	eax, 1
	je	$LN5@operator@77
	and	DWORD PTR $T5142[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@77:
	ret	0
__ehhandler$??KVector3@@QAE?AV0@PAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??KVector3@@QAE?AV0@PAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??KVector3@@QAE?AV0@PAH@Z ENDP				; Vector3::operator/
PUBLIC	??YVector3@@QAE?AV0@V0@@Z			; Vector3::operator+=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??YVector3@@QAE?AV0@V0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??YVector3@@QAE?AV0@V0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??YVector3@@QAE?AV0@V0@@Z$0
__ehfuncinfo$??YVector3@@QAE?AV0@V0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??YVector3@@QAE?AV0@V0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??YVector3@@QAE?AV0@V0@@Z
_TEXT	SEGMENT
$T5155 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector3Two$ = 12					; size = 12
??YVector3@@QAE?AV0@V0@@Z PROC				; Vector3::operator+=, COMDAT
; _this$ = ecx

; 608  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??YVector3@@QAE?AV0@V0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5155[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 609  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 610  : 
; 611  : 	X+=Vector3Two.X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fadd	DWORD PTR _Vector3Two$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 612  : 	Y+=Vector3Two.Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR _Vector3Two$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 613  : 	Z+=Vector3Two.Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR _Vector3Two$[ebp+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 614  : 
; 615  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 616  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 617  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 618  : 
; 619  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T5155[ebp]
	or	edx, 1
	mov	DWORD PTR $T5155[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 620  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??YVector3@@QAE?AV0@V0@@Z$0:
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??YVector3@@QAE?AV0@V0@@Z$2:
	mov	eax, DWORD PTR $T5155[ebp]
	and	eax, 1
	je	$LN6@operator@78
	and	DWORD PTR $T5155[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@operator@78:
	ret	0
__ehhandler$??YVector3@@QAE?AV0@V0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??YVector3@@QAE?AV0@V0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??YVector3@@QAE?AV0@V0@@Z ENDP				; Vector3::operator+=
PUBLIC	??YVector3@@QAE?AV0@N@Z				; Vector3::operator+=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??YVector3@@QAE?AV0@N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??YVector3@@QAE?AV0@N@Z$1
__ehfuncinfo$??YVector3@@QAE?AV0@N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??YVector3@@QAE?AV0@N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??YVector3@@QAE?AV0@N@Z
_TEXT	SEGMENT
$T5167 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 8
??YVector3@@QAE?AV0@N@Z PROC				; Vector3::operator+=, COMDAT
; _this$ = ecx

; 622  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??YVector3@@QAE?AV0@N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5167[ebp], 0

; 623  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 624  : 
; 625  : 	X+=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fadd	QWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 626  : 	Y+=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	QWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 627  : 	Z+=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	QWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 628  : 
; 629  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 630  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 631  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 632  : 
; 633  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5167[ebp]
	or	edx, 1
	mov	DWORD PTR $T5167[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 634  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??YVector3@@QAE?AV0@N@Z$1:
	mov	eax, DWORD PTR $T5167[ebp]
	and	eax, 1
	je	$LN5@operator@79
	and	DWORD PTR $T5167[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@79:
	ret	0
__ehhandler$??YVector3@@QAE?AV0@N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??YVector3@@QAE?AV0@N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??YVector3@@QAE?AV0@N@Z ENDP				; Vector3::operator+=
PUBLIC	??YVector3@@QAE?AV0@PAN@Z			; Vector3::operator+=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??YVector3@@QAE?AV0@PAN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??YVector3@@QAE?AV0@PAN@Z$1
__ehfuncinfo$??YVector3@@QAE?AV0@PAN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??YVector3@@QAE?AV0@PAN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??YVector3@@QAE?AV0@PAN@Z
_TEXT	SEGMENT
$T5179 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??YVector3@@QAE?AV0@PAN@Z PROC				; Vector3::operator+=, COMDAT
; _this$ = ecx

; 636  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??YVector3@@QAE?AV0@PAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5179[ebp], 0

; 637  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 638  : 
; 639  : 	X+=Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fadd	QWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 640  : 	Y+=Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fadd	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 641  : 	Z+=Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fadd	QWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 642  : 
; 643  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 644  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 645  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 646  : 
; 647  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5179[ebp]
	or	edx, 1
	mov	DWORD PTR $T5179[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??YVector3@@QAE?AV0@PAN@Z$1:
	mov	eax, DWORD PTR $T5179[ebp]
	and	eax, 1
	je	$LN5@operator@80
	and	DWORD PTR $T5179[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@80:
	ret	0
__ehhandler$??YVector3@@QAE?AV0@PAN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??YVector3@@QAE?AV0@PAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??YVector3@@QAE?AV0@PAN@Z ENDP				; Vector3::operator+=
PUBLIC	??YVector3@@QAE?AV0@M@Z				; Vector3::operator+=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??YVector3@@QAE?AV0@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??YVector3@@QAE?AV0@M@Z$1
__ehfuncinfo$??YVector3@@QAE?AV0@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??YVector3@@QAE?AV0@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??YVector3@@QAE?AV0@M@Z
_TEXT	SEGMENT
$T5191 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??YVector3@@QAE?AV0@M@Z PROC				; Vector3::operator+=, COMDAT
; _this$ = ecx

; 650  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??YVector3@@QAE?AV0@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5191[ebp], 0

; 651  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 652  : 
; 653  : 	X+=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fadd	DWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 654  : 	Y+=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 655  : 	Z+=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 656  : 
; 657  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 658  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 659  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 660  : 
; 661  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5191[ebp]
	or	edx, 1
	mov	DWORD PTR $T5191[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 662  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??YVector3@@QAE?AV0@M@Z$1:
	mov	eax, DWORD PTR $T5191[ebp]
	and	eax, 1
	je	$LN5@operator@81
	and	DWORD PTR $T5191[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@81:
	ret	0
__ehhandler$??YVector3@@QAE?AV0@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??YVector3@@QAE?AV0@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??YVector3@@QAE?AV0@M@Z ENDP				; Vector3::operator+=
PUBLIC	??YVector3@@QAE?AV0@PAM@Z			; Vector3::operator+=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??YVector3@@QAE?AV0@PAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??YVector3@@QAE?AV0@PAM@Z$1
__ehfuncinfo$??YVector3@@QAE?AV0@PAM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??YVector3@@QAE?AV0@PAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??YVector3@@QAE?AV0@PAM@Z
_TEXT	SEGMENT
$T5203 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??YVector3@@QAE?AV0@PAM@Z PROC				; Vector3::operator+=, COMDAT
; _this$ = ecx

; 664  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??YVector3@@QAE?AV0@PAM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5203[ebp], 0

; 665  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 666  : 
; 667  : 	X+=Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 668  : 	Y+=Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 669  : 	Z+=Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 670  : 
; 671  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 672  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 673  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 674  : 
; 675  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5203[ebp]
	or	edx, 1
	mov	DWORD PTR $T5203[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 676  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??YVector3@@QAE?AV0@PAM@Z$1:
	mov	eax, DWORD PTR $T5203[ebp]
	and	eax, 1
	je	$LN5@operator@82
	and	DWORD PTR $T5203[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@82:
	ret	0
__ehhandler$??YVector3@@QAE?AV0@PAM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??YVector3@@QAE?AV0@PAM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??YVector3@@QAE?AV0@PAM@Z ENDP				; Vector3::operator+=
PUBLIC	??YVector3@@QAE?AV0@H@Z				; Vector3::operator+=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??YVector3@@QAE?AV0@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??YVector3@@QAE?AV0@H@Z$1
__ehfuncinfo$??YVector3@@QAE?AV0@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??YVector3@@QAE?AV0@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??YVector3@@QAE?AV0@H@Z
_TEXT	SEGMENT
$T5215 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??YVector3@@QAE?AV0@H@Z PROC				; Vector3::operator+=, COMDAT
; _this$ = ecx

; 678  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??YVector3@@QAE?AV0@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5215[ebp], 0

; 679  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 680  : 
; 681  : 	X+=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 682  : 	Y+=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 683  : 	Z+=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 684  : 
; 685  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 686  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 687  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 688  : 
; 689  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5215[ebp]
	or	edx, 1
	mov	DWORD PTR $T5215[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??YVector3@@QAE?AV0@H@Z$1:
	mov	eax, DWORD PTR $T5215[ebp]
	and	eax, 1
	je	$LN5@operator@83
	and	DWORD PTR $T5215[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@83:
	ret	0
__ehhandler$??YVector3@@QAE?AV0@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??YVector3@@QAE?AV0@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??YVector3@@QAE?AV0@H@Z ENDP				; Vector3::operator+=
PUBLIC	??YVector3@@QAE?AV0@PAH@Z			; Vector3::operator+=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??YVector3@@QAE?AV0@PAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??YVector3@@QAE?AV0@PAH@Z$1
__ehfuncinfo$??YVector3@@QAE?AV0@PAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??YVector3@@QAE?AV0@PAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??YVector3@@QAE?AV0@PAH@Z
_TEXT	SEGMENT
$T5227 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??YVector3@@QAE?AV0@PAH@Z PROC				; Vector3::operator+=, COMDAT
; _this$ = ecx

; 692  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??YVector3@@QAE?AV0@PAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5227[ebp], 0

; 693  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 694  : 
; 695  : 	X+=Num[0];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 696  : 	Y+=Num[1];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 697  : 	Z+=Num[2];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 698  : 
; 699  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 700  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 701  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 702  : 
; 703  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5227[ebp]
	or	edx, 1
	mov	DWORD PTR $T5227[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 704  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??YVector3@@QAE?AV0@PAH@Z$1:
	mov	eax, DWORD PTR $T5227[ebp]
	and	eax, 1
	je	$LN5@operator@84
	and	DWORD PTR $T5227[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@84:
	ret	0
__ehhandler$??YVector3@@QAE?AV0@PAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??YVector3@@QAE?AV0@PAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??YVector3@@QAE?AV0@PAH@Z ENDP				; Vector3::operator+=
PUBLIC	??ZVector3@@QAE?AV0@V0@@Z			; Vector3::operator-=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??ZVector3@@QAE?AV0@V0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??ZVector3@@QAE?AV0@V0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??ZVector3@@QAE?AV0@V0@@Z$0
__ehfuncinfo$??ZVector3@@QAE?AV0@V0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??ZVector3@@QAE?AV0@V0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??ZVector3@@QAE?AV0@V0@@Z
_TEXT	SEGMENT
$T5240 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector3Two$ = 12					; size = 12
??ZVector3@@QAE?AV0@V0@@Z PROC				; Vector3::operator-=, COMDAT
; _this$ = ecx

; 706  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??ZVector3@@QAE?AV0@V0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5240[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 707  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 708  : 
; 709  : 	X-=Vector3Two.X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR _Vector3Two$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 710  : 	Y-=Vector3Two.Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _Vector3Two$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 711  : 	Z-=Vector3Two.Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _Vector3Two$[ebp+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 712  : 
; 713  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 714  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 715  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 716  : 
; 717  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T5240[ebp]
	or	edx, 1
	mov	DWORD PTR $T5240[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 718  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??ZVector3@@QAE?AV0@V0@@Z$0:
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??ZVector3@@QAE?AV0@V0@@Z$2:
	mov	eax, DWORD PTR $T5240[ebp]
	and	eax, 1
	je	$LN6@operator@85
	and	DWORD PTR $T5240[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@operator@85:
	ret	0
__ehhandler$??ZVector3@@QAE?AV0@V0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??ZVector3@@QAE?AV0@V0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??ZVector3@@QAE?AV0@V0@@Z ENDP				; Vector3::operator-=
PUBLIC	??ZVector3@@QAE?AV0@N@Z				; Vector3::operator-=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??ZVector3@@QAE?AV0@N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??ZVector3@@QAE?AV0@N@Z$1
__ehfuncinfo$??ZVector3@@QAE?AV0@N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??ZVector3@@QAE?AV0@N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??ZVector3@@QAE?AV0@N@Z
_TEXT	SEGMENT
$T5252 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 8
??ZVector3@@QAE?AV0@N@Z PROC				; Vector3::operator-=, COMDAT
; _this$ = ecx

; 720  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??ZVector3@@QAE?AV0@N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5252[ebp], 0

; 721  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 722  : 
; 723  : 	X-=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fsub	QWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 724  : 	Y-=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	QWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 725  : 	Z-=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	QWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 726  : 
; 727  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 728  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 729  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 730  : 
; 731  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5252[ebp]
	or	edx, 1
	mov	DWORD PTR $T5252[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 732  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??ZVector3@@QAE?AV0@N@Z$1:
	mov	eax, DWORD PTR $T5252[ebp]
	and	eax, 1
	je	$LN5@operator@86
	and	DWORD PTR $T5252[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@86:
	ret	0
__ehhandler$??ZVector3@@QAE?AV0@N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??ZVector3@@QAE?AV0@N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??ZVector3@@QAE?AV0@N@Z ENDP				; Vector3::operator-=
PUBLIC	??ZVector3@@QAE?AV0@PAN@Z			; Vector3::operator-=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??ZVector3@@QAE?AV0@PAN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??ZVector3@@QAE?AV0@PAN@Z$1
__ehfuncinfo$??ZVector3@@QAE?AV0@PAN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??ZVector3@@QAE?AV0@PAN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??ZVector3@@QAE?AV0@PAN@Z
_TEXT	SEGMENT
$T5264 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??ZVector3@@QAE?AV0@PAN@Z PROC				; Vector3::operator-=, COMDAT
; _this$ = ecx

; 734  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??ZVector3@@QAE?AV0@PAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5264[ebp], 0

; 735  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 736  : 
; 737  : 	X-=Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fsub	QWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 738  : 	Y-=Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fsub	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 739  : 	Z-=Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fsub	QWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 740  : 
; 741  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 742  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 743  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 744  : 
; 745  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5264[ebp]
	or	edx, 1
	mov	DWORD PTR $T5264[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 746  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??ZVector3@@QAE?AV0@PAN@Z$1:
	mov	eax, DWORD PTR $T5264[ebp]
	and	eax, 1
	je	$LN5@operator@87
	and	DWORD PTR $T5264[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@87:
	ret	0
__ehhandler$??ZVector3@@QAE?AV0@PAN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??ZVector3@@QAE?AV0@PAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??ZVector3@@QAE?AV0@PAN@Z ENDP				; Vector3::operator-=
PUBLIC	??ZVector3@@QAE?AV0@M@Z				; Vector3::operator-=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??ZVector3@@QAE?AV0@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??ZVector3@@QAE?AV0@M@Z$1
__ehfuncinfo$??ZVector3@@QAE?AV0@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??ZVector3@@QAE?AV0@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??ZVector3@@QAE?AV0@M@Z
_TEXT	SEGMENT
$T5276 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??ZVector3@@QAE?AV0@M@Z PROC				; Vector3::operator-=, COMDAT
; _this$ = ecx

; 748  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??ZVector3@@QAE?AV0@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5276[ebp], 0

; 749  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 750  : 
; 751  : 	X-=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 752  : 	Y-=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 753  : 	Z-=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 754  : 
; 755  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 756  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 757  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 758  : 
; 759  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5276[ebp]
	or	edx, 1
	mov	DWORD PTR $T5276[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 760  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??ZVector3@@QAE?AV0@M@Z$1:
	mov	eax, DWORD PTR $T5276[ebp]
	and	eax, 1
	je	$LN5@operator@88
	and	DWORD PTR $T5276[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@88:
	ret	0
__ehhandler$??ZVector3@@QAE?AV0@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??ZVector3@@QAE?AV0@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??ZVector3@@QAE?AV0@M@Z ENDP				; Vector3::operator-=
PUBLIC	??ZVector3@@QAE?AV0@PAM@Z			; Vector3::operator-=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??ZVector3@@QAE?AV0@PAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??ZVector3@@QAE?AV0@PAM@Z$1
__ehfuncinfo$??ZVector3@@QAE?AV0@PAM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??ZVector3@@QAE?AV0@PAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??ZVector3@@QAE?AV0@PAM@Z
_TEXT	SEGMENT
$T5288 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??ZVector3@@QAE?AV0@PAM@Z PROC				; Vector3::operator-=, COMDAT
; _this$ = ecx

; 762  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??ZVector3@@QAE?AV0@PAM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5288[ebp], 0

; 763  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 764  : 
; 765  : 	X-=Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 766  : 	Y-=Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 767  : 	Z-=Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 768  : 
; 769  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 770  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 771  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 772  : 
; 773  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5288[ebp]
	or	edx, 1
	mov	DWORD PTR $T5288[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 774  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??ZVector3@@QAE?AV0@PAM@Z$1:
	mov	eax, DWORD PTR $T5288[ebp]
	and	eax, 1
	je	$LN5@operator@89
	and	DWORD PTR $T5288[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@89:
	ret	0
__ehhandler$??ZVector3@@QAE?AV0@PAM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??ZVector3@@QAE?AV0@PAM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??ZVector3@@QAE?AV0@PAM@Z ENDP				; Vector3::operator-=
PUBLIC	??ZVector3@@QAE?AV0@H@Z				; Vector3::operator-=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??ZVector3@@QAE?AV0@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??ZVector3@@QAE?AV0@H@Z$1
__ehfuncinfo$??ZVector3@@QAE?AV0@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??ZVector3@@QAE?AV0@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??ZVector3@@QAE?AV0@H@Z
_TEXT	SEGMENT
$T5300 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??ZVector3@@QAE?AV0@H@Z PROC				; Vector3::operator-=, COMDAT
; _this$ = ecx

; 776  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??ZVector3@@QAE?AV0@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5300[ebp], 0

; 777  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 778  : 
; 779  : 	X-=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 780  : 	Y-=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 781  : 	Z-=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 782  : 
; 783  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 784  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 785  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 786  : 
; 787  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5300[ebp]
	or	edx, 1
	mov	DWORD PTR $T5300[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 788  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??ZVector3@@QAE?AV0@H@Z$1:
	mov	eax, DWORD PTR $T5300[ebp]
	and	eax, 1
	je	$LN5@operator@90
	and	DWORD PTR $T5300[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@90:
	ret	0
__ehhandler$??ZVector3@@QAE?AV0@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??ZVector3@@QAE?AV0@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??ZVector3@@QAE?AV0@H@Z ENDP				; Vector3::operator-=
PUBLIC	??ZVector3@@QAE?AV0@PAH@Z			; Vector3::operator-=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??ZVector3@@QAE?AV0@PAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??ZVector3@@QAE?AV0@PAH@Z$1
__ehfuncinfo$??ZVector3@@QAE?AV0@PAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??ZVector3@@QAE?AV0@PAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??ZVector3@@QAE?AV0@PAH@Z
_TEXT	SEGMENT
$T5312 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??ZVector3@@QAE?AV0@PAH@Z PROC				; Vector3::operator-=, COMDAT
; _this$ = ecx

; 790  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??ZVector3@@QAE?AV0@PAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5312[ebp], 0

; 791  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 792  : 
; 793  : 	X-=Num[0];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 794  : 	Y-=Num[1];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 795  : 	Z-=Num[2];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fsubr	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 796  : 
; 797  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 798  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 799  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 800  : 
; 801  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5312[ebp]
	or	edx, 1
	mov	DWORD PTR $T5312[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 802  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??ZVector3@@QAE?AV0@PAH@Z$1:
	mov	eax, DWORD PTR $T5312[ebp]
	and	eax, 1
	je	$LN5@operator@91
	and	DWORD PTR $T5312[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@91:
	ret	0
__ehhandler$??ZVector3@@QAE?AV0@PAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??ZVector3@@QAE?AV0@PAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??ZVector3@@QAE?AV0@PAH@Z ENDP				; Vector3::operator-=
PUBLIC	??XVector3@@QAE?AV0@V0@@Z			; Vector3::operator*=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??XVector3@@QAE?AV0@V0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??XVector3@@QAE?AV0@V0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??XVector3@@QAE?AV0@V0@@Z$0
__ehfuncinfo$??XVector3@@QAE?AV0@V0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??XVector3@@QAE?AV0@V0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??XVector3@@QAE?AV0@V0@@Z
_TEXT	SEGMENT
$T5325 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector3Two$ = 12					; size = 12
??XVector3@@QAE?AV0@V0@@Z PROC				; Vector3::operator*=, COMDAT
; _this$ = ecx

; 804  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??XVector3@@QAE?AV0@V0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5325[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 805  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 806  : 
; 807  : 	X*=Vector3Two.X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _Vector3Two$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 808  : 	Y*=Vector3Two.Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _Vector3Two$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 809  : 	Z*=Vector3Two.Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _Vector3Two$[ebp+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 810  : 
; 811  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 812  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 813  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 814  : 
; 815  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T5325[ebp]
	or	edx, 1
	mov	DWORD PTR $T5325[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 816  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??XVector3@@QAE?AV0@V0@@Z$0:
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??XVector3@@QAE?AV0@V0@@Z$2:
	mov	eax, DWORD PTR $T5325[ebp]
	and	eax, 1
	je	$LN6@operator@92
	and	DWORD PTR $T5325[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@operator@92:
	ret	0
__ehhandler$??XVector3@@QAE?AV0@V0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??XVector3@@QAE?AV0@V0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??XVector3@@QAE?AV0@V0@@Z ENDP				; Vector3::operator*=
PUBLIC	??XVector3@@QAE?AV0@N@Z				; Vector3::operator*=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??XVector3@@QAE?AV0@N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??XVector3@@QAE?AV0@N@Z$1
__ehfuncinfo$??XVector3@@QAE?AV0@N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??XVector3@@QAE?AV0@N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??XVector3@@QAE?AV0@N@Z
_TEXT	SEGMENT
$T5337 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 8
??XVector3@@QAE?AV0@N@Z PROC				; Vector3::operator*=, COMDAT
; _this$ = ecx

; 818  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??XVector3@@QAE?AV0@N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5337[ebp], 0

; 819  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 820  : 
; 821  : 	X*=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	QWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 822  : 	Y*=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	QWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 823  : 	Z*=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	QWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 824  : 
; 825  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 826  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 827  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 828  : 
; 829  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5337[ebp]
	or	edx, 1
	mov	DWORD PTR $T5337[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 830  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??XVector3@@QAE?AV0@N@Z$1:
	mov	eax, DWORD PTR $T5337[ebp]
	and	eax, 1
	je	$LN5@operator@93
	and	DWORD PTR $T5337[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@93:
	ret	0
__ehhandler$??XVector3@@QAE?AV0@N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??XVector3@@QAE?AV0@N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??XVector3@@QAE?AV0@N@Z ENDP				; Vector3::operator*=
PUBLIC	??XVector3@@QAE?AV0@PAN@Z			; Vector3::operator*=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??XVector3@@QAE?AV0@PAN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??XVector3@@QAE?AV0@PAN@Z$1
__ehfuncinfo$??XVector3@@QAE?AV0@PAN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??XVector3@@QAE?AV0@PAN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??XVector3@@QAE?AV0@PAN@Z
_TEXT	SEGMENT
$T5349 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??XVector3@@QAE?AV0@PAN@Z PROC				; Vector3::operator*=, COMDAT
; _this$ = ecx

; 832  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??XVector3@@QAE?AV0@PAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5349[ebp], 0

; 833  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 834  : 
; 835  : 	X*=Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fmul	QWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 836  : 	Y*=Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fmul	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 837  : 	Z*=Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fmul	QWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 838  : 
; 839  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 840  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 841  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 842  : 
; 843  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5349[ebp]
	or	edx, 1
	mov	DWORD PTR $T5349[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 844  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??XVector3@@QAE?AV0@PAN@Z$1:
	mov	eax, DWORD PTR $T5349[ebp]
	and	eax, 1
	je	$LN5@operator@94
	and	DWORD PTR $T5349[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@94:
	ret	0
__ehhandler$??XVector3@@QAE?AV0@PAN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??XVector3@@QAE?AV0@PAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??XVector3@@QAE?AV0@PAN@Z ENDP				; Vector3::operator*=
PUBLIC	??XVector3@@QAE?AV0@M@Z				; Vector3::operator*=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??XVector3@@QAE?AV0@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??XVector3@@QAE?AV0@M@Z$1
__ehfuncinfo$??XVector3@@QAE?AV0@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??XVector3@@QAE?AV0@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??XVector3@@QAE?AV0@M@Z
_TEXT	SEGMENT
$T5361 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??XVector3@@QAE?AV0@M@Z PROC				; Vector3::operator*=, COMDAT
; _this$ = ecx

; 846  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??XVector3@@QAE?AV0@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5361[ebp], 0

; 847  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 848  : 
; 849  : 	X*=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 850  : 	Y*=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 851  : 	Z*=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 852  : 
; 853  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 854  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 855  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 856  : 
; 857  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5361[ebp]
	or	edx, 1
	mov	DWORD PTR $T5361[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 858  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??XVector3@@QAE?AV0@M@Z$1:
	mov	eax, DWORD PTR $T5361[ebp]
	and	eax, 1
	je	$LN5@operator@95
	and	DWORD PTR $T5361[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@95:
	ret	0
__ehhandler$??XVector3@@QAE?AV0@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??XVector3@@QAE?AV0@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??XVector3@@QAE?AV0@M@Z ENDP				; Vector3::operator*=
PUBLIC	??XVector3@@QAE?AV0@PAM@Z			; Vector3::operator*=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??XVector3@@QAE?AV0@PAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??XVector3@@QAE?AV0@PAM@Z$1
__ehfuncinfo$??XVector3@@QAE?AV0@PAM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??XVector3@@QAE?AV0@PAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??XVector3@@QAE?AV0@PAM@Z
_TEXT	SEGMENT
$T5373 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??XVector3@@QAE?AV0@PAM@Z PROC				; Vector3::operator*=, COMDAT
; _this$ = ecx

; 860  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??XVector3@@QAE?AV0@PAM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5373[ebp], 0

; 861  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 862  : 
; 863  : 	X*=Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 864  : 	Y*=Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 865  : 	Z*=Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 866  : 
; 867  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 868  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 869  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 870  : 
; 871  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5373[ebp]
	or	edx, 1
	mov	DWORD PTR $T5373[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 872  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??XVector3@@QAE?AV0@PAM@Z$1:
	mov	eax, DWORD PTR $T5373[ebp]
	and	eax, 1
	je	$LN5@operator@96
	and	DWORD PTR $T5373[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@96:
	ret	0
__ehhandler$??XVector3@@QAE?AV0@PAM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??XVector3@@QAE?AV0@PAM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??XVector3@@QAE?AV0@PAM@Z ENDP				; Vector3::operator*=
PUBLIC	??XVector3@@QAE?AV0@H@Z				; Vector3::operator*=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??XVector3@@QAE?AV0@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??XVector3@@QAE?AV0@H@Z$1
__ehfuncinfo$??XVector3@@QAE?AV0@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??XVector3@@QAE?AV0@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??XVector3@@QAE?AV0@H@Z
_TEXT	SEGMENT
$T5385 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??XVector3@@QAE?AV0@H@Z PROC				; Vector3::operator*=, COMDAT
; _this$ = ecx

; 874  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??XVector3@@QAE?AV0@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5385[ebp], 0

; 875  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 876  : 
; 877  : 	X*=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 878  : 	Y*=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 879  : 	Z*=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 880  : 
; 881  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 882  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 883  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 884  : 
; 885  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5385[ebp]
	or	edx, 1
	mov	DWORD PTR $T5385[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 886  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??XVector3@@QAE?AV0@H@Z$1:
	mov	eax, DWORD PTR $T5385[ebp]
	and	eax, 1
	je	$LN5@operator@97
	and	DWORD PTR $T5385[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@97:
	ret	0
__ehhandler$??XVector3@@QAE?AV0@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??XVector3@@QAE?AV0@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??XVector3@@QAE?AV0@H@Z ENDP				; Vector3::operator*=
PUBLIC	??XVector3@@QAE?AV0@PAH@Z			; Vector3::operator*=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??XVector3@@QAE?AV0@PAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??XVector3@@QAE?AV0@PAH@Z$1
__ehfuncinfo$??XVector3@@QAE?AV0@PAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??XVector3@@QAE?AV0@PAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??XVector3@@QAE?AV0@PAH@Z
_TEXT	SEGMENT
$T5397 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??XVector3@@QAE?AV0@PAH@Z PROC				; Vector3::operator*=, COMDAT
; _this$ = ecx

; 888  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??XVector3@@QAE?AV0@PAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5397[ebp], 0

; 889  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 890  : 
; 891  : 	X*=Num[0];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 892  : 	Y*=Num[1];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 893  : 	Z*=Num[2];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 894  : 
; 895  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 896  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 897  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 898  : 
; 899  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5397[ebp]
	or	edx, 1
	mov	DWORD PTR $T5397[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 900  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??XVector3@@QAE?AV0@PAH@Z$1:
	mov	eax, DWORD PTR $T5397[ebp]
	and	eax, 1
	je	$LN5@operator@98
	and	DWORD PTR $T5397[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@98:
	ret	0
__ehhandler$??XVector3@@QAE?AV0@PAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??XVector3@@QAE?AV0@PAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??XVector3@@QAE?AV0@PAH@Z ENDP				; Vector3::operator*=
PUBLIC	??_0Vector3@@QAE?AV0@V0@@Z			; Vector3::operator/=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_0Vector3@@QAE?AV0@V0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_0Vector3@@QAE?AV0@V0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??_0Vector3@@QAE?AV0@V0@@Z$0
__ehfuncinfo$??_0Vector3@@QAE?AV0@V0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_0Vector3@@QAE?AV0@V0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??_0Vector3@@QAE?AV0@V0@@Z
_TEXT	SEGMENT
$T5410 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Vector3Two$ = 12					; size = 12
??_0Vector3@@QAE?AV0@V0@@Z PROC				; Vector3::operator/=, COMDAT
; _this$ = ecx

; 902  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_0Vector3@@QAE?AV0@V0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5410[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 903  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 904  : 
; 905  : 	X/=Vector3Two.X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _Vector3Two$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 906  : 	Y/=Vector3Two.Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fdiv	DWORD PTR _Vector3Two$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 907  : 	Z/=Vector3Two.Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR _Vector3Two$[ebp+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 908  : 
; 909  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 910  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 911  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 912  : 
; 913  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T5410[ebp]
	or	edx, 1
	mov	DWORD PTR $T5410[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 914  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_0Vector3@@QAE?AV0@V0@@Z$0:
	lea	ecx, DWORD PTR _Vector3Two$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
__unwindfunclet$??_0Vector3@@QAE?AV0@V0@@Z$2:
	mov	eax, DWORD PTR $T5410[ebp]
	and	eax, 1
	je	$LN6@operator@99
	and	DWORD PTR $T5410[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN6@operator@99:
	ret	0
__ehhandler$??_0Vector3@@QAE?AV0@V0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_0Vector3@@QAE?AV0@V0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_0Vector3@@QAE?AV0@V0@@Z ENDP				; Vector3::operator/=
PUBLIC	??_0Vector3@@QAE?AV0@N@Z			; Vector3::operator/=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_0Vector3@@QAE?AV0@N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_0Vector3@@QAE?AV0@N@Z$1
__ehfuncinfo$??_0Vector3@@QAE?AV0@N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_0Vector3@@QAE?AV0@N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??_0Vector3@@QAE?AV0@N@Z
_TEXT	SEGMENT
$T5422 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 8
??_0Vector3@@QAE?AV0@N@Z PROC				; Vector3::operator/=, COMDAT
; _this$ = ecx

; 916  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_0Vector3@@QAE?AV0@N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5422[ebp], 0

; 917  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 918  : 
; 919  : 	X/=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	QWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 920  : 	Y/=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fdiv	QWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 921  : 	Z/=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	QWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 922  : 
; 923  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 924  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 925  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 926  : 
; 927  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5422[ebp]
	or	edx, 1
	mov	DWORD PTR $T5422[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 928  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_0Vector3@@QAE?AV0@N@Z$1:
	mov	eax, DWORD PTR $T5422[ebp]
	and	eax, 1
	je	$LN5@operator@100
	and	DWORD PTR $T5422[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@100:
	ret	0
__ehhandler$??_0Vector3@@QAE?AV0@N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_0Vector3@@QAE?AV0@N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_0Vector3@@QAE?AV0@N@Z ENDP				; Vector3::operator/=
PUBLIC	??_0Vector3@@QAE?AV0@PAN@Z			; Vector3::operator/=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_0Vector3@@QAE?AV0@PAN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_0Vector3@@QAE?AV0@PAN@Z$1
__ehfuncinfo$??_0Vector3@@QAE?AV0@PAN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_0Vector3@@QAE?AV0@PAN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??_0Vector3@@QAE?AV0@PAN@Z
_TEXT	SEGMENT
$T5434 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??_0Vector3@@QAE?AV0@PAN@Z PROC				; Vector3::operator/=, COMDAT
; _this$ = ecx

; 930  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_0Vector3@@QAE?AV0@PAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5434[ebp], 0

; 931  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 932  : 
; 933  : 	X/=Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fdiv	QWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 934  : 	Y/=Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fdiv	QWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 935  : 	Z/=Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fdiv	QWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 936  : 
; 937  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 938  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 939  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 940  : 
; 941  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5434[ebp]
	or	edx, 1
	mov	DWORD PTR $T5434[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 942  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_0Vector3@@QAE?AV0@PAN@Z$1:
	mov	eax, DWORD PTR $T5434[ebp]
	and	eax, 1
	je	$LN5@operator@101
	and	DWORD PTR $T5434[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@101:
	ret	0
__ehhandler$??_0Vector3@@QAE?AV0@PAN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_0Vector3@@QAE?AV0@PAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_0Vector3@@QAE?AV0@PAN@Z ENDP				; Vector3::operator/=
PUBLIC	??_0Vector3@@QAE?AV0@M@Z			; Vector3::operator/=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_0Vector3@@QAE?AV0@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_0Vector3@@QAE?AV0@M@Z$1
__ehfuncinfo$??_0Vector3@@QAE?AV0@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_0Vector3@@QAE?AV0@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??_0Vector3@@QAE?AV0@M@Z
_TEXT	SEGMENT
$T5446 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??_0Vector3@@QAE?AV0@M@Z PROC				; Vector3::operator/=, COMDAT
; _this$ = ecx

; 944  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_0Vector3@@QAE?AV0@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5446[ebp], 0

; 945  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 946  : 
; 947  : 	X/=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 948  : 	Y/=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fdiv	DWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 949  : 	Z/=Num;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR _Num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 950  : 
; 951  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 952  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 953  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 954  : 
; 955  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5446[ebp]
	or	edx, 1
	mov	DWORD PTR $T5446[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 956  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_0Vector3@@QAE?AV0@M@Z$1:
	mov	eax, DWORD PTR $T5446[ebp]
	and	eax, 1
	je	$LN5@operator@102
	and	DWORD PTR $T5446[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@102:
	ret	0
__ehhandler$??_0Vector3@@QAE?AV0@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_0Vector3@@QAE?AV0@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_0Vector3@@QAE?AV0@M@Z ENDP				; Vector3::operator/=
PUBLIC	??_0Vector3@@QAE?AV0@PAM@Z			; Vector3::operator/=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_0Vector3@@QAE?AV0@PAM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_0Vector3@@QAE?AV0@PAM@Z$1
__ehfuncinfo$??_0Vector3@@QAE?AV0@PAM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_0Vector3@@QAE?AV0@PAM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??_0Vector3@@QAE?AV0@PAM@Z
_TEXT	SEGMENT
$T5458 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??_0Vector3@@QAE?AV0@PAM@Z PROC				; Vector3::operator/=, COMDAT
; _this$ = ecx

; 958  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_0Vector3@@QAE?AV0@PAM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5458[ebp], 0

; 959  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 960  : 
; 961  : 	X/=Num[0];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Num$[ebp]
	fdiv	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 962  : 	Y/=Num[1];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Num$[ebp]
	fdiv	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 963  : 	Z/=Num[2];

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Num$[ebp]
	fdiv	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 964  : 
; 965  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 966  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 967  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 968  : 
; 969  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5458[ebp]
	or	edx, 1
	mov	DWORD PTR $T5458[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 970  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_0Vector3@@QAE?AV0@PAM@Z$1:
	mov	eax, DWORD PTR $T5458[ebp]
	and	eax, 1
	je	$LN5@operator@103
	and	DWORD PTR $T5458[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@103:
	ret	0
__ehhandler$??_0Vector3@@QAE?AV0@PAM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_0Vector3@@QAE?AV0@PAM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_0Vector3@@QAE?AV0@PAM@Z ENDP				; Vector3::operator/=
PUBLIC	??_0Vector3@@QAE?AV0@H@Z			; Vector3::operator/=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_0Vector3@@QAE?AV0@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_0Vector3@@QAE?AV0@H@Z$1
__ehfuncinfo$??_0Vector3@@QAE?AV0@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_0Vector3@@QAE?AV0@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??_0Vector3@@QAE?AV0@H@Z
_TEXT	SEGMENT
$T5470 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??_0Vector3@@QAE?AV0@H@Z PROC				; Vector3::operator/=, COMDAT
; _this$ = ecx

; 972  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_0Vector3@@QAE?AV0@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5470[ebp], 0

; 973  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 974  : 
; 975  : 	X/=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fdivr	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 976  : 	Y/=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fdivr	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 977  : 	Z/=Num;

	fild	DWORD PTR _Num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fdivr	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 978  : 
; 979  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 980  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 981  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 982  : 
; 983  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5470[ebp]
	or	edx, 1
	mov	DWORD PTR $T5470[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 984  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_0Vector3@@QAE?AV0@H@Z$1:
	mov	eax, DWORD PTR $T5470[ebp]
	and	eax, 1
	je	$LN5@operator@104
	and	DWORD PTR $T5470[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@104:
	ret	0
__ehhandler$??_0Vector3@@QAE?AV0@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_0Vector3@@QAE?AV0@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_0Vector3@@QAE?AV0@H@Z ENDP				; Vector3::operator/=
PUBLIC	??_0Vector3@@QAE?AV0@PAH@Z			; Vector3::operator/=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_0Vector3@@QAE?AV0@PAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_0Vector3@@QAE?AV0@PAH@Z$1
__ehfuncinfo$??_0Vector3@@QAE?AV0@PAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_0Vector3@@QAE?AV0@PAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??_0Vector3@@QAE?AV0@PAH@Z
_TEXT	SEGMENT
$T5482 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_Num$ = 12						; size = 4
??_0Vector3@@QAE?AV0@PAH@Z PROC				; Vector3::operator/=, COMDAT
; _this$ = ecx

; 986  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_0Vector3@@QAE?AV0@PAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5482[ebp], 0

; 987  : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 988  : 
; 989  : 	X/=Num[0];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fdivr	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 990  : 	Y/=Num[1];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	fdivr	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 991  : 	Z/=Num[2];

	mov	eax, DWORD PTR _Num$[ebp]
	fild	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fdivr	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 992  : 
; 993  : 	temp.X=X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _temp$[ebp]

; 994  : 	temp.Y=Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 995  : 	temp.Z=Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 996  : 
; 997  : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5482[ebp]
	or	edx, 1
	mov	DWORD PTR $T5482[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 998  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_0Vector3@@QAE?AV0@PAH@Z$1:
	mov	eax, DWORD PTR $T5482[ebp]
	and	eax, 1
	je	$LN5@operator@105
	and	DWORD PTR $T5482[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@105:
	ret	0
__ehhandler$??_0Vector3@@QAE?AV0@PAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_0Vector3@@QAE?AV0@PAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_0Vector3@@QAE?AV0@PAH@Z ENDP				; Vector3::operator/=
PUBLIC	__real@3ff0000000000000
PUBLIC	??EVector3@@QAE?AV0@XZ				; Vector3::operator++
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??EVector3@@QAE?AV0@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??EVector3@@QAE?AV0@XZ$1
__ehfuncinfo$??EVector3@@QAE?AV0@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??EVector3@@QAE?AV0@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??EVector3@@QAE?AV0@XZ
_TEXT	SEGMENT
$T5494 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
??EVector3@@QAE?AV0@XZ PROC				; Vector3::operator++, COMDAT
; _this$ = ecx

; 1000 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??EVector3@@QAE?AV0@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5494[ebp], 0

; 1001 : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 1002 : 
; 1003 : 	temp.X=++X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fadd	QWORD PTR __real@3ff0000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR _temp$[ebp]

; 1004 : 	temp.Y=++Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	QWORD PTR __real@3ff0000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 1005 : 	temp.Z=++Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	QWORD PTR __real@3ff0000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 1006 : 
; 1007 : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5494[ebp]
	or	edx, 1
	mov	DWORD PTR $T5494[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1008 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??EVector3@@QAE?AV0@XZ$1:
	mov	eax, DWORD PTR $T5494[ebp]
	and	eax, 1
	je	$LN5@operator@106
	and	DWORD PTR $T5494[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@106:
	ret	0
__ehhandler$??EVector3@@QAE?AV0@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??EVector3@@QAE?AV0@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??EVector3@@QAE?AV0@XZ ENDP				; Vector3::operator++
PUBLIC	??FVector3@@QAE?AV0@XZ				; Vector3::operator--
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??FVector3@@QAE?AV0@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??FVector3@@QAE?AV0@XZ$1
__ehfuncinfo$??FVector3@@QAE?AV0@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??FVector3@@QAE?AV0@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /ZI
xdata$x	ENDS
;	COMDAT ??FVector3@@QAE?AV0@XZ
_TEXT	SEGMENT
$T5508 = -96						; size = 4
_temp$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
??FVector3@@QAE?AV0@XZ PROC				; Vector3::operator--, COMDAT
; _this$ = ecx

; 1010 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??FVector3@@QAE?AV0@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T5508[ebp], 0

; 1011 : 	Vector3 temp;

	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 1012 : 
; 1013 : 	temp.X=--X;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fsub	QWORD PTR __real@3ff0000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR _temp$[ebp]

; 1014 : 	temp.Y=--Y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	QWORD PTR __real@3ff0000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fstp	DWORD PTR _temp$[ebp+4]

; 1015 : 	temp.Z=--Z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	QWORD PTR __real@3ff0000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	fstp	DWORD PTR _temp$[ebp+8]

; 1016 : 
; 1017 : 	return temp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T5508[ebp]
	or	edx, 1
	mov	DWORD PTR $T5508[ebp], edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??1Vector3@@QAE@XZ			; Vector3::~Vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1018 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??FVector3@@QAE?AV0@XZ$1:
	mov	eax, DWORD PTR $T5508[ebp]
	and	eax, 1
	je	$LN5@operator@107
	and	DWORD PTR $T5508[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1Vector3@@QAE@XZ			; Vector3::~Vector3
$LN5@operator@107:
	ret	0
__ehhandler$??FVector3@@QAE?AV0@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??FVector3@@QAE?AV0@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??FVector3@@QAE?AV0@XZ ENDP				; Vector3::operator--
PUBLIC	__real@3f800000
;	COMDAT __real@3f800000
; File c:\program files\microsoft visual studio 9.0\vc\include\math.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT
tv92 = -84						; size = 4
tv82 = -80						; size = 8
__Z$4335 = -8						; size = 4
__N$ = -4						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
??$_Pow_int@M@@YAMMH@Z PROC				; _Pow_int<float>, COMDAT

; 474  :         {unsigned int _N;

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi

; 475  :         if (_Y >= 0)

	cmp	DWORD PTR __Y$[ebp], 0
	jl	SHORT $LN7@Pow_int

; 476  :                 _N = (unsigned int)_Y;

	mov	eax, DWORD PTR __Y$[ebp]
	mov	DWORD PTR __N$[ebp], eax

; 477  :         else

	jmp	SHORT $LN6@Pow_int
$LN7@Pow_int:

; 478  :                 _N = (unsigned int)(-_Y);

	mov	eax, DWORD PTR __Y$[ebp]
	neg	eax
	mov	DWORD PTR __N$[ebp], eax
$LN6@Pow_int:

; 479  :         for (_Ty _Z = _Ty(1); ; _X *= _X)

	fld1
	fstp	DWORD PTR __Z$4335[ebp]
	jmp	SHORT $LN5@Pow_int
$LN4@Pow_int:
	fld	DWORD PTR __X$[ebp]
	fmul	DWORD PTR __X$[ebp]
	fstp	DWORD PTR __X$[ebp]
$LN5@Pow_int:

; 480  :                 {if ((_N & 1) != 0)

	mov	eax, DWORD PTR __N$[ebp]
	and	eax, 1
	je	SHORT $LN2@Pow_int

; 481  :                         _Z *= _X;

	fld	DWORD PTR __Z$4335[ebp]
	fmul	DWORD PTR __X$[ebp]
	fstp	DWORD PTR __Z$4335[ebp]
$LN2@Pow_int:

; 482  :                 if ((_N >>= 1) == 0)

	mov	eax, DWORD PTR __N$[ebp]
	shr	eax, 1
	mov	DWORD PTR __N$[ebp], eax
	jne	SHORT $LN1@Pow_int

; 483  :                         return (_Y < 0 ? _Ty(1) / _Z : _Z); }}

	cmp	DWORD PTR __Y$[ebp], 0
	jge	SHORT $LN10@Pow_int
	fld	DWORD PTR __Z$4335[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	QWORD PTR tv82[ebp]
	jmp	SHORT $LN11@Pow_int
$LN10@Pow_int:
	fld	DWORD PTR __Z$4335[ebp]
	fstp	QWORD PTR tv82[ebp]
$LN11@Pow_int:
	fld	QWORD PTR tv82[ebp]
	fstp	DWORD PTR tv92[ebp]
	fld	DWORD PTR tv92[ebp]
	jmp	SHORT $LN3@Pow_int
$LN1@Pow_int:
	jmp	SHORT $LN4@Pow_int
$LN3@Pow_int:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pow_int@M@@YAMMH@Z ENDP				; _Pow_int<float>
_TEXT	ENDS
END
