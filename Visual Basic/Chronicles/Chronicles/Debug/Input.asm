; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\Users\FireEmblem16\Documents\Visual Studio 2008\Projects\Chronicles\Chronicles\Source\Input.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	__real@3f800000
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??0MouseHandler@@QAE@_NPADPAVWindow@@M@Z	; MouseHandler::MouseHandler
EXTRN	?dbMouseZ@@YAHXZ:PROC				; dbMouseZ
EXTRN	?dbMouseY@@YAHXZ:PROC				; dbMouseY
EXTRN	?dbMouseX@@YAHXZ:PROC				; dbMouseX
EXTRN	?dbHideMouse@@YAXXZ:PROC			; dbHideMouse
EXTRN	?dbShowMouse@@YAXXZ:PROC			; dbShowMouse
EXTRN	?dbGetImageWidth@@YAHH@Z:PROC			; dbGetImageWidth
EXTRN	?dbGetImageHeight@@YAHH@Z:PROC			; dbGetImageHeight
EXTRN	?dbLoadImage@@YAXPADHH@Z:PROC			; dbLoadImage
EXTRN	?dbImageExist@@YAHH@Z:PROC			; dbImageExist
EXTRN	?dbLoadImage@@YAXPADH@Z:PROC			; dbLoadImage
EXTRN	?dbFileExist@@YAHPAD@Z:PROC			; dbFileExist
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
; File c:\users\fireemblem16\documents\visual studio 2008\projects\chronicles\chronicles\source\input.cpp
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0MouseHandler@@QAE@_NPADPAVWindow@@M@Z
_TEXT	SEGMENT
_i$91061 = -12						; size = 4
_i$91057 = -8						; size = 4
_this$ = -4						; size = 4
_SeeMouse$ = 8						; size = 1
_MouseCursor$ = 12					; size = 4
_Win$ = 16						; size = 4
_Speeder$ = 20						; size = 4
??0MouseHandler@@QAE@_NPADPAVWindow@@M@Z PROC		; MouseHandler::MouseHandler, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 23   : 	this->ShowMouse=SeeMouse;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _SeeMouse$[ebp]
	mov	BYTE PTR [eax+1], cl

; 24   : 	this->CursorName=MouseCursor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _MouseCursor$[ebp]
	mov	DWORD PTR [eax+404], ecx

; 25   : 	this->CurrentWindow=Win;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Win$[ebp]
	mov	DWORD PTR [eax+544], ecx

; 26   : 	this->BindMouseToPosition=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1

; 27   : 
; 28   : 	if(this->CursorName!="")

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	SHORT $LN16@MouseHandl

; 29   : 		this->Multiplier=Speeder;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _Speeder$[ebp]
	fstp	DWORD PTR [eax+408]

; 30   : 	else

	jmp	SHORT $LN15@MouseHandl
$LN16@MouseHandl:

; 31   : 		this->Multiplier=1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+408]
$LN15@MouseHandl:

; 32   : 
; 33   : 	for(int i=0;i<100;i++)

	mov	DWORD PTR _i$91057[ebp], 0
	jmp	SHORT $LN14@MouseHandl
$LN13@MouseHandl:
	mov	eax, DWORD PTR _i$91057[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91057[ebp], eax
$LN14@MouseHandl:
	cmp	DWORD PTR _i$91057[ebp], 100		; 00000064H
	jge	SHORT $LN12@MouseHandl

; 34   : 	{
; 35   : 		this->LeftClick[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91057[ebp]
	mov	BYTE PTR [eax+2], 0

; 36   : 		this->RightClick[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91057[ebp]
	mov	BYTE PTR [eax+302], 0

; 37   : 		this->MouseButton3[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91057[ebp]
	mov	BYTE PTR [eax+102], 0

; 38   : 		this->MouseButton4[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91057[ebp]
	mov	BYTE PTR [eax+202], 0

; 39   : 	}

	jmp	SHORT $LN13@MouseHandl
$LN12@MouseHandl:

; 40   : 
; 41   : 	for(int i=0;i<10;i++)

	mov	DWORD PTR _i$91061[ebp], 0
	jmp	SHORT $LN11@MouseHandl
$LN10@MouseHandl:
	mov	eax, DWORD PTR _i$91061[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91061[ebp], eax
$LN11@MouseHandl:
	cmp	DWORD PTR _i$91061[ebp], 10		; 0000000aH
	jge	SHORT $LN9@MouseHandl

; 42   : 	{
; 43   : 		this->MousePosX[i]=0;

	mov	eax, DWORD PTR _i$91061[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+424], 0

; 44   : 		this->MousePosY[i]=0;

	mov	eax, DWORD PTR _i$91061[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+464], 0

; 45   : 		this->MousePosZ[i]=0;

	mov	eax, DWORD PTR _i$91061[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+504], 0

; 46   : 	}

	jmp	SHORT $LN10@MouseHandl
$LN9@MouseHandl:

; 47   : 
; 48   : 	if(this->CursorName!="")

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	$LN3@MouseHandl

; 49   : 	{
; 50   : 		if(dbFileExist(this->CursorName)==1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	push	ecx
	call	?dbFileExist@@YAHPAD@Z			; dbFileExist
	add	esp, 4
	cmp	eax, 1
	jne	$LN7@MouseHandl

; 51   : 		{
; 52   : 			dbLoadImage(this->CursorName,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	push	ecx
	call	?dbLoadImage@@YAXPADH@Z			; dbLoadImage
	add	esp, 8

; 53   : 			for(this->CursorImage=1;dbImageExist(this->CursorImage)==1;this->CursorImage++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+416], 1
	jmp	SHORT $LN6@MouseHandl
$LN5@MouseHandl:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+416], ecx
$LN6@MouseHandl:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	call	?dbImageExist@@YAHH@Z			; dbImageExist
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN4@MouseHandl
	jmp	SHORT $LN5@MouseHandl
$LN4@MouseHandl:

; 54   : 			dbLoadImage(this->CursorName,this->CursorImage,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+404]
	push	eax
	call	?dbLoadImage@@YAXPADHH@Z		; dbLoadImage
	add	esp, 12					; 0000000cH

; 55   : 
; 56   : 			this->CursorHeight=dbGetImageHeight(this->CursorImage);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	call	?dbGetImageHeight@@YAHH@Z		; dbGetImageHeight
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+412], eax

; 57   : 			this->CursorWidth=dbGetImageWidth(this->CursorImage);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	call	?dbGetImageWidth@@YAHH@Z		; dbGetImageWidth
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+420], eax

; 58   : 		}
; 59   : 		else

	jmp	SHORT $LN3@MouseHandl
$LN7@MouseHandl:

; 60   : 		{
; 61   : 			this->CursorName="";

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@

; 62   : 			this->CursorImage=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+416], 0

; 63   : 			this->CursorHeight=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+412], 0

; 64   : 			this->CursorWidth=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+420], 0
$LN3@MouseHandl:

; 65   : 		}
; 66   : 	}
; 67   : 
; 68   : 	if(this->ShowMouse&&this->CursorName=="")

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN2@MouseHandl
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jne	SHORT $LN2@MouseHandl

; 69   : 		dbShowMouse();

	call	?dbShowMouse@@YAXXZ			; dbShowMouse

; 70   : 	else

	jmp	SHORT $LN1@MouseHandl
$LN2@MouseHandl:

; 71   : 		dbHideMouse();

	call	?dbHideMouse@@YAXXZ			; dbHideMouse
$LN1@MouseHandl:

; 72   : 
; 73   : 	this->MousePosX[0]=dbMouseX();

	call	?dbMouseX@@YAHXZ			; dbMouseX
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+424], eax

; 74   : 	this->MousePosY[0]=dbMouseY();

	call	?dbMouseY@@YAHXZ			; dbMouseY
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+464], eax

; 75   : 	this->MousePosZ[0]=dbMouseZ();

	call	?dbMouseZ@@YAHXZ			; dbMouseZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+504], eax

; 76   : 
; 77   : 	return;
; 78   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0MouseHandler@@QAE@_NPADPAVWindow@@M@Z ENDP		; MouseHandler::MouseHandler
_TEXT	ENDS
PUBLIC	??_GWindow@@QAEPAXI@Z				; Window::`scalar deleting destructor'
PUBLIC	??1MouseHandler@@QAE@XZ				; MouseHandler::~MouseHandler
EXTRN	?dbDeleteImage@@YAXH@Z:PROC			; dbDeleteImage
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /ZI
;	COMDAT ??1MouseHandler@@QAE@XZ
_TEXT	SEGMENT
tv71 = -84						; size = 4
$T94400 = -80						; size = 4
$T94401 = -76						; size = 4
$T94402 = -72						; size = 4
_this$ = -4						; size = 4
??1MouseHandler@@QAE@XZ PROC				; MouseHandler::~MouseHandler, COMDAT
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 	delete this->CursorName;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	mov	DWORD PTR $T94400[ebp], ecx
	mov	edx, DWORD PTR $T94400[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 82   : 	delete this->CurrentWindow;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+544]
	mov	DWORD PTR $T94402[ebp], ecx
	mov	edx, DWORD PTR $T94402[ebp]
	mov	DWORD PTR $T94401[ebp], edx
	cmp	DWORD PTR $T94401[ebp], 0
	je	SHORT $LN3@MouseHandl@2
	push	1
	mov	ecx, DWORD PTR $T94401[ebp]
	call	??_GWindow@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@MouseHandl@2
$LN3@MouseHandl@2:
	mov	DWORD PTR tv71[ebp], 0
$LN4@MouseHandl@2:

; 83   : 	dbDeleteImage(this->CursorImage);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	call	?dbDeleteImage@@YAXH@Z			; dbDeleteImage
	add	esp, 4

; 84   : 
; 85   : 	return;
; 86   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1MouseHandler@@QAE@XZ ENDP				; MouseHandler::~MouseHandler
_TEXT	ENDS
EXTRN	??1Window@@QAE@XZ:PROC				; Window::~Window
; Function compile flags: /Odtp /ZI
;	COMDAT ??_GWindow@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GWindow@@QAEPAXI@Z PROC				; Window::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Window@@QAE@XZ			; Window::~Window
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GWindow@@QAEPAXI@Z ENDP				; Window::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Button3Click@MouseHandler@@QAE_NXZ		; MouseHandler::Button3Click
; Function compile flags: /Odtp /ZI
;	COMDAT ?Button3Click@MouseHandler@@QAE_NXZ
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
?Button3Click@MouseHandler@@QAE_NXZ PROC		; MouseHandler::Button3Click, COMDAT
; _this$ = ecx

; 88   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 	return (!this->MouseButton3[0]&&this->MouseButton3[1]);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+102]
	test	ecx, ecx
	jne	SHORT $LN3@Button3Cli
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+103]
	test	eax, eax
	je	SHORT $LN3@Button3Cli
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@Button3Cli
$LN3@Button3Cli:
	mov	DWORD PTR tv72[ebp], 0
$LN4@Button3Cli:
	mov	al, BYTE PTR tv72[ebp]

; 90   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Button3Click@MouseHandler@@QAE_NXZ ENDP		; MouseHandler::Button3Click
_TEXT	ENDS
PUBLIC	?Button3DoubleClick@MouseHandler@@QAE_NH@Z	; MouseHandler::Button3DoubleClick
; Function compile flags: /Odtp /ZI
;	COMDAT ?Button3DoubleClick@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_index2$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_MaximumLag$ = 8					; size = 4
?Button3DoubleClick@MouseHandler@@QAE_NH@Z PROC		; MouseHandler::Button3DoubleClick, COMDAT
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 	if(MaximumLag>96)

	cmp	DWORD PTR _MaximumLag$[ebp], 96		; 00000060H
	jle	SHORT $LN10@Button3Dou

; 94   : 		return false;

	xor	al, al
	jmp	$LN11@Button3Dou
$LN10@Button3Dou:

; 95   : 
; 96   : 	int index=1;

	mov	DWORD PTR _index$[ebp], 1

; 97   : 	int index2;
; 98   : 
; 99   : 	if(this->MouseButton3[0]&&!this->MouseButton3[1])

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+102]
	test	ecx, ecx
	je	SHORT $LN9@Button3Dou
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+103]
	test	ecx, ecx
	jne	SHORT $LN9@Button3Dou

; 100  : 		return false;

	xor	al, al
	jmp	SHORT $LN11@Button3Dou
$LN9@Button3Dou:

; 101  : 
; 102  : 	for(index2=index-1;this->MouseButton3[index]&&index-index2<=MaximumLag;index++);

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index2$[ebp], eax
	jmp	SHORT $LN8@Button3Dou
$LN7@Button3Dou:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN8@Button3Dou:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR [eax+102]
	test	ecx, ecx
	je	SHORT $LN6@Button3Dou
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jg	SHORT $LN6@Button3Dou
	jmp	SHORT $LN7@Button3Dou
$LN6@Button3Dou:

; 103  : 
; 104  : 	if(index-index2>MaximumLag)

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jle	SHORT $LN5@Button3Dou

; 105  : 		return false;

	xor	al, al
	jmp	SHORT $LN11@Button3Dou
$LN5@Button3Dou:

; 106  : 
; 107  : 	for(index2=index-1;!this->MouseButton3[index]&&index-index2<=MaximumLag;index++);

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index2$[ebp], eax
	jmp	SHORT $LN4@Button3Dou
$LN3@Button3Dou:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN4@Button3Dou:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR [eax+102]
	test	ecx, ecx
	jne	SHORT $LN2@Button3Dou
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jg	SHORT $LN2@Button3Dou
	jmp	SHORT $LN3@Button3Dou
$LN2@Button3Dou:

; 108  : 
; 109  : 	if(index-index2>MaximumLag)

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jle	SHORT $LN1@Button3Dou

; 110  : 		return false;

	xor	al, al
	jmp	SHORT $LN11@Button3Dou
$LN1@Button3Dou:

; 111  : 
; 112  : 	return true;

	mov	al, 1
$LN11@Button3Dou:

; 113  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Button3DoubleClick@MouseHandler@@QAE_NH@Z ENDP		; MouseHandler::Button3DoubleClick
_TEXT	ENDS
PUBLIC	?Button3HoldFor@MouseHandler@@QAE_NH@Z		; MouseHandler::Button3HoldFor
; Function compile flags: /Odtp /ZI
;	COMDAT ?Button3HoldFor@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_i$91107 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Button3HoldFor@MouseHandler@@QAE_NH@Z PROC		; MouseHandler::Button3HoldFor, COMDAT
; _this$ = ecx

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 	if(length>100)

	cmp	DWORD PTR _length$[ebp], 100		; 00000064H
	jle	SHORT $LN5@Button3Hol

; 117  : 		length=100;

	mov	DWORD PTR _length$[ebp], 100		; 00000064H
$LN5@Button3Hol:

; 118  : 
; 119  : 	for(int i=0;this->MouseButton3[i];i++)

	mov	DWORD PTR _i$91107[ebp], 0
	jmp	SHORT $LN4@Button3Hol
$LN3@Button3Hol:
	mov	eax, DWORD PTR _i$91107[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91107[ebp], eax
$LN4@Button3Hol:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91107[ebp]
	movzx	ecx, BYTE PTR [eax+102]
	test	ecx, ecx
	je	SHORT $LN2@Button3Hol

; 120  : 		if(i==length-1)

	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$91107[ebp], eax
	jne	SHORT $LN1@Button3Hol

; 121  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@Button3Hol
$LN1@Button3Hol:

; 122  : 
; 123  : 	return false;

	jmp	SHORT $LN3@Button3Hol
$LN2@Button3Hol:
	xor	al, al
$LN6@Button3Hol:

; 124  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Button3HoldFor@MouseHandler@@QAE_NH@Z ENDP		; MouseHandler::Button3HoldFor
_TEXT	ENDS
PUBLIC	?Button4Click@MouseHandler@@QAE_NXZ		; MouseHandler::Button4Click
; Function compile flags: /Odtp /ZI
;	COMDAT ?Button4Click@MouseHandler@@QAE_NXZ
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
?Button4Click@MouseHandler@@QAE_NXZ PROC		; MouseHandler::Button4Click, COMDAT
; _this$ = ecx

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 	return (!this->MouseButton4[0]&&this->MouseButton4[1]);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+202]
	test	ecx, ecx
	jne	SHORT $LN3@Button4Cli
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+203]
	test	eax, eax
	je	SHORT $LN3@Button4Cli
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@Button4Cli
$LN3@Button4Cli:
	mov	DWORD PTR tv72[ebp], 0
$LN4@Button4Cli:
	mov	al, BYTE PTR tv72[ebp]

; 128  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Button4Click@MouseHandler@@QAE_NXZ ENDP		; MouseHandler::Button4Click
_TEXT	ENDS
PUBLIC	?Button4DoubleClick@MouseHandler@@QAE_NH@Z	; MouseHandler::Button4DoubleClick
; Function compile flags: /Odtp /ZI
;	COMDAT ?Button4DoubleClick@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_index2$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_MaximumLag$ = 8					; size = 4
?Button4DoubleClick@MouseHandler@@QAE_NH@Z PROC		; MouseHandler::Button4DoubleClick, COMDAT
; _this$ = ecx

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 	if(MaximumLag>96)

	cmp	DWORD PTR _MaximumLag$[ebp], 96		; 00000060H
	jle	SHORT $LN10@Button4Dou

; 132  : 		return false;

	xor	al, al
	jmp	$LN11@Button4Dou
$LN10@Button4Dou:

; 133  : 
; 134  : 	int index=1;

	mov	DWORD PTR _index$[ebp], 1

; 135  : 	int index2;
; 136  : 
; 137  : 	if(this->MouseButton4[0]&&!this->MouseButton4[1])

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+202]
	test	ecx, ecx
	je	SHORT $LN9@Button4Dou
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+203]
	test	ecx, ecx
	jne	SHORT $LN9@Button4Dou

; 138  : 		return false;

	xor	al, al
	jmp	$LN11@Button4Dou
$LN9@Button4Dou:

; 139  : 
; 140  : 	for(index2=index-1;this->MouseButton4[index]&&index-index2<=MaximumLag;index++);

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index2$[ebp], eax
	jmp	SHORT $LN8@Button4Dou
$LN7@Button4Dou:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN8@Button4Dou:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR [eax+202]
	test	ecx, ecx
	je	SHORT $LN6@Button4Dou
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jg	SHORT $LN6@Button4Dou
	jmp	SHORT $LN7@Button4Dou
$LN6@Button4Dou:

; 141  : 
; 142  : 	if(index-index2>MaximumLag)

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jle	SHORT $LN5@Button4Dou

; 143  : 		return false;

	xor	al, al
	jmp	SHORT $LN11@Button4Dou
$LN5@Button4Dou:

; 144  : 
; 145  : 	for(index2=index-1;!this->MouseButton4[index]&&index-index2<=MaximumLag;index++);

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index2$[ebp], eax
	jmp	SHORT $LN4@Button4Dou
$LN3@Button4Dou:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN4@Button4Dou:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR [eax+202]
	test	ecx, ecx
	jne	SHORT $LN2@Button4Dou
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jg	SHORT $LN2@Button4Dou
	jmp	SHORT $LN3@Button4Dou
$LN2@Button4Dou:

; 146  : 
; 147  : 	if(index-index2>MaximumLag)

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jle	SHORT $LN1@Button4Dou

; 148  : 		return false;

	xor	al, al
	jmp	SHORT $LN11@Button4Dou
$LN1@Button4Dou:

; 149  : 
; 150  : 	return true;

	mov	al, 1
$LN11@Button4Dou:

; 151  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Button4DoubleClick@MouseHandler@@QAE_NH@Z ENDP		; MouseHandler::Button4DoubleClick
_TEXT	ENDS
PUBLIC	?Button4HoldFor@MouseHandler@@QAE_NH@Z		; MouseHandler::Button4HoldFor
; Function compile flags: /Odtp /ZI
;	COMDAT ?Button4HoldFor@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_i$91136 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?Button4HoldFor@MouseHandler@@QAE_NH@Z PROC		; MouseHandler::Button4HoldFor, COMDAT
; _this$ = ecx

; 153  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 154  : 	if(length>100)

	cmp	DWORD PTR _length$[ebp], 100		; 00000064H
	jle	SHORT $LN5@Button4Hol

; 155  : 		length=100;

	mov	DWORD PTR _length$[ebp], 100		; 00000064H
$LN5@Button4Hol:

; 156  : 
; 157  : 	for(int i=0;this->MouseButton4[i];i++)

	mov	DWORD PTR _i$91136[ebp], 0
	jmp	SHORT $LN4@Button4Hol
$LN3@Button4Hol:
	mov	eax, DWORD PTR _i$91136[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91136[ebp], eax
$LN4@Button4Hol:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91136[ebp]
	movzx	ecx, BYTE PTR [eax+202]
	test	ecx, ecx
	je	SHORT $LN2@Button4Hol

; 158  : 		if(i==length-1)

	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$91136[ebp], eax
	jne	SHORT $LN1@Button4Hol

; 159  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@Button4Hol
$LN1@Button4Hol:

; 160  : 
; 161  : 	return false;

	jmp	SHORT $LN3@Button4Hol
$LN2@Button4Hol:
	xor	al, al
$LN6@Button4Hol:

; 162  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Button4HoldFor@MouseHandler@@QAE_NH@Z ENDP		; MouseHandler::Button4HoldFor
_TEXT	ENDS
PUBLIC	?GetMouseBoundToPosition@MouseHandler@@QAE_NXZ	; MouseHandler::GetMouseBoundToPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMouseBoundToPosition@MouseHandler@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseBoundToPosition@MouseHandler@@QAE_NXZ PROC	; MouseHandler::GetMouseBoundToPosition, COMDAT
; _this$ = ecx

; 164  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 	return this->BindMouseToPosition;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]

; 166  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseBoundToPosition@MouseHandler@@QAE_NXZ ENDP	; MouseHandler::GetMouseBoundToPosition
_TEXT	ENDS
PUBLIC	?MouseRightClick@MouseHandler@@QAE_NXZ		; MouseHandler::MouseRightClick
PUBLIC	?MouseLeftClick@MouseHandler@@QAE_NXZ		; MouseHandler::MouseLeftClick
PUBLIC	?IsClicked@MouseHandler@@QAE_NH@Z		; MouseHandler::IsClicked
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsClicked@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Button$ = 8						; size = 4
?IsClicked@MouseHandler@@QAE_NH@Z PROC			; MouseHandler::IsClicked, COMDAT
; _this$ = ecx

; 168  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 	switch(Button)

	mov	eax, DWORD PTR _Button$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 3
	ja	SHORT $LN1@IsClicked
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN10@IsClicked[edx*4]
$LN5@IsClicked:

; 170  : 	{
; 171  : 	case 1:
; 172  : 		return this->MouseLeftClick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MouseLeftClick@MouseHandler@@QAE_NXZ	; MouseHandler::MouseLeftClick
	jmp	SHORT $LN8@IsClicked

; 173  : 		break;

	jmp	SHORT $LN6@IsClicked
$LN4@IsClicked:

; 174  : 	case 2:
; 175  : 		return this->MouseRightClick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MouseRightClick@MouseHandler@@QAE_NXZ	; MouseHandler::MouseRightClick
	jmp	SHORT $LN8@IsClicked

; 176  : 		break;

	jmp	SHORT $LN6@IsClicked
$LN3@IsClicked:

; 177  : 	case 3:
; 178  : 		return this->Button3Click();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Button3Click@MouseHandler@@QAE_NXZ	; MouseHandler::Button3Click
	jmp	SHORT $LN8@IsClicked

; 179  : 		break;

	jmp	SHORT $LN6@IsClicked
$LN2@IsClicked:

; 180  : 	case 4:
; 181  : 		return this->Button4Click();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Button4Click@MouseHandler@@QAE_NXZ	; MouseHandler::Button4Click
	jmp	SHORT $LN8@IsClicked

; 182  : 		break;

	jmp	SHORT $LN6@IsClicked
$LN1@IsClicked:

; 183  : 	default:
; 184  : 		return false;

	xor	al, al
	jmp	SHORT $LN8@IsClicked
$LN6@IsClicked:

; 185  : 		break;
; 186  : 	}
; 187  : 
; 188  : 	return false;

	xor	al, al
$LN8@IsClicked:

; 189  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN10@IsClicked:
	DD	$LN5@IsClicked
	DD	$LN4@IsClicked
	DD	$LN3@IsClicked
	DD	$LN2@IsClicked
?IsClicked@MouseHandler@@QAE_NH@Z ENDP			; MouseHandler::IsClicked
_TEXT	ENDS
PUBLIC	?MouseRightDoubleClick@MouseHandler@@QAE_NH@Z	; MouseHandler::MouseRightDoubleClick
PUBLIC	?MouseLeftDoubleClick@MouseHandler@@QAE_NH@Z	; MouseHandler::MouseLeftDoubleClick
PUBLIC	?IsDoubleClicked@MouseHandler@@QAE_NHH@Z	; MouseHandler::IsDoubleClicked
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsDoubleClicked@MouseHandler@@QAE_NHH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Button$ = 8						; size = 4
_MaximumLag$ = 12					; size = 4
?IsDoubleClicked@MouseHandler@@QAE_NHH@Z PROC		; MouseHandler::IsDoubleClicked, COMDAT
; _this$ = ecx

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 	switch(Button)

	mov	eax, DWORD PTR _Button$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 3
	ja	SHORT $LN1@IsDoubleCl
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN10@IsDoubleCl[edx*4]
$LN5@IsDoubleCl:

; 193  : 	{
; 194  : 	case 1:
; 195  : 		return this->MouseLeftDoubleClick(MaximumLag);

	mov	eax, DWORD PTR _MaximumLag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MouseLeftDoubleClick@MouseHandler@@QAE_NH@Z ; MouseHandler::MouseLeftDoubleClick
	jmp	SHORT $LN8@IsDoubleCl

; 196  : 		break;

	jmp	SHORT $LN6@IsDoubleCl
$LN4@IsDoubleCl:

; 197  : 	case 2:
; 198  : 		return this->MouseRightDoubleClick(MaximumLag);

	mov	eax, DWORD PTR _MaximumLag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MouseRightDoubleClick@MouseHandler@@QAE_NH@Z ; MouseHandler::MouseRightDoubleClick
	jmp	SHORT $LN8@IsDoubleCl

; 199  : 		break;

	jmp	SHORT $LN6@IsDoubleCl
$LN3@IsDoubleCl:

; 200  : 	case 3:
; 201  : 		return this->Button3DoubleClick(MaximumLag);

	mov	eax, DWORD PTR _MaximumLag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Button3DoubleClick@MouseHandler@@QAE_NH@Z ; MouseHandler::Button3DoubleClick
	jmp	SHORT $LN8@IsDoubleCl

; 202  : 		break;

	jmp	SHORT $LN6@IsDoubleCl
$LN2@IsDoubleCl:

; 203  : 	case 4:
; 204  : 		return this->Button4DoubleClick(MaximumLag);

	mov	eax, DWORD PTR _MaximumLag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Button4DoubleClick@MouseHandler@@QAE_NH@Z ; MouseHandler::Button4DoubleClick
	jmp	SHORT $LN8@IsDoubleCl

; 205  : 		break;

	jmp	SHORT $LN6@IsDoubleCl
$LN1@IsDoubleCl:

; 206  : 	default:
; 207  : 		return false;

	xor	al, al
	jmp	SHORT $LN8@IsDoubleCl
$LN6@IsDoubleCl:

; 208  : 		break;
; 209  : 	}
; 210  : 
; 211  : 	return false;

	xor	al, al
$LN8@IsDoubleCl:

; 212  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN10@IsDoubleCl:
	DD	$LN5@IsDoubleCl
	DD	$LN4@IsDoubleCl
	DD	$LN3@IsDoubleCl
	DD	$LN2@IsDoubleCl
?IsDoubleClicked@MouseHandler@@QAE_NHH@Z ENDP		; MouseHandler::IsDoubleClicked
_TEXT	ENDS
PUBLIC	?MouseRightHoldFor@MouseHandler@@QAE_NH@Z	; MouseHandler::MouseRightHoldFor
PUBLIC	?MouseLeftHoldFor@MouseHandler@@QAE_NH@Z	; MouseHandler::MouseLeftHoldFor
PUBLIC	?IsHoldFor@MouseHandler@@QAE_NHH@Z		; MouseHandler::IsHoldFor
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsHoldFor@MouseHandler@@QAE_NHH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Button$ = 8						; size = 4
_Length$ = 12						; size = 4
?IsHoldFor@MouseHandler@@QAE_NHH@Z PROC			; MouseHandler::IsHoldFor, COMDAT
; _this$ = ecx

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 	switch(Button)

	mov	eax, DWORD PTR _Button$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 3
	ja	SHORT $LN1@IsHoldFor
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN10@IsHoldFor[edx*4]
$LN5@IsHoldFor:

; 216  : 	{
; 217  : 	case 1:
; 218  : 		return this->MouseLeftHoldFor(Length);

	mov	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MouseLeftHoldFor@MouseHandler@@QAE_NH@Z ; MouseHandler::MouseLeftHoldFor
	jmp	SHORT $LN8@IsHoldFor

; 219  : 		break;

	jmp	SHORT $LN6@IsHoldFor
$LN4@IsHoldFor:

; 220  : 	case 2:
; 221  : 		return this->MouseRightHoldFor(Length);

	mov	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MouseRightHoldFor@MouseHandler@@QAE_NH@Z ; MouseHandler::MouseRightHoldFor
	jmp	SHORT $LN8@IsHoldFor

; 222  : 		break;

	jmp	SHORT $LN6@IsHoldFor
$LN3@IsHoldFor:

; 223  : 	case 3:
; 224  : 		return this->Button3HoldFor(Length);

	mov	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Button3HoldFor@MouseHandler@@QAE_NH@Z	; MouseHandler::Button3HoldFor
	jmp	SHORT $LN8@IsHoldFor

; 225  : 		break;

	jmp	SHORT $LN6@IsHoldFor
$LN2@IsHoldFor:

; 226  : 	case 4:
; 227  : 		return this->Button4HoldFor(Length);

	mov	eax, DWORD PTR _Length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Button4HoldFor@MouseHandler@@QAE_NH@Z	; MouseHandler::Button4HoldFor
	jmp	SHORT $LN8@IsHoldFor

; 228  : 		break;

	jmp	SHORT $LN6@IsHoldFor
$LN1@IsHoldFor:

; 229  : 	default:
; 230  : 		return false;

	xor	al, al
	jmp	SHORT $LN8@IsHoldFor
$LN6@IsHoldFor:

; 231  : 		break;
; 232  : 	}
; 233  : 
; 234  : 	return false;

	xor	al, al
$LN8@IsHoldFor:

; 235  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN10@IsHoldFor:
	DD	$LN5@IsHoldFor
	DD	$LN4@IsHoldFor
	DD	$LN3@IsHoldFor
	DD	$LN2@IsHoldFor
?IsHoldFor@MouseHandler@@QAE_NHH@Z ENDP			; MouseHandler::IsHoldFor
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?MouseLeftClick@MouseHandler@@QAE_NXZ
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
?MouseLeftClick@MouseHandler@@QAE_NXZ PROC		; MouseHandler::MouseLeftClick, COMDAT
; _this$ = ecx

; 237  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 238  : 	return (!this->LeftClick[0]&&this->LeftClick[1]);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN3@MouseLeftC
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	test	eax, eax
	je	SHORT $LN3@MouseLeftC
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@MouseLeftC
$LN3@MouseLeftC:
	mov	DWORD PTR tv72[ebp], 0
$LN4@MouseLeftC:
	mov	al, BYTE PTR tv72[ebp]

; 239  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseLeftClick@MouseHandler@@QAE_NXZ ENDP		; MouseHandler::MouseLeftClick
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?MouseLeftDoubleClick@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_index2$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_MaximumLag$ = 8					; size = 4
?MouseLeftDoubleClick@MouseHandler@@QAE_NH@Z PROC	; MouseHandler::MouseLeftDoubleClick, COMDAT
; _this$ = ecx

; 241  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 242  : 	if(MaximumLag>96)

	cmp	DWORD PTR _MaximumLag$[ebp], 96		; 00000060H
	jle	SHORT $LN11@MouseLeftD

; 243  : 		return false;

	xor	al, al
	jmp	$LN12@MouseLeftD
$LN11@MouseLeftD:

; 244  : 
; 245  : 	int index=1;

	mov	DWORD PTR _index$[ebp], 1

; 246  : 	int index2;
; 247  : 
; 248  : 	if(this->LeftClick[0]||!this->LeftClick[1])

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN9@MouseLeftD
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	test	ecx, ecx
	jne	SHORT $LN10@MouseLeftD
$LN9@MouseLeftD:

; 249  : 		return false;

	xor	al, al
	jmp	SHORT $LN12@MouseLeftD
$LN10@MouseLeftD:

; 250  : 
; 251  : 	for(index2=index-1;this->LeftClick[index]&&index-index2<=MaximumLag;index++);

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index2$[ebp], eax
	jmp	SHORT $LN8@MouseLeftD
$LN7@MouseLeftD:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN8@MouseLeftD:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN6@MouseLeftD
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jg	SHORT $LN6@MouseLeftD
	jmp	SHORT $LN7@MouseLeftD
$LN6@MouseLeftD:

; 252  : 
; 253  : 	if(index-index2>MaximumLag)

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jle	SHORT $LN5@MouseLeftD

; 254  : 		return false;

	xor	al, al
	jmp	SHORT $LN12@MouseLeftD
$LN5@MouseLeftD:

; 255  : 
; 256  : 	for(index2=index-1;!this->LeftClick[index]&&index-index2<=MaximumLag;index++);

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index2$[ebp], eax
	jmp	SHORT $LN4@MouseLeftD
$LN3@MouseLeftD:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN4@MouseLeftD:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN2@MouseLeftD
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jg	SHORT $LN2@MouseLeftD
	jmp	SHORT $LN3@MouseLeftD
$LN2@MouseLeftD:

; 257  : 
; 258  : 	if(index-index2>MaximumLag)

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jle	SHORT $LN1@MouseLeftD

; 259  : 		return false;

	xor	al, al
	jmp	SHORT $LN12@MouseLeftD
$LN1@MouseLeftD:

; 260  : 
; 261  : 	return true;

	mov	al, 1
$LN12@MouseLeftD:

; 262  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?MouseLeftDoubleClick@MouseHandler@@QAE_NH@Z ENDP	; MouseHandler::MouseLeftDoubleClick
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?MouseLeftHoldFor@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_i$91210 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?MouseLeftHoldFor@MouseHandler@@QAE_NH@Z PROC		; MouseHandler::MouseLeftHoldFor, COMDAT
; _this$ = ecx

; 264  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 265  : 	if(length>100)

	cmp	DWORD PTR _length$[ebp], 100		; 00000064H
	jle	SHORT $LN5@MouseLeftH

; 266  : 		length=100;

	mov	DWORD PTR _length$[ebp], 100		; 00000064H
$LN5@MouseLeftH:

; 267  : 
; 268  : 	for(int i=0;this->LeftClick[i];i++)

	mov	DWORD PTR _i$91210[ebp], 0
	jmp	SHORT $LN4@MouseLeftH
$LN3@MouseLeftH:
	mov	eax, DWORD PTR _i$91210[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91210[ebp], eax
$LN4@MouseLeftH:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91210[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN2@MouseLeftH

; 269  : 		if(i==length-1)

	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$91210[ebp], eax
	jne	SHORT $LN1@MouseLeftH

; 270  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@MouseLeftH
$LN1@MouseLeftH:

; 271  : 
; 272  : 	return false;

	jmp	SHORT $LN3@MouseLeftH
$LN2@MouseLeftH:
	xor	al, al
$LN6@MouseLeftH:

; 273  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?MouseLeftHoldFor@MouseHandler@@QAE_NH@Z ENDP		; MouseHandler::MouseLeftHoldFor
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?MouseRightClick@MouseHandler@@QAE_NXZ
_TEXT	SEGMENT
tv72 = -72						; size = 4
_this$ = -4						; size = 4
?MouseRightClick@MouseHandler@@QAE_NXZ PROC		; MouseHandler::MouseRightClick, COMDAT
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 276  : 	return (!this->RightClick[0]&&this->RightClick[1]);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+302]
	test	ecx, ecx
	jne	SHORT $LN3@MouseRight
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+303]
	test	eax, eax
	je	SHORT $LN3@MouseRight
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@MouseRight
$LN3@MouseRight:
	mov	DWORD PTR tv72[ebp], 0
$LN4@MouseRight:
	mov	al, BYTE PTR tv72[ebp]

; 277  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseRightClick@MouseHandler@@QAE_NXZ ENDP		; MouseHandler::MouseRightClick
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?MouseRightDoubleClick@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_index2$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_MaximumLag$ = 8					; size = 4
?MouseRightDoubleClick@MouseHandler@@QAE_NH@Z PROC	; MouseHandler::MouseRightDoubleClick, COMDAT
; _this$ = ecx

; 279  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 	if(MaximumLag>96)

	cmp	DWORD PTR _MaximumLag$[ebp], 96		; 00000060H
	jle	SHORT $LN11@MouseRight@2

; 281  : 		return false;

	xor	al, al
	jmp	$LN12@MouseRight@2
$LN11@MouseRight@2:

; 282  : 
; 283  : 	int index=1;

	mov	DWORD PTR _index$[ebp], 1

; 284  : 	int index2;
; 285  : 
; 286  : 	if(this->RightClick[0]||!this->RightClick[1])

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+302]
	test	ecx, ecx
	jne	SHORT $LN9@MouseRight@2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+303]
	test	ecx, ecx
	jne	SHORT $LN10@MouseRight@2
$LN9@MouseRight@2:

; 287  : 		return false;

	xor	al, al
	jmp	$LN12@MouseRight@2
$LN10@MouseRight@2:

; 288  : 
; 289  : 	for(index2=index-1;this->RightClick[index]&&index-index2<=MaximumLag;index++);

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index2$[ebp], eax
	jmp	SHORT $LN8@MouseRight@2
$LN7@MouseRight@2:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN8@MouseRight@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR [eax+302]
	test	ecx, ecx
	je	SHORT $LN6@MouseRight@2
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jg	SHORT $LN6@MouseRight@2
	jmp	SHORT $LN7@MouseRight@2
$LN6@MouseRight@2:

; 290  : 
; 291  : 	if(index-index2>MaximumLag)

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jle	SHORT $LN5@MouseRight@2

; 292  : 		return false;

	xor	al, al
	jmp	SHORT $LN12@MouseRight@2
$LN5@MouseRight@2:

; 293  : 
; 294  : 	for(index2=index-1;!this->RightClick[index]&&index-index2<=MaximumLag;index++);

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _index2$[ebp], eax
	jmp	SHORT $LN4@MouseRight@2
$LN3@MouseRight@2:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN4@MouseRight@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR [eax+302]
	test	ecx, ecx
	jne	SHORT $LN2@MouseRight@2
	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jg	SHORT $LN2@MouseRight@2
	jmp	SHORT $LN3@MouseRight@2
$LN2@MouseRight@2:

; 295  : 
; 296  : 	if(index-index2>MaximumLag)

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, DWORD PTR _index2$[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jle	SHORT $LN1@MouseRight@2

; 297  : 		return false;

	xor	al, al
	jmp	SHORT $LN12@MouseRight@2
$LN1@MouseRight@2:

; 298  : 
; 299  : 	return true;

	mov	al, 1
$LN12@MouseRight@2:

; 300  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?MouseRightDoubleClick@MouseHandler@@QAE_NH@Z ENDP	; MouseHandler::MouseRightDoubleClick
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?MouseRightHoldFor@MouseHandler@@QAE_NH@Z
_TEXT	SEGMENT
_i$91240 = -8						; size = 4
_this$ = -4						; size = 4
_length$ = 8						; size = 4
?MouseRightHoldFor@MouseHandler@@QAE_NH@Z PROC		; MouseHandler::MouseRightHoldFor, COMDAT
; _this$ = ecx

; 302  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 	if(length>100)

	cmp	DWORD PTR _length$[ebp], 100		; 00000064H
	jle	SHORT $LN5@MouseRight@3

; 304  : 		length=100;

	mov	DWORD PTR _length$[ebp], 100		; 00000064H
$LN5@MouseRight@3:

; 305  : 
; 306  : 	for(int i=0;this->RightClick[i];i++)

	mov	DWORD PTR _i$91240[ebp], 0
	jmp	SHORT $LN4@MouseRight@3
$LN3@MouseRight@3:
	mov	eax, DWORD PTR _i$91240[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91240[ebp], eax
$LN4@MouseRight@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91240[ebp]
	movzx	ecx, BYTE PTR [eax+302]
	test	ecx, ecx
	je	SHORT $LN2@MouseRight@3

; 307  : 		if(i==length-1)

	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$91240[ebp], eax
	jne	SHORT $LN1@MouseRight@3

; 308  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@MouseRight@3
$LN1@MouseRight@3:

; 309  : 
; 310  : 	return false;

	jmp	SHORT $LN3@MouseRight@3
$LN2@MouseRight@3:
	xor	al, al
$LN6@MouseRight@3:

; 311  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?MouseRightHoldFor@MouseHandler@@QAE_NH@Z ENDP		; MouseHandler::MouseRightHoldFor
_TEXT	ENDS
PUBLIC	?GetCursorName@MouseHandler@@QAEPADXZ		; MouseHandler::GetCursorName
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCursorName@MouseHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorName@MouseHandler@@QAEPADXZ PROC		; MouseHandler::GetCursorName, COMDAT
; _this$ = ecx

; 313  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 314  : 	return this->CursorName;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+404]

; 315  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCursorName@MouseHandler@@QAEPADXZ ENDP		; MouseHandler::GetCursorName
_TEXT	ENDS
PUBLIC	??_C@_0BF@KEPEKHJ@Mouse?5Button?54?5Click?$AA@	; `string'
PUBLIC	??_C@_0BF@IKEDGA@Mouse?5Button?53?5Click?$AA@	; `string'
PUBLIC	??_C@_0M@BDGMFCOP@Right?5Click?$AA@		; `string'
PUBLIC	??_C@_0L@OIICMJMF@Left?5Click?$AA@		; `string'
PUBLIC	?GetFirstClick$@MouseHandler@@QAEPADXZ		; MouseHandler::GetFirstClick$
;	COMDAT ??_C@_0BF@KEPEKHJ@Mouse?5Button?54?5Click?$AA@
CONST	SEGMENT
??_C@_0BF@KEPEKHJ@Mouse?5Button?54?5Click?$AA@ DB 'Mouse Button 4 Click', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IKEDGA@Mouse?5Button?53?5Click?$AA@
CONST	SEGMENT
??_C@_0BF@IKEDGA@Mouse?5Button?53?5Click?$AA@ DB 'Mouse Button 3 Click', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BDGMFCOP@Right?5Click?$AA@
CONST	SEGMENT
??_C@_0M@BDGMFCOP@Right?5Click?$AA@ DB 'Right Click', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OIICMJMF@Left?5Click?$AA@
CONST	SEGMENT
??_C@_0L@OIICMJMF@Left?5Click?$AA@ DB 'Left Click', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?GetFirstClick$@MouseHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstClick$@MouseHandler@@QAEPADXZ PROC		; MouseHandler::GetFirstClick$, COMDAT
; _this$ = ecx

; 317  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 318  : 	if(this->MouseLeftClick())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MouseLeftClick@MouseHandler@@QAE_NXZ	; MouseHandler::MouseLeftClick
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@GetFirstCl

; 319  : 		return "Left Click";

	mov	eax, OFFSET ??_C@_0L@OIICMJMF@Left?5Click?$AA@
	jmp	SHORT $LN9@GetFirstCl
	jmp	SHORT $LN9@GetFirstCl
$LN8@GetFirstCl:

; 320  : 	else if(this->MouseRightClick())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MouseRightClick@MouseHandler@@QAE_NXZ	; MouseHandler::MouseRightClick
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@GetFirstCl

; 321  : 		return "Right Click";

	mov	eax, OFFSET ??_C@_0M@BDGMFCOP@Right?5Click?$AA@
	jmp	SHORT $LN9@GetFirstCl
	jmp	SHORT $LN9@GetFirstCl
$LN6@GetFirstCl:

; 322  : 	else if(this->Button3Click())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Button3Click@MouseHandler@@QAE_NXZ	; MouseHandler::Button3Click
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@GetFirstCl

; 323  : 		return "Mouse Button 3 Click";

	mov	eax, OFFSET ??_C@_0BF@IKEDGA@Mouse?5Button?53?5Click?$AA@
	jmp	SHORT $LN9@GetFirstCl
	jmp	SHORT $LN9@GetFirstCl
$LN4@GetFirstCl:

; 324  : 	else if(this->Button4Click())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Button4Click@MouseHandler@@QAE_NXZ	; MouseHandler::Button4Click
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GetFirstCl

; 325  : 		return "Mouse Button 4 Click";

	mov	eax, OFFSET ??_C@_0BF@KEPEKHJ@Mouse?5Button?54?5Click?$AA@
	jmp	SHORT $LN9@GetFirstCl

; 326  : 	else

	jmp	SHORT $LN9@GetFirstCl
$LN2@GetFirstCl:

; 327  : 		return "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN9@GetFirstCl:

; 328  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstClick$@MouseHandler@@QAEPADXZ ENDP		; MouseHandler::GetFirstClick$
_TEXT	ENDS
PUBLIC	?GetMultiplier@MouseHandler@@QAEMXZ		; MouseHandler::GetMultiplier
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMultiplier@MouseHandler@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMultiplier@MouseHandler@@QAEMXZ PROC		; MouseHandler::GetMultiplier, COMDAT
; _this$ = ecx

; 330  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 331  : 	return this->Multiplier;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+408]

; 332  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMultiplier@MouseHandler@@QAEMXZ ENDP		; MouseHandler::GetMultiplier
_TEXT	ENDS
PUBLIC	?GetCursorHeight@MouseHandler@@QAEHXZ		; MouseHandler::GetCursorHeight
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCursorHeight@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorHeight@MouseHandler@@QAEHXZ PROC		; MouseHandler::GetCursorHeight, COMDAT
; _this$ = ecx

; 334  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 335  : 	return this->CursorHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+412]

; 336  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCursorHeight@MouseHandler@@QAEHXZ ENDP		; MouseHandler::GetCursorHeight
_TEXT	ENDS
PUBLIC	?GetCursorImage@MouseHandler@@QAEHXZ		; MouseHandler::GetCursorImage
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCursorImage@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorImage@MouseHandler@@QAEHXZ PROC		; MouseHandler::GetCursorImage, COMDAT
; _this$ = ecx

; 338  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 339  : 	return this->CursorImage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+416]

; 340  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCursorImage@MouseHandler@@QAEHXZ ENDP		; MouseHandler::GetCursorImage
_TEXT	ENDS
PUBLIC	?GetCursorWidth@MouseHandler@@QAEHXZ		; MouseHandler::GetCursorWidth
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCursorWidth@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCursorWidth@MouseHandler@@QAEHXZ PROC		; MouseHandler::GetCursorWidth, COMDAT
; _this$ = ecx

; 342  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 343  : 	return this->CursorWidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+420]

; 344  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCursorWidth@MouseHandler@@QAEHXZ ENDP		; MouseHandler::GetCursorWidth
_TEXT	ENDS
PUBLIC	?GetFirstClick@MouseHandler@@QAEHXZ		; MouseHandler::GetFirstClick
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetFirstClick@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFirstClick@MouseHandler@@QAEHXZ PROC		; MouseHandler::GetFirstClick, COMDAT
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 347  : 	if(this->MouseLeftClick())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MouseLeftClick@MouseHandler@@QAE_NXZ	; MouseHandler::MouseLeftClick
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@GetFirstCl@2

; 348  : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN9@GetFirstCl@2
	jmp	SHORT $LN9@GetFirstCl@2
$LN8@GetFirstCl@2:

; 349  : 	else if(this->MouseRightClick())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?MouseRightClick@MouseHandler@@QAE_NXZ	; MouseHandler::MouseRightClick
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@GetFirstCl@2

; 350  : 		return 2;

	mov	eax, 2
	jmp	SHORT $LN9@GetFirstCl@2
	jmp	SHORT $LN9@GetFirstCl@2
$LN6@GetFirstCl@2:

; 351  : 	else if(this->Button3Click())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Button3Click@MouseHandler@@QAE_NXZ	; MouseHandler::Button3Click
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@GetFirstCl@2

; 352  : 		return 3;

	mov	eax, 3
	jmp	SHORT $LN9@GetFirstCl@2
	jmp	SHORT $LN9@GetFirstCl@2
$LN4@GetFirstCl@2:

; 353  : 	else if(this->Button4Click())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Button4Click@MouseHandler@@QAE_NXZ	; MouseHandler::Button4Click
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GetFirstCl@2

; 354  : 		return 4;

	mov	eax, 4
	jmp	SHORT $LN9@GetFirstCl@2

; 355  : 	else

	jmp	SHORT $LN9@GetFirstCl@2
$LN2@GetFirstCl@2:

; 356  : 		return -1;

	or	eax, -1
$LN9@GetFirstCl@2:

; 357  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstClick@MouseHandler@@QAEHXZ ENDP		; MouseHandler::GetFirstClick
_TEXT	ENDS
PUBLIC	?MouseXPos@MouseHandler@@QAEHXZ			; MouseHandler::MouseXPos
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseXPos@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseXPos@MouseHandler@@QAEHXZ PROC			; MouseHandler::MouseXPos, COMDAT
; _this$ = ecx

; 359  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 360  : 	return this->MousePosX[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+424]

; 361  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseXPos@MouseHandler@@QAEHXZ ENDP			; MouseHandler::MouseXPos
_TEXT	ENDS
PUBLIC	?MouseYPos@MouseHandler@@QAEHXZ			; MouseHandler::MouseYPos
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseYPos@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseYPos@MouseHandler@@QAEHXZ PROC			; MouseHandler::MouseYPos, COMDAT
; _this$ = ecx

; 363  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 364  : 	return this->MousePosY[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+464]

; 365  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseYPos@MouseHandler@@QAEHXZ ENDP			; MouseHandler::MouseYPos
_TEXT	ENDS
PUBLIC	?MouseZPos@MouseHandler@@QAEHXZ			; MouseHandler::MouseZPos
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseZPos@MouseHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseZPos@MouseHandler@@QAEHXZ PROC			; MouseHandler::MouseZPos, COMDAT
; _this$ = ecx

; 367  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 368  : 	return this->MousePosZ[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+504]

; 369  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseZPos@MouseHandler@@QAEHXZ ENDP			; MouseHandler::MouseZPos
_TEXT	ENDS
PUBLIC	?SetMouseView@MouseHandler@@QAEX_N@Z		; MouseHandler::SetMouseView
PUBLIC	?SetCursorPosition@MouseHandler@@QAEXHHH@Z	; MouseHandler::SetCursorPosition
PUBLIC	?ApplyToApp@MouseHandler@@QAEXXZ		; MouseHandler::ApplyToApp
; Function compile flags: /Odtp /ZI
;	COMDAT ?ApplyToApp@MouseHandler@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ApplyToApp@MouseHandler@@QAEXXZ PROC			; MouseHandler::ApplyToApp, COMDAT
; _this$ = ecx

; 371  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 372  : 	this->SetCursorPosition(this->MousePosX[0],this->MousePosY[0],this->MousePosX[0]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+424]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+464]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+424]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCursorPosition@MouseHandler@@QAEXHHH@Z ; MouseHandler::SetCursorPosition

; 373  : 	this->SetMouseView(this->ShowMouse);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMouseView@MouseHandler@@QAEX_N@Z	; MouseHandler::SetMouseView

; 374  : 
; 375  : 	return;
; 376  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ApplyToApp@MouseHandler@@QAEXXZ ENDP			; MouseHandler::ApplyToApp
_TEXT	ENDS
PUBLIC	?MoveMouse@MouseHandler@@QAEXHHH@Z		; MouseHandler::MoveMouse
EXTRN	?dbPositionMouse@@YAXHH@Z:PROC			; dbPositionMouse
; Function compile flags: /Odtp /ZI
;	COMDAT ?MoveMouse@MouseHandler@@QAEXHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
?MoveMouse@MouseHandler@@QAEXHHH@Z PROC			; MouseHandler::MoveMouse, COMDAT
; _this$ = ecx

; 378  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 379  : 	if(this->CursorName!="")

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	SHORT $LN3@MoveMouse

; 380  : 	{
; 381  : 		this->MousePosX[0]+=X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+424]
	add	ecx, DWORD PTR _X$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+424], ecx

; 382  : 		this->MousePosY[0]+=Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+464]
	add	ecx, DWORD PTR _Y$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+464], ecx

; 383  : 		this->MousePosZ[0]+=Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+504]
	add	ecx, DWORD PTR _Z$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+504], ecx

; 384  : 
; 385  : 		if(this->BindMouseToPosition)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@MoveMouse

; 386  : 			dbPositionMouse(this->MousePosX[0],this->MousePosY[0]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+464]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+424]
	push	eax
	call	?dbPositionMouse@@YAXHH@Z		; dbPositionMouse
	add	esp, 8
$LN3@MoveMouse:

; 387  : 	}
; 388  : 
; 389  : 	return;
; 390  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MoveMouse@MouseHandler@@QAEXHHH@Z ENDP			; MouseHandler::MoveMouse
_TEXT	ENDS
PUBLIC	?SetCursorFile@MouseHandler@@QAEXPAD@Z		; MouseHandler::SetCursorFile
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetCursorFile@MouseHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?SetCursorFile@MouseHandler@@QAEXPAD@Z PROC		; MouseHandler::SetCursorFile, COMDAT
; _this$ = ecx

; 392  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 393  : 	if(dbFileExist(name)==1)

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?dbFileExist@@YAHPAD@Z			; dbFileExist
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN3@SetCursorF

; 394  : 	{
; 395  : 		this->CursorName=name;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [eax+404], ecx

; 396  : 
; 397  : 		dbDeleteImage(this->CursorImage);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	call	?dbDeleteImage@@YAXH@Z			; dbDeleteImage
	add	esp, 4

; 398  : 		dbLoadImage(this->CursorName,this->CursorImage);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+404]
	push	eax
	call	?dbLoadImage@@YAXPADH@Z			; dbLoadImage
	add	esp, 8

; 399  : 		dbHideMouse();

	call	?dbHideMouse@@YAXXZ			; dbHideMouse

; 400  : 
; 401  : 		this->CursorHeight=dbGetImageHeight(this->CursorImage);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	call	?dbGetImageHeight@@YAHH@Z		; dbGetImageHeight
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+412], eax

; 402  : 		this->CursorWidth=dbGetImageWidth(this->CursorImage);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	call	?dbGetImageWidth@@YAHH@Z		; dbGetImageWidth
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+420], eax

; 403  : 		this->ShowMouse=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1
	jmp	SHORT $LN4@SetCursorF
$LN3@SetCursorF:

; 404  : 	}
; 405  : 	else if(name=="")

	cmp	DWORD PTR _name$[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jne	SHORT $LN4@SetCursorF

; 406  : 	{
; 407  : 		this->CursorName=name;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [eax+404], ecx

; 408  : 		this->ShowMouse=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 409  : 
; 410  : 		dbDeleteImage(this->CursorImage);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	call	?dbDeleteImage@@YAXH@Z			; dbDeleteImage
	add	esp, 4

; 411  : 		dbShowMouse();

	call	?dbShowMouse@@YAXXZ			; dbShowMouse
$LN4@SetCursorF:

; 412  : 	}
; 413  : 
; 414  : 	return;
; 415  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCursorFile@MouseHandler@@QAEXPAD@Z ENDP		; MouseHandler::SetCursorFile
_TEXT	ENDS
PUBLIC	?SetCursorImage@MouseHandler@@QAEXH@Z		; MouseHandler::SetCursorImage
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetCursorImage@MouseHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_img$ = 8						; size = 4
?SetCursorImage@MouseHandler@@QAEXH@Z PROC		; MouseHandler::SetCursorImage, COMDAT
; _this$ = ecx

; 417  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 418  : 	this->CursorImage=img;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _img$[ebp]
	mov	DWORD PTR [eax+416], ecx

; 419  : 
; 420  : 	return;
; 421  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCursorImage@MouseHandler@@QAEXH@Z ENDP		; MouseHandler::SetCursorImage
_TEXT	ENDS
PUBLIC	?SetCursorPosition@MouseHandler@@QAEXHH@Z	; MouseHandler::SetCursorPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetCursorPosition@MouseHandler@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
?SetCursorPosition@MouseHandler@@QAEXHH@Z PROC		; MouseHandler::SetCursorPosition, COMDAT
; _this$ = ecx

; 423  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 424  : 	dbPositionMouse(X,Y);

	mov	eax, DWORD PTR _Y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _X$[ebp]
	push	ecx
	call	?dbPositionMouse@@YAXHH@Z		; dbPositionMouse
	add	esp, 8

; 425  : 
; 426  : 	this->MousePosX[0]=X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _X$[ebp]
	mov	DWORD PTR [eax+424], ecx

; 427  : 	this->MousePosY[0]=Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Y$[ebp]
	mov	DWORD PTR [eax+464], ecx

; 428  : 
; 429  : 	return;
; 430  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetCursorPosition@MouseHandler@@QAEXHH@Z ENDP		; MouseHandler::SetCursorPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetCursorPosition@MouseHandler@@QAEXHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
?SetCursorPosition@MouseHandler@@QAEXHHH@Z PROC		; MouseHandler::SetCursorPosition, COMDAT
; _this$ = ecx

; 432  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 433  : 	dbPositionMouse(X,Y);

	mov	eax, DWORD PTR _Y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _X$[ebp]
	push	ecx
	call	?dbPositionMouse@@YAXHH@Z		; dbPositionMouse
	add	esp, 8

; 434  : 
; 435  : 	this->MousePosX[0]=X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _X$[ebp]
	mov	DWORD PTR [eax+424], ecx

; 436  : 	this->MousePosY[0]=Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Y$[ebp]
	mov	DWORD PTR [eax+464], ecx

; 437  : 	this->MousePosZ[0]=Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Z$[ebp]
	mov	DWORD PTR [eax+504], ecx

; 438  : 
; 439  : 	return;
; 440  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetCursorPosition@MouseHandler@@QAEXHHH@Z ENDP		; MouseHandler::SetCursorPosition
_TEXT	ENDS
PUBLIC	?SetMouseBoundToCursor@MouseHandler@@QAEX_N@Z	; MouseHandler::SetMouseBoundToCursor
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouseBoundToCursor@MouseHandler@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Binding$ = 8						; size = 1
?SetMouseBoundToCursor@MouseHandler@@QAEX_N@Z PROC	; MouseHandler::SetMouseBoundToCursor, COMDAT
; _this$ = ecx

; 442  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 443  : 	this->BindMouseToPosition=Binding;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _Binding$[ebp]
	mov	BYTE PTR [eax], cl

; 444  : 
; 445  : 	return;
; 446  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseBoundToCursor@MouseHandler@@QAEX_N@Z ENDP	; MouseHandler::SetMouseBoundToCursor
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?SetMouseView@MouseHandler@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_view$ = 8						; size = 1
?SetMouseView@MouseHandler@@QAEX_N@Z PROC		; MouseHandler::SetMouseView, COMDAT
; _this$ = ecx

; 448  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 449  : 	this->ShowMouse=view;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _view$[ebp]
	mov	BYTE PTR [eax+1], cl

; 450  : 
; 451  : 	if(this->ShowMouse&&this->CursorName=="")

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN2@SetMouseVi
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jne	SHORT $LN2@SetMouseVi

; 452  : 		dbShowMouse();

	call	?dbShowMouse@@YAXXZ			; dbShowMouse

; 453  : 	else

	jmp	SHORT $LN3@SetMouseVi
$LN2@SetMouseVi:

; 454  : 		dbHideMouse();

	call	?dbHideMouse@@YAXXZ			; dbHideMouse
$LN3@SetMouseVi:

; 455  : 
; 456  : 	return;
; 457  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseView@MouseHandler@@QAEX_N@Z ENDP		; MouseHandler::SetMouseView
_TEXT	ENDS
PUBLIC	?SetMultiplier@MouseHandler@@QAEXM@Z		; MouseHandler::SetMultiplier
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMultiplier@MouseHandler@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Speeder$ = 8						; size = 4
?SetMultiplier@MouseHandler@@QAEXM@Z PROC		; MouseHandler::SetMultiplier, COMDAT
; _this$ = ecx

; 459  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 460  : 	this->Multiplier=Speeder;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _Speeder$[ebp]
	fstp	DWORD PTR [eax+408]

; 461  : 
; 462  : 	return;
; 463  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMultiplier@MouseHandler@@QAEXM@Z ENDP		; MouseHandler::SetMultiplier
_TEXT	ENDS
PUBLIC	?Update@MouseHandler@@QAEXXZ			; MouseHandler::Update
EXTRN	?dbPasteImage@@YAXHHHH@Z:PROC			; dbPasteImage
EXTRN	?dbMouseClick@@YAHXZ:PROC			; dbMouseClick
EXTRN	?GetCurrentHeight@Window@@QAEHXZ:PROC		; Window::GetCurrentHeight
EXTRN	?GetCurrentWidth@Window@@QAEHXZ:PROC		; Window::GetCurrentWidth
EXTRN	?dbMouseMoveZ@@YAHXZ:PROC			; dbMouseMoveZ
EXTRN	?dbMouseMoveY@@YAHXZ:PROC			; dbMouseMoveY
EXTRN	?dbMouseMoveX@@YAHXZ:PROC			; dbMouseMoveX
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?Update@MouseHandler@@QAEXXZ
_TEXT	SEGMENT
tv321 = -92						; size = 4
tv311 = -92						; size = 4
tv301 = -92						; size = 4
tv387 = -88						; size = 8
tv385 = -88						; size = 8
tv383 = -88						; size = 8
_MouseClickValue$ = -16					; size = 4
_i$91349 = -12						; size = 4
_i$91345 = -8						; size = 4
_this$ = -4						; size = 4
?Update@MouseHandler@@QAEXXZ PROC			; MouseHandler::Update, COMDAT
; _this$ = ecx

; 465  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 466  : 	for(int i=99;i>=0;i--)

	mov	DWORD PTR _i$91345[ebp], 99		; 00000063H
	jmp	SHORT $LN22@Update
$LN21@Update:
	mov	eax, DWORD PTR _i$91345[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$91345[ebp], eax
$LN22@Update:
	cmp	DWORD PTR _i$91345[ebp], 0
	jl	SHORT $LN20@Update

; 467  : 	{
; 468  : 		this->LeftClick[i]=this->LeftClick[i-1];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91345[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$91345[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+2], dl

; 469  : 		this->RightClick[i]=this->RightClick[i-1];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91345[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$91345[ebp]
	mov	dl, BYTE PTR [ecx+301]
	mov	BYTE PTR [eax+302], dl

; 470  : 		this->MouseButton3[i]=this->MouseButton3[i-1];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91345[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$91345[ebp]
	mov	dl, BYTE PTR [ecx+101]
	mov	BYTE PTR [eax+102], dl

; 471  : 		this->MouseButton4[i]=this->MouseButton4[i-1];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91345[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$91345[ebp]
	mov	dl, BYTE PTR [ecx+201]
	mov	BYTE PTR [eax+202], dl

; 472  : 	}

	jmp	SHORT $LN21@Update
$LN20@Update:

; 473  : 
; 474  : 	for(int i=9;i>=0;i--)

	mov	DWORD PTR _i$91349[ebp], 9
	jmp	SHORT $LN19@Update
$LN18@Update:
	mov	eax, DWORD PTR _i$91349[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$91349[ebp], eax
$LN19@Update:
	cmp	DWORD PTR _i$91349[ebp], 0
	jl	SHORT $LN17@Update

; 475  : 	{
; 476  : 		this->MousePosX[i]=this->MousePosX[i-1];

	mov	eax, DWORD PTR _i$91349[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$91349[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+420]
	mov	DWORD PTR [ecx+eax*4+424], edx

; 477  : 		this->MousePosY[i]=this->MousePosY[i-1];

	mov	eax, DWORD PTR _i$91349[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$91349[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+460]
	mov	DWORD PTR [ecx+eax*4+464], edx

; 478  : 		this->MousePosZ[i]=this->MousePosZ[i-1];

	mov	eax, DWORD PTR _i$91349[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$91349[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+500]
	mov	DWORD PTR [ecx+eax*4+504], edx

; 479  : 	}

	jmp	SHORT $LN18@Update
$LN17@Update:

; 480  : 
; 481  : 	this->MousePosX[0]=this->MousePosX[1]+dbMouseMoveX()*this->Multiplier;

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+428]
	fstp	QWORD PTR tv383[ebp]
	call	?dbMouseMoveX@@YAHXZ			; dbMouseMoveX
	mov	DWORD PTR tv301[ebp], eax
	fild	DWORD PTR tv301[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+408]
	fadd	QWORD PTR tv383[ebp]
	call	__ftol2_sse
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+424], eax

; 482  : 	this->MousePosY[0]=this->MousePosY[1]+dbMouseMoveY()*this->Multiplier;

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+468]
	fstp	QWORD PTR tv385[ebp]
	call	?dbMouseMoveY@@YAHXZ			; dbMouseMoveY
	mov	DWORD PTR tv311[ebp], eax
	fild	DWORD PTR tv311[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+408]
	fadd	QWORD PTR tv385[ebp]
	call	__ftol2_sse
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+464], eax

; 483  : 	this->MousePosZ[0]=this->MousePosZ[1]+dbMouseMoveZ()*this->Multiplier;

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+508]
	fstp	QWORD PTR tv387[ebp]
	call	?dbMouseMoveZ@@YAHXZ			; dbMouseMoveZ
	mov	DWORD PTR tv321[ebp], eax
	fild	DWORD PTR tv321[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+408]
	fadd	QWORD PTR tv387[ebp]
	call	__ftol2_sse
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+504], eax

; 484  : 	
; 485  : 	if(MousePosX[0]<0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+424], 0
	jge	SHORT $LN16@Update

; 486  : 		MousePosX[0]=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+424], 0
$LN16@Update:

; 487  : 	if(MousePosX[0]>this->CurrentWindow->GetCurrentWidth())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+544]
	call	?GetCurrentWidth@Window@@QAEHXZ		; Window::GetCurrentWidth
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+424], eax
	jle	SHORT $LN15@Update

; 488  : 		MousePosX[0]=this->CurrentWindow->GetCurrentWidth();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+544]
	call	?GetCurrentWidth@Window@@QAEHXZ		; Window::GetCurrentWidth
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+424], eax
$LN15@Update:

; 489  : 	if(MousePosY[0]<0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+464], 0
	jge	SHORT $LN14@Update

; 490  : 		MousePosY[0]=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+464], 0
$LN14@Update:

; 491  : 	if(MousePosY[0]>this->CurrentWindow->GetCurrentHeight())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+544]
	call	?GetCurrentHeight@Window@@QAEHXZ	; Window::GetCurrentHeight
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+464], eax
	jle	SHORT $LN13@Update

; 492  : 		MousePosY[0]=this->CurrentWindow->GetCurrentHeight();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+544]
	call	?GetCurrentHeight@Window@@QAEHXZ	; Window::GetCurrentHeight
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+464], eax
$LN13@Update:

; 493  : 
; 494  : 	if(this->MousePosZ[0]>100)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+504], 100		; 00000064H
	jle	SHORT $LN12@Update

; 495  : 		this->MousePosZ[0]=100;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+504], 100		; 00000064H
	jmp	SHORT $LN10@Update
$LN12@Update:

; 496  : 	else if(this->MousePosZ[0]<0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+504], 0
	jge	SHORT $LN10@Update

; 497  : 		this->MousePosZ[0]=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+504], 0
$LN10@Update:

; 498  : 	
; 499  : 	int MouseClickValue=dbMouseClick();

	call	?dbMouseClick@@YAHXZ			; dbMouseClick
	mov	DWORD PTR _MouseClickValue$[ebp], eax

; 500  : 
; 501  : 	if(MouseClickValue>=8)

	cmp	DWORD PTR _MouseClickValue$[ebp], 8
	jl	SHORT $LN9@Update

; 502  : 	{
; 503  : 		this->MouseButton4[0]=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+202], 1

; 504  : 		MouseClickValue-=8;

	mov	eax, DWORD PTR _MouseClickValue$[ebp]
	sub	eax, 8
	mov	DWORD PTR _MouseClickValue$[ebp], eax

; 505  : 	}
; 506  : 	else

	jmp	SHORT $LN8@Update
$LN9@Update:

; 507  : 		this->MouseButton4[0]=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+202], 0
$LN8@Update:

; 508  : 	if(MouseClickValue>=4)

	cmp	DWORD PTR _MouseClickValue$[ebp], 4
	jl	SHORT $LN7@Update

; 509  : 	{
; 510  : 		this->MouseButton3[0]=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+102], 1

; 511  : 		MouseClickValue-=4;

	mov	eax, DWORD PTR _MouseClickValue$[ebp]
	sub	eax, 4
	mov	DWORD PTR _MouseClickValue$[ebp], eax

; 512  : 	}
; 513  : 	else

	jmp	SHORT $LN6@Update
$LN7@Update:

; 514  : 		this->MouseButton3[0]=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+102], 0
$LN6@Update:

; 515  : 	if(MouseClickValue>=2)

	cmp	DWORD PTR _MouseClickValue$[ebp], 2
	jl	SHORT $LN5@Update

; 516  : 	{
; 517  : 		this->RightClick[0]=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+302], 1

; 518  : 		MouseClickValue-=2;

	mov	eax, DWORD PTR _MouseClickValue$[ebp]
	sub	eax, 2
	mov	DWORD PTR _MouseClickValue$[ebp], eax

; 519  : 	}
; 520  : 	else

	jmp	SHORT $LN4@Update
$LN5@Update:

; 521  : 		this->RightClick[0]=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+302], 0
$LN4@Update:

; 522  : 	if(MouseClickValue==1)

	cmp	DWORD PTR _MouseClickValue$[ebp], 1
	jne	SHORT $LN3@Update

; 523  : 	{
; 524  : 		this->LeftClick[0]=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2], 1

; 525  : 		MouseClickValue--;

	mov	eax, DWORD PTR _MouseClickValue$[ebp]
	sub	eax, 1
	mov	DWORD PTR _MouseClickValue$[ebp], eax

; 526  : 	}
; 527  : 	else

	jmp	SHORT $LN2@Update
$LN3@Update:

; 528  : 		this->LeftClick[0]=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2], 0
$LN2@Update:

; 529  : 
; 530  : 	if(this->ShowMouse&&this->CursorName!="")

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN1@Update
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+404], OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	SHORT $LN1@Update

; 531  : 		dbPasteImage(this->CursorImage,this->MousePosX[0]-this->CursorWidth/2,this->MousePosY[0]-this->CursorHeight/2,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+412]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+464]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+420]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+424]
	sub	edx, eax
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	push	ecx
	call	?dbPasteImage@@YAXHHHH@Z		; dbPasteImage
	add	esp, 16					; 00000010H
$LN1@Update:

; 532  : 
; 533  : 	return;
; 534  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Update@MouseHandler@@QAEXXZ ENDP			; MouseHandler::Update
_TEXT	ENDS
PUBLIC	??_C@_05FOLLILPC@Thing?$AA@			; `string'
PUBLIC	??_C@_0O@IDKBPDPO@Right?5Windows?$AA@		; `string'
PUBLIC	??_C@_0N@ILBHIOPE@Left?5Windows?$AA@		; `string'
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	??_C@_06CPFCODOD@Insert?$AA@			; `string'
PUBLIC	??_C@_09IOIDGKNA@Page?5Down?$AA@		; `string'
PUBLIC	??_C@_04FNCLCJMC@Down?$AA@			; `string'
PUBLIC	??_C@_03DBKJMAGF@End?$AA@			; `string'
PUBLIC	??_C@_05DADPALEM@Right?$AA@			; `string'
PUBLIC	??_C@_04KPCPLBPL@Left?$AA@			; `string'
PUBLIC	??_C@_07EDGDGJEN@Page?5Up?$AA@			; `string'
PUBLIC	??_C@_02EFPGLDEA@Up?$AA@			; `string'
PUBLIC	??_C@_04GKJODLKO@Home?$AA@			; `string'
PUBLIC	??_C@_05EMFLFCNO@Break?$AA@			; `string'
PUBLIC	??_C@_05PEDNBBBD@Pause?$AA@			; `string'
PUBLIC	??_C@_09ELGHIMBO@Right?5Alt?$AA@		; `string'
PUBLIC	??_C@_0N@CHCLIIDE@Print?5Screen?$AA@		; `string'
PUBLIC	??_C@_05IAKEFGOE@?1?5Num?$AA@			; `string'
PUBLIC	??_C@_0M@LHBLIFBA@Function?5F3?$AA@		; `string'
PUBLIC	??_C@_0O@FHMBNID@Right?5Control?$AA@		; `string'
PUBLIC	??_C@_03KIBNPMNE@F12?$AA@			; `string'
PUBLIC	??_C@_03IDDAKPBH@F11?$AA@			; `string'
PUBLIC	??_C@_05BAHDBLKA@SysRq?$AA@			; `string'
PUBLIC	??_C@_05LAFLDKON@Num?5?4?$AA@			; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_01EKENIIDA@3?$AA@				; `string'
PUBLIC	??_C@_01FDFGLJHB@2?$AA@				; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL?$AA@			; `string'
PUBLIC	??_C@_01DHDKHMHF@6?$AA@				; `string'
PUBLIC	??_C@_01BMBHCPLG@5?$AA@				; `string'
PUBLIC	??_C@_01FAMBOPH@4?$AA@				; `string'
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_01LAKCGALK@9?$AA@				; `string'
PUBLIC	??_C@_01KJLJFBPL@8?$AA@				; `string'
PUBLIC	??_C@_01COCBENDE@7?$AA@				; `string'
PUBLIC	??_C@_08DEAFBBCL@Num?5Lock?$AA@			; `string'
PUBLIC	??_C@_03JKCLJOFG@F10?$AA@			; `string'
PUBLIC	??_C@_02HKCNFKCF@F9?$AA@			; `string'
PUBLIC	??_C@_02GDDGGLGE@F8?$AA@			; `string'
PUBLIC	??_C@_02OEKOHHKL@F7?$AA@			; `string'
PUBLIC	??_C@_02PNLFEGOK@F6?$AA@			; `string'
PUBLIC	??_C@_02NGJIBFCJ@F5?$AA@			; `string'
PUBLIC	??_C@_02MPIDCEGI@F4?$AA@			; `string'
PUBLIC	??_C@_02IAMCLCKP@F3?$AA@			; `string'
PUBLIC	??_C@_02JJNJIDOO@F2?$AA@			; `string'
PUBLIC	??_C@_02LCPENACN@F1?$AA@			; `string'
PUBLIC	??_C@_09GGECHFNF@Caps?5Lock?$AA@		; `string'
PUBLIC	??_C@_05OMHELODH@Space?$AA@			; `string'
PUBLIC	??_C@_08CJHJBNHP@Left?5Alt?$AA@			; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK?$AA@			; `string'
PUBLIC	??_C@_0M@COKLDKMB@Right?5Shift?$AA@		; `string'
PUBLIC	??_C@_01KMDKNFGN@?1?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	??_C@_01NANMIPIL@N?$AA@				; `string'
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	??_C@_01FCMHBHNC@V?$AA@				; `string'
PUBLIC	??_C@_01GFHCPBMG@C?$AA@				; `string'
PUBLIC	??_C@_01MMEEDKFM@X?$AA@				; `string'
PUBLIC	??_C@_01POHCFINO@Z?$AA@				; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_0L@NFEFKBOL@Left?5Shift?$AA@		; `string'
PUBLIC	??_C@_01NLNLIGKH@?$GA?$AA@			; `string'
PUBLIC	??_C@_01GEODFPGF@?8?$AA@			; `string'
PUBLIC	??_C@_01ICJEACDI@?$DL?$AA@			; `string'
PUBLIC	??_C@_01OCOKONAJ@L?$AA@				; `string'
PUBLIC	??_C@_01KNKLHLMO@K?$AA@				; `string'
PUBLIC	??_C@_01LELAEKIP@J?$AA@				; `string'
PUBLIC	??_C@_01IGIGCIAN@H?$AA@				; `string'
PUBLIC	??_C@_01BBODEMC@G?$AA@				; `string'
PUBLIC	??_C@_01BIAFAFID@F?$AA@				; `string'
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	??_C@_01FHEEJDEE@A?$AA@				; `string'
PUBLIC	??_C@_0N@NMKGAIJ@Left?5Control?$AA@		; `string'
PUBLIC	??_C@_0M@ICALLIHK@Right?5Enter?$AA@		; `string'
PUBLIC	??_C@_01LBDDMOBJ@?$FN?$AA@			; `string'
PUBLIC	??_C@_01OHGJGJJP@?$FL?$AA@			; `string'
PUBLIC	??_C@_01EJNLAFE@P?$AA@				; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_01JPJNBJEM@I?$AA@				; `string'
PUBLIC	??_C@_01HJOKEEBB@U?$AA@				; `string'
PUBLIC	??_C@_01NFFPALBN@Y?$AA@				; `string'
PUBLIC	??_C@_01GAPBHFFA@T?$AA@				; `string'
PUBLIC	??_C@_01DGKLNCNG@R?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	??_C@_01ELNMCGJD@W?$AA@				; `string'
PUBLIC	??_C@_01BNIGIBBF@Q?$AA@				; `string'
PUBLIC	??_C@_03IEAKBACE@Tab?$AA@			; `string'
PUBLIC	??_C@_09LPBCIPOJ@Backspace?$AA@			; `string'
PUBLIC	??_C@_05MLOMHBGD@?$DN?5Key?$AA@			; `string'
PUBLIC	??_C@_05MIDKHDPI@?9?5Key?$AA@			; `string'
PUBLIC	??_C@_05HHHCGCLN@0?5Key?$AA@			; `string'
PUBLIC	??_C@_05FAHNDDHF@9?5Key?$AA@			; `string'
PUBLIC	??_C@_05JLCBOANA@8?5Key?$AA@			; `string'
PUBLIC	??_C@_05GKHHFCAF@7?5Key?$AA@			; `string'
PUBLIC	??_C@_05KBCLIBKA@6?5Key?$AA@			; `string'
PUBLIC	??_C@_05CHLPPDAO@5?5Key?$AA@			; `string'
PUBLIC	??_C@_05OMODCAKL@4?5Key?$AA@			; `string'
PUBLIC	??_C@_05PBOGBABD@3?5Key?$AA@			; `string'
PUBLIC	??_C@_05DKLKMDLG@2?5Key?$AA@			; `string'
PUBLIC	??_C@_05LMCOLBBI@1?5Key?$AA@			; `string'
PUBLIC	??_C@_06OIGFGPHJ@Escape?$AA@			; `string'
PUBLIC	??_C@_08OFADHOMM@Null?5Key?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	??0KeyHandler@@QAE@XZ				; KeyHandler::KeyHandler
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_05FOLLILPC@Thing?$AA@
CONST	SEGMENT
??_C@_05FOLLILPC@Thing?$AA@ DB 'Thing', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@
CONST	SEGMENT
??_C@_0O@IDKBPDPO@Right?5Windows?$AA@ DB 'Right Windows', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@
CONST	SEGMENT
??_C@_0N@ILBHIOPE@Left?5Windows?$AA@ DB 'Left Windows', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPFCODOD@Insert?$AA@
CONST	SEGMENT
??_C@_06CPFCODOD@Insert?$AA@ DB 'Insert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOIDGKNA@Page?5Down?$AA@
CONST	SEGMENT
??_C@_09IOIDGKNA@Page?5Down?$AA@ DB 'Page Down', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNCLCJMC@Down?$AA@
CONST	SEGMENT
??_C@_04FNCLCJMC@Down?$AA@ DB 'Down', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DBKJMAGF@End?$AA@
CONST	SEGMENT
??_C@_03DBKJMAGF@End?$AA@ DB 'End', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DADPALEM@Right?$AA@
CONST	SEGMENT
??_C@_05DADPALEM@Right?$AA@ DB 'Right', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KPCPLBPL@Left?$AA@
CONST	SEGMENT
??_C@_04KPCPLBPL@Left?$AA@ DB 'Left', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDGDGJEN@Page?5Up?$AA@
CONST	SEGMENT
??_C@_07EDGDGJEN@Page?5Up?$AA@ DB 'Page Up', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02EFPGLDEA@Up?$AA@
CONST	SEGMENT
??_C@_02EFPGLDEA@Up?$AA@ DB 'Up', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GKJODLKO@Home?$AA@
CONST	SEGMENT
??_C@_04GKJODLKO@Home?$AA@ DB 'Home', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMFLFCNO@Break?$AA@
CONST	SEGMENT
??_C@_05EMFLFCNO@Break?$AA@ DB 'Break', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PEDNBBBD@Pause?$AA@
CONST	SEGMENT
??_C@_05PEDNBBBD@Pause?$AA@ DB 'Pause', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09ELGHIMBO@Right?5Alt?$AA@
CONST	SEGMENT
??_C@_09ELGHIMBO@Right?5Alt?$AA@ DB 'Right Alt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@
CONST	SEGMENT
??_C@_0N@CHCLIIDE@Print?5Screen?$AA@ DB 'Print Screen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IAKEFGOE@?1?5Num?$AA@
CONST	SEGMENT
??_C@_05IAKEFGOE@?1?5Num?$AA@ DB '/ Num', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LHBLIFBA@Function?5F3?$AA@
CONST	SEGMENT
??_C@_0M@LHBLIFBA@Function?5F3?$AA@ DB 'Function F3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHMBNID@Right?5Control?$AA@
CONST	SEGMENT
??_C@_0O@FHMBNID@Right?5Control?$AA@ DB 'Right Control', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIBNPMNE@F12?$AA@
CONST	SEGMENT
??_C@_03KIBNPMNE@F12?$AA@ DB 'F12', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IDDAKPBH@F11?$AA@
CONST	SEGMENT
??_C@_03IDDAKPBH@F11?$AA@ DB 'F11', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BAHDBLKA@SysRq?$AA@
CONST	SEGMENT
??_C@_05BAHDBLKA@SysRq?$AA@ DB 'SysRq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAFLDKON@Num?5?4?$AA@
CONST	SEGMENT
??_C@_05LAFLDKON@Num?5?4?$AA@ DB 'Num .', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3?$AA@
CONST	SEGMENT
??_C@_01EKENIIDA@3?$AA@ DB '3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FDFGLJHB@2?$AA@
CONST	SEGMENT
??_C@_01FDFGLJHB@2?$AA@ DB '2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL?$AA@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL?$AA@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DHDKHMHF@6?$AA@
CONST	SEGMENT
??_C@_01DHDKHMHF@6?$AA@ DB '6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BMBHCPLG@5?$AA@
CONST	SEGMENT
??_C@_01BMBHCPLG@5?$AA@ DB '5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FAMBOPH@4?$AA@
CONST	SEGMENT
??_C@_01FAMBOPH@4?$AA@ DB '4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LAKCGALK@9?$AA@
CONST	SEGMENT
??_C@_01LAKCGALK@9?$AA@ DB '9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KJLJFBPL@8?$AA@
CONST	SEGMENT
??_C@_01KJLJFBPL@8?$AA@ DB '8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01COCBENDE@7?$AA@
CONST	SEGMENT
??_C@_01COCBENDE@7?$AA@ DB '7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DEAFBBCL@Num?5Lock?$AA@
CONST	SEGMENT
??_C@_08DEAFBBCL@Num?5Lock?$AA@ DB 'Num Lock', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JKCLJOFG@F10?$AA@
CONST	SEGMENT
??_C@_03JKCLJOFG@F10?$AA@ DB 'F10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HKCNFKCF@F9?$AA@
CONST	SEGMENT
??_C@_02HKCNFKCF@F9?$AA@ DB 'F9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GDDGGLGE@F8?$AA@
CONST	SEGMENT
??_C@_02GDDGGLGE@F8?$AA@ DB 'F8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OEKOHHKL@F7?$AA@
CONST	SEGMENT
??_C@_02OEKOHHKL@F7?$AA@ DB 'F7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PNLFEGOK@F6?$AA@
CONST	SEGMENT
??_C@_02PNLFEGOK@F6?$AA@ DB 'F6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NGJIBFCJ@F5?$AA@
CONST	SEGMENT
??_C@_02NGJIBFCJ@F5?$AA@ DB 'F5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MPIDCEGI@F4?$AA@
CONST	SEGMENT
??_C@_02MPIDCEGI@F4?$AA@ DB 'F4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAMCLCKP@F3?$AA@
CONST	SEGMENT
??_C@_02IAMCLCKP@F3?$AA@ DB 'F3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JJNJIDOO@F2?$AA@
CONST	SEGMENT
??_C@_02JJNJIDOO@F2?$AA@ DB 'F2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LCPENACN@F1?$AA@
CONST	SEGMENT
??_C@_02LCPENACN@F1?$AA@ DB 'F1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGECHFNF@Caps?5Lock?$AA@
CONST	SEGMENT
??_C@_09GGECHFNF@Caps?5Lock?$AA@ DB 'Caps Lock', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OMHELODH@Space?$AA@
CONST	SEGMENT
??_C@_05OMHELODH@Space?$AA@ DB 'Space', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CJHJBNHP@Left?5Alt?$AA@
CONST	SEGMENT
??_C@_08CJHJBNHP@Left?5Alt?$AA@ DB 'Left Alt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK?$AA@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK?$AA@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@COKLDKMB@Right?5Shift?$AA@
CONST	SEGMENT
??_C@_0M@COKLDKMB@Right?5Shift?$AA@ DB 'Right Shift', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1?$AA@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1?$AA@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NANMIPIL@N?$AA@
CONST	SEGMENT
??_C@_01NANMIPIL@N?$AA@ DB 'N', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FCMHBHNC@V?$AA@
CONST	SEGMENT
??_C@_01FCMHBHNC@V?$AA@ DB 'V', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT
??_C@_01GFHCPBMG@C?$AA@ DB 'C', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT
??_C@_01MMEEDKFM@X?$AA@ DB 'X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT
??_C@_01POHCFINO@Z?$AA@ DB 'Z', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@
CONST	SEGMENT
??_C@_0L@NFEFKBOL@Left?5Shift?$AA@ DB 'Left Shift', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NLNLIGKH@?$GA?$AA@
CONST	SEGMENT
??_C@_01NLNLIGKH@?$GA?$AA@ DB '`', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GEODFPGF@?8?$AA@
CONST	SEGMENT
??_C@_01GEODFPGF@?8?$AA@ DB '''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ICJEACDI@?$DL?$AA@
CONST	SEGMENT
??_C@_01ICJEACDI@?$DL?$AA@ DB ';', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L?$AA@
CONST	SEGMENT
??_C@_01OCOKONAJ@L?$AA@ DB 'L', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KNKLHLMO@K?$AA@
CONST	SEGMENT
??_C@_01KNKLHLMO@K?$AA@ DB 'K', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LELAEKIP@J?$AA@
CONST	SEGMENT
??_C@_01LELAEKIP@J?$AA@ DB 'J', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IGIGCIAN@H?$AA@
CONST	SEGMENT
??_C@_01IGIGCIAN@H?$AA@ DB 'H', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BBODEMC@G?$AA@
CONST	SEGMENT
??_C@_01BBODEMC@G?$AA@ DB 'G', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BIAFAFID@F?$AA@
CONST	SEGMENT
??_C@_01BIAFAFID@F?$AA@ DB 'F', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FHEEJDEE@A?$AA@
CONST	SEGMENT
??_C@_01FHEEJDEE@A?$AA@ DB 'A', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMKGAIJ@Left?5Control?$AA@
CONST	SEGMENT
??_C@_0N@NMKGAIJ@Left?5Control?$AA@ DB 'Left Control', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
CONST	SEGMENT
??_C@_0M@ICALLIHK@Right?5Enter?$AA@ DB 'Right Enter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN?$AA@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN?$AA@ DB ']', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OHGJGJJP@?$FL?$AA@
CONST	SEGMENT
??_C@_01OHGJGJJP@?$FL?$AA@ DB '[', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EJNLAFE@P?$AA@
CONST	SEGMENT
??_C@_01EJNLAFE@P?$AA@ DB 'P', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JPJNBJEM@I?$AA@
CONST	SEGMENT
??_C@_01JPJNBJEM@I?$AA@ DB 'I', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HJOKEEBB@U?$AA@
CONST	SEGMENT
??_C@_01HJOKEEBB@U?$AA@ DB 'U', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT
??_C@_01NFFPALBN@Y?$AA@ DB 'Y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GAPBHFFA@T?$AA@
CONST	SEGMENT
??_C@_01GAPBHFFA@T?$AA@ DB 'T', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DGKLNCNG@R?$AA@
CONST	SEGMENT
??_C@_01DGKLNCNG@R?$AA@ DB 'R', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ELNMCGJD@W?$AA@
CONST	SEGMENT
??_C@_01ELNMCGJD@W?$AA@ DB 'W', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BNIGIBBF@Q?$AA@
CONST	SEGMENT
??_C@_01BNIGIBBF@Q?$AA@ DB 'Q', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IEAKBACE@Tab?$AA@
CONST	SEGMENT
??_C@_03IEAKBACE@Tab?$AA@ DB 'Tab', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09LPBCIPOJ@Backspace?$AA@
CONST	SEGMENT
??_C@_09LPBCIPOJ@Backspace?$AA@ DB 'Backspace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLOMHBGD@?$DN?5Key?$AA@
CONST	SEGMENT
??_C@_05MLOMHBGD@?$DN?5Key?$AA@ DB '= Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIDKHDPI@?9?5Key?$AA@
CONST	SEGMENT
??_C@_05MIDKHDPI@?9?5Key?$AA@ DB '- Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HHHCGCLN@0?5Key?$AA@
CONST	SEGMENT
??_C@_05HHHCGCLN@0?5Key?$AA@ DB '0 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAHNDDHF@9?5Key?$AA@
CONST	SEGMENT
??_C@_05FAHNDDHF@9?5Key?$AA@ DB '9 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLCBOANA@8?5Key?$AA@
CONST	SEGMENT
??_C@_05JLCBOANA@8?5Key?$AA@ DB '8 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GKHHFCAF@7?5Key?$AA@
CONST	SEGMENT
??_C@_05GKHHFCAF@7?5Key?$AA@ DB '7 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KBCLIBKA@6?5Key?$AA@
CONST	SEGMENT
??_C@_05KBCLIBKA@6?5Key?$AA@ DB '6 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CHLPPDAO@5?5Key?$AA@
CONST	SEGMENT
??_C@_05CHLPPDAO@5?5Key?$AA@ DB '5 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OMODCAKL@4?5Key?$AA@
CONST	SEGMENT
??_C@_05OMODCAKL@4?5Key?$AA@ DB '4 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PBOGBABD@3?5Key?$AA@
CONST	SEGMENT
??_C@_05PBOGBABD@3?5Key?$AA@ DB '3 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DKLKMDLG@2?5Key?$AA@
CONST	SEGMENT
??_C@_05DKLKMDLG@2?5Key?$AA@ DB '2 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LMCOLBBI@1?5Key?$AA@
CONST	SEGMENT
??_C@_05LMCOLBBI@1?5Key?$AA@ DB '1 Key', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIGFGPHJ@Escape?$AA@
CONST	SEGMENT
??_C@_06OIGFGPHJ@Escape?$AA@ DB 'Escape', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OFADHOMM@Null?5Key?$AA@
CONST	SEGMENT
??_C@_08OFADHOMM@Null?5Key?$AA@ DB 'Null Key', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ??0KeyHandler@@QAE@XZ
_TEXT	SEGMENT
_i$91488 = -3620					; size = 4
_j$91484 = -3616					; size = 4
_i$91480 = -3612					; size = 4
_Temp$ = -3608						; size = 3598
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??0KeyHandler@@QAE@XZ PROC				; KeyHandler::KeyHandler, COMDAT
; _this$ = ecx

; 539  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 3684				; 00000e64H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 540  : 	char Temp[257][14]={"Null Key","Escape","1 Key","2 Key","3 Key","4 Key","5 Key","6 Key","7 Key","8 Key","9 Key","0 Key","- Key","= Key","Backspace","Tab","Q",

	mov	eax, DWORD PTR ??_C@_08OFADHOMM@Null?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp], eax
	mov	ecx, DWORD PTR ??_C@_08OFADHOMM@Null?5Key?$AA@+4
	mov	DWORD PTR _Temp$[ebp+4], ecx
	mov	dl, BYTE PTR ??_C@_08OFADHOMM@Null?5Key?$AA@+8
	mov	BYTE PTR _Temp$[ebp+8], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+9], eax
	mov	BYTE PTR _Temp$[ebp+13], al
	mov	eax, DWORD PTR ??_C@_06OIGFGPHJ@Escape?$AA@
	mov	DWORD PTR _Temp$[ebp+14], eax
	mov	cx, WORD PTR ??_C@_06OIGFGPHJ@Escape?$AA@+4
	mov	WORD PTR _Temp$[ebp+18], cx
	mov	dl, BYTE PTR ??_C@_06OIGFGPHJ@Escape?$AA@+6
	mov	BYTE PTR _Temp$[ebp+20], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+21], eax
	mov	WORD PTR _Temp$[ebp+25], ax
	mov	BYTE PTR _Temp$[ebp+27], al
	mov	eax, DWORD PTR ??_C@_05LMCOLBBI@1?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+28], eax
	mov	cx, WORD PTR ??_C@_05LMCOLBBI@1?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+32], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+34], eax
	mov	DWORD PTR _Temp$[ebp+38], eax
	mov	eax, DWORD PTR ??_C@_05DKLKMDLG@2?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+42], eax
	mov	cx, WORD PTR ??_C@_05DKLKMDLG@2?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+46], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+48], eax
	mov	DWORD PTR _Temp$[ebp+52], eax
	mov	eax, DWORD PTR ??_C@_05PBOGBABD@3?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+56], eax
	mov	cx, WORD PTR ??_C@_05PBOGBABD@3?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+60], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+62], eax
	mov	DWORD PTR _Temp$[ebp+66], eax
	mov	eax, DWORD PTR ??_C@_05OMODCAKL@4?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+70], eax
	mov	cx, WORD PTR ??_C@_05OMODCAKL@4?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+74], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+76], eax
	mov	DWORD PTR _Temp$[ebp+80], eax
	mov	eax, DWORD PTR ??_C@_05CHLPPDAO@5?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+84], eax
	mov	cx, WORD PTR ??_C@_05CHLPPDAO@5?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+88], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+90], eax
	mov	DWORD PTR _Temp$[ebp+94], eax
	mov	eax, DWORD PTR ??_C@_05KBCLIBKA@6?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+98], eax
	mov	cx, WORD PTR ??_C@_05KBCLIBKA@6?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+102], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+104], eax
	mov	DWORD PTR _Temp$[ebp+108], eax
	mov	eax, DWORD PTR ??_C@_05GKHHFCAF@7?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+112], eax
	mov	cx, WORD PTR ??_C@_05GKHHFCAF@7?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+116], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+118], eax
	mov	DWORD PTR _Temp$[ebp+122], eax
	mov	eax, DWORD PTR ??_C@_05JLCBOANA@8?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+126], eax
	mov	cx, WORD PTR ??_C@_05JLCBOANA@8?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+130], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+132], eax
	mov	DWORD PTR _Temp$[ebp+136], eax
	mov	eax, DWORD PTR ??_C@_05FAHNDDHF@9?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+140], eax
	mov	cx, WORD PTR ??_C@_05FAHNDDHF@9?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+144], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+146], eax
	mov	DWORD PTR _Temp$[ebp+150], eax
	mov	eax, DWORD PTR ??_C@_05HHHCGCLN@0?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+154], eax
	mov	cx, WORD PTR ??_C@_05HHHCGCLN@0?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+158], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+160], eax
	mov	DWORD PTR _Temp$[ebp+164], eax
	mov	eax, DWORD PTR ??_C@_05MIDKHDPI@?9?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+168], eax
	mov	cx, WORD PTR ??_C@_05MIDKHDPI@?9?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+172], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+174], eax
	mov	DWORD PTR _Temp$[ebp+178], eax
	mov	eax, DWORD PTR ??_C@_05MLOMHBGD@?$DN?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+182], eax
	mov	cx, WORD PTR ??_C@_05MLOMHBGD@?$DN?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+186], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+188], eax
	mov	DWORD PTR _Temp$[ebp+192], eax
	mov	eax, DWORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@
	mov	DWORD PTR _Temp$[ebp+196], eax
	mov	ecx, DWORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@+4
	mov	DWORD PTR _Temp$[ebp+200], ecx
	mov	dx, WORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@+8
	mov	WORD PTR _Temp$[ebp+204], dx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+206], eax
	mov	eax, DWORD PTR ??_C@_03IEAKBACE@Tab?$AA@
	mov	DWORD PTR _Temp$[ebp+210], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+214], eax
	mov	DWORD PTR _Temp$[ebp+218], eax
	mov	WORD PTR _Temp$[ebp+222], ax
	mov	ax, WORD PTR ??_C@_01BNIGIBBF@Q?$AA@
	mov	WORD PTR _Temp$[ebp+224], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+226], eax
	mov	DWORD PTR _Temp$[ebp+230], eax
	mov	DWORD PTR _Temp$[ebp+234], eax

; 541  : 				  "W","E","R","T","Y","U","I","O","P","[","]","Right Enter","Left Control","A","S","D",

	mov	ax, WORD PTR ??_C@_01ELNMCGJD@W?$AA@
	mov	WORD PTR _Temp$[ebp+238], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+240], eax
	mov	DWORD PTR _Temp$[ebp+244], eax
	mov	DWORD PTR _Temp$[ebp+248], eax
	mov	ax, WORD PTR ??_C@_01DDCIFGEA@E?$AA@
	mov	WORD PTR _Temp$[ebp+252], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+254], eax
	mov	DWORD PTR _Temp$[ebp+258], eax
	mov	DWORD PTR _Temp$[ebp+262], eax
	mov	ax, WORD PTR ??_C@_01DGKLNCNG@R?$AA@
	mov	WORD PTR _Temp$[ebp+266], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+268], eax
	mov	DWORD PTR _Temp$[ebp+272], eax
	mov	DWORD PTR _Temp$[ebp+276], eax
	mov	ax, WORD PTR ??_C@_01GAPBHFFA@T?$AA@
	mov	WORD PTR _Temp$[ebp+280], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+282], eax
	mov	DWORD PTR _Temp$[ebp+286], eax
	mov	DWORD PTR _Temp$[ebp+290], eax
	mov	ax, WORD PTR ??_C@_01NFFPALBN@Y?$AA@
	mov	WORD PTR _Temp$[ebp+294], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+296], eax
	mov	DWORD PTR _Temp$[ebp+300], eax
	mov	DWORD PTR _Temp$[ebp+304], eax
	mov	ax, WORD PTR ??_C@_01HJOKEEBB@U?$AA@
	mov	WORD PTR _Temp$[ebp+308], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+310], eax
	mov	DWORD PTR _Temp$[ebp+314], eax
	mov	DWORD PTR _Temp$[ebp+318], eax
	mov	ax, WORD PTR ??_C@_01JPJNBJEM@I?$AA@
	mov	WORD PTR _Temp$[ebp+322], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+324], eax
	mov	DWORD PTR _Temp$[ebp+328], eax
	mov	DWORD PTR _Temp$[ebp+332], eax
	mov	ax, WORD PTR ??_C@_01MJMHLOMK@O?$AA@
	mov	WORD PTR _Temp$[ebp+336], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+338], eax
	mov	DWORD PTR _Temp$[ebp+342], eax
	mov	DWORD PTR _Temp$[ebp+346], eax
	mov	ax, WORD PTR ??_C@_01EJNLAFE@P?$AA@
	mov	WORD PTR _Temp$[ebp+350], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+352], eax
	mov	DWORD PTR _Temp$[ebp+356], eax
	mov	DWORD PTR _Temp$[ebp+360], eax
	mov	ax, WORD PTR ??_C@_01OHGJGJJP@?$FL?$AA@
	mov	WORD PTR _Temp$[ebp+364], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+366], eax
	mov	DWORD PTR _Temp$[ebp+370], eax
	mov	DWORD PTR _Temp$[ebp+374], eax
	mov	ax, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	WORD PTR _Temp$[ebp+378], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+380], eax
	mov	DWORD PTR _Temp$[ebp+384], eax
	mov	DWORD PTR _Temp$[ebp+388], eax
	mov	eax, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
	mov	DWORD PTR _Temp$[ebp+392], eax
	mov	ecx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+4
	mov	DWORD PTR _Temp$[ebp+396], ecx
	mov	edx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+8
	mov	DWORD PTR _Temp$[ebp+400], edx
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+404], ax
	mov	eax, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@
	mov	DWORD PTR _Temp$[ebp+406], eax
	mov	ecx, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+4
	mov	DWORD PTR _Temp$[ebp+410], ecx
	mov	edx, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+8
	mov	DWORD PTR _Temp$[ebp+414], edx
	mov	al, BYTE PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+12
	mov	BYTE PTR _Temp$[ebp+418], al
	xor	eax, eax
	mov	BYTE PTR _Temp$[ebp+419], al
	mov	ax, WORD PTR ??_C@_01FHEEJDEE@A?$AA@
	mov	WORD PTR _Temp$[ebp+420], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+422], eax
	mov	DWORD PTR _Temp$[ebp+426], eax
	mov	DWORD PTR _Temp$[ebp+430], eax
	mov	ax, WORD PTR ??_C@_01CPLAODJH@S?$AA@
	mov	WORD PTR _Temp$[ebp+434], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+436], eax
	mov	DWORD PTR _Temp$[ebp+440], eax
	mov	DWORD PTR _Temp$[ebp+444], eax
	mov	ax, WORD PTR ??_C@_01CKDDGHAB@D?$AA@
	mov	WORD PTR _Temp$[ebp+448], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+450], eax
	mov	DWORD PTR _Temp$[ebp+454], eax
	mov	DWORD PTR _Temp$[ebp+458], eax

; 542  : 				  "F","G","H","J","K","L",";","\'","`","Left Shift","\\","Z","X","C","V","B",

	mov	ax, WORD PTR ??_C@_01BIAFAFID@F?$AA@
	mov	WORD PTR _Temp$[ebp+462], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+464], eax
	mov	DWORD PTR _Temp$[ebp+468], eax
	mov	DWORD PTR _Temp$[ebp+472], eax
	mov	ax, WORD PTR ??_C@_01BBODEMC@G?$AA@
	mov	WORD PTR _Temp$[ebp+476], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+478], eax
	mov	DWORD PTR _Temp$[ebp+482], eax
	mov	DWORD PTR _Temp$[ebp+486], eax
	mov	ax, WORD PTR ??_C@_01IGIGCIAN@H?$AA@
	mov	WORD PTR _Temp$[ebp+490], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+492], eax
	mov	DWORD PTR _Temp$[ebp+496], eax
	mov	DWORD PTR _Temp$[ebp+500], eax
	mov	ax, WORD PTR ??_C@_01LELAEKIP@J?$AA@
	mov	WORD PTR _Temp$[ebp+504], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+506], eax
	mov	DWORD PTR _Temp$[ebp+510], eax
	mov	DWORD PTR _Temp$[ebp+514], eax
	mov	ax, WORD PTR ??_C@_01KNKLHLMO@K?$AA@
	mov	WORD PTR _Temp$[ebp+518], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+520], eax
	mov	DWORD PTR _Temp$[ebp+524], eax
	mov	DWORD PTR _Temp$[ebp+528], eax
	mov	ax, WORD PTR ??_C@_01OCOKONAJ@L?$AA@
	mov	WORD PTR _Temp$[ebp+532], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+534], eax
	mov	DWORD PTR _Temp$[ebp+538], eax
	mov	DWORD PTR _Temp$[ebp+542], eax
	mov	ax, WORD PTR ??_C@_01ICJEACDI@?$DL?$AA@
	mov	WORD PTR _Temp$[ebp+546], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+548], eax
	mov	DWORD PTR _Temp$[ebp+552], eax
	mov	DWORD PTR _Temp$[ebp+556], eax
	mov	ax, WORD PTR ??_C@_01GEODFPGF@?8?$AA@
	mov	WORD PTR _Temp$[ebp+560], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+562], eax
	mov	DWORD PTR _Temp$[ebp+566], eax
	mov	DWORD PTR _Temp$[ebp+570], eax
	mov	ax, WORD PTR ??_C@_01NLNLIGKH@?$GA?$AA@
	mov	WORD PTR _Temp$[ebp+574], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+576], eax
	mov	DWORD PTR _Temp$[ebp+580], eax
	mov	DWORD PTR _Temp$[ebp+584], eax
	mov	eax, DWORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@
	mov	DWORD PTR _Temp$[ebp+588], eax
	mov	ecx, DWORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+4
	mov	DWORD PTR _Temp$[ebp+592], ecx
	mov	dx, WORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+8
	mov	WORD PTR _Temp$[ebp+596], dx
	mov	al, BYTE PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+10
	mov	BYTE PTR _Temp$[ebp+598], al
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+599], ax
	mov	BYTE PTR _Temp$[ebp+601], al
	mov	ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR _Temp$[ebp+602], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+604], eax
	mov	DWORD PTR _Temp$[ebp+608], eax
	mov	DWORD PTR _Temp$[ebp+612], eax
	mov	ax, WORD PTR ??_C@_01POHCFINO@Z?$AA@
	mov	WORD PTR _Temp$[ebp+616], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+618], eax
	mov	DWORD PTR _Temp$[ebp+622], eax
	mov	DWORD PTR _Temp$[ebp+626], eax
	mov	ax, WORD PTR ??_C@_01MMEEDKFM@X?$AA@
	mov	WORD PTR _Temp$[ebp+630], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+632], eax
	mov	DWORD PTR _Temp$[ebp+636], eax
	mov	DWORD PTR _Temp$[ebp+640], eax
	mov	ax, WORD PTR ??_C@_01GFHCPBMG@C?$AA@
	mov	WORD PTR _Temp$[ebp+644], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+646], eax
	mov	DWORD PTR _Temp$[ebp+650], eax
	mov	DWORD PTR _Temp$[ebp+654], eax
	mov	ax, WORD PTR ??_C@_01FCMHBHNC@V?$AA@
	mov	WORD PTR _Temp$[ebp+658], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+660], eax
	mov	DWORD PTR _Temp$[ebp+664], eax
	mov	DWORD PTR _Temp$[ebp+668], eax
	mov	ax, WORD PTR ??_C@_01HMGJMAIH@B?$AA@
	mov	WORD PTR _Temp$[ebp+672], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+674], eax
	mov	DWORD PTR _Temp$[ebp+678], eax
	mov	DWORD PTR _Temp$[ebp+682], eax

; 543  : 				  "N","M",",",".","/","Right Shift","*","Left Alt","Space","Caps Lock","F1","F2","F3","F4","F5","F6",

	mov	ax, WORD PTR ??_C@_01NANMIPIL@N?$AA@
	mov	WORD PTR _Temp$[ebp+686], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+688], eax
	mov	DWORD PTR _Temp$[ebp+692], eax
	mov	DWORD PTR _Temp$[ebp+696], eax
	mov	ax, WORD PTR ??_C@_01PLPBNMEI@M?$AA@
	mov	WORD PTR _Temp$[ebp+700], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+702], eax
	mov	DWORD PTR _Temp$[ebp+706], eax
	mov	DWORD PTR _Temp$[ebp+710], eax
	mov	ax, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	WORD PTR _Temp$[ebp+714], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+716], eax
	mov	DWORD PTR _Temp$[ebp+720], eax
	mov	DWORD PTR _Temp$[ebp+724], eax
	mov	ax, WORD PTR ??_C@_01LFCBOECM@?4?$AA@
	mov	WORD PTR _Temp$[ebp+728], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+730], eax
	mov	DWORD PTR _Temp$[ebp+734], eax
	mov	DWORD PTR _Temp$[ebp+738], eax
	mov	ax, WORD PTR ??_C@_01KMDKNFGN@?1?$AA@
	mov	WORD PTR _Temp$[ebp+742], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+744], eax
	mov	DWORD PTR _Temp$[ebp+748], eax
	mov	DWORD PTR _Temp$[ebp+752], eax
	mov	eax, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@
	mov	DWORD PTR _Temp$[ebp+756], eax
	mov	ecx, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@+4
	mov	DWORD PTR _Temp$[ebp+760], ecx
	mov	edx, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@+8
	mov	DWORD PTR _Temp$[ebp+764], edx
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+768], ax
	mov	ax, WORD PTR ??_C@_01NBENCBCI@?$CK?$AA@
	mov	WORD PTR _Temp$[ebp+770], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+772], eax
	mov	DWORD PTR _Temp$[ebp+776], eax
	mov	DWORD PTR _Temp$[ebp+780], eax
	mov	eax, DWORD PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@
	mov	DWORD PTR _Temp$[ebp+784], eax
	mov	ecx, DWORD PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@+4
	mov	DWORD PTR _Temp$[ebp+788], ecx
	mov	dl, BYTE PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@+8
	mov	BYTE PTR _Temp$[ebp+792], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+793], eax
	mov	BYTE PTR _Temp$[ebp+797], al
	mov	eax, DWORD PTR ??_C@_05OMHELODH@Space?$AA@
	mov	DWORD PTR _Temp$[ebp+798], eax
	mov	cx, WORD PTR ??_C@_05OMHELODH@Space?$AA@+4
	mov	WORD PTR _Temp$[ebp+802], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+804], eax
	mov	DWORD PTR _Temp$[ebp+808], eax
	mov	eax, DWORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@
	mov	DWORD PTR _Temp$[ebp+812], eax
	mov	ecx, DWORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@+4
	mov	DWORD PTR _Temp$[ebp+816], ecx
	mov	dx, WORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@+8
	mov	WORD PTR _Temp$[ebp+820], dx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+822], eax
	mov	ax, WORD PTR ??_C@_02LCPENACN@F1?$AA@
	mov	WORD PTR _Temp$[ebp+826], ax
	mov	cl, BYTE PTR ??_C@_02LCPENACN@F1?$AA@+2
	mov	BYTE PTR _Temp$[ebp+828], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+829], eax
	mov	DWORD PTR _Temp$[ebp+833], eax
	mov	WORD PTR _Temp$[ebp+837], ax
	mov	BYTE PTR _Temp$[ebp+839], al
	mov	ax, WORD PTR ??_C@_02JJNJIDOO@F2?$AA@
	mov	WORD PTR _Temp$[ebp+840], ax
	mov	cl, BYTE PTR ??_C@_02JJNJIDOO@F2?$AA@+2
	mov	BYTE PTR _Temp$[ebp+842], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+843], eax
	mov	DWORD PTR _Temp$[ebp+847], eax
	mov	WORD PTR _Temp$[ebp+851], ax
	mov	BYTE PTR _Temp$[ebp+853], al
	mov	ax, WORD PTR ??_C@_02IAMCLCKP@F3?$AA@
	mov	WORD PTR _Temp$[ebp+854], ax
	mov	cl, BYTE PTR ??_C@_02IAMCLCKP@F3?$AA@+2
	mov	BYTE PTR _Temp$[ebp+856], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+857], eax
	mov	DWORD PTR _Temp$[ebp+861], eax
	mov	WORD PTR _Temp$[ebp+865], ax
	mov	BYTE PTR _Temp$[ebp+867], al
	mov	ax, WORD PTR ??_C@_02MPIDCEGI@F4?$AA@
	mov	WORD PTR _Temp$[ebp+868], ax
	mov	cl, BYTE PTR ??_C@_02MPIDCEGI@F4?$AA@+2
	mov	BYTE PTR _Temp$[ebp+870], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+871], eax
	mov	DWORD PTR _Temp$[ebp+875], eax
	mov	WORD PTR _Temp$[ebp+879], ax
	mov	BYTE PTR _Temp$[ebp+881], al
	mov	ax, WORD PTR ??_C@_02NGJIBFCJ@F5?$AA@
	mov	WORD PTR _Temp$[ebp+882], ax
	mov	cl, BYTE PTR ??_C@_02NGJIBFCJ@F5?$AA@+2
	mov	BYTE PTR _Temp$[ebp+884], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+885], eax
	mov	DWORD PTR _Temp$[ebp+889], eax
	mov	WORD PTR _Temp$[ebp+893], ax
	mov	BYTE PTR _Temp$[ebp+895], al
	mov	ax, WORD PTR ??_C@_02PNLFEGOK@F6?$AA@
	mov	WORD PTR _Temp$[ebp+896], ax
	mov	cl, BYTE PTR ??_C@_02PNLFEGOK@F6?$AA@+2
	mov	BYTE PTR _Temp$[ebp+898], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+899], eax
	mov	DWORD PTR _Temp$[ebp+903], eax
	mov	WORD PTR _Temp$[ebp+907], ax
	mov	BYTE PTR _Temp$[ebp+909], al

; 544  : 				  "F7","F8","F9","F10","Num Lock","","7","8","9","-","4","5","6","+","1","2",

	mov	ax, WORD PTR ??_C@_02OEKOHHKL@F7?$AA@
	mov	WORD PTR _Temp$[ebp+910], ax
	mov	cl, BYTE PTR ??_C@_02OEKOHHKL@F7?$AA@+2
	mov	BYTE PTR _Temp$[ebp+912], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+913], eax
	mov	DWORD PTR _Temp$[ebp+917], eax
	mov	WORD PTR _Temp$[ebp+921], ax
	mov	BYTE PTR _Temp$[ebp+923], al
	mov	ax, WORD PTR ??_C@_02GDDGGLGE@F8?$AA@
	mov	WORD PTR _Temp$[ebp+924], ax
	mov	cl, BYTE PTR ??_C@_02GDDGGLGE@F8?$AA@+2
	mov	BYTE PTR _Temp$[ebp+926], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+927], eax
	mov	DWORD PTR _Temp$[ebp+931], eax
	mov	WORD PTR _Temp$[ebp+935], ax
	mov	BYTE PTR _Temp$[ebp+937], al
	mov	ax, WORD PTR ??_C@_02HKCNFKCF@F9?$AA@
	mov	WORD PTR _Temp$[ebp+938], ax
	mov	cl, BYTE PTR ??_C@_02HKCNFKCF@F9?$AA@+2
	mov	BYTE PTR _Temp$[ebp+940], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+941], eax
	mov	DWORD PTR _Temp$[ebp+945], eax
	mov	WORD PTR _Temp$[ebp+949], ax
	mov	BYTE PTR _Temp$[ebp+951], al
	mov	eax, DWORD PTR ??_C@_03JKCLJOFG@F10?$AA@
	mov	DWORD PTR _Temp$[ebp+952], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+956], eax
	mov	DWORD PTR _Temp$[ebp+960], eax
	mov	WORD PTR _Temp$[ebp+964], ax
	mov	eax, DWORD PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@
	mov	DWORD PTR _Temp$[ebp+966], eax
	mov	ecx, DWORD PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@+4
	mov	DWORD PTR _Temp$[ebp+970], ecx
	mov	dl, BYTE PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@+8
	mov	BYTE PTR _Temp$[ebp+974], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+975], eax
	mov	BYTE PTR _Temp$[ebp+979], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+980], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+981], eax
	mov	DWORD PTR _Temp$[ebp+985], eax
	mov	DWORD PTR _Temp$[ebp+989], eax
	mov	BYTE PTR _Temp$[ebp+993], al
	mov	ax, WORD PTR ??_C@_01COCBENDE@7?$AA@
	mov	WORD PTR _Temp$[ebp+994], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+996], eax
	mov	DWORD PTR _Temp$[ebp+1000], eax
	mov	DWORD PTR _Temp$[ebp+1004], eax
	mov	ax, WORD PTR ??_C@_01KJLJFBPL@8?$AA@
	mov	WORD PTR _Temp$[ebp+1008], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1010], eax
	mov	DWORD PTR _Temp$[ebp+1014], eax
	mov	DWORD PTR _Temp$[ebp+1018], eax
	mov	ax, WORD PTR ??_C@_01LAKCGALK@9?$AA@
	mov	WORD PTR _Temp$[ebp+1022], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1024], eax
	mov	DWORD PTR _Temp$[ebp+1028], eax
	mov	DWORD PTR _Temp$[ebp+1032], eax
	mov	ax, WORD PTR ??_C@_01JOAMLHOP@?9?$AA@
	mov	WORD PTR _Temp$[ebp+1036], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1038], eax
	mov	DWORD PTR _Temp$[ebp+1042], eax
	mov	DWORD PTR _Temp$[ebp+1046], eax
	mov	ax, WORD PTR ??_C@_01FAMBOPH@4?$AA@
	mov	WORD PTR _Temp$[ebp+1050], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1052], eax
	mov	DWORD PTR _Temp$[ebp+1056], eax
	mov	DWORD PTR _Temp$[ebp+1060], eax
	mov	ax, WORD PTR ??_C@_01BMBHCPLG@5?$AA@
	mov	WORD PTR _Temp$[ebp+1064], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1066], eax
	mov	DWORD PTR _Temp$[ebp+1070], eax
	mov	DWORD PTR _Temp$[ebp+1074], eax
	mov	ax, WORD PTR ??_C@_01DHDKHMHF@6?$AA@
	mov	WORD PTR _Temp$[ebp+1078], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1080], eax
	mov	DWORD PTR _Temp$[ebp+1084], eax
	mov	DWORD PTR _Temp$[ebp+1088], eax
	mov	ax, WORD PTR ??_C@_01MIFGBAGJ@?$CL?$AA@
	mov	WORD PTR _Temp$[ebp+1092], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1094], eax
	mov	DWORD PTR _Temp$[ebp+1098], eax
	mov	DWORD PTR _Temp$[ebp+1102], eax
	mov	ax, WORD PTR ??_C@_01HIHLOKLC@1?$AA@
	mov	WORD PTR _Temp$[ebp+1106], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1108], eax
	mov	DWORD PTR _Temp$[ebp+1112], eax
	mov	DWORD PTR _Temp$[ebp+1116], eax
	mov	ax, WORD PTR ??_C@_01FDFGLJHB@2?$AA@
	mov	WORD PTR _Temp$[ebp+1120], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1122], eax
	mov	DWORD PTR _Temp$[ebp+1126], eax
	mov	DWORD PTR _Temp$[ebp+1130], eax

; 545  : 				  "3","0","Num .","SysRq","","","F11","F12","","","","","","","","",

	mov	ax, WORD PTR ??_C@_01EKENIIDA@3?$AA@
	mov	WORD PTR _Temp$[ebp+1134], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1136], eax
	mov	DWORD PTR _Temp$[ebp+1140], eax
	mov	DWORD PTR _Temp$[ebp+1144], eax
	mov	ax, WORD PTR ??_C@_01GBGANLPD@0?$AA@
	mov	WORD PTR _Temp$[ebp+1148], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1150], eax
	mov	DWORD PTR _Temp$[ebp+1154], eax
	mov	DWORD PTR _Temp$[ebp+1158], eax
	mov	eax, DWORD PTR ??_C@_05LAFLDKON@Num?5?4?$AA@
	mov	DWORD PTR _Temp$[ebp+1162], eax
	mov	cx, WORD PTR ??_C@_05LAFLDKON@Num?5?4?$AA@+4
	mov	WORD PTR _Temp$[ebp+1166], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1168], eax
	mov	DWORD PTR _Temp$[ebp+1172], eax
	mov	eax, DWORD PTR ??_C@_05BAHDBLKA@SysRq?$AA@
	mov	DWORD PTR _Temp$[ebp+1176], eax
	mov	cx, WORD PTR ??_C@_05BAHDBLKA@SysRq?$AA@+4
	mov	WORD PTR _Temp$[ebp+1180], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1182], eax
	mov	DWORD PTR _Temp$[ebp+1186], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1190], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1191], eax
	mov	DWORD PTR _Temp$[ebp+1195], eax
	mov	DWORD PTR _Temp$[ebp+1199], eax
	mov	BYTE PTR _Temp$[ebp+1203], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1204], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1205], eax
	mov	DWORD PTR _Temp$[ebp+1209], eax
	mov	DWORD PTR _Temp$[ebp+1213], eax
	mov	BYTE PTR _Temp$[ebp+1217], al
	mov	eax, DWORD PTR ??_C@_03IDDAKPBH@F11?$AA@
	mov	DWORD PTR _Temp$[ebp+1218], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1222], eax
	mov	DWORD PTR _Temp$[ebp+1226], eax
	mov	WORD PTR _Temp$[ebp+1230], ax
	mov	eax, DWORD PTR ??_C@_03KIBNPMNE@F12?$AA@
	mov	DWORD PTR _Temp$[ebp+1232], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1236], eax
	mov	DWORD PTR _Temp$[ebp+1240], eax
	mov	WORD PTR _Temp$[ebp+1244], ax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1246], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1247], eax
	mov	DWORD PTR _Temp$[ebp+1251], eax
	mov	DWORD PTR _Temp$[ebp+1255], eax
	mov	BYTE PTR _Temp$[ebp+1259], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1260], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1261], eax
	mov	DWORD PTR _Temp$[ebp+1265], eax
	mov	DWORD PTR _Temp$[ebp+1269], eax
	mov	BYTE PTR _Temp$[ebp+1273], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1274], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1275], eax
	mov	DWORD PTR _Temp$[ebp+1279], eax
	mov	DWORD PTR _Temp$[ebp+1283], eax
	mov	BYTE PTR _Temp$[ebp+1287], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1288], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1289], eax
	mov	DWORD PTR _Temp$[ebp+1293], eax
	mov	DWORD PTR _Temp$[ebp+1297], eax
	mov	BYTE PTR _Temp$[ebp+1301], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1302], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1303], eax
	mov	DWORD PTR _Temp$[ebp+1307], eax
	mov	DWORD PTR _Temp$[ebp+1311], eax
	mov	BYTE PTR _Temp$[ebp+1315], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1316], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1317], eax
	mov	DWORD PTR _Temp$[ebp+1321], eax
	mov	DWORD PTR _Temp$[ebp+1325], eax
	mov	BYTE PTR _Temp$[ebp+1329], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1330], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1331], eax
	mov	DWORD PTR _Temp$[ebp+1335], eax
	mov	DWORD PTR _Temp$[ebp+1339], eax
	mov	BYTE PTR _Temp$[ebp+1343], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1344], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1345], eax
	mov	DWORD PTR _Temp$[ebp+1349], eax
	mov	DWORD PTR _Temp$[ebp+1353], eax
	mov	BYTE PTR _Temp$[ebp+1357], al

; 546  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1358], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1359], eax
	mov	DWORD PTR _Temp$[ebp+1363], eax
	mov	DWORD PTR _Temp$[ebp+1367], eax
	mov	BYTE PTR _Temp$[ebp+1371], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1372], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1373], eax
	mov	DWORD PTR _Temp$[ebp+1377], eax
	mov	DWORD PTR _Temp$[ebp+1381], eax
	mov	BYTE PTR _Temp$[ebp+1385], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1386], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1387], eax
	mov	DWORD PTR _Temp$[ebp+1391], eax
	mov	DWORD PTR _Temp$[ebp+1395], eax
	mov	BYTE PTR _Temp$[ebp+1399], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1400], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1401], eax
	mov	DWORD PTR _Temp$[ebp+1405], eax
	mov	DWORD PTR _Temp$[ebp+1409], eax
	mov	BYTE PTR _Temp$[ebp+1413], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1414], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1415], eax
	mov	DWORD PTR _Temp$[ebp+1419], eax
	mov	DWORD PTR _Temp$[ebp+1423], eax
	mov	BYTE PTR _Temp$[ebp+1427], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1428], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1429], eax
	mov	DWORD PTR _Temp$[ebp+1433], eax
	mov	DWORD PTR _Temp$[ebp+1437], eax
	mov	BYTE PTR _Temp$[ebp+1441], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1442], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1443], eax
	mov	DWORD PTR _Temp$[ebp+1447], eax
	mov	DWORD PTR _Temp$[ebp+1451], eax
	mov	BYTE PTR _Temp$[ebp+1455], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1456], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1457], eax
	mov	DWORD PTR _Temp$[ebp+1461], eax
	mov	DWORD PTR _Temp$[ebp+1465], eax
	mov	BYTE PTR _Temp$[ebp+1469], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1470], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1471], eax
	mov	DWORD PTR _Temp$[ebp+1475], eax
	mov	DWORD PTR _Temp$[ebp+1479], eax
	mov	BYTE PTR _Temp$[ebp+1483], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1484], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1485], eax
	mov	DWORD PTR _Temp$[ebp+1489], eax
	mov	DWORD PTR _Temp$[ebp+1493], eax
	mov	BYTE PTR _Temp$[ebp+1497], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1498], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1499], eax
	mov	DWORD PTR _Temp$[ebp+1503], eax
	mov	DWORD PTR _Temp$[ebp+1507], eax
	mov	BYTE PTR _Temp$[ebp+1511], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1512], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1513], eax
	mov	DWORD PTR _Temp$[ebp+1517], eax
	mov	DWORD PTR _Temp$[ebp+1521], eax
	mov	BYTE PTR _Temp$[ebp+1525], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1526], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1527], eax
	mov	DWORD PTR _Temp$[ebp+1531], eax
	mov	DWORD PTR _Temp$[ebp+1535], eax
	mov	BYTE PTR _Temp$[ebp+1539], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1540], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1541], eax
	mov	DWORD PTR _Temp$[ebp+1545], eax
	mov	DWORD PTR _Temp$[ebp+1549], eax
	mov	BYTE PTR _Temp$[ebp+1553], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1554], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1555], eax
	mov	DWORD PTR _Temp$[ebp+1559], eax
	mov	DWORD PTR _Temp$[ebp+1563], eax
	mov	BYTE PTR _Temp$[ebp+1567], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1568], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1569], eax
	mov	DWORD PTR _Temp$[ebp+1573], eax
	mov	DWORD PTR _Temp$[ebp+1577], eax
	mov	BYTE PTR _Temp$[ebp+1581], al

; 547  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1582], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1583], eax
	mov	DWORD PTR _Temp$[ebp+1587], eax
	mov	DWORD PTR _Temp$[ebp+1591], eax
	mov	BYTE PTR _Temp$[ebp+1595], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1596], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1597], eax
	mov	DWORD PTR _Temp$[ebp+1601], eax
	mov	DWORD PTR _Temp$[ebp+1605], eax
	mov	BYTE PTR _Temp$[ebp+1609], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1610], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1611], eax
	mov	DWORD PTR _Temp$[ebp+1615], eax
	mov	DWORD PTR _Temp$[ebp+1619], eax
	mov	BYTE PTR _Temp$[ebp+1623], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1624], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1625], eax
	mov	DWORD PTR _Temp$[ebp+1629], eax
	mov	DWORD PTR _Temp$[ebp+1633], eax
	mov	BYTE PTR _Temp$[ebp+1637], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1638], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1639], eax
	mov	DWORD PTR _Temp$[ebp+1643], eax
	mov	DWORD PTR _Temp$[ebp+1647], eax
	mov	BYTE PTR _Temp$[ebp+1651], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1652], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1653], eax
	mov	DWORD PTR _Temp$[ebp+1657], eax
	mov	DWORD PTR _Temp$[ebp+1661], eax
	mov	BYTE PTR _Temp$[ebp+1665], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1666], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1667], eax
	mov	DWORD PTR _Temp$[ebp+1671], eax
	mov	DWORD PTR _Temp$[ebp+1675], eax
	mov	BYTE PTR _Temp$[ebp+1679], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1680], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1681], eax
	mov	DWORD PTR _Temp$[ebp+1685], eax
	mov	DWORD PTR _Temp$[ebp+1689], eax
	mov	BYTE PTR _Temp$[ebp+1693], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1694], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1695], eax
	mov	DWORD PTR _Temp$[ebp+1699], eax
	mov	DWORD PTR _Temp$[ebp+1703], eax
	mov	BYTE PTR _Temp$[ebp+1707], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1708], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1709], eax
	mov	DWORD PTR _Temp$[ebp+1713], eax
	mov	DWORD PTR _Temp$[ebp+1717], eax
	mov	BYTE PTR _Temp$[ebp+1721], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1722], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1723], eax
	mov	DWORD PTR _Temp$[ebp+1727], eax
	mov	DWORD PTR _Temp$[ebp+1731], eax
	mov	BYTE PTR _Temp$[ebp+1735], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1736], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1737], eax
	mov	DWORD PTR _Temp$[ebp+1741], eax
	mov	DWORD PTR _Temp$[ebp+1745], eax
	mov	BYTE PTR _Temp$[ebp+1749], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1750], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1751], eax
	mov	DWORD PTR _Temp$[ebp+1755], eax
	mov	DWORD PTR _Temp$[ebp+1759], eax
	mov	BYTE PTR _Temp$[ebp+1763], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1764], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1765], eax
	mov	DWORD PTR _Temp$[ebp+1769], eax
	mov	DWORD PTR _Temp$[ebp+1773], eax
	mov	BYTE PTR _Temp$[ebp+1777], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1778], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1779], eax
	mov	DWORD PTR _Temp$[ebp+1783], eax
	mov	DWORD PTR _Temp$[ebp+1787], eax
	mov	BYTE PTR _Temp$[ebp+1791], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1792], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1793], eax
	mov	DWORD PTR _Temp$[ebp+1797], eax
	mov	DWORD PTR _Temp$[ebp+1801], eax
	mov	BYTE PTR _Temp$[ebp+1805], al

; 548  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1806], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1807], eax
	mov	DWORD PTR _Temp$[ebp+1811], eax
	mov	DWORD PTR _Temp$[ebp+1815], eax
	mov	BYTE PTR _Temp$[ebp+1819], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1820], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1821], eax
	mov	DWORD PTR _Temp$[ebp+1825], eax
	mov	DWORD PTR _Temp$[ebp+1829], eax
	mov	BYTE PTR _Temp$[ebp+1833], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1834], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1835], eax
	mov	DWORD PTR _Temp$[ebp+1839], eax
	mov	DWORD PTR _Temp$[ebp+1843], eax
	mov	BYTE PTR _Temp$[ebp+1847], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1848], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1849], eax
	mov	DWORD PTR _Temp$[ebp+1853], eax
	mov	DWORD PTR _Temp$[ebp+1857], eax
	mov	BYTE PTR _Temp$[ebp+1861], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1862], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1863], eax
	mov	DWORD PTR _Temp$[ebp+1867], eax
	mov	DWORD PTR _Temp$[ebp+1871], eax
	mov	BYTE PTR _Temp$[ebp+1875], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1876], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1877], eax
	mov	DWORD PTR _Temp$[ebp+1881], eax
	mov	DWORD PTR _Temp$[ebp+1885], eax
	mov	BYTE PTR _Temp$[ebp+1889], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1890], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1891], eax
	mov	DWORD PTR _Temp$[ebp+1895], eax
	mov	DWORD PTR _Temp$[ebp+1899], eax
	mov	BYTE PTR _Temp$[ebp+1903], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1904], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1905], eax
	mov	DWORD PTR _Temp$[ebp+1909], eax
	mov	DWORD PTR _Temp$[ebp+1913], eax
	mov	BYTE PTR _Temp$[ebp+1917], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1918], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1919], eax
	mov	DWORD PTR _Temp$[ebp+1923], eax
	mov	DWORD PTR _Temp$[ebp+1927], eax
	mov	BYTE PTR _Temp$[ebp+1931], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1932], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1933], eax
	mov	DWORD PTR _Temp$[ebp+1937], eax
	mov	DWORD PTR _Temp$[ebp+1941], eax
	mov	BYTE PTR _Temp$[ebp+1945], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1946], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1947], eax
	mov	DWORD PTR _Temp$[ebp+1951], eax
	mov	DWORD PTR _Temp$[ebp+1955], eax
	mov	BYTE PTR _Temp$[ebp+1959], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1960], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1961], eax
	mov	DWORD PTR _Temp$[ebp+1965], eax
	mov	DWORD PTR _Temp$[ebp+1969], eax
	mov	BYTE PTR _Temp$[ebp+1973], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1974], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1975], eax
	mov	DWORD PTR _Temp$[ebp+1979], eax
	mov	DWORD PTR _Temp$[ebp+1983], eax
	mov	BYTE PTR _Temp$[ebp+1987], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1988], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1989], eax
	mov	DWORD PTR _Temp$[ebp+1993], eax
	mov	DWORD PTR _Temp$[ebp+1997], eax
	mov	BYTE PTR _Temp$[ebp+2001], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2002], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2003], eax
	mov	DWORD PTR _Temp$[ebp+2007], eax
	mov	DWORD PTR _Temp$[ebp+2011], eax
	mov	BYTE PTR _Temp$[ebp+2015], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2016], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2017], eax
	mov	DWORD PTR _Temp$[ebp+2021], eax
	mov	DWORD PTR _Temp$[ebp+2025], eax
	mov	BYTE PTR _Temp$[ebp+2029], al

; 549  : 				  "","","","","","","","","","","","Right Enter","Right Control","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2030], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2031], eax
	mov	DWORD PTR _Temp$[ebp+2035], eax
	mov	DWORD PTR _Temp$[ebp+2039], eax
	mov	BYTE PTR _Temp$[ebp+2043], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2044], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2045], eax
	mov	DWORD PTR _Temp$[ebp+2049], eax
	mov	DWORD PTR _Temp$[ebp+2053], eax
	mov	BYTE PTR _Temp$[ebp+2057], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2058], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2059], eax
	mov	DWORD PTR _Temp$[ebp+2063], eax
	mov	DWORD PTR _Temp$[ebp+2067], eax
	mov	BYTE PTR _Temp$[ebp+2071], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2072], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2073], eax
	mov	DWORD PTR _Temp$[ebp+2077], eax
	mov	DWORD PTR _Temp$[ebp+2081], eax
	mov	BYTE PTR _Temp$[ebp+2085], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2086], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2087], eax
	mov	DWORD PTR _Temp$[ebp+2091], eax
	mov	DWORD PTR _Temp$[ebp+2095], eax
	mov	BYTE PTR _Temp$[ebp+2099], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2100], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2101], eax
	mov	DWORD PTR _Temp$[ebp+2105], eax
	mov	DWORD PTR _Temp$[ebp+2109], eax
	mov	BYTE PTR _Temp$[ebp+2113], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2114], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2115], eax
	mov	DWORD PTR _Temp$[ebp+2119], eax
	mov	DWORD PTR _Temp$[ebp+2123], eax
	mov	BYTE PTR _Temp$[ebp+2127], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2128], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2129], eax
	mov	DWORD PTR _Temp$[ebp+2133], eax
	mov	DWORD PTR _Temp$[ebp+2137], eax
	mov	BYTE PTR _Temp$[ebp+2141], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2142], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2143], eax
	mov	DWORD PTR _Temp$[ebp+2147], eax
	mov	DWORD PTR _Temp$[ebp+2151], eax
	mov	BYTE PTR _Temp$[ebp+2155], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2156], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2157], eax
	mov	DWORD PTR _Temp$[ebp+2161], eax
	mov	DWORD PTR _Temp$[ebp+2165], eax
	mov	BYTE PTR _Temp$[ebp+2169], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2170], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2171], eax
	mov	DWORD PTR _Temp$[ebp+2175], eax
	mov	DWORD PTR _Temp$[ebp+2179], eax
	mov	BYTE PTR _Temp$[ebp+2183], al
	mov	eax, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
	mov	DWORD PTR _Temp$[ebp+2184], eax
	mov	ecx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2188], ecx
	mov	edx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+8
	mov	DWORD PTR _Temp$[ebp+2192], edx
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+2196], ax
	mov	eax, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@
	mov	DWORD PTR _Temp$[ebp+2198], eax
	mov	ecx, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2202], ecx
	mov	edx, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+8
	mov	DWORD PTR _Temp$[ebp+2206], edx
	mov	ax, WORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+12
	mov	WORD PTR _Temp$[ebp+2210], ax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2212], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2213], eax
	mov	DWORD PTR _Temp$[ebp+2217], eax
	mov	DWORD PTR _Temp$[ebp+2221], eax
	mov	BYTE PTR _Temp$[ebp+2225], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2226], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2227], eax
	mov	DWORD PTR _Temp$[ebp+2231], eax
	mov	DWORD PTR _Temp$[ebp+2235], eax
	mov	BYTE PTR _Temp$[ebp+2239], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2240], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2241], eax
	mov	DWORD PTR _Temp$[ebp+2245], eax
	mov	DWORD PTR _Temp$[ebp+2249], eax
	mov	BYTE PTR _Temp$[ebp+2253], al

; 550  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2254], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2255], eax
	mov	DWORD PTR _Temp$[ebp+2259], eax
	mov	DWORD PTR _Temp$[ebp+2263], eax
	mov	BYTE PTR _Temp$[ebp+2267], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2268], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2269], eax
	mov	DWORD PTR _Temp$[ebp+2273], eax
	mov	DWORD PTR _Temp$[ebp+2277], eax
	mov	BYTE PTR _Temp$[ebp+2281], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2282], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2283], eax
	mov	DWORD PTR _Temp$[ebp+2287], eax
	mov	DWORD PTR _Temp$[ebp+2291], eax
	mov	BYTE PTR _Temp$[ebp+2295], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2296], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2297], eax
	mov	DWORD PTR _Temp$[ebp+2301], eax
	mov	DWORD PTR _Temp$[ebp+2305], eax
	mov	BYTE PTR _Temp$[ebp+2309], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2310], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2311], eax
	mov	DWORD PTR _Temp$[ebp+2315], eax
	mov	DWORD PTR _Temp$[ebp+2319], eax
	mov	BYTE PTR _Temp$[ebp+2323], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2324], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2325], eax
	mov	DWORD PTR _Temp$[ebp+2329], eax
	mov	DWORD PTR _Temp$[ebp+2333], eax
	mov	BYTE PTR _Temp$[ebp+2337], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2338], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2339], eax
	mov	DWORD PTR _Temp$[ebp+2343], eax
	mov	DWORD PTR _Temp$[ebp+2347], eax
	mov	BYTE PTR _Temp$[ebp+2351], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2352], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2353], eax
	mov	DWORD PTR _Temp$[ebp+2357], eax
	mov	DWORD PTR _Temp$[ebp+2361], eax
	mov	BYTE PTR _Temp$[ebp+2365], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2366], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2367], eax
	mov	DWORD PTR _Temp$[ebp+2371], eax
	mov	DWORD PTR _Temp$[ebp+2375], eax
	mov	BYTE PTR _Temp$[ebp+2379], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2380], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2381], eax
	mov	DWORD PTR _Temp$[ebp+2385], eax
	mov	DWORD PTR _Temp$[ebp+2389], eax
	mov	BYTE PTR _Temp$[ebp+2393], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2394], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2395], eax
	mov	DWORD PTR _Temp$[ebp+2399], eax
	mov	DWORD PTR _Temp$[ebp+2403], eax
	mov	BYTE PTR _Temp$[ebp+2407], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2408], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2409], eax
	mov	DWORD PTR _Temp$[ebp+2413], eax
	mov	DWORD PTR _Temp$[ebp+2417], eax
	mov	BYTE PTR _Temp$[ebp+2421], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2422], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2423], eax
	mov	DWORD PTR _Temp$[ebp+2427], eax
	mov	DWORD PTR _Temp$[ebp+2431], eax
	mov	BYTE PTR _Temp$[ebp+2435], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2436], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2437], eax
	mov	DWORD PTR _Temp$[ebp+2441], eax
	mov	DWORD PTR _Temp$[ebp+2445], eax
	mov	BYTE PTR _Temp$[ebp+2449], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2450], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2451], eax
	mov	DWORD PTR _Temp$[ebp+2455], eax
	mov	DWORD PTR _Temp$[ebp+2459], eax
	mov	BYTE PTR _Temp$[ebp+2463], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2464], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2465], eax
	mov	DWORD PTR _Temp$[ebp+2469], eax
	mov	DWORD PTR _Temp$[ebp+2473], eax
	mov	BYTE PTR _Temp$[ebp+2477], al

; 551  : 				  "","Function F3","","","/ Num","","Print Screen","Right Alt","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2478], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2479], eax
	mov	DWORD PTR _Temp$[ebp+2483], eax
	mov	DWORD PTR _Temp$[ebp+2487], eax
	mov	BYTE PTR _Temp$[ebp+2491], al
	mov	eax, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@
	mov	DWORD PTR _Temp$[ebp+2492], eax
	mov	ecx, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2496], ecx
	mov	edx, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@+8
	mov	DWORD PTR _Temp$[ebp+2500], edx
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+2504], ax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2506], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2507], eax
	mov	DWORD PTR _Temp$[ebp+2511], eax
	mov	DWORD PTR _Temp$[ebp+2515], eax
	mov	BYTE PTR _Temp$[ebp+2519], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2520], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2521], eax
	mov	DWORD PTR _Temp$[ebp+2525], eax
	mov	DWORD PTR _Temp$[ebp+2529], eax
	mov	BYTE PTR _Temp$[ebp+2533], al
	mov	eax, DWORD PTR ??_C@_05IAKEFGOE@?1?5Num?$AA@
	mov	DWORD PTR _Temp$[ebp+2534], eax
	mov	cx, WORD PTR ??_C@_05IAKEFGOE@?1?5Num?$AA@+4
	mov	WORD PTR _Temp$[ebp+2538], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2540], eax
	mov	DWORD PTR _Temp$[ebp+2544], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2548], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2549], eax
	mov	DWORD PTR _Temp$[ebp+2553], eax
	mov	DWORD PTR _Temp$[ebp+2557], eax
	mov	BYTE PTR _Temp$[ebp+2561], al
	mov	eax, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@
	mov	DWORD PTR _Temp$[ebp+2562], eax
	mov	ecx, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2566], ecx
	mov	edx, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+8
	mov	DWORD PTR _Temp$[ebp+2570], edx
	mov	al, BYTE PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+12
	mov	BYTE PTR _Temp$[ebp+2574], al
	xor	eax, eax
	mov	BYTE PTR _Temp$[ebp+2575], al
	mov	eax, DWORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@
	mov	DWORD PTR _Temp$[ebp+2576], eax
	mov	ecx, DWORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2580], ecx
	mov	dx, WORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@+8
	mov	WORD PTR _Temp$[ebp+2584], dx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2586], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2590], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2591], eax
	mov	DWORD PTR _Temp$[ebp+2595], eax
	mov	DWORD PTR _Temp$[ebp+2599], eax
	mov	BYTE PTR _Temp$[ebp+2603], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2604], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2605], eax
	mov	DWORD PTR _Temp$[ebp+2609], eax
	mov	DWORD PTR _Temp$[ebp+2613], eax
	mov	BYTE PTR _Temp$[ebp+2617], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2618], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2619], eax
	mov	DWORD PTR _Temp$[ebp+2623], eax
	mov	DWORD PTR _Temp$[ebp+2627], eax
	mov	BYTE PTR _Temp$[ebp+2631], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2632], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2633], eax
	mov	DWORD PTR _Temp$[ebp+2637], eax
	mov	DWORD PTR _Temp$[ebp+2641], eax
	mov	BYTE PTR _Temp$[ebp+2645], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2646], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2647], eax
	mov	DWORD PTR _Temp$[ebp+2651], eax
	mov	DWORD PTR _Temp$[ebp+2655], eax
	mov	BYTE PTR _Temp$[ebp+2659], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2660], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2661], eax
	mov	DWORD PTR _Temp$[ebp+2665], eax
	mov	DWORD PTR _Temp$[ebp+2669], eax
	mov	BYTE PTR _Temp$[ebp+2673], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2674], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2675], eax
	mov	DWORD PTR _Temp$[ebp+2679], eax
	mov	DWORD PTR _Temp$[ebp+2683], eax
	mov	BYTE PTR _Temp$[ebp+2687], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2688], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2689], eax
	mov	DWORD PTR _Temp$[ebp+2693], eax
	mov	DWORD PTR _Temp$[ebp+2697], eax
	mov	BYTE PTR _Temp$[ebp+2701], al

; 552  : 				  "","","","","Pause","Break","Home","Up","Page Up","","Left","","Right","","End","Down",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2702], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2703], eax
	mov	DWORD PTR _Temp$[ebp+2707], eax
	mov	DWORD PTR _Temp$[ebp+2711], eax
	mov	BYTE PTR _Temp$[ebp+2715], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2716], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2717], eax
	mov	DWORD PTR _Temp$[ebp+2721], eax
	mov	DWORD PTR _Temp$[ebp+2725], eax
	mov	BYTE PTR _Temp$[ebp+2729], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2730], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2731], eax
	mov	DWORD PTR _Temp$[ebp+2735], eax
	mov	DWORD PTR _Temp$[ebp+2739], eax
	mov	BYTE PTR _Temp$[ebp+2743], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2744], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2745], eax
	mov	DWORD PTR _Temp$[ebp+2749], eax
	mov	DWORD PTR _Temp$[ebp+2753], eax
	mov	BYTE PTR _Temp$[ebp+2757], al
	mov	eax, DWORD PTR ??_C@_05PEDNBBBD@Pause?$AA@
	mov	DWORD PTR _Temp$[ebp+2758], eax
	mov	cx, WORD PTR ??_C@_05PEDNBBBD@Pause?$AA@+4
	mov	WORD PTR _Temp$[ebp+2762], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2764], eax
	mov	DWORD PTR _Temp$[ebp+2768], eax
	mov	eax, DWORD PTR ??_C@_05EMFLFCNO@Break?$AA@
	mov	DWORD PTR _Temp$[ebp+2772], eax
	mov	cx, WORD PTR ??_C@_05EMFLFCNO@Break?$AA@+4
	mov	WORD PTR _Temp$[ebp+2776], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2778], eax
	mov	DWORD PTR _Temp$[ebp+2782], eax
	mov	eax, DWORD PTR ??_C@_04GKJODLKO@Home?$AA@
	mov	DWORD PTR _Temp$[ebp+2786], eax
	mov	cl, BYTE PTR ??_C@_04GKJODLKO@Home?$AA@+4
	mov	BYTE PTR _Temp$[ebp+2790], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2791], eax
	mov	DWORD PTR _Temp$[ebp+2795], eax
	mov	BYTE PTR _Temp$[ebp+2799], al
	mov	ax, WORD PTR ??_C@_02EFPGLDEA@Up?$AA@
	mov	WORD PTR _Temp$[ebp+2800], ax
	mov	cl, BYTE PTR ??_C@_02EFPGLDEA@Up?$AA@+2
	mov	BYTE PTR _Temp$[ebp+2802], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2803], eax
	mov	DWORD PTR _Temp$[ebp+2807], eax
	mov	WORD PTR _Temp$[ebp+2811], ax
	mov	BYTE PTR _Temp$[ebp+2813], al
	mov	eax, DWORD PTR ??_C@_07EDGDGJEN@Page?5Up?$AA@
	mov	DWORD PTR _Temp$[ebp+2814], eax
	mov	ecx, DWORD PTR ??_C@_07EDGDGJEN@Page?5Up?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2818], ecx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2822], eax
	mov	WORD PTR _Temp$[ebp+2826], ax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2828], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2829], eax
	mov	DWORD PTR _Temp$[ebp+2833], eax
	mov	DWORD PTR _Temp$[ebp+2837], eax
	mov	BYTE PTR _Temp$[ebp+2841], al
	mov	eax, DWORD PTR ??_C@_04KPCPLBPL@Left?$AA@
	mov	DWORD PTR _Temp$[ebp+2842], eax
	mov	cl, BYTE PTR ??_C@_04KPCPLBPL@Left?$AA@+4
	mov	BYTE PTR _Temp$[ebp+2846], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2847], eax
	mov	DWORD PTR _Temp$[ebp+2851], eax
	mov	BYTE PTR _Temp$[ebp+2855], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2856], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2857], eax
	mov	DWORD PTR _Temp$[ebp+2861], eax
	mov	DWORD PTR _Temp$[ebp+2865], eax
	mov	BYTE PTR _Temp$[ebp+2869], al
	mov	eax, DWORD PTR ??_C@_05DADPALEM@Right?$AA@
	mov	DWORD PTR _Temp$[ebp+2870], eax
	mov	cx, WORD PTR ??_C@_05DADPALEM@Right?$AA@+4
	mov	WORD PTR _Temp$[ebp+2874], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2876], eax
	mov	DWORD PTR _Temp$[ebp+2880], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2884], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2885], eax
	mov	DWORD PTR _Temp$[ebp+2889], eax
	mov	DWORD PTR _Temp$[ebp+2893], eax
	mov	BYTE PTR _Temp$[ebp+2897], al
	mov	eax, DWORD PTR ??_C@_03DBKJMAGF@End?$AA@
	mov	DWORD PTR _Temp$[ebp+2898], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2902], eax
	mov	DWORD PTR _Temp$[ebp+2906], eax
	mov	WORD PTR _Temp$[ebp+2910], ax
	mov	eax, DWORD PTR ??_C@_04FNCLCJMC@Down?$AA@
	mov	DWORD PTR _Temp$[ebp+2912], eax
	mov	cl, BYTE PTR ??_C@_04FNCLCJMC@Down?$AA@+4
	mov	BYTE PTR _Temp$[ebp+2916], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2917], eax
	mov	DWORD PTR _Temp$[ebp+2921], eax
	mov	BYTE PTR _Temp$[ebp+2925], al

; 553  : 				  "Page Down","Insert","Delete","","","","","","","","Left Windows","Right Windows","Thing","","","",

	mov	eax, DWORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@
	mov	DWORD PTR _Temp$[ebp+2926], eax
	mov	ecx, DWORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2930], ecx
	mov	dx, WORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@+8
	mov	WORD PTR _Temp$[ebp+2934], dx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2936], eax
	mov	eax, DWORD PTR ??_C@_06CPFCODOD@Insert?$AA@
	mov	DWORD PTR _Temp$[ebp+2940], eax
	mov	cx, WORD PTR ??_C@_06CPFCODOD@Insert?$AA@+4
	mov	WORD PTR _Temp$[ebp+2944], cx
	mov	dl, BYTE PTR ??_C@_06CPFCODOD@Insert?$AA@+6
	mov	BYTE PTR _Temp$[ebp+2946], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2947], eax
	mov	WORD PTR _Temp$[ebp+2951], ax
	mov	BYTE PTR _Temp$[ebp+2953], al
	mov	eax, DWORD PTR ??_C@_06JBKGCNBB@Delete?$AA@
	mov	DWORD PTR _Temp$[ebp+2954], eax
	mov	cx, WORD PTR ??_C@_06JBKGCNBB@Delete?$AA@+4
	mov	WORD PTR _Temp$[ebp+2958], cx
	mov	dl, BYTE PTR ??_C@_06JBKGCNBB@Delete?$AA@+6
	mov	BYTE PTR _Temp$[ebp+2960], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2961], eax
	mov	WORD PTR _Temp$[ebp+2965], ax
	mov	BYTE PTR _Temp$[ebp+2967], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2968], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2969], eax
	mov	DWORD PTR _Temp$[ebp+2973], eax
	mov	DWORD PTR _Temp$[ebp+2977], eax
	mov	BYTE PTR _Temp$[ebp+2981], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2982], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2983], eax
	mov	DWORD PTR _Temp$[ebp+2987], eax
	mov	DWORD PTR _Temp$[ebp+2991], eax
	mov	BYTE PTR _Temp$[ebp+2995], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2996], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2997], eax
	mov	DWORD PTR _Temp$[ebp+3001], eax
	mov	DWORD PTR _Temp$[ebp+3005], eax
	mov	BYTE PTR _Temp$[ebp+3009], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3010], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3011], eax
	mov	DWORD PTR _Temp$[ebp+3015], eax
	mov	DWORD PTR _Temp$[ebp+3019], eax
	mov	BYTE PTR _Temp$[ebp+3023], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3024], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3025], eax
	mov	DWORD PTR _Temp$[ebp+3029], eax
	mov	DWORD PTR _Temp$[ebp+3033], eax
	mov	BYTE PTR _Temp$[ebp+3037], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3038], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3039], eax
	mov	DWORD PTR _Temp$[ebp+3043], eax
	mov	DWORD PTR _Temp$[ebp+3047], eax
	mov	BYTE PTR _Temp$[ebp+3051], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3052], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3053], eax
	mov	DWORD PTR _Temp$[ebp+3057], eax
	mov	DWORD PTR _Temp$[ebp+3061], eax
	mov	BYTE PTR _Temp$[ebp+3065], al
	mov	eax, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@
	mov	DWORD PTR _Temp$[ebp+3066], eax
	mov	ecx, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+4
	mov	DWORD PTR _Temp$[ebp+3070], ecx
	mov	edx, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+8
	mov	DWORD PTR _Temp$[ebp+3074], edx
	mov	al, BYTE PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+12
	mov	BYTE PTR _Temp$[ebp+3078], al
	xor	eax, eax
	mov	BYTE PTR _Temp$[ebp+3079], al
	mov	eax, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@
	mov	DWORD PTR _Temp$[ebp+3080], eax
	mov	ecx, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+4
	mov	DWORD PTR _Temp$[ebp+3084], ecx
	mov	edx, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+8
	mov	DWORD PTR _Temp$[ebp+3088], edx
	mov	ax, WORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+12
	mov	WORD PTR _Temp$[ebp+3092], ax
	mov	eax, DWORD PTR ??_C@_05FOLLILPC@Thing?$AA@
	mov	DWORD PTR _Temp$[ebp+3094], eax
	mov	cx, WORD PTR ??_C@_05FOLLILPC@Thing?$AA@+4
	mov	WORD PTR _Temp$[ebp+3098], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3100], eax
	mov	DWORD PTR _Temp$[ebp+3104], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3108], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3109], eax
	mov	DWORD PTR _Temp$[ebp+3113], eax
	mov	DWORD PTR _Temp$[ebp+3117], eax
	mov	BYTE PTR _Temp$[ebp+3121], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3122], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3123], eax
	mov	DWORD PTR _Temp$[ebp+3127], eax
	mov	DWORD PTR _Temp$[ebp+3131], eax
	mov	BYTE PTR _Temp$[ebp+3135], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3136], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3137], eax
	mov	DWORD PTR _Temp$[ebp+3141], eax
	mov	DWORD PTR _Temp$[ebp+3145], eax
	mov	BYTE PTR _Temp$[ebp+3149], al

; 554  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3150], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3151], eax
	mov	DWORD PTR _Temp$[ebp+3155], eax
	mov	DWORD PTR _Temp$[ebp+3159], eax
	mov	BYTE PTR _Temp$[ebp+3163], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3164], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3165], eax
	mov	DWORD PTR _Temp$[ebp+3169], eax
	mov	DWORD PTR _Temp$[ebp+3173], eax
	mov	BYTE PTR _Temp$[ebp+3177], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3178], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3179], eax
	mov	DWORD PTR _Temp$[ebp+3183], eax
	mov	DWORD PTR _Temp$[ebp+3187], eax
	mov	BYTE PTR _Temp$[ebp+3191], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3192], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3193], eax
	mov	DWORD PTR _Temp$[ebp+3197], eax
	mov	DWORD PTR _Temp$[ebp+3201], eax
	mov	BYTE PTR _Temp$[ebp+3205], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3206], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3207], eax
	mov	DWORD PTR _Temp$[ebp+3211], eax
	mov	DWORD PTR _Temp$[ebp+3215], eax
	mov	BYTE PTR _Temp$[ebp+3219], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3220], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3221], eax
	mov	DWORD PTR _Temp$[ebp+3225], eax
	mov	DWORD PTR _Temp$[ebp+3229], eax
	mov	BYTE PTR _Temp$[ebp+3233], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3234], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3235], eax
	mov	DWORD PTR _Temp$[ebp+3239], eax
	mov	DWORD PTR _Temp$[ebp+3243], eax
	mov	BYTE PTR _Temp$[ebp+3247], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3248], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3249], eax
	mov	DWORD PTR _Temp$[ebp+3253], eax
	mov	DWORD PTR _Temp$[ebp+3257], eax
	mov	BYTE PTR _Temp$[ebp+3261], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3262], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3263], eax
	mov	DWORD PTR _Temp$[ebp+3267], eax
	mov	DWORD PTR _Temp$[ebp+3271], eax
	mov	BYTE PTR _Temp$[ebp+3275], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3276], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3277], eax
	mov	DWORD PTR _Temp$[ebp+3281], eax
	mov	DWORD PTR _Temp$[ebp+3285], eax
	mov	BYTE PTR _Temp$[ebp+3289], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3290], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3291], eax
	mov	DWORD PTR _Temp$[ebp+3295], eax
	mov	DWORD PTR _Temp$[ebp+3299], eax
	mov	BYTE PTR _Temp$[ebp+3303], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3304], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3305], eax
	mov	DWORD PTR _Temp$[ebp+3309], eax
	mov	DWORD PTR _Temp$[ebp+3313], eax
	mov	BYTE PTR _Temp$[ebp+3317], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3318], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3319], eax
	mov	DWORD PTR _Temp$[ebp+3323], eax
	mov	DWORD PTR _Temp$[ebp+3327], eax
	mov	BYTE PTR _Temp$[ebp+3331], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3332], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3333], eax
	mov	DWORD PTR _Temp$[ebp+3337], eax
	mov	DWORD PTR _Temp$[ebp+3341], eax
	mov	BYTE PTR _Temp$[ebp+3345], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3346], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3347], eax
	mov	DWORD PTR _Temp$[ebp+3351], eax
	mov	DWORD PTR _Temp$[ebp+3355], eax
	mov	BYTE PTR _Temp$[ebp+3359], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3360], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3361], eax
	mov	DWORD PTR _Temp$[ebp+3365], eax
	mov	DWORD PTR _Temp$[ebp+3369], eax
	mov	BYTE PTR _Temp$[ebp+3373], al

; 555  : 				  "","","","","","","","","","","","","","","",""};

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3374], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3375], eax
	mov	DWORD PTR _Temp$[ebp+3379], eax
	mov	DWORD PTR _Temp$[ebp+3383], eax
	mov	BYTE PTR _Temp$[ebp+3387], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3388], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3389], eax
	mov	DWORD PTR _Temp$[ebp+3393], eax
	mov	DWORD PTR _Temp$[ebp+3397], eax
	mov	BYTE PTR _Temp$[ebp+3401], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3402], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3403], eax
	mov	DWORD PTR _Temp$[ebp+3407], eax
	mov	DWORD PTR _Temp$[ebp+3411], eax
	mov	BYTE PTR _Temp$[ebp+3415], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3416], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3417], eax
	mov	DWORD PTR _Temp$[ebp+3421], eax
	mov	DWORD PTR _Temp$[ebp+3425], eax
	mov	BYTE PTR _Temp$[ebp+3429], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3430], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3431], eax
	mov	DWORD PTR _Temp$[ebp+3435], eax
	mov	DWORD PTR _Temp$[ebp+3439], eax
	mov	BYTE PTR _Temp$[ebp+3443], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3444], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3445], eax
	mov	DWORD PTR _Temp$[ebp+3449], eax
	mov	DWORD PTR _Temp$[ebp+3453], eax
	mov	BYTE PTR _Temp$[ebp+3457], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3458], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3459], eax
	mov	DWORD PTR _Temp$[ebp+3463], eax
	mov	DWORD PTR _Temp$[ebp+3467], eax
	mov	BYTE PTR _Temp$[ebp+3471], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3472], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3473], eax
	mov	DWORD PTR _Temp$[ebp+3477], eax
	mov	DWORD PTR _Temp$[ebp+3481], eax
	mov	BYTE PTR _Temp$[ebp+3485], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3486], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3487], eax
	mov	DWORD PTR _Temp$[ebp+3491], eax
	mov	DWORD PTR _Temp$[ebp+3495], eax
	mov	BYTE PTR _Temp$[ebp+3499], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3500], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3501], eax
	mov	DWORD PTR _Temp$[ebp+3505], eax
	mov	DWORD PTR _Temp$[ebp+3509], eax
	mov	BYTE PTR _Temp$[ebp+3513], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3514], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3515], eax
	mov	DWORD PTR _Temp$[ebp+3519], eax
	mov	DWORD PTR _Temp$[ebp+3523], eax
	mov	BYTE PTR _Temp$[ebp+3527], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3528], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3529], eax
	mov	DWORD PTR _Temp$[ebp+3533], eax
	mov	DWORD PTR _Temp$[ebp+3537], eax
	mov	BYTE PTR _Temp$[ebp+3541], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3542], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3543], eax
	mov	DWORD PTR _Temp$[ebp+3547], eax
	mov	DWORD PTR _Temp$[ebp+3551], eax
	mov	BYTE PTR _Temp$[ebp+3555], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3556], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3557], eax
	mov	DWORD PTR _Temp$[ebp+3561], eax
	mov	DWORD PTR _Temp$[ebp+3565], eax
	mov	BYTE PTR _Temp$[ebp+3569], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3570], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3571], eax
	mov	DWORD PTR _Temp$[ebp+3575], eax
	mov	DWORD PTR _Temp$[ebp+3579], eax
	mov	BYTE PTR _Temp$[ebp+3583], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3584], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3585], eax
	mov	DWORD PTR _Temp$[ebp+3589], eax
	mov	DWORD PTR _Temp$[ebp+3593], eax
	mov	BYTE PTR _Temp$[ebp+3597], al

; 556  : 	
; 557  : 	for(int i=0;i<257;i++)

	mov	DWORD PTR _i$91480[ebp], 0
	jmp	SHORT $LN9@KeyHandler
$LN8@KeyHandler:
	mov	eax, DWORD PTR _i$91480[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91480[ebp], eax
$LN9@KeyHandler:
	cmp	DWORD PTR _i$91480[ebp], 257		; 00000101H
	jge	SHORT $LN7@KeyHandler

; 558  : 		for(int j=0;j<14;j++)

	mov	DWORD PTR _j$91484[ebp], 0
	jmp	SHORT $LN6@KeyHandler
$LN5@KeyHandler:
	mov	eax, DWORD PTR _j$91484[ebp]
	add	eax, 1
	mov	DWORD PTR _j$91484[ebp], eax
$LN6@KeyHandler:
	cmp	DWORD PTR _j$91484[ebp], 14		; 0000000eH
	jge	SHORT $LN4@KeyHandler

; 559  : 			this->Keys[i][j]=Temp[i][j];

	mov	eax, DWORD PTR _i$91480[ebp]
	imul	eax, 14					; 0000000eH
	lea	ecx, DWORD PTR _Temp$[ebp+eax]
	mov	edx, DWORD PTR _i$91480[ebp]
	imul	edx, 14					; 0000000eH
	add	edx, DWORD PTR _j$91484[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _j$91484[ebp]
	mov	cl, BYTE PTR [ecx+esi]
	mov	BYTE PTR [eax+edx+1281], cl
	jmp	SHORT $LN5@KeyHandler
$LN4@KeyHandler:
	jmp	SHORT $LN8@KeyHandler
$LN7@KeyHandler:

; 560  : 
; 561  : 	for(int i=0;i<256;i++)

	mov	DWORD PTR _i$91488[ebp], 0
	jmp	SHORT $LN3@KeyHandler
$LN2@KeyHandler:
	mov	eax, DWORD PTR _i$91488[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91488[ebp], eax
$LN3@KeyHandler:
	cmp	DWORD PTR _i$91488[ebp], 256		; 00000100H
	jge	SHORT $LN1@KeyHandler

; 562  : 	{
; 563  : 		KeyState1[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91488[ebp]
	mov	BYTE PTR [eax+1], 0

; 564  : 		KeyState2[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91488[ebp]
	mov	BYTE PTR [eax+257], 0

; 565  : 		KeyState3[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91488[ebp]
	mov	BYTE PTR [eax+513], 0

; 566  : 		KeyState4[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91488[ebp]
	mov	BYTE PTR [eax+769], 0

; 567  : 		KeyState5[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91488[ebp]
	mov	BYTE PTR [eax+1025], 0

; 568  : 	}

	jmp	SHORT $LN2@KeyHandler
$LN1@KeyHandler:

; 569  : 
; 570  : 	this->Bound=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0

; 571  : 	this->MouseSyncX=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4892], 0

; 572  : 	this->MouseSyncY=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4896], 0

; 573  : 	this->MouseLeft=-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4884], -1

; 574  : 	this->MouseRight=-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4888], -1

; 575  : 	this->MouseDown=-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4880], -1

; 576  : 	this->MouseUp=-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4900], -1

; 577  : 
; 578  : 	return;
; 579  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
??0KeyHandler@@QAE@XZ ENDP				; KeyHandler::KeyHandler
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??0KeyHandler@@QAE@PAVMouseHandler@@HHHHHH@Z	; KeyHandler::KeyHandler
; Function compile flags: /Odtp /ZI
;	COMDAT ??0KeyHandler@@QAE@PAVMouseHandler@@HHHHHH@Z
_TEXT	SEGMENT
_i$91511 = -3620					; size = 4
_j$91507 = -3616					; size = 4
_i$91503 = -3612					; size = 4
_Temp$ = -3608						; size = 3598
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Mouse$ = 8						; size = 4
_XSpeed$ = 12						; size = 4
_YSpeed$ = 16						; size = 4
_BindMouseXLeft$ = 20					; size = 4
_BindMouseXRight$ = 24					; size = 4
_BindMouseYUp$ = 28					; size = 4
_BindMouseYDown$ = 32					; size = 4
??0KeyHandler@@QAE@PAVMouseHandler@@HHHHHH@Z PROC	; KeyHandler::KeyHandler, COMDAT
; _this$ = ecx

; 581  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 3684				; 00000e64H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 582  : 	char Temp[257][14]={"Null Key","Escape","1 Key","2 Key","3 Key","4 Key","5 Key","6 Key","7 Key","8 Key","9 Key","0 Key","- Key","= Key","Backspace","Tab","Q",

	mov	eax, DWORD PTR ??_C@_08OFADHOMM@Null?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp], eax
	mov	ecx, DWORD PTR ??_C@_08OFADHOMM@Null?5Key?$AA@+4
	mov	DWORD PTR _Temp$[ebp+4], ecx
	mov	dl, BYTE PTR ??_C@_08OFADHOMM@Null?5Key?$AA@+8
	mov	BYTE PTR _Temp$[ebp+8], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+9], eax
	mov	BYTE PTR _Temp$[ebp+13], al
	mov	eax, DWORD PTR ??_C@_06OIGFGPHJ@Escape?$AA@
	mov	DWORD PTR _Temp$[ebp+14], eax
	mov	cx, WORD PTR ??_C@_06OIGFGPHJ@Escape?$AA@+4
	mov	WORD PTR _Temp$[ebp+18], cx
	mov	dl, BYTE PTR ??_C@_06OIGFGPHJ@Escape?$AA@+6
	mov	BYTE PTR _Temp$[ebp+20], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+21], eax
	mov	WORD PTR _Temp$[ebp+25], ax
	mov	BYTE PTR _Temp$[ebp+27], al
	mov	eax, DWORD PTR ??_C@_05LMCOLBBI@1?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+28], eax
	mov	cx, WORD PTR ??_C@_05LMCOLBBI@1?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+32], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+34], eax
	mov	DWORD PTR _Temp$[ebp+38], eax
	mov	eax, DWORD PTR ??_C@_05DKLKMDLG@2?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+42], eax
	mov	cx, WORD PTR ??_C@_05DKLKMDLG@2?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+46], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+48], eax
	mov	DWORD PTR _Temp$[ebp+52], eax
	mov	eax, DWORD PTR ??_C@_05PBOGBABD@3?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+56], eax
	mov	cx, WORD PTR ??_C@_05PBOGBABD@3?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+60], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+62], eax
	mov	DWORD PTR _Temp$[ebp+66], eax
	mov	eax, DWORD PTR ??_C@_05OMODCAKL@4?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+70], eax
	mov	cx, WORD PTR ??_C@_05OMODCAKL@4?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+74], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+76], eax
	mov	DWORD PTR _Temp$[ebp+80], eax
	mov	eax, DWORD PTR ??_C@_05CHLPPDAO@5?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+84], eax
	mov	cx, WORD PTR ??_C@_05CHLPPDAO@5?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+88], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+90], eax
	mov	DWORD PTR _Temp$[ebp+94], eax
	mov	eax, DWORD PTR ??_C@_05KBCLIBKA@6?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+98], eax
	mov	cx, WORD PTR ??_C@_05KBCLIBKA@6?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+102], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+104], eax
	mov	DWORD PTR _Temp$[ebp+108], eax
	mov	eax, DWORD PTR ??_C@_05GKHHFCAF@7?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+112], eax
	mov	cx, WORD PTR ??_C@_05GKHHFCAF@7?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+116], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+118], eax
	mov	DWORD PTR _Temp$[ebp+122], eax
	mov	eax, DWORD PTR ??_C@_05JLCBOANA@8?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+126], eax
	mov	cx, WORD PTR ??_C@_05JLCBOANA@8?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+130], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+132], eax
	mov	DWORD PTR _Temp$[ebp+136], eax
	mov	eax, DWORD PTR ??_C@_05FAHNDDHF@9?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+140], eax
	mov	cx, WORD PTR ??_C@_05FAHNDDHF@9?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+144], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+146], eax
	mov	DWORD PTR _Temp$[ebp+150], eax
	mov	eax, DWORD PTR ??_C@_05HHHCGCLN@0?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+154], eax
	mov	cx, WORD PTR ??_C@_05HHHCGCLN@0?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+158], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+160], eax
	mov	DWORD PTR _Temp$[ebp+164], eax
	mov	eax, DWORD PTR ??_C@_05MIDKHDPI@?9?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+168], eax
	mov	cx, WORD PTR ??_C@_05MIDKHDPI@?9?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+172], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+174], eax
	mov	DWORD PTR _Temp$[ebp+178], eax
	mov	eax, DWORD PTR ??_C@_05MLOMHBGD@?$DN?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+182], eax
	mov	cx, WORD PTR ??_C@_05MLOMHBGD@?$DN?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+186], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+188], eax
	mov	DWORD PTR _Temp$[ebp+192], eax
	mov	eax, DWORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@
	mov	DWORD PTR _Temp$[ebp+196], eax
	mov	ecx, DWORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@+4
	mov	DWORD PTR _Temp$[ebp+200], ecx
	mov	dx, WORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@+8
	mov	WORD PTR _Temp$[ebp+204], dx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+206], eax
	mov	eax, DWORD PTR ??_C@_03IEAKBACE@Tab?$AA@
	mov	DWORD PTR _Temp$[ebp+210], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+214], eax
	mov	DWORD PTR _Temp$[ebp+218], eax
	mov	WORD PTR _Temp$[ebp+222], ax
	mov	ax, WORD PTR ??_C@_01BNIGIBBF@Q?$AA@
	mov	WORD PTR _Temp$[ebp+224], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+226], eax
	mov	DWORD PTR _Temp$[ebp+230], eax
	mov	DWORD PTR _Temp$[ebp+234], eax

; 583  : 				  "W","E","R","T","Y","U","I","O","P","[","]","Right Enter","Left Control","A","S","D",

	mov	ax, WORD PTR ??_C@_01ELNMCGJD@W?$AA@
	mov	WORD PTR _Temp$[ebp+238], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+240], eax
	mov	DWORD PTR _Temp$[ebp+244], eax
	mov	DWORD PTR _Temp$[ebp+248], eax
	mov	ax, WORD PTR ??_C@_01DDCIFGEA@E?$AA@
	mov	WORD PTR _Temp$[ebp+252], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+254], eax
	mov	DWORD PTR _Temp$[ebp+258], eax
	mov	DWORD PTR _Temp$[ebp+262], eax
	mov	ax, WORD PTR ??_C@_01DGKLNCNG@R?$AA@
	mov	WORD PTR _Temp$[ebp+266], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+268], eax
	mov	DWORD PTR _Temp$[ebp+272], eax
	mov	DWORD PTR _Temp$[ebp+276], eax
	mov	ax, WORD PTR ??_C@_01GAPBHFFA@T?$AA@
	mov	WORD PTR _Temp$[ebp+280], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+282], eax
	mov	DWORD PTR _Temp$[ebp+286], eax
	mov	DWORD PTR _Temp$[ebp+290], eax
	mov	ax, WORD PTR ??_C@_01NFFPALBN@Y?$AA@
	mov	WORD PTR _Temp$[ebp+294], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+296], eax
	mov	DWORD PTR _Temp$[ebp+300], eax
	mov	DWORD PTR _Temp$[ebp+304], eax
	mov	ax, WORD PTR ??_C@_01HJOKEEBB@U?$AA@
	mov	WORD PTR _Temp$[ebp+308], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+310], eax
	mov	DWORD PTR _Temp$[ebp+314], eax
	mov	DWORD PTR _Temp$[ebp+318], eax
	mov	ax, WORD PTR ??_C@_01JPJNBJEM@I?$AA@
	mov	WORD PTR _Temp$[ebp+322], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+324], eax
	mov	DWORD PTR _Temp$[ebp+328], eax
	mov	DWORD PTR _Temp$[ebp+332], eax
	mov	ax, WORD PTR ??_C@_01MJMHLOMK@O?$AA@
	mov	WORD PTR _Temp$[ebp+336], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+338], eax
	mov	DWORD PTR _Temp$[ebp+342], eax
	mov	DWORD PTR _Temp$[ebp+346], eax
	mov	ax, WORD PTR ??_C@_01EJNLAFE@P?$AA@
	mov	WORD PTR _Temp$[ebp+350], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+352], eax
	mov	DWORD PTR _Temp$[ebp+356], eax
	mov	DWORD PTR _Temp$[ebp+360], eax
	mov	ax, WORD PTR ??_C@_01OHGJGJJP@?$FL?$AA@
	mov	WORD PTR _Temp$[ebp+364], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+366], eax
	mov	DWORD PTR _Temp$[ebp+370], eax
	mov	DWORD PTR _Temp$[ebp+374], eax
	mov	ax, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	WORD PTR _Temp$[ebp+378], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+380], eax
	mov	DWORD PTR _Temp$[ebp+384], eax
	mov	DWORD PTR _Temp$[ebp+388], eax
	mov	eax, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
	mov	DWORD PTR _Temp$[ebp+392], eax
	mov	ecx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+4
	mov	DWORD PTR _Temp$[ebp+396], ecx
	mov	edx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+8
	mov	DWORD PTR _Temp$[ebp+400], edx
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+404], ax
	mov	eax, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@
	mov	DWORD PTR _Temp$[ebp+406], eax
	mov	ecx, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+4
	mov	DWORD PTR _Temp$[ebp+410], ecx
	mov	edx, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+8
	mov	DWORD PTR _Temp$[ebp+414], edx
	mov	al, BYTE PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+12
	mov	BYTE PTR _Temp$[ebp+418], al
	xor	eax, eax
	mov	BYTE PTR _Temp$[ebp+419], al
	mov	ax, WORD PTR ??_C@_01FHEEJDEE@A?$AA@
	mov	WORD PTR _Temp$[ebp+420], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+422], eax
	mov	DWORD PTR _Temp$[ebp+426], eax
	mov	DWORD PTR _Temp$[ebp+430], eax
	mov	ax, WORD PTR ??_C@_01CPLAODJH@S?$AA@
	mov	WORD PTR _Temp$[ebp+434], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+436], eax
	mov	DWORD PTR _Temp$[ebp+440], eax
	mov	DWORD PTR _Temp$[ebp+444], eax
	mov	ax, WORD PTR ??_C@_01CKDDGHAB@D?$AA@
	mov	WORD PTR _Temp$[ebp+448], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+450], eax
	mov	DWORD PTR _Temp$[ebp+454], eax
	mov	DWORD PTR _Temp$[ebp+458], eax

; 584  : 				  "F","G","H","J","K","L",";","\'","`","Left Shift","\\","Z","X","C","V","B",

	mov	ax, WORD PTR ??_C@_01BIAFAFID@F?$AA@
	mov	WORD PTR _Temp$[ebp+462], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+464], eax
	mov	DWORD PTR _Temp$[ebp+468], eax
	mov	DWORD PTR _Temp$[ebp+472], eax
	mov	ax, WORD PTR ??_C@_01BBODEMC@G?$AA@
	mov	WORD PTR _Temp$[ebp+476], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+478], eax
	mov	DWORD PTR _Temp$[ebp+482], eax
	mov	DWORD PTR _Temp$[ebp+486], eax
	mov	ax, WORD PTR ??_C@_01IGIGCIAN@H?$AA@
	mov	WORD PTR _Temp$[ebp+490], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+492], eax
	mov	DWORD PTR _Temp$[ebp+496], eax
	mov	DWORD PTR _Temp$[ebp+500], eax
	mov	ax, WORD PTR ??_C@_01LELAEKIP@J?$AA@
	mov	WORD PTR _Temp$[ebp+504], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+506], eax
	mov	DWORD PTR _Temp$[ebp+510], eax
	mov	DWORD PTR _Temp$[ebp+514], eax
	mov	ax, WORD PTR ??_C@_01KNKLHLMO@K?$AA@
	mov	WORD PTR _Temp$[ebp+518], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+520], eax
	mov	DWORD PTR _Temp$[ebp+524], eax
	mov	DWORD PTR _Temp$[ebp+528], eax
	mov	ax, WORD PTR ??_C@_01OCOKONAJ@L?$AA@
	mov	WORD PTR _Temp$[ebp+532], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+534], eax
	mov	DWORD PTR _Temp$[ebp+538], eax
	mov	DWORD PTR _Temp$[ebp+542], eax
	mov	ax, WORD PTR ??_C@_01ICJEACDI@?$DL?$AA@
	mov	WORD PTR _Temp$[ebp+546], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+548], eax
	mov	DWORD PTR _Temp$[ebp+552], eax
	mov	DWORD PTR _Temp$[ebp+556], eax
	mov	ax, WORD PTR ??_C@_01GEODFPGF@?8?$AA@
	mov	WORD PTR _Temp$[ebp+560], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+562], eax
	mov	DWORD PTR _Temp$[ebp+566], eax
	mov	DWORD PTR _Temp$[ebp+570], eax
	mov	ax, WORD PTR ??_C@_01NLNLIGKH@?$GA?$AA@
	mov	WORD PTR _Temp$[ebp+574], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+576], eax
	mov	DWORD PTR _Temp$[ebp+580], eax
	mov	DWORD PTR _Temp$[ebp+584], eax
	mov	eax, DWORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@
	mov	DWORD PTR _Temp$[ebp+588], eax
	mov	ecx, DWORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+4
	mov	DWORD PTR _Temp$[ebp+592], ecx
	mov	dx, WORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+8
	mov	WORD PTR _Temp$[ebp+596], dx
	mov	al, BYTE PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+10
	mov	BYTE PTR _Temp$[ebp+598], al
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+599], ax
	mov	BYTE PTR _Temp$[ebp+601], al
	mov	ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR _Temp$[ebp+602], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+604], eax
	mov	DWORD PTR _Temp$[ebp+608], eax
	mov	DWORD PTR _Temp$[ebp+612], eax
	mov	ax, WORD PTR ??_C@_01POHCFINO@Z?$AA@
	mov	WORD PTR _Temp$[ebp+616], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+618], eax
	mov	DWORD PTR _Temp$[ebp+622], eax
	mov	DWORD PTR _Temp$[ebp+626], eax
	mov	ax, WORD PTR ??_C@_01MMEEDKFM@X?$AA@
	mov	WORD PTR _Temp$[ebp+630], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+632], eax
	mov	DWORD PTR _Temp$[ebp+636], eax
	mov	DWORD PTR _Temp$[ebp+640], eax
	mov	ax, WORD PTR ??_C@_01GFHCPBMG@C?$AA@
	mov	WORD PTR _Temp$[ebp+644], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+646], eax
	mov	DWORD PTR _Temp$[ebp+650], eax
	mov	DWORD PTR _Temp$[ebp+654], eax
	mov	ax, WORD PTR ??_C@_01FCMHBHNC@V?$AA@
	mov	WORD PTR _Temp$[ebp+658], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+660], eax
	mov	DWORD PTR _Temp$[ebp+664], eax
	mov	DWORD PTR _Temp$[ebp+668], eax
	mov	ax, WORD PTR ??_C@_01HMGJMAIH@B?$AA@
	mov	WORD PTR _Temp$[ebp+672], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+674], eax
	mov	DWORD PTR _Temp$[ebp+678], eax
	mov	DWORD PTR _Temp$[ebp+682], eax

; 585  : 				  "N","M",",",".","/","Right Shift","*","Left Alt","Space","Caps Lock","F1","F2","F3","F4","F5","F6",

	mov	ax, WORD PTR ??_C@_01NANMIPIL@N?$AA@
	mov	WORD PTR _Temp$[ebp+686], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+688], eax
	mov	DWORD PTR _Temp$[ebp+692], eax
	mov	DWORD PTR _Temp$[ebp+696], eax
	mov	ax, WORD PTR ??_C@_01PLPBNMEI@M?$AA@
	mov	WORD PTR _Temp$[ebp+700], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+702], eax
	mov	DWORD PTR _Temp$[ebp+706], eax
	mov	DWORD PTR _Temp$[ebp+710], eax
	mov	ax, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	WORD PTR _Temp$[ebp+714], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+716], eax
	mov	DWORD PTR _Temp$[ebp+720], eax
	mov	DWORD PTR _Temp$[ebp+724], eax
	mov	ax, WORD PTR ??_C@_01LFCBOECM@?4?$AA@
	mov	WORD PTR _Temp$[ebp+728], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+730], eax
	mov	DWORD PTR _Temp$[ebp+734], eax
	mov	DWORD PTR _Temp$[ebp+738], eax
	mov	ax, WORD PTR ??_C@_01KMDKNFGN@?1?$AA@
	mov	WORD PTR _Temp$[ebp+742], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+744], eax
	mov	DWORD PTR _Temp$[ebp+748], eax
	mov	DWORD PTR _Temp$[ebp+752], eax
	mov	eax, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@
	mov	DWORD PTR _Temp$[ebp+756], eax
	mov	ecx, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@+4
	mov	DWORD PTR _Temp$[ebp+760], ecx
	mov	edx, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@+8
	mov	DWORD PTR _Temp$[ebp+764], edx
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+768], ax
	mov	ax, WORD PTR ??_C@_01NBENCBCI@?$CK?$AA@
	mov	WORD PTR _Temp$[ebp+770], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+772], eax
	mov	DWORD PTR _Temp$[ebp+776], eax
	mov	DWORD PTR _Temp$[ebp+780], eax
	mov	eax, DWORD PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@
	mov	DWORD PTR _Temp$[ebp+784], eax
	mov	ecx, DWORD PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@+4
	mov	DWORD PTR _Temp$[ebp+788], ecx
	mov	dl, BYTE PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@+8
	mov	BYTE PTR _Temp$[ebp+792], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+793], eax
	mov	BYTE PTR _Temp$[ebp+797], al
	mov	eax, DWORD PTR ??_C@_05OMHELODH@Space?$AA@
	mov	DWORD PTR _Temp$[ebp+798], eax
	mov	cx, WORD PTR ??_C@_05OMHELODH@Space?$AA@+4
	mov	WORD PTR _Temp$[ebp+802], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+804], eax
	mov	DWORD PTR _Temp$[ebp+808], eax
	mov	eax, DWORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@
	mov	DWORD PTR _Temp$[ebp+812], eax
	mov	ecx, DWORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@+4
	mov	DWORD PTR _Temp$[ebp+816], ecx
	mov	dx, WORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@+8
	mov	WORD PTR _Temp$[ebp+820], dx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+822], eax
	mov	ax, WORD PTR ??_C@_02LCPENACN@F1?$AA@
	mov	WORD PTR _Temp$[ebp+826], ax
	mov	cl, BYTE PTR ??_C@_02LCPENACN@F1?$AA@+2
	mov	BYTE PTR _Temp$[ebp+828], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+829], eax
	mov	DWORD PTR _Temp$[ebp+833], eax
	mov	WORD PTR _Temp$[ebp+837], ax
	mov	BYTE PTR _Temp$[ebp+839], al
	mov	ax, WORD PTR ??_C@_02JJNJIDOO@F2?$AA@
	mov	WORD PTR _Temp$[ebp+840], ax
	mov	cl, BYTE PTR ??_C@_02JJNJIDOO@F2?$AA@+2
	mov	BYTE PTR _Temp$[ebp+842], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+843], eax
	mov	DWORD PTR _Temp$[ebp+847], eax
	mov	WORD PTR _Temp$[ebp+851], ax
	mov	BYTE PTR _Temp$[ebp+853], al
	mov	ax, WORD PTR ??_C@_02IAMCLCKP@F3?$AA@
	mov	WORD PTR _Temp$[ebp+854], ax
	mov	cl, BYTE PTR ??_C@_02IAMCLCKP@F3?$AA@+2
	mov	BYTE PTR _Temp$[ebp+856], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+857], eax
	mov	DWORD PTR _Temp$[ebp+861], eax
	mov	WORD PTR _Temp$[ebp+865], ax
	mov	BYTE PTR _Temp$[ebp+867], al
	mov	ax, WORD PTR ??_C@_02MPIDCEGI@F4?$AA@
	mov	WORD PTR _Temp$[ebp+868], ax
	mov	cl, BYTE PTR ??_C@_02MPIDCEGI@F4?$AA@+2
	mov	BYTE PTR _Temp$[ebp+870], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+871], eax
	mov	DWORD PTR _Temp$[ebp+875], eax
	mov	WORD PTR _Temp$[ebp+879], ax
	mov	BYTE PTR _Temp$[ebp+881], al
	mov	ax, WORD PTR ??_C@_02NGJIBFCJ@F5?$AA@
	mov	WORD PTR _Temp$[ebp+882], ax
	mov	cl, BYTE PTR ??_C@_02NGJIBFCJ@F5?$AA@+2
	mov	BYTE PTR _Temp$[ebp+884], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+885], eax
	mov	DWORD PTR _Temp$[ebp+889], eax
	mov	WORD PTR _Temp$[ebp+893], ax
	mov	BYTE PTR _Temp$[ebp+895], al
	mov	ax, WORD PTR ??_C@_02PNLFEGOK@F6?$AA@
	mov	WORD PTR _Temp$[ebp+896], ax
	mov	cl, BYTE PTR ??_C@_02PNLFEGOK@F6?$AA@+2
	mov	BYTE PTR _Temp$[ebp+898], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+899], eax
	mov	DWORD PTR _Temp$[ebp+903], eax
	mov	WORD PTR _Temp$[ebp+907], ax
	mov	BYTE PTR _Temp$[ebp+909], al

; 586  : 				  "F7","F8","F9","F10","Num Lock","","7","8","9","-","4","5","6","+","1","2",

	mov	ax, WORD PTR ??_C@_02OEKOHHKL@F7?$AA@
	mov	WORD PTR _Temp$[ebp+910], ax
	mov	cl, BYTE PTR ??_C@_02OEKOHHKL@F7?$AA@+2
	mov	BYTE PTR _Temp$[ebp+912], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+913], eax
	mov	DWORD PTR _Temp$[ebp+917], eax
	mov	WORD PTR _Temp$[ebp+921], ax
	mov	BYTE PTR _Temp$[ebp+923], al
	mov	ax, WORD PTR ??_C@_02GDDGGLGE@F8?$AA@
	mov	WORD PTR _Temp$[ebp+924], ax
	mov	cl, BYTE PTR ??_C@_02GDDGGLGE@F8?$AA@+2
	mov	BYTE PTR _Temp$[ebp+926], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+927], eax
	mov	DWORD PTR _Temp$[ebp+931], eax
	mov	WORD PTR _Temp$[ebp+935], ax
	mov	BYTE PTR _Temp$[ebp+937], al
	mov	ax, WORD PTR ??_C@_02HKCNFKCF@F9?$AA@
	mov	WORD PTR _Temp$[ebp+938], ax
	mov	cl, BYTE PTR ??_C@_02HKCNFKCF@F9?$AA@+2
	mov	BYTE PTR _Temp$[ebp+940], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+941], eax
	mov	DWORD PTR _Temp$[ebp+945], eax
	mov	WORD PTR _Temp$[ebp+949], ax
	mov	BYTE PTR _Temp$[ebp+951], al
	mov	eax, DWORD PTR ??_C@_03JKCLJOFG@F10?$AA@
	mov	DWORD PTR _Temp$[ebp+952], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+956], eax
	mov	DWORD PTR _Temp$[ebp+960], eax
	mov	WORD PTR _Temp$[ebp+964], ax
	mov	eax, DWORD PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@
	mov	DWORD PTR _Temp$[ebp+966], eax
	mov	ecx, DWORD PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@+4
	mov	DWORD PTR _Temp$[ebp+970], ecx
	mov	dl, BYTE PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@+8
	mov	BYTE PTR _Temp$[ebp+974], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+975], eax
	mov	BYTE PTR _Temp$[ebp+979], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+980], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+981], eax
	mov	DWORD PTR _Temp$[ebp+985], eax
	mov	DWORD PTR _Temp$[ebp+989], eax
	mov	BYTE PTR _Temp$[ebp+993], al
	mov	ax, WORD PTR ??_C@_01COCBENDE@7?$AA@
	mov	WORD PTR _Temp$[ebp+994], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+996], eax
	mov	DWORD PTR _Temp$[ebp+1000], eax
	mov	DWORD PTR _Temp$[ebp+1004], eax
	mov	ax, WORD PTR ??_C@_01KJLJFBPL@8?$AA@
	mov	WORD PTR _Temp$[ebp+1008], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1010], eax
	mov	DWORD PTR _Temp$[ebp+1014], eax
	mov	DWORD PTR _Temp$[ebp+1018], eax
	mov	ax, WORD PTR ??_C@_01LAKCGALK@9?$AA@
	mov	WORD PTR _Temp$[ebp+1022], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1024], eax
	mov	DWORD PTR _Temp$[ebp+1028], eax
	mov	DWORD PTR _Temp$[ebp+1032], eax
	mov	ax, WORD PTR ??_C@_01JOAMLHOP@?9?$AA@
	mov	WORD PTR _Temp$[ebp+1036], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1038], eax
	mov	DWORD PTR _Temp$[ebp+1042], eax
	mov	DWORD PTR _Temp$[ebp+1046], eax
	mov	ax, WORD PTR ??_C@_01FAMBOPH@4?$AA@
	mov	WORD PTR _Temp$[ebp+1050], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1052], eax
	mov	DWORD PTR _Temp$[ebp+1056], eax
	mov	DWORD PTR _Temp$[ebp+1060], eax
	mov	ax, WORD PTR ??_C@_01BMBHCPLG@5?$AA@
	mov	WORD PTR _Temp$[ebp+1064], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1066], eax
	mov	DWORD PTR _Temp$[ebp+1070], eax
	mov	DWORD PTR _Temp$[ebp+1074], eax
	mov	ax, WORD PTR ??_C@_01DHDKHMHF@6?$AA@
	mov	WORD PTR _Temp$[ebp+1078], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1080], eax
	mov	DWORD PTR _Temp$[ebp+1084], eax
	mov	DWORD PTR _Temp$[ebp+1088], eax
	mov	ax, WORD PTR ??_C@_01MIFGBAGJ@?$CL?$AA@
	mov	WORD PTR _Temp$[ebp+1092], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1094], eax
	mov	DWORD PTR _Temp$[ebp+1098], eax
	mov	DWORD PTR _Temp$[ebp+1102], eax
	mov	ax, WORD PTR ??_C@_01HIHLOKLC@1?$AA@
	mov	WORD PTR _Temp$[ebp+1106], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1108], eax
	mov	DWORD PTR _Temp$[ebp+1112], eax
	mov	DWORD PTR _Temp$[ebp+1116], eax
	mov	ax, WORD PTR ??_C@_01FDFGLJHB@2?$AA@
	mov	WORD PTR _Temp$[ebp+1120], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1122], eax
	mov	DWORD PTR _Temp$[ebp+1126], eax
	mov	DWORD PTR _Temp$[ebp+1130], eax

; 587  : 				  "3","0","Num .","SysRq","","","F11","F12","","","","","","","","",

	mov	ax, WORD PTR ??_C@_01EKENIIDA@3?$AA@
	mov	WORD PTR _Temp$[ebp+1134], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1136], eax
	mov	DWORD PTR _Temp$[ebp+1140], eax
	mov	DWORD PTR _Temp$[ebp+1144], eax
	mov	ax, WORD PTR ??_C@_01GBGANLPD@0?$AA@
	mov	WORD PTR _Temp$[ebp+1148], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1150], eax
	mov	DWORD PTR _Temp$[ebp+1154], eax
	mov	DWORD PTR _Temp$[ebp+1158], eax
	mov	eax, DWORD PTR ??_C@_05LAFLDKON@Num?5?4?$AA@
	mov	DWORD PTR _Temp$[ebp+1162], eax
	mov	cx, WORD PTR ??_C@_05LAFLDKON@Num?5?4?$AA@+4
	mov	WORD PTR _Temp$[ebp+1166], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1168], eax
	mov	DWORD PTR _Temp$[ebp+1172], eax
	mov	eax, DWORD PTR ??_C@_05BAHDBLKA@SysRq?$AA@
	mov	DWORD PTR _Temp$[ebp+1176], eax
	mov	cx, WORD PTR ??_C@_05BAHDBLKA@SysRq?$AA@+4
	mov	WORD PTR _Temp$[ebp+1180], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1182], eax
	mov	DWORD PTR _Temp$[ebp+1186], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1190], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1191], eax
	mov	DWORD PTR _Temp$[ebp+1195], eax
	mov	DWORD PTR _Temp$[ebp+1199], eax
	mov	BYTE PTR _Temp$[ebp+1203], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1204], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1205], eax
	mov	DWORD PTR _Temp$[ebp+1209], eax
	mov	DWORD PTR _Temp$[ebp+1213], eax
	mov	BYTE PTR _Temp$[ebp+1217], al
	mov	eax, DWORD PTR ??_C@_03IDDAKPBH@F11?$AA@
	mov	DWORD PTR _Temp$[ebp+1218], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1222], eax
	mov	DWORD PTR _Temp$[ebp+1226], eax
	mov	WORD PTR _Temp$[ebp+1230], ax
	mov	eax, DWORD PTR ??_C@_03KIBNPMNE@F12?$AA@
	mov	DWORD PTR _Temp$[ebp+1232], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1236], eax
	mov	DWORD PTR _Temp$[ebp+1240], eax
	mov	WORD PTR _Temp$[ebp+1244], ax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1246], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1247], eax
	mov	DWORD PTR _Temp$[ebp+1251], eax
	mov	DWORD PTR _Temp$[ebp+1255], eax
	mov	BYTE PTR _Temp$[ebp+1259], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1260], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1261], eax
	mov	DWORD PTR _Temp$[ebp+1265], eax
	mov	DWORD PTR _Temp$[ebp+1269], eax
	mov	BYTE PTR _Temp$[ebp+1273], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1274], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1275], eax
	mov	DWORD PTR _Temp$[ebp+1279], eax
	mov	DWORD PTR _Temp$[ebp+1283], eax
	mov	BYTE PTR _Temp$[ebp+1287], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1288], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1289], eax
	mov	DWORD PTR _Temp$[ebp+1293], eax
	mov	DWORD PTR _Temp$[ebp+1297], eax
	mov	BYTE PTR _Temp$[ebp+1301], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1302], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1303], eax
	mov	DWORD PTR _Temp$[ebp+1307], eax
	mov	DWORD PTR _Temp$[ebp+1311], eax
	mov	BYTE PTR _Temp$[ebp+1315], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1316], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1317], eax
	mov	DWORD PTR _Temp$[ebp+1321], eax
	mov	DWORD PTR _Temp$[ebp+1325], eax
	mov	BYTE PTR _Temp$[ebp+1329], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1330], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1331], eax
	mov	DWORD PTR _Temp$[ebp+1335], eax
	mov	DWORD PTR _Temp$[ebp+1339], eax
	mov	BYTE PTR _Temp$[ebp+1343], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1344], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1345], eax
	mov	DWORD PTR _Temp$[ebp+1349], eax
	mov	DWORD PTR _Temp$[ebp+1353], eax
	mov	BYTE PTR _Temp$[ebp+1357], al

; 588  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1358], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1359], eax
	mov	DWORD PTR _Temp$[ebp+1363], eax
	mov	DWORD PTR _Temp$[ebp+1367], eax
	mov	BYTE PTR _Temp$[ebp+1371], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1372], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1373], eax
	mov	DWORD PTR _Temp$[ebp+1377], eax
	mov	DWORD PTR _Temp$[ebp+1381], eax
	mov	BYTE PTR _Temp$[ebp+1385], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1386], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1387], eax
	mov	DWORD PTR _Temp$[ebp+1391], eax
	mov	DWORD PTR _Temp$[ebp+1395], eax
	mov	BYTE PTR _Temp$[ebp+1399], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1400], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1401], eax
	mov	DWORD PTR _Temp$[ebp+1405], eax
	mov	DWORD PTR _Temp$[ebp+1409], eax
	mov	BYTE PTR _Temp$[ebp+1413], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1414], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1415], eax
	mov	DWORD PTR _Temp$[ebp+1419], eax
	mov	DWORD PTR _Temp$[ebp+1423], eax
	mov	BYTE PTR _Temp$[ebp+1427], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1428], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1429], eax
	mov	DWORD PTR _Temp$[ebp+1433], eax
	mov	DWORD PTR _Temp$[ebp+1437], eax
	mov	BYTE PTR _Temp$[ebp+1441], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1442], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1443], eax
	mov	DWORD PTR _Temp$[ebp+1447], eax
	mov	DWORD PTR _Temp$[ebp+1451], eax
	mov	BYTE PTR _Temp$[ebp+1455], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1456], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1457], eax
	mov	DWORD PTR _Temp$[ebp+1461], eax
	mov	DWORD PTR _Temp$[ebp+1465], eax
	mov	BYTE PTR _Temp$[ebp+1469], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1470], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1471], eax
	mov	DWORD PTR _Temp$[ebp+1475], eax
	mov	DWORD PTR _Temp$[ebp+1479], eax
	mov	BYTE PTR _Temp$[ebp+1483], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1484], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1485], eax
	mov	DWORD PTR _Temp$[ebp+1489], eax
	mov	DWORD PTR _Temp$[ebp+1493], eax
	mov	BYTE PTR _Temp$[ebp+1497], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1498], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1499], eax
	mov	DWORD PTR _Temp$[ebp+1503], eax
	mov	DWORD PTR _Temp$[ebp+1507], eax
	mov	BYTE PTR _Temp$[ebp+1511], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1512], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1513], eax
	mov	DWORD PTR _Temp$[ebp+1517], eax
	mov	DWORD PTR _Temp$[ebp+1521], eax
	mov	BYTE PTR _Temp$[ebp+1525], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1526], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1527], eax
	mov	DWORD PTR _Temp$[ebp+1531], eax
	mov	DWORD PTR _Temp$[ebp+1535], eax
	mov	BYTE PTR _Temp$[ebp+1539], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1540], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1541], eax
	mov	DWORD PTR _Temp$[ebp+1545], eax
	mov	DWORD PTR _Temp$[ebp+1549], eax
	mov	BYTE PTR _Temp$[ebp+1553], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1554], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1555], eax
	mov	DWORD PTR _Temp$[ebp+1559], eax
	mov	DWORD PTR _Temp$[ebp+1563], eax
	mov	BYTE PTR _Temp$[ebp+1567], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1568], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1569], eax
	mov	DWORD PTR _Temp$[ebp+1573], eax
	mov	DWORD PTR _Temp$[ebp+1577], eax
	mov	BYTE PTR _Temp$[ebp+1581], al

; 589  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1582], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1583], eax
	mov	DWORD PTR _Temp$[ebp+1587], eax
	mov	DWORD PTR _Temp$[ebp+1591], eax
	mov	BYTE PTR _Temp$[ebp+1595], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1596], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1597], eax
	mov	DWORD PTR _Temp$[ebp+1601], eax
	mov	DWORD PTR _Temp$[ebp+1605], eax
	mov	BYTE PTR _Temp$[ebp+1609], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1610], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1611], eax
	mov	DWORD PTR _Temp$[ebp+1615], eax
	mov	DWORD PTR _Temp$[ebp+1619], eax
	mov	BYTE PTR _Temp$[ebp+1623], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1624], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1625], eax
	mov	DWORD PTR _Temp$[ebp+1629], eax
	mov	DWORD PTR _Temp$[ebp+1633], eax
	mov	BYTE PTR _Temp$[ebp+1637], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1638], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1639], eax
	mov	DWORD PTR _Temp$[ebp+1643], eax
	mov	DWORD PTR _Temp$[ebp+1647], eax
	mov	BYTE PTR _Temp$[ebp+1651], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1652], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1653], eax
	mov	DWORD PTR _Temp$[ebp+1657], eax
	mov	DWORD PTR _Temp$[ebp+1661], eax
	mov	BYTE PTR _Temp$[ebp+1665], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1666], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1667], eax
	mov	DWORD PTR _Temp$[ebp+1671], eax
	mov	DWORD PTR _Temp$[ebp+1675], eax
	mov	BYTE PTR _Temp$[ebp+1679], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1680], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1681], eax
	mov	DWORD PTR _Temp$[ebp+1685], eax
	mov	DWORD PTR _Temp$[ebp+1689], eax
	mov	BYTE PTR _Temp$[ebp+1693], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1694], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1695], eax
	mov	DWORD PTR _Temp$[ebp+1699], eax
	mov	DWORD PTR _Temp$[ebp+1703], eax
	mov	BYTE PTR _Temp$[ebp+1707], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1708], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1709], eax
	mov	DWORD PTR _Temp$[ebp+1713], eax
	mov	DWORD PTR _Temp$[ebp+1717], eax
	mov	BYTE PTR _Temp$[ebp+1721], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1722], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1723], eax
	mov	DWORD PTR _Temp$[ebp+1727], eax
	mov	DWORD PTR _Temp$[ebp+1731], eax
	mov	BYTE PTR _Temp$[ebp+1735], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1736], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1737], eax
	mov	DWORD PTR _Temp$[ebp+1741], eax
	mov	DWORD PTR _Temp$[ebp+1745], eax
	mov	BYTE PTR _Temp$[ebp+1749], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1750], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1751], eax
	mov	DWORD PTR _Temp$[ebp+1755], eax
	mov	DWORD PTR _Temp$[ebp+1759], eax
	mov	BYTE PTR _Temp$[ebp+1763], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1764], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1765], eax
	mov	DWORD PTR _Temp$[ebp+1769], eax
	mov	DWORD PTR _Temp$[ebp+1773], eax
	mov	BYTE PTR _Temp$[ebp+1777], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1778], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1779], eax
	mov	DWORD PTR _Temp$[ebp+1783], eax
	mov	DWORD PTR _Temp$[ebp+1787], eax
	mov	BYTE PTR _Temp$[ebp+1791], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1792], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1793], eax
	mov	DWORD PTR _Temp$[ebp+1797], eax
	mov	DWORD PTR _Temp$[ebp+1801], eax
	mov	BYTE PTR _Temp$[ebp+1805], al

; 590  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1806], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1807], eax
	mov	DWORD PTR _Temp$[ebp+1811], eax
	mov	DWORD PTR _Temp$[ebp+1815], eax
	mov	BYTE PTR _Temp$[ebp+1819], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1820], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1821], eax
	mov	DWORD PTR _Temp$[ebp+1825], eax
	mov	DWORD PTR _Temp$[ebp+1829], eax
	mov	BYTE PTR _Temp$[ebp+1833], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1834], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1835], eax
	mov	DWORD PTR _Temp$[ebp+1839], eax
	mov	DWORD PTR _Temp$[ebp+1843], eax
	mov	BYTE PTR _Temp$[ebp+1847], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1848], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1849], eax
	mov	DWORD PTR _Temp$[ebp+1853], eax
	mov	DWORD PTR _Temp$[ebp+1857], eax
	mov	BYTE PTR _Temp$[ebp+1861], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1862], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1863], eax
	mov	DWORD PTR _Temp$[ebp+1867], eax
	mov	DWORD PTR _Temp$[ebp+1871], eax
	mov	BYTE PTR _Temp$[ebp+1875], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1876], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1877], eax
	mov	DWORD PTR _Temp$[ebp+1881], eax
	mov	DWORD PTR _Temp$[ebp+1885], eax
	mov	BYTE PTR _Temp$[ebp+1889], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1890], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1891], eax
	mov	DWORD PTR _Temp$[ebp+1895], eax
	mov	DWORD PTR _Temp$[ebp+1899], eax
	mov	BYTE PTR _Temp$[ebp+1903], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1904], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1905], eax
	mov	DWORD PTR _Temp$[ebp+1909], eax
	mov	DWORD PTR _Temp$[ebp+1913], eax
	mov	BYTE PTR _Temp$[ebp+1917], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1918], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1919], eax
	mov	DWORD PTR _Temp$[ebp+1923], eax
	mov	DWORD PTR _Temp$[ebp+1927], eax
	mov	BYTE PTR _Temp$[ebp+1931], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1932], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1933], eax
	mov	DWORD PTR _Temp$[ebp+1937], eax
	mov	DWORD PTR _Temp$[ebp+1941], eax
	mov	BYTE PTR _Temp$[ebp+1945], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1946], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1947], eax
	mov	DWORD PTR _Temp$[ebp+1951], eax
	mov	DWORD PTR _Temp$[ebp+1955], eax
	mov	BYTE PTR _Temp$[ebp+1959], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1960], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1961], eax
	mov	DWORD PTR _Temp$[ebp+1965], eax
	mov	DWORD PTR _Temp$[ebp+1969], eax
	mov	BYTE PTR _Temp$[ebp+1973], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1974], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1975], eax
	mov	DWORD PTR _Temp$[ebp+1979], eax
	mov	DWORD PTR _Temp$[ebp+1983], eax
	mov	BYTE PTR _Temp$[ebp+1987], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1988], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1989], eax
	mov	DWORD PTR _Temp$[ebp+1993], eax
	mov	DWORD PTR _Temp$[ebp+1997], eax
	mov	BYTE PTR _Temp$[ebp+2001], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2002], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2003], eax
	mov	DWORD PTR _Temp$[ebp+2007], eax
	mov	DWORD PTR _Temp$[ebp+2011], eax
	mov	BYTE PTR _Temp$[ebp+2015], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2016], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2017], eax
	mov	DWORD PTR _Temp$[ebp+2021], eax
	mov	DWORD PTR _Temp$[ebp+2025], eax
	mov	BYTE PTR _Temp$[ebp+2029], al

; 591  : 				  "","","","","","","","","","","","Right Enter","Right Control","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2030], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2031], eax
	mov	DWORD PTR _Temp$[ebp+2035], eax
	mov	DWORD PTR _Temp$[ebp+2039], eax
	mov	BYTE PTR _Temp$[ebp+2043], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2044], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2045], eax
	mov	DWORD PTR _Temp$[ebp+2049], eax
	mov	DWORD PTR _Temp$[ebp+2053], eax
	mov	BYTE PTR _Temp$[ebp+2057], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2058], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2059], eax
	mov	DWORD PTR _Temp$[ebp+2063], eax
	mov	DWORD PTR _Temp$[ebp+2067], eax
	mov	BYTE PTR _Temp$[ebp+2071], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2072], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2073], eax
	mov	DWORD PTR _Temp$[ebp+2077], eax
	mov	DWORD PTR _Temp$[ebp+2081], eax
	mov	BYTE PTR _Temp$[ebp+2085], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2086], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2087], eax
	mov	DWORD PTR _Temp$[ebp+2091], eax
	mov	DWORD PTR _Temp$[ebp+2095], eax
	mov	BYTE PTR _Temp$[ebp+2099], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2100], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2101], eax
	mov	DWORD PTR _Temp$[ebp+2105], eax
	mov	DWORD PTR _Temp$[ebp+2109], eax
	mov	BYTE PTR _Temp$[ebp+2113], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2114], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2115], eax
	mov	DWORD PTR _Temp$[ebp+2119], eax
	mov	DWORD PTR _Temp$[ebp+2123], eax
	mov	BYTE PTR _Temp$[ebp+2127], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2128], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2129], eax
	mov	DWORD PTR _Temp$[ebp+2133], eax
	mov	DWORD PTR _Temp$[ebp+2137], eax
	mov	BYTE PTR _Temp$[ebp+2141], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2142], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2143], eax
	mov	DWORD PTR _Temp$[ebp+2147], eax
	mov	DWORD PTR _Temp$[ebp+2151], eax
	mov	BYTE PTR _Temp$[ebp+2155], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2156], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2157], eax
	mov	DWORD PTR _Temp$[ebp+2161], eax
	mov	DWORD PTR _Temp$[ebp+2165], eax
	mov	BYTE PTR _Temp$[ebp+2169], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2170], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2171], eax
	mov	DWORD PTR _Temp$[ebp+2175], eax
	mov	DWORD PTR _Temp$[ebp+2179], eax
	mov	BYTE PTR _Temp$[ebp+2183], al
	mov	eax, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
	mov	DWORD PTR _Temp$[ebp+2184], eax
	mov	ecx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2188], ecx
	mov	edx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+8
	mov	DWORD PTR _Temp$[ebp+2192], edx
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+2196], ax
	mov	eax, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@
	mov	DWORD PTR _Temp$[ebp+2198], eax
	mov	ecx, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2202], ecx
	mov	edx, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+8
	mov	DWORD PTR _Temp$[ebp+2206], edx
	mov	ax, WORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+12
	mov	WORD PTR _Temp$[ebp+2210], ax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2212], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2213], eax
	mov	DWORD PTR _Temp$[ebp+2217], eax
	mov	DWORD PTR _Temp$[ebp+2221], eax
	mov	BYTE PTR _Temp$[ebp+2225], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2226], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2227], eax
	mov	DWORD PTR _Temp$[ebp+2231], eax
	mov	DWORD PTR _Temp$[ebp+2235], eax
	mov	BYTE PTR _Temp$[ebp+2239], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2240], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2241], eax
	mov	DWORD PTR _Temp$[ebp+2245], eax
	mov	DWORD PTR _Temp$[ebp+2249], eax
	mov	BYTE PTR _Temp$[ebp+2253], al

; 592  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2254], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2255], eax
	mov	DWORD PTR _Temp$[ebp+2259], eax
	mov	DWORD PTR _Temp$[ebp+2263], eax
	mov	BYTE PTR _Temp$[ebp+2267], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2268], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2269], eax
	mov	DWORD PTR _Temp$[ebp+2273], eax
	mov	DWORD PTR _Temp$[ebp+2277], eax
	mov	BYTE PTR _Temp$[ebp+2281], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2282], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2283], eax
	mov	DWORD PTR _Temp$[ebp+2287], eax
	mov	DWORD PTR _Temp$[ebp+2291], eax
	mov	BYTE PTR _Temp$[ebp+2295], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2296], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2297], eax
	mov	DWORD PTR _Temp$[ebp+2301], eax
	mov	DWORD PTR _Temp$[ebp+2305], eax
	mov	BYTE PTR _Temp$[ebp+2309], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2310], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2311], eax
	mov	DWORD PTR _Temp$[ebp+2315], eax
	mov	DWORD PTR _Temp$[ebp+2319], eax
	mov	BYTE PTR _Temp$[ebp+2323], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2324], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2325], eax
	mov	DWORD PTR _Temp$[ebp+2329], eax
	mov	DWORD PTR _Temp$[ebp+2333], eax
	mov	BYTE PTR _Temp$[ebp+2337], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2338], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2339], eax
	mov	DWORD PTR _Temp$[ebp+2343], eax
	mov	DWORD PTR _Temp$[ebp+2347], eax
	mov	BYTE PTR _Temp$[ebp+2351], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2352], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2353], eax
	mov	DWORD PTR _Temp$[ebp+2357], eax
	mov	DWORD PTR _Temp$[ebp+2361], eax
	mov	BYTE PTR _Temp$[ebp+2365], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2366], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2367], eax
	mov	DWORD PTR _Temp$[ebp+2371], eax
	mov	DWORD PTR _Temp$[ebp+2375], eax
	mov	BYTE PTR _Temp$[ebp+2379], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2380], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2381], eax
	mov	DWORD PTR _Temp$[ebp+2385], eax
	mov	DWORD PTR _Temp$[ebp+2389], eax
	mov	BYTE PTR _Temp$[ebp+2393], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2394], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2395], eax
	mov	DWORD PTR _Temp$[ebp+2399], eax
	mov	DWORD PTR _Temp$[ebp+2403], eax
	mov	BYTE PTR _Temp$[ebp+2407], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2408], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2409], eax
	mov	DWORD PTR _Temp$[ebp+2413], eax
	mov	DWORD PTR _Temp$[ebp+2417], eax
	mov	BYTE PTR _Temp$[ebp+2421], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2422], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2423], eax
	mov	DWORD PTR _Temp$[ebp+2427], eax
	mov	DWORD PTR _Temp$[ebp+2431], eax
	mov	BYTE PTR _Temp$[ebp+2435], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2436], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2437], eax
	mov	DWORD PTR _Temp$[ebp+2441], eax
	mov	DWORD PTR _Temp$[ebp+2445], eax
	mov	BYTE PTR _Temp$[ebp+2449], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2450], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2451], eax
	mov	DWORD PTR _Temp$[ebp+2455], eax
	mov	DWORD PTR _Temp$[ebp+2459], eax
	mov	BYTE PTR _Temp$[ebp+2463], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2464], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2465], eax
	mov	DWORD PTR _Temp$[ebp+2469], eax
	mov	DWORD PTR _Temp$[ebp+2473], eax
	mov	BYTE PTR _Temp$[ebp+2477], al

; 593  : 				  "","Function F3","","","/ Num","","Print Screen","Right Alt","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2478], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2479], eax
	mov	DWORD PTR _Temp$[ebp+2483], eax
	mov	DWORD PTR _Temp$[ebp+2487], eax
	mov	BYTE PTR _Temp$[ebp+2491], al
	mov	eax, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@
	mov	DWORD PTR _Temp$[ebp+2492], eax
	mov	ecx, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2496], ecx
	mov	edx, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@+8
	mov	DWORD PTR _Temp$[ebp+2500], edx
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+2504], ax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2506], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2507], eax
	mov	DWORD PTR _Temp$[ebp+2511], eax
	mov	DWORD PTR _Temp$[ebp+2515], eax
	mov	BYTE PTR _Temp$[ebp+2519], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2520], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2521], eax
	mov	DWORD PTR _Temp$[ebp+2525], eax
	mov	DWORD PTR _Temp$[ebp+2529], eax
	mov	BYTE PTR _Temp$[ebp+2533], al
	mov	eax, DWORD PTR ??_C@_05IAKEFGOE@?1?5Num?$AA@
	mov	DWORD PTR _Temp$[ebp+2534], eax
	mov	cx, WORD PTR ??_C@_05IAKEFGOE@?1?5Num?$AA@+4
	mov	WORD PTR _Temp$[ebp+2538], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2540], eax
	mov	DWORD PTR _Temp$[ebp+2544], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2548], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2549], eax
	mov	DWORD PTR _Temp$[ebp+2553], eax
	mov	DWORD PTR _Temp$[ebp+2557], eax
	mov	BYTE PTR _Temp$[ebp+2561], al
	mov	eax, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@
	mov	DWORD PTR _Temp$[ebp+2562], eax
	mov	ecx, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2566], ecx
	mov	edx, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+8
	mov	DWORD PTR _Temp$[ebp+2570], edx
	mov	al, BYTE PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+12
	mov	BYTE PTR _Temp$[ebp+2574], al
	xor	eax, eax
	mov	BYTE PTR _Temp$[ebp+2575], al
	mov	eax, DWORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@
	mov	DWORD PTR _Temp$[ebp+2576], eax
	mov	ecx, DWORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2580], ecx
	mov	dx, WORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@+8
	mov	WORD PTR _Temp$[ebp+2584], dx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2586], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2590], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2591], eax
	mov	DWORD PTR _Temp$[ebp+2595], eax
	mov	DWORD PTR _Temp$[ebp+2599], eax
	mov	BYTE PTR _Temp$[ebp+2603], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2604], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2605], eax
	mov	DWORD PTR _Temp$[ebp+2609], eax
	mov	DWORD PTR _Temp$[ebp+2613], eax
	mov	BYTE PTR _Temp$[ebp+2617], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2618], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2619], eax
	mov	DWORD PTR _Temp$[ebp+2623], eax
	mov	DWORD PTR _Temp$[ebp+2627], eax
	mov	BYTE PTR _Temp$[ebp+2631], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2632], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2633], eax
	mov	DWORD PTR _Temp$[ebp+2637], eax
	mov	DWORD PTR _Temp$[ebp+2641], eax
	mov	BYTE PTR _Temp$[ebp+2645], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2646], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2647], eax
	mov	DWORD PTR _Temp$[ebp+2651], eax
	mov	DWORD PTR _Temp$[ebp+2655], eax
	mov	BYTE PTR _Temp$[ebp+2659], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2660], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2661], eax
	mov	DWORD PTR _Temp$[ebp+2665], eax
	mov	DWORD PTR _Temp$[ebp+2669], eax
	mov	BYTE PTR _Temp$[ebp+2673], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2674], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2675], eax
	mov	DWORD PTR _Temp$[ebp+2679], eax
	mov	DWORD PTR _Temp$[ebp+2683], eax
	mov	BYTE PTR _Temp$[ebp+2687], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2688], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2689], eax
	mov	DWORD PTR _Temp$[ebp+2693], eax
	mov	DWORD PTR _Temp$[ebp+2697], eax
	mov	BYTE PTR _Temp$[ebp+2701], al

; 594  : 				  "","","","","Pause","Break","Home","Up","Page Up","","Left","","Right","","End","Down",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2702], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2703], eax
	mov	DWORD PTR _Temp$[ebp+2707], eax
	mov	DWORD PTR _Temp$[ebp+2711], eax
	mov	BYTE PTR _Temp$[ebp+2715], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2716], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2717], eax
	mov	DWORD PTR _Temp$[ebp+2721], eax
	mov	DWORD PTR _Temp$[ebp+2725], eax
	mov	BYTE PTR _Temp$[ebp+2729], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2730], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2731], eax
	mov	DWORD PTR _Temp$[ebp+2735], eax
	mov	DWORD PTR _Temp$[ebp+2739], eax
	mov	BYTE PTR _Temp$[ebp+2743], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2744], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2745], eax
	mov	DWORD PTR _Temp$[ebp+2749], eax
	mov	DWORD PTR _Temp$[ebp+2753], eax
	mov	BYTE PTR _Temp$[ebp+2757], al
	mov	eax, DWORD PTR ??_C@_05PEDNBBBD@Pause?$AA@
	mov	DWORD PTR _Temp$[ebp+2758], eax
	mov	cx, WORD PTR ??_C@_05PEDNBBBD@Pause?$AA@+4
	mov	WORD PTR _Temp$[ebp+2762], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2764], eax
	mov	DWORD PTR _Temp$[ebp+2768], eax
	mov	eax, DWORD PTR ??_C@_05EMFLFCNO@Break?$AA@
	mov	DWORD PTR _Temp$[ebp+2772], eax
	mov	cx, WORD PTR ??_C@_05EMFLFCNO@Break?$AA@+4
	mov	WORD PTR _Temp$[ebp+2776], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2778], eax
	mov	DWORD PTR _Temp$[ebp+2782], eax
	mov	eax, DWORD PTR ??_C@_04GKJODLKO@Home?$AA@
	mov	DWORD PTR _Temp$[ebp+2786], eax
	mov	cl, BYTE PTR ??_C@_04GKJODLKO@Home?$AA@+4
	mov	BYTE PTR _Temp$[ebp+2790], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2791], eax
	mov	DWORD PTR _Temp$[ebp+2795], eax
	mov	BYTE PTR _Temp$[ebp+2799], al
	mov	ax, WORD PTR ??_C@_02EFPGLDEA@Up?$AA@
	mov	WORD PTR _Temp$[ebp+2800], ax
	mov	cl, BYTE PTR ??_C@_02EFPGLDEA@Up?$AA@+2
	mov	BYTE PTR _Temp$[ebp+2802], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2803], eax
	mov	DWORD PTR _Temp$[ebp+2807], eax
	mov	WORD PTR _Temp$[ebp+2811], ax
	mov	BYTE PTR _Temp$[ebp+2813], al
	mov	eax, DWORD PTR ??_C@_07EDGDGJEN@Page?5Up?$AA@
	mov	DWORD PTR _Temp$[ebp+2814], eax
	mov	ecx, DWORD PTR ??_C@_07EDGDGJEN@Page?5Up?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2818], ecx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2822], eax
	mov	WORD PTR _Temp$[ebp+2826], ax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2828], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2829], eax
	mov	DWORD PTR _Temp$[ebp+2833], eax
	mov	DWORD PTR _Temp$[ebp+2837], eax
	mov	BYTE PTR _Temp$[ebp+2841], al
	mov	eax, DWORD PTR ??_C@_04KPCPLBPL@Left?$AA@
	mov	DWORD PTR _Temp$[ebp+2842], eax
	mov	cl, BYTE PTR ??_C@_04KPCPLBPL@Left?$AA@+4
	mov	BYTE PTR _Temp$[ebp+2846], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2847], eax
	mov	DWORD PTR _Temp$[ebp+2851], eax
	mov	BYTE PTR _Temp$[ebp+2855], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2856], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2857], eax
	mov	DWORD PTR _Temp$[ebp+2861], eax
	mov	DWORD PTR _Temp$[ebp+2865], eax
	mov	BYTE PTR _Temp$[ebp+2869], al
	mov	eax, DWORD PTR ??_C@_05DADPALEM@Right?$AA@
	mov	DWORD PTR _Temp$[ebp+2870], eax
	mov	cx, WORD PTR ??_C@_05DADPALEM@Right?$AA@+4
	mov	WORD PTR _Temp$[ebp+2874], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2876], eax
	mov	DWORD PTR _Temp$[ebp+2880], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2884], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2885], eax
	mov	DWORD PTR _Temp$[ebp+2889], eax
	mov	DWORD PTR _Temp$[ebp+2893], eax
	mov	BYTE PTR _Temp$[ebp+2897], al
	mov	eax, DWORD PTR ??_C@_03DBKJMAGF@End?$AA@
	mov	DWORD PTR _Temp$[ebp+2898], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2902], eax
	mov	DWORD PTR _Temp$[ebp+2906], eax
	mov	WORD PTR _Temp$[ebp+2910], ax
	mov	eax, DWORD PTR ??_C@_04FNCLCJMC@Down?$AA@
	mov	DWORD PTR _Temp$[ebp+2912], eax
	mov	cl, BYTE PTR ??_C@_04FNCLCJMC@Down?$AA@+4
	mov	BYTE PTR _Temp$[ebp+2916], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2917], eax
	mov	DWORD PTR _Temp$[ebp+2921], eax
	mov	BYTE PTR _Temp$[ebp+2925], al

; 595  : 				  "Page Down","Insert","Delete","","","","","","","","Left Windows","Right Windows","Thing","","","",

	mov	eax, DWORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@
	mov	DWORD PTR _Temp$[ebp+2926], eax
	mov	ecx, DWORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2930], ecx
	mov	dx, WORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@+8
	mov	WORD PTR _Temp$[ebp+2934], dx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2936], eax
	mov	eax, DWORD PTR ??_C@_06CPFCODOD@Insert?$AA@
	mov	DWORD PTR _Temp$[ebp+2940], eax
	mov	cx, WORD PTR ??_C@_06CPFCODOD@Insert?$AA@+4
	mov	WORD PTR _Temp$[ebp+2944], cx
	mov	dl, BYTE PTR ??_C@_06CPFCODOD@Insert?$AA@+6
	mov	BYTE PTR _Temp$[ebp+2946], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2947], eax
	mov	WORD PTR _Temp$[ebp+2951], ax
	mov	BYTE PTR _Temp$[ebp+2953], al
	mov	eax, DWORD PTR ??_C@_06JBKGCNBB@Delete?$AA@
	mov	DWORD PTR _Temp$[ebp+2954], eax
	mov	cx, WORD PTR ??_C@_06JBKGCNBB@Delete?$AA@+4
	mov	WORD PTR _Temp$[ebp+2958], cx
	mov	dl, BYTE PTR ??_C@_06JBKGCNBB@Delete?$AA@+6
	mov	BYTE PTR _Temp$[ebp+2960], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2961], eax
	mov	WORD PTR _Temp$[ebp+2965], ax
	mov	BYTE PTR _Temp$[ebp+2967], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2968], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2969], eax
	mov	DWORD PTR _Temp$[ebp+2973], eax
	mov	DWORD PTR _Temp$[ebp+2977], eax
	mov	BYTE PTR _Temp$[ebp+2981], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2982], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2983], eax
	mov	DWORD PTR _Temp$[ebp+2987], eax
	mov	DWORD PTR _Temp$[ebp+2991], eax
	mov	BYTE PTR _Temp$[ebp+2995], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2996], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2997], eax
	mov	DWORD PTR _Temp$[ebp+3001], eax
	mov	DWORD PTR _Temp$[ebp+3005], eax
	mov	BYTE PTR _Temp$[ebp+3009], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3010], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3011], eax
	mov	DWORD PTR _Temp$[ebp+3015], eax
	mov	DWORD PTR _Temp$[ebp+3019], eax
	mov	BYTE PTR _Temp$[ebp+3023], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3024], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3025], eax
	mov	DWORD PTR _Temp$[ebp+3029], eax
	mov	DWORD PTR _Temp$[ebp+3033], eax
	mov	BYTE PTR _Temp$[ebp+3037], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3038], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3039], eax
	mov	DWORD PTR _Temp$[ebp+3043], eax
	mov	DWORD PTR _Temp$[ebp+3047], eax
	mov	BYTE PTR _Temp$[ebp+3051], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3052], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3053], eax
	mov	DWORD PTR _Temp$[ebp+3057], eax
	mov	DWORD PTR _Temp$[ebp+3061], eax
	mov	BYTE PTR _Temp$[ebp+3065], al
	mov	eax, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@
	mov	DWORD PTR _Temp$[ebp+3066], eax
	mov	ecx, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+4
	mov	DWORD PTR _Temp$[ebp+3070], ecx
	mov	edx, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+8
	mov	DWORD PTR _Temp$[ebp+3074], edx
	mov	al, BYTE PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+12
	mov	BYTE PTR _Temp$[ebp+3078], al
	xor	eax, eax
	mov	BYTE PTR _Temp$[ebp+3079], al
	mov	eax, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@
	mov	DWORD PTR _Temp$[ebp+3080], eax
	mov	ecx, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+4
	mov	DWORD PTR _Temp$[ebp+3084], ecx
	mov	edx, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+8
	mov	DWORD PTR _Temp$[ebp+3088], edx
	mov	ax, WORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+12
	mov	WORD PTR _Temp$[ebp+3092], ax
	mov	eax, DWORD PTR ??_C@_05FOLLILPC@Thing?$AA@
	mov	DWORD PTR _Temp$[ebp+3094], eax
	mov	cx, WORD PTR ??_C@_05FOLLILPC@Thing?$AA@+4
	mov	WORD PTR _Temp$[ebp+3098], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3100], eax
	mov	DWORD PTR _Temp$[ebp+3104], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3108], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3109], eax
	mov	DWORD PTR _Temp$[ebp+3113], eax
	mov	DWORD PTR _Temp$[ebp+3117], eax
	mov	BYTE PTR _Temp$[ebp+3121], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3122], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3123], eax
	mov	DWORD PTR _Temp$[ebp+3127], eax
	mov	DWORD PTR _Temp$[ebp+3131], eax
	mov	BYTE PTR _Temp$[ebp+3135], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3136], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3137], eax
	mov	DWORD PTR _Temp$[ebp+3141], eax
	mov	DWORD PTR _Temp$[ebp+3145], eax
	mov	BYTE PTR _Temp$[ebp+3149], al

; 596  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3150], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3151], eax
	mov	DWORD PTR _Temp$[ebp+3155], eax
	mov	DWORD PTR _Temp$[ebp+3159], eax
	mov	BYTE PTR _Temp$[ebp+3163], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3164], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3165], eax
	mov	DWORD PTR _Temp$[ebp+3169], eax
	mov	DWORD PTR _Temp$[ebp+3173], eax
	mov	BYTE PTR _Temp$[ebp+3177], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3178], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3179], eax
	mov	DWORD PTR _Temp$[ebp+3183], eax
	mov	DWORD PTR _Temp$[ebp+3187], eax
	mov	BYTE PTR _Temp$[ebp+3191], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3192], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3193], eax
	mov	DWORD PTR _Temp$[ebp+3197], eax
	mov	DWORD PTR _Temp$[ebp+3201], eax
	mov	BYTE PTR _Temp$[ebp+3205], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3206], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3207], eax
	mov	DWORD PTR _Temp$[ebp+3211], eax
	mov	DWORD PTR _Temp$[ebp+3215], eax
	mov	BYTE PTR _Temp$[ebp+3219], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3220], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3221], eax
	mov	DWORD PTR _Temp$[ebp+3225], eax
	mov	DWORD PTR _Temp$[ebp+3229], eax
	mov	BYTE PTR _Temp$[ebp+3233], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3234], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3235], eax
	mov	DWORD PTR _Temp$[ebp+3239], eax
	mov	DWORD PTR _Temp$[ebp+3243], eax
	mov	BYTE PTR _Temp$[ebp+3247], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3248], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3249], eax
	mov	DWORD PTR _Temp$[ebp+3253], eax
	mov	DWORD PTR _Temp$[ebp+3257], eax
	mov	BYTE PTR _Temp$[ebp+3261], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3262], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3263], eax
	mov	DWORD PTR _Temp$[ebp+3267], eax
	mov	DWORD PTR _Temp$[ebp+3271], eax
	mov	BYTE PTR _Temp$[ebp+3275], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3276], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3277], eax
	mov	DWORD PTR _Temp$[ebp+3281], eax
	mov	DWORD PTR _Temp$[ebp+3285], eax
	mov	BYTE PTR _Temp$[ebp+3289], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3290], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3291], eax
	mov	DWORD PTR _Temp$[ebp+3295], eax
	mov	DWORD PTR _Temp$[ebp+3299], eax
	mov	BYTE PTR _Temp$[ebp+3303], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3304], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3305], eax
	mov	DWORD PTR _Temp$[ebp+3309], eax
	mov	DWORD PTR _Temp$[ebp+3313], eax
	mov	BYTE PTR _Temp$[ebp+3317], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3318], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3319], eax
	mov	DWORD PTR _Temp$[ebp+3323], eax
	mov	DWORD PTR _Temp$[ebp+3327], eax
	mov	BYTE PTR _Temp$[ebp+3331], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3332], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3333], eax
	mov	DWORD PTR _Temp$[ebp+3337], eax
	mov	DWORD PTR _Temp$[ebp+3341], eax
	mov	BYTE PTR _Temp$[ebp+3345], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3346], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3347], eax
	mov	DWORD PTR _Temp$[ebp+3351], eax
	mov	DWORD PTR _Temp$[ebp+3355], eax
	mov	BYTE PTR _Temp$[ebp+3359], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3360], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3361], eax
	mov	DWORD PTR _Temp$[ebp+3365], eax
	mov	DWORD PTR _Temp$[ebp+3369], eax
	mov	BYTE PTR _Temp$[ebp+3373], al

; 597  : 				  "","","","","","","","","","","","","","","",""};

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3374], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3375], eax
	mov	DWORD PTR _Temp$[ebp+3379], eax
	mov	DWORD PTR _Temp$[ebp+3383], eax
	mov	BYTE PTR _Temp$[ebp+3387], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3388], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3389], eax
	mov	DWORD PTR _Temp$[ebp+3393], eax
	mov	DWORD PTR _Temp$[ebp+3397], eax
	mov	BYTE PTR _Temp$[ebp+3401], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3402], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3403], eax
	mov	DWORD PTR _Temp$[ebp+3407], eax
	mov	DWORD PTR _Temp$[ebp+3411], eax
	mov	BYTE PTR _Temp$[ebp+3415], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3416], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3417], eax
	mov	DWORD PTR _Temp$[ebp+3421], eax
	mov	DWORD PTR _Temp$[ebp+3425], eax
	mov	BYTE PTR _Temp$[ebp+3429], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3430], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3431], eax
	mov	DWORD PTR _Temp$[ebp+3435], eax
	mov	DWORD PTR _Temp$[ebp+3439], eax
	mov	BYTE PTR _Temp$[ebp+3443], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3444], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3445], eax
	mov	DWORD PTR _Temp$[ebp+3449], eax
	mov	DWORD PTR _Temp$[ebp+3453], eax
	mov	BYTE PTR _Temp$[ebp+3457], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3458], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3459], eax
	mov	DWORD PTR _Temp$[ebp+3463], eax
	mov	DWORD PTR _Temp$[ebp+3467], eax
	mov	BYTE PTR _Temp$[ebp+3471], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3472], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3473], eax
	mov	DWORD PTR _Temp$[ebp+3477], eax
	mov	DWORD PTR _Temp$[ebp+3481], eax
	mov	BYTE PTR _Temp$[ebp+3485], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3486], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3487], eax
	mov	DWORD PTR _Temp$[ebp+3491], eax
	mov	DWORD PTR _Temp$[ebp+3495], eax
	mov	BYTE PTR _Temp$[ebp+3499], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3500], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3501], eax
	mov	DWORD PTR _Temp$[ebp+3505], eax
	mov	DWORD PTR _Temp$[ebp+3509], eax
	mov	BYTE PTR _Temp$[ebp+3513], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3514], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3515], eax
	mov	DWORD PTR _Temp$[ebp+3519], eax
	mov	DWORD PTR _Temp$[ebp+3523], eax
	mov	BYTE PTR _Temp$[ebp+3527], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3528], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3529], eax
	mov	DWORD PTR _Temp$[ebp+3533], eax
	mov	DWORD PTR _Temp$[ebp+3537], eax
	mov	BYTE PTR _Temp$[ebp+3541], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3542], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3543], eax
	mov	DWORD PTR _Temp$[ebp+3547], eax
	mov	DWORD PTR _Temp$[ebp+3551], eax
	mov	BYTE PTR _Temp$[ebp+3555], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3556], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3557], eax
	mov	DWORD PTR _Temp$[ebp+3561], eax
	mov	DWORD PTR _Temp$[ebp+3565], eax
	mov	BYTE PTR _Temp$[ebp+3569], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3570], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3571], eax
	mov	DWORD PTR _Temp$[ebp+3575], eax
	mov	DWORD PTR _Temp$[ebp+3579], eax
	mov	BYTE PTR _Temp$[ebp+3583], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3584], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3585], eax
	mov	DWORD PTR _Temp$[ebp+3589], eax
	mov	DWORD PTR _Temp$[ebp+3593], eax
	mov	BYTE PTR _Temp$[ebp+3597], al

; 598  : 	
; 599  : 	for(int i=0;i<257;i++)

	mov	DWORD PTR _i$91503[ebp], 0
	jmp	SHORT $LN11@KeyHandler@2
$LN10@KeyHandler@2:
	mov	eax, DWORD PTR _i$91503[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91503[ebp], eax
$LN11@KeyHandler@2:
	cmp	DWORD PTR _i$91503[ebp], 257		; 00000101H
	jge	SHORT $LN9@KeyHandler@2

; 600  : 		for(int j=0;j<14;j++)

	mov	DWORD PTR _j$91507[ebp], 0
	jmp	SHORT $LN8@KeyHandler@2
$LN7@KeyHandler@2:
	mov	eax, DWORD PTR _j$91507[ebp]
	add	eax, 1
	mov	DWORD PTR _j$91507[ebp], eax
$LN8@KeyHandler@2:
	cmp	DWORD PTR _j$91507[ebp], 14		; 0000000eH
	jge	SHORT $LN6@KeyHandler@2

; 601  : 			this->Keys[i][j]=Temp[i][j];

	mov	eax, DWORD PTR _i$91503[ebp]
	imul	eax, 14					; 0000000eH
	lea	ecx, DWORD PTR _Temp$[ebp+eax]
	mov	edx, DWORD PTR _i$91503[ebp]
	imul	edx, 14					; 0000000eH
	add	edx, DWORD PTR _j$91507[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _j$91507[ebp]
	mov	cl, BYTE PTR [ecx+esi]
	mov	BYTE PTR [eax+edx+1281], cl
	jmp	SHORT $LN7@KeyHandler@2
$LN6@KeyHandler@2:
	jmp	SHORT $LN10@KeyHandler@2
$LN9@KeyHandler@2:

; 602  : 
; 603  : 	for(int i=0;i<256;i++)

	mov	DWORD PTR _i$91511[ebp], 0
	jmp	SHORT $LN5@KeyHandler@2
$LN4@KeyHandler@2:
	mov	eax, DWORD PTR _i$91511[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91511[ebp], eax
$LN5@KeyHandler@2:
	cmp	DWORD PTR _i$91511[ebp], 256		; 00000100H
	jge	SHORT $LN3@KeyHandler@2

; 604  : 	{
; 605  : 		KeyState1[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91511[ebp]
	mov	BYTE PTR [eax+1], 0

; 606  : 		KeyState2[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91511[ebp]
	mov	BYTE PTR [eax+257], 0

; 607  : 		KeyState3[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91511[ebp]
	mov	BYTE PTR [eax+513], 0

; 608  : 		KeyState4[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91511[ebp]
	mov	BYTE PTR [eax+769], 0

; 609  : 		KeyState5[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91511[ebp]
	mov	BYTE PTR [eax+1025], 0

; 610  : 	}

	jmp	SHORT $LN4@KeyHandler@2
$LN3@KeyHandler@2:

; 611  : 
; 612  : 	this->CurrentMouse=Mouse;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Mouse$[ebp]
	mov	DWORD PTR [eax+4904], ecx

; 613  : 
; 614  : 	if(this->CurrentMouse!=NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4904], 0
	je	SHORT $LN2@KeyHandler@2

; 615  : 		this->Bound=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1

; 616  : 	else

	jmp	SHORT $LN1@KeyHandler@2
$LN2@KeyHandler@2:

; 617  : 		this->Bound=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
$LN1@KeyHandler@2:

; 618  : 
; 619  : 	this->MouseSyncX=XSpeed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _XSpeed$[ebp]
	mov	DWORD PTR [eax+4892], ecx

; 620  : 	this->MouseSyncY=YSpeed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _YSpeed$[ebp]
	mov	DWORD PTR [eax+4896], ecx

; 621  : 	this->MouseLeft=BindMouseXLeft;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _BindMouseXLeft$[ebp]
	mov	DWORD PTR [eax+4884], ecx

; 622  : 	this->MouseRight=BindMouseXRight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _BindMouseXRight$[ebp]
	mov	DWORD PTR [eax+4888], ecx

; 623  : 	this->MouseDown=BindMouseYDown;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _BindMouseYDown$[ebp]
	mov	DWORD PTR [eax+4880], ecx

; 624  : 	this->MouseUp=BindMouseYUp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _BindMouseYUp$[ebp]
	mov	DWORD PTR [eax+4900], ecx

; 625  : 
; 626  : 	return;
; 627  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
??0KeyHandler@@QAE@PAVMouseHandler@@HHHHHH@Z ENDP	; KeyHandler::KeyHandler
_TEXT	ENDS
PUBLIC	?CharToInt@KeyHandler@@QAEHPAD@Z		; KeyHandler::CharToInt
PUBLIC	__$ArrayPad$
PUBLIC	??0KeyHandler@@QAE@PAVMouseHandler@@HHPAD111@Z	; KeyHandler::KeyHandler
; Function compile flags: /Odtp /ZI
;	COMDAT ??0KeyHandler@@QAE@PAVMouseHandler@@HHPAD111@Z
_TEXT	SEGMENT
_i$91536 = -3620					; size = 4
_j$91532 = -3616					; size = 4
_i$91528 = -3612					; size = 4
_Temp$ = -3608						; size = 3598
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Mouse$ = 8						; size = 4
_XSpeed$ = 12						; size = 4
_YSpeed$ = 16						; size = 4
_BindMouseXLeft$ = 20					; size = 4
_BindMouseXRight$ = 24					; size = 4
_BindMouseYUp$ = 28					; size = 4
_BindMouseYDown$ = 32					; size = 4
??0KeyHandler@@QAE@PAVMouseHandler@@HHPAD111@Z PROC	; KeyHandler::KeyHandler, COMDAT
; _this$ = ecx

; 629  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 3684				; 00000e64H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 	char Temp[257][14]={"Null Key","Escape","1 Key","2 Key","3 Key","4 Key","5 Key","6 Key","7 Key","8 Key","9 Key","0 Key","- Key","= Key","Backspace","Tab","Q",

	mov	eax, DWORD PTR ??_C@_08OFADHOMM@Null?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp], eax
	mov	ecx, DWORD PTR ??_C@_08OFADHOMM@Null?5Key?$AA@+4
	mov	DWORD PTR _Temp$[ebp+4], ecx
	mov	dl, BYTE PTR ??_C@_08OFADHOMM@Null?5Key?$AA@+8
	mov	BYTE PTR _Temp$[ebp+8], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+9], eax
	mov	BYTE PTR _Temp$[ebp+13], al
	mov	eax, DWORD PTR ??_C@_06OIGFGPHJ@Escape?$AA@
	mov	DWORD PTR _Temp$[ebp+14], eax
	mov	cx, WORD PTR ??_C@_06OIGFGPHJ@Escape?$AA@+4
	mov	WORD PTR _Temp$[ebp+18], cx
	mov	dl, BYTE PTR ??_C@_06OIGFGPHJ@Escape?$AA@+6
	mov	BYTE PTR _Temp$[ebp+20], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+21], eax
	mov	WORD PTR _Temp$[ebp+25], ax
	mov	BYTE PTR _Temp$[ebp+27], al
	mov	eax, DWORD PTR ??_C@_05LMCOLBBI@1?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+28], eax
	mov	cx, WORD PTR ??_C@_05LMCOLBBI@1?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+32], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+34], eax
	mov	DWORD PTR _Temp$[ebp+38], eax
	mov	eax, DWORD PTR ??_C@_05DKLKMDLG@2?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+42], eax
	mov	cx, WORD PTR ??_C@_05DKLKMDLG@2?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+46], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+48], eax
	mov	DWORD PTR _Temp$[ebp+52], eax
	mov	eax, DWORD PTR ??_C@_05PBOGBABD@3?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+56], eax
	mov	cx, WORD PTR ??_C@_05PBOGBABD@3?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+60], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+62], eax
	mov	DWORD PTR _Temp$[ebp+66], eax
	mov	eax, DWORD PTR ??_C@_05OMODCAKL@4?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+70], eax
	mov	cx, WORD PTR ??_C@_05OMODCAKL@4?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+74], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+76], eax
	mov	DWORD PTR _Temp$[ebp+80], eax
	mov	eax, DWORD PTR ??_C@_05CHLPPDAO@5?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+84], eax
	mov	cx, WORD PTR ??_C@_05CHLPPDAO@5?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+88], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+90], eax
	mov	DWORD PTR _Temp$[ebp+94], eax
	mov	eax, DWORD PTR ??_C@_05KBCLIBKA@6?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+98], eax
	mov	cx, WORD PTR ??_C@_05KBCLIBKA@6?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+102], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+104], eax
	mov	DWORD PTR _Temp$[ebp+108], eax
	mov	eax, DWORD PTR ??_C@_05GKHHFCAF@7?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+112], eax
	mov	cx, WORD PTR ??_C@_05GKHHFCAF@7?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+116], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+118], eax
	mov	DWORD PTR _Temp$[ebp+122], eax
	mov	eax, DWORD PTR ??_C@_05JLCBOANA@8?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+126], eax
	mov	cx, WORD PTR ??_C@_05JLCBOANA@8?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+130], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+132], eax
	mov	DWORD PTR _Temp$[ebp+136], eax
	mov	eax, DWORD PTR ??_C@_05FAHNDDHF@9?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+140], eax
	mov	cx, WORD PTR ??_C@_05FAHNDDHF@9?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+144], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+146], eax
	mov	DWORD PTR _Temp$[ebp+150], eax
	mov	eax, DWORD PTR ??_C@_05HHHCGCLN@0?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+154], eax
	mov	cx, WORD PTR ??_C@_05HHHCGCLN@0?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+158], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+160], eax
	mov	DWORD PTR _Temp$[ebp+164], eax
	mov	eax, DWORD PTR ??_C@_05MIDKHDPI@?9?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+168], eax
	mov	cx, WORD PTR ??_C@_05MIDKHDPI@?9?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+172], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+174], eax
	mov	DWORD PTR _Temp$[ebp+178], eax
	mov	eax, DWORD PTR ??_C@_05MLOMHBGD@?$DN?5Key?$AA@
	mov	DWORD PTR _Temp$[ebp+182], eax
	mov	cx, WORD PTR ??_C@_05MLOMHBGD@?$DN?5Key?$AA@+4
	mov	WORD PTR _Temp$[ebp+186], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+188], eax
	mov	DWORD PTR _Temp$[ebp+192], eax
	mov	eax, DWORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@
	mov	DWORD PTR _Temp$[ebp+196], eax
	mov	ecx, DWORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@+4
	mov	DWORD PTR _Temp$[ebp+200], ecx
	mov	dx, WORD PTR ??_C@_09LPBCIPOJ@Backspace?$AA@+8
	mov	WORD PTR _Temp$[ebp+204], dx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+206], eax
	mov	eax, DWORD PTR ??_C@_03IEAKBACE@Tab?$AA@
	mov	DWORD PTR _Temp$[ebp+210], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+214], eax
	mov	DWORD PTR _Temp$[ebp+218], eax
	mov	WORD PTR _Temp$[ebp+222], ax
	mov	ax, WORD PTR ??_C@_01BNIGIBBF@Q?$AA@
	mov	WORD PTR _Temp$[ebp+224], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+226], eax
	mov	DWORD PTR _Temp$[ebp+230], eax
	mov	DWORD PTR _Temp$[ebp+234], eax

; 631  : 				  "W","E","R","T","Y","U","I","O","P","[","]","Right Enter","Left Control","A","S","D",

	mov	ax, WORD PTR ??_C@_01ELNMCGJD@W?$AA@
	mov	WORD PTR _Temp$[ebp+238], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+240], eax
	mov	DWORD PTR _Temp$[ebp+244], eax
	mov	DWORD PTR _Temp$[ebp+248], eax
	mov	ax, WORD PTR ??_C@_01DDCIFGEA@E?$AA@
	mov	WORD PTR _Temp$[ebp+252], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+254], eax
	mov	DWORD PTR _Temp$[ebp+258], eax
	mov	DWORD PTR _Temp$[ebp+262], eax
	mov	ax, WORD PTR ??_C@_01DGKLNCNG@R?$AA@
	mov	WORD PTR _Temp$[ebp+266], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+268], eax
	mov	DWORD PTR _Temp$[ebp+272], eax
	mov	DWORD PTR _Temp$[ebp+276], eax
	mov	ax, WORD PTR ??_C@_01GAPBHFFA@T?$AA@
	mov	WORD PTR _Temp$[ebp+280], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+282], eax
	mov	DWORD PTR _Temp$[ebp+286], eax
	mov	DWORD PTR _Temp$[ebp+290], eax
	mov	ax, WORD PTR ??_C@_01NFFPALBN@Y?$AA@
	mov	WORD PTR _Temp$[ebp+294], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+296], eax
	mov	DWORD PTR _Temp$[ebp+300], eax
	mov	DWORD PTR _Temp$[ebp+304], eax
	mov	ax, WORD PTR ??_C@_01HJOKEEBB@U?$AA@
	mov	WORD PTR _Temp$[ebp+308], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+310], eax
	mov	DWORD PTR _Temp$[ebp+314], eax
	mov	DWORD PTR _Temp$[ebp+318], eax
	mov	ax, WORD PTR ??_C@_01JPJNBJEM@I?$AA@
	mov	WORD PTR _Temp$[ebp+322], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+324], eax
	mov	DWORD PTR _Temp$[ebp+328], eax
	mov	DWORD PTR _Temp$[ebp+332], eax
	mov	ax, WORD PTR ??_C@_01MJMHLOMK@O?$AA@
	mov	WORD PTR _Temp$[ebp+336], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+338], eax
	mov	DWORD PTR _Temp$[ebp+342], eax
	mov	DWORD PTR _Temp$[ebp+346], eax
	mov	ax, WORD PTR ??_C@_01EJNLAFE@P?$AA@
	mov	WORD PTR _Temp$[ebp+350], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+352], eax
	mov	DWORD PTR _Temp$[ebp+356], eax
	mov	DWORD PTR _Temp$[ebp+360], eax
	mov	ax, WORD PTR ??_C@_01OHGJGJJP@?$FL?$AA@
	mov	WORD PTR _Temp$[ebp+364], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+366], eax
	mov	DWORD PTR _Temp$[ebp+370], eax
	mov	DWORD PTR _Temp$[ebp+374], eax
	mov	ax, WORD PTR ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	WORD PTR _Temp$[ebp+378], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+380], eax
	mov	DWORD PTR _Temp$[ebp+384], eax
	mov	DWORD PTR _Temp$[ebp+388], eax
	mov	eax, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
	mov	DWORD PTR _Temp$[ebp+392], eax
	mov	ecx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+4
	mov	DWORD PTR _Temp$[ebp+396], ecx
	mov	edx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+8
	mov	DWORD PTR _Temp$[ebp+400], edx
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+404], ax
	mov	eax, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@
	mov	DWORD PTR _Temp$[ebp+406], eax
	mov	ecx, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+4
	mov	DWORD PTR _Temp$[ebp+410], ecx
	mov	edx, DWORD PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+8
	mov	DWORD PTR _Temp$[ebp+414], edx
	mov	al, BYTE PTR ??_C@_0N@NMKGAIJ@Left?5Control?$AA@+12
	mov	BYTE PTR _Temp$[ebp+418], al
	xor	eax, eax
	mov	BYTE PTR _Temp$[ebp+419], al
	mov	ax, WORD PTR ??_C@_01FHEEJDEE@A?$AA@
	mov	WORD PTR _Temp$[ebp+420], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+422], eax
	mov	DWORD PTR _Temp$[ebp+426], eax
	mov	DWORD PTR _Temp$[ebp+430], eax
	mov	ax, WORD PTR ??_C@_01CPLAODJH@S?$AA@
	mov	WORD PTR _Temp$[ebp+434], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+436], eax
	mov	DWORD PTR _Temp$[ebp+440], eax
	mov	DWORD PTR _Temp$[ebp+444], eax
	mov	ax, WORD PTR ??_C@_01CKDDGHAB@D?$AA@
	mov	WORD PTR _Temp$[ebp+448], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+450], eax
	mov	DWORD PTR _Temp$[ebp+454], eax
	mov	DWORD PTR _Temp$[ebp+458], eax

; 632  : 				  "F","G","H","J","K","L",";","\'","`","Left Shift","\\","Z","X","C","V","B",

	mov	ax, WORD PTR ??_C@_01BIAFAFID@F?$AA@
	mov	WORD PTR _Temp$[ebp+462], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+464], eax
	mov	DWORD PTR _Temp$[ebp+468], eax
	mov	DWORD PTR _Temp$[ebp+472], eax
	mov	ax, WORD PTR ??_C@_01BBODEMC@G?$AA@
	mov	WORD PTR _Temp$[ebp+476], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+478], eax
	mov	DWORD PTR _Temp$[ebp+482], eax
	mov	DWORD PTR _Temp$[ebp+486], eax
	mov	ax, WORD PTR ??_C@_01IGIGCIAN@H?$AA@
	mov	WORD PTR _Temp$[ebp+490], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+492], eax
	mov	DWORD PTR _Temp$[ebp+496], eax
	mov	DWORD PTR _Temp$[ebp+500], eax
	mov	ax, WORD PTR ??_C@_01LELAEKIP@J?$AA@
	mov	WORD PTR _Temp$[ebp+504], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+506], eax
	mov	DWORD PTR _Temp$[ebp+510], eax
	mov	DWORD PTR _Temp$[ebp+514], eax
	mov	ax, WORD PTR ??_C@_01KNKLHLMO@K?$AA@
	mov	WORD PTR _Temp$[ebp+518], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+520], eax
	mov	DWORD PTR _Temp$[ebp+524], eax
	mov	DWORD PTR _Temp$[ebp+528], eax
	mov	ax, WORD PTR ??_C@_01OCOKONAJ@L?$AA@
	mov	WORD PTR _Temp$[ebp+532], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+534], eax
	mov	DWORD PTR _Temp$[ebp+538], eax
	mov	DWORD PTR _Temp$[ebp+542], eax
	mov	ax, WORD PTR ??_C@_01ICJEACDI@?$DL?$AA@
	mov	WORD PTR _Temp$[ebp+546], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+548], eax
	mov	DWORD PTR _Temp$[ebp+552], eax
	mov	DWORD PTR _Temp$[ebp+556], eax
	mov	ax, WORD PTR ??_C@_01GEODFPGF@?8?$AA@
	mov	WORD PTR _Temp$[ebp+560], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+562], eax
	mov	DWORD PTR _Temp$[ebp+566], eax
	mov	DWORD PTR _Temp$[ebp+570], eax
	mov	ax, WORD PTR ??_C@_01NLNLIGKH@?$GA?$AA@
	mov	WORD PTR _Temp$[ebp+574], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+576], eax
	mov	DWORD PTR _Temp$[ebp+580], eax
	mov	DWORD PTR _Temp$[ebp+584], eax
	mov	eax, DWORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@
	mov	DWORD PTR _Temp$[ebp+588], eax
	mov	ecx, DWORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+4
	mov	DWORD PTR _Temp$[ebp+592], ecx
	mov	dx, WORD PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+8
	mov	WORD PTR _Temp$[ebp+596], dx
	mov	al, BYTE PTR ??_C@_0L@NFEFKBOL@Left?5Shift?$AA@+10
	mov	BYTE PTR _Temp$[ebp+598], al
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+599], ax
	mov	BYTE PTR _Temp$[ebp+601], al
	mov	ax, WORD PTR ??_C@_01KICIPPFI@?2?$AA@
	mov	WORD PTR _Temp$[ebp+602], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+604], eax
	mov	DWORD PTR _Temp$[ebp+608], eax
	mov	DWORD PTR _Temp$[ebp+612], eax
	mov	ax, WORD PTR ??_C@_01POHCFINO@Z?$AA@
	mov	WORD PTR _Temp$[ebp+616], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+618], eax
	mov	DWORD PTR _Temp$[ebp+622], eax
	mov	DWORD PTR _Temp$[ebp+626], eax
	mov	ax, WORD PTR ??_C@_01MMEEDKFM@X?$AA@
	mov	WORD PTR _Temp$[ebp+630], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+632], eax
	mov	DWORD PTR _Temp$[ebp+636], eax
	mov	DWORD PTR _Temp$[ebp+640], eax
	mov	ax, WORD PTR ??_C@_01GFHCPBMG@C?$AA@
	mov	WORD PTR _Temp$[ebp+644], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+646], eax
	mov	DWORD PTR _Temp$[ebp+650], eax
	mov	DWORD PTR _Temp$[ebp+654], eax
	mov	ax, WORD PTR ??_C@_01FCMHBHNC@V?$AA@
	mov	WORD PTR _Temp$[ebp+658], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+660], eax
	mov	DWORD PTR _Temp$[ebp+664], eax
	mov	DWORD PTR _Temp$[ebp+668], eax
	mov	ax, WORD PTR ??_C@_01HMGJMAIH@B?$AA@
	mov	WORD PTR _Temp$[ebp+672], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+674], eax
	mov	DWORD PTR _Temp$[ebp+678], eax
	mov	DWORD PTR _Temp$[ebp+682], eax

; 633  : 				  "N","M",",",".","/","Right Shift","*","Left Alt","Space","Caps Lock","F1","F2","F3","F4","F5","F6",

	mov	ax, WORD PTR ??_C@_01NANMIPIL@N?$AA@
	mov	WORD PTR _Temp$[ebp+686], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+688], eax
	mov	DWORD PTR _Temp$[ebp+692], eax
	mov	DWORD PTR _Temp$[ebp+696], eax
	mov	ax, WORD PTR ??_C@_01PLPBNMEI@M?$AA@
	mov	WORD PTR _Temp$[ebp+700], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+702], eax
	mov	DWORD PTR _Temp$[ebp+706], eax
	mov	DWORD PTR _Temp$[ebp+710], eax
	mov	ax, WORD PTR ??_C@_01IHBHIGKO@?0?$AA@
	mov	WORD PTR _Temp$[ebp+714], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+716], eax
	mov	DWORD PTR _Temp$[ebp+720], eax
	mov	DWORD PTR _Temp$[ebp+724], eax
	mov	ax, WORD PTR ??_C@_01LFCBOECM@?4?$AA@
	mov	WORD PTR _Temp$[ebp+728], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+730], eax
	mov	DWORD PTR _Temp$[ebp+734], eax
	mov	DWORD PTR _Temp$[ebp+738], eax
	mov	ax, WORD PTR ??_C@_01KMDKNFGN@?1?$AA@
	mov	WORD PTR _Temp$[ebp+742], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+744], eax
	mov	DWORD PTR _Temp$[ebp+748], eax
	mov	DWORD PTR _Temp$[ebp+752], eax
	mov	eax, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@
	mov	DWORD PTR _Temp$[ebp+756], eax
	mov	ecx, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@+4
	mov	DWORD PTR _Temp$[ebp+760], ecx
	mov	edx, DWORD PTR ??_C@_0M@COKLDKMB@Right?5Shift?$AA@+8
	mov	DWORD PTR _Temp$[ebp+764], edx
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+768], ax
	mov	ax, WORD PTR ??_C@_01NBENCBCI@?$CK?$AA@
	mov	WORD PTR _Temp$[ebp+770], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+772], eax
	mov	DWORD PTR _Temp$[ebp+776], eax
	mov	DWORD PTR _Temp$[ebp+780], eax
	mov	eax, DWORD PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@
	mov	DWORD PTR _Temp$[ebp+784], eax
	mov	ecx, DWORD PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@+4
	mov	DWORD PTR _Temp$[ebp+788], ecx
	mov	dl, BYTE PTR ??_C@_08CJHJBNHP@Left?5Alt?$AA@+8
	mov	BYTE PTR _Temp$[ebp+792], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+793], eax
	mov	BYTE PTR _Temp$[ebp+797], al
	mov	eax, DWORD PTR ??_C@_05OMHELODH@Space?$AA@
	mov	DWORD PTR _Temp$[ebp+798], eax
	mov	cx, WORD PTR ??_C@_05OMHELODH@Space?$AA@+4
	mov	WORD PTR _Temp$[ebp+802], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+804], eax
	mov	DWORD PTR _Temp$[ebp+808], eax
	mov	eax, DWORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@
	mov	DWORD PTR _Temp$[ebp+812], eax
	mov	ecx, DWORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@+4
	mov	DWORD PTR _Temp$[ebp+816], ecx
	mov	dx, WORD PTR ??_C@_09GGECHFNF@Caps?5Lock?$AA@+8
	mov	WORD PTR _Temp$[ebp+820], dx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+822], eax
	mov	ax, WORD PTR ??_C@_02LCPENACN@F1?$AA@
	mov	WORD PTR _Temp$[ebp+826], ax
	mov	cl, BYTE PTR ??_C@_02LCPENACN@F1?$AA@+2
	mov	BYTE PTR _Temp$[ebp+828], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+829], eax
	mov	DWORD PTR _Temp$[ebp+833], eax
	mov	WORD PTR _Temp$[ebp+837], ax
	mov	BYTE PTR _Temp$[ebp+839], al
	mov	ax, WORD PTR ??_C@_02JJNJIDOO@F2?$AA@
	mov	WORD PTR _Temp$[ebp+840], ax
	mov	cl, BYTE PTR ??_C@_02JJNJIDOO@F2?$AA@+2
	mov	BYTE PTR _Temp$[ebp+842], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+843], eax
	mov	DWORD PTR _Temp$[ebp+847], eax
	mov	WORD PTR _Temp$[ebp+851], ax
	mov	BYTE PTR _Temp$[ebp+853], al
	mov	ax, WORD PTR ??_C@_02IAMCLCKP@F3?$AA@
	mov	WORD PTR _Temp$[ebp+854], ax
	mov	cl, BYTE PTR ??_C@_02IAMCLCKP@F3?$AA@+2
	mov	BYTE PTR _Temp$[ebp+856], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+857], eax
	mov	DWORD PTR _Temp$[ebp+861], eax
	mov	WORD PTR _Temp$[ebp+865], ax
	mov	BYTE PTR _Temp$[ebp+867], al
	mov	ax, WORD PTR ??_C@_02MPIDCEGI@F4?$AA@
	mov	WORD PTR _Temp$[ebp+868], ax
	mov	cl, BYTE PTR ??_C@_02MPIDCEGI@F4?$AA@+2
	mov	BYTE PTR _Temp$[ebp+870], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+871], eax
	mov	DWORD PTR _Temp$[ebp+875], eax
	mov	WORD PTR _Temp$[ebp+879], ax
	mov	BYTE PTR _Temp$[ebp+881], al
	mov	ax, WORD PTR ??_C@_02NGJIBFCJ@F5?$AA@
	mov	WORD PTR _Temp$[ebp+882], ax
	mov	cl, BYTE PTR ??_C@_02NGJIBFCJ@F5?$AA@+2
	mov	BYTE PTR _Temp$[ebp+884], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+885], eax
	mov	DWORD PTR _Temp$[ebp+889], eax
	mov	WORD PTR _Temp$[ebp+893], ax
	mov	BYTE PTR _Temp$[ebp+895], al
	mov	ax, WORD PTR ??_C@_02PNLFEGOK@F6?$AA@
	mov	WORD PTR _Temp$[ebp+896], ax
	mov	cl, BYTE PTR ??_C@_02PNLFEGOK@F6?$AA@+2
	mov	BYTE PTR _Temp$[ebp+898], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+899], eax
	mov	DWORD PTR _Temp$[ebp+903], eax
	mov	WORD PTR _Temp$[ebp+907], ax
	mov	BYTE PTR _Temp$[ebp+909], al

; 634  : 				  "F7","F8","F9","F10","Num Lock","","7","8","9","-","4","5","6","+","1","2",

	mov	ax, WORD PTR ??_C@_02OEKOHHKL@F7?$AA@
	mov	WORD PTR _Temp$[ebp+910], ax
	mov	cl, BYTE PTR ??_C@_02OEKOHHKL@F7?$AA@+2
	mov	BYTE PTR _Temp$[ebp+912], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+913], eax
	mov	DWORD PTR _Temp$[ebp+917], eax
	mov	WORD PTR _Temp$[ebp+921], ax
	mov	BYTE PTR _Temp$[ebp+923], al
	mov	ax, WORD PTR ??_C@_02GDDGGLGE@F8?$AA@
	mov	WORD PTR _Temp$[ebp+924], ax
	mov	cl, BYTE PTR ??_C@_02GDDGGLGE@F8?$AA@+2
	mov	BYTE PTR _Temp$[ebp+926], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+927], eax
	mov	DWORD PTR _Temp$[ebp+931], eax
	mov	WORD PTR _Temp$[ebp+935], ax
	mov	BYTE PTR _Temp$[ebp+937], al
	mov	ax, WORD PTR ??_C@_02HKCNFKCF@F9?$AA@
	mov	WORD PTR _Temp$[ebp+938], ax
	mov	cl, BYTE PTR ??_C@_02HKCNFKCF@F9?$AA@+2
	mov	BYTE PTR _Temp$[ebp+940], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+941], eax
	mov	DWORD PTR _Temp$[ebp+945], eax
	mov	WORD PTR _Temp$[ebp+949], ax
	mov	BYTE PTR _Temp$[ebp+951], al
	mov	eax, DWORD PTR ??_C@_03JKCLJOFG@F10?$AA@
	mov	DWORD PTR _Temp$[ebp+952], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+956], eax
	mov	DWORD PTR _Temp$[ebp+960], eax
	mov	WORD PTR _Temp$[ebp+964], ax
	mov	eax, DWORD PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@
	mov	DWORD PTR _Temp$[ebp+966], eax
	mov	ecx, DWORD PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@+4
	mov	DWORD PTR _Temp$[ebp+970], ecx
	mov	dl, BYTE PTR ??_C@_08DEAFBBCL@Num?5Lock?$AA@+8
	mov	BYTE PTR _Temp$[ebp+974], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+975], eax
	mov	BYTE PTR _Temp$[ebp+979], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+980], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+981], eax
	mov	DWORD PTR _Temp$[ebp+985], eax
	mov	DWORD PTR _Temp$[ebp+989], eax
	mov	BYTE PTR _Temp$[ebp+993], al
	mov	ax, WORD PTR ??_C@_01COCBENDE@7?$AA@
	mov	WORD PTR _Temp$[ebp+994], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+996], eax
	mov	DWORD PTR _Temp$[ebp+1000], eax
	mov	DWORD PTR _Temp$[ebp+1004], eax
	mov	ax, WORD PTR ??_C@_01KJLJFBPL@8?$AA@
	mov	WORD PTR _Temp$[ebp+1008], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1010], eax
	mov	DWORD PTR _Temp$[ebp+1014], eax
	mov	DWORD PTR _Temp$[ebp+1018], eax
	mov	ax, WORD PTR ??_C@_01LAKCGALK@9?$AA@
	mov	WORD PTR _Temp$[ebp+1022], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1024], eax
	mov	DWORD PTR _Temp$[ebp+1028], eax
	mov	DWORD PTR _Temp$[ebp+1032], eax
	mov	ax, WORD PTR ??_C@_01JOAMLHOP@?9?$AA@
	mov	WORD PTR _Temp$[ebp+1036], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1038], eax
	mov	DWORD PTR _Temp$[ebp+1042], eax
	mov	DWORD PTR _Temp$[ebp+1046], eax
	mov	ax, WORD PTR ??_C@_01FAMBOPH@4?$AA@
	mov	WORD PTR _Temp$[ebp+1050], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1052], eax
	mov	DWORD PTR _Temp$[ebp+1056], eax
	mov	DWORD PTR _Temp$[ebp+1060], eax
	mov	ax, WORD PTR ??_C@_01BMBHCPLG@5?$AA@
	mov	WORD PTR _Temp$[ebp+1064], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1066], eax
	mov	DWORD PTR _Temp$[ebp+1070], eax
	mov	DWORD PTR _Temp$[ebp+1074], eax
	mov	ax, WORD PTR ??_C@_01DHDKHMHF@6?$AA@
	mov	WORD PTR _Temp$[ebp+1078], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1080], eax
	mov	DWORD PTR _Temp$[ebp+1084], eax
	mov	DWORD PTR _Temp$[ebp+1088], eax
	mov	ax, WORD PTR ??_C@_01MIFGBAGJ@?$CL?$AA@
	mov	WORD PTR _Temp$[ebp+1092], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1094], eax
	mov	DWORD PTR _Temp$[ebp+1098], eax
	mov	DWORD PTR _Temp$[ebp+1102], eax
	mov	ax, WORD PTR ??_C@_01HIHLOKLC@1?$AA@
	mov	WORD PTR _Temp$[ebp+1106], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1108], eax
	mov	DWORD PTR _Temp$[ebp+1112], eax
	mov	DWORD PTR _Temp$[ebp+1116], eax
	mov	ax, WORD PTR ??_C@_01FDFGLJHB@2?$AA@
	mov	WORD PTR _Temp$[ebp+1120], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1122], eax
	mov	DWORD PTR _Temp$[ebp+1126], eax
	mov	DWORD PTR _Temp$[ebp+1130], eax

; 635  : 				  "3","0","Num .","SysRq","","","F11","F12","","","","","","","","",

	mov	ax, WORD PTR ??_C@_01EKENIIDA@3?$AA@
	mov	WORD PTR _Temp$[ebp+1134], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1136], eax
	mov	DWORD PTR _Temp$[ebp+1140], eax
	mov	DWORD PTR _Temp$[ebp+1144], eax
	mov	ax, WORD PTR ??_C@_01GBGANLPD@0?$AA@
	mov	WORD PTR _Temp$[ebp+1148], ax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1150], eax
	mov	DWORD PTR _Temp$[ebp+1154], eax
	mov	DWORD PTR _Temp$[ebp+1158], eax
	mov	eax, DWORD PTR ??_C@_05LAFLDKON@Num?5?4?$AA@
	mov	DWORD PTR _Temp$[ebp+1162], eax
	mov	cx, WORD PTR ??_C@_05LAFLDKON@Num?5?4?$AA@+4
	mov	WORD PTR _Temp$[ebp+1166], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1168], eax
	mov	DWORD PTR _Temp$[ebp+1172], eax
	mov	eax, DWORD PTR ??_C@_05BAHDBLKA@SysRq?$AA@
	mov	DWORD PTR _Temp$[ebp+1176], eax
	mov	cx, WORD PTR ??_C@_05BAHDBLKA@SysRq?$AA@+4
	mov	WORD PTR _Temp$[ebp+1180], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1182], eax
	mov	DWORD PTR _Temp$[ebp+1186], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1190], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1191], eax
	mov	DWORD PTR _Temp$[ebp+1195], eax
	mov	DWORD PTR _Temp$[ebp+1199], eax
	mov	BYTE PTR _Temp$[ebp+1203], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1204], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1205], eax
	mov	DWORD PTR _Temp$[ebp+1209], eax
	mov	DWORD PTR _Temp$[ebp+1213], eax
	mov	BYTE PTR _Temp$[ebp+1217], al
	mov	eax, DWORD PTR ??_C@_03IDDAKPBH@F11?$AA@
	mov	DWORD PTR _Temp$[ebp+1218], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1222], eax
	mov	DWORD PTR _Temp$[ebp+1226], eax
	mov	WORD PTR _Temp$[ebp+1230], ax
	mov	eax, DWORD PTR ??_C@_03KIBNPMNE@F12?$AA@
	mov	DWORD PTR _Temp$[ebp+1232], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1236], eax
	mov	DWORD PTR _Temp$[ebp+1240], eax
	mov	WORD PTR _Temp$[ebp+1244], ax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1246], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1247], eax
	mov	DWORD PTR _Temp$[ebp+1251], eax
	mov	DWORD PTR _Temp$[ebp+1255], eax
	mov	BYTE PTR _Temp$[ebp+1259], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1260], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1261], eax
	mov	DWORD PTR _Temp$[ebp+1265], eax
	mov	DWORD PTR _Temp$[ebp+1269], eax
	mov	BYTE PTR _Temp$[ebp+1273], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1274], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1275], eax
	mov	DWORD PTR _Temp$[ebp+1279], eax
	mov	DWORD PTR _Temp$[ebp+1283], eax
	mov	BYTE PTR _Temp$[ebp+1287], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1288], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1289], eax
	mov	DWORD PTR _Temp$[ebp+1293], eax
	mov	DWORD PTR _Temp$[ebp+1297], eax
	mov	BYTE PTR _Temp$[ebp+1301], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1302], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1303], eax
	mov	DWORD PTR _Temp$[ebp+1307], eax
	mov	DWORD PTR _Temp$[ebp+1311], eax
	mov	BYTE PTR _Temp$[ebp+1315], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1316], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1317], eax
	mov	DWORD PTR _Temp$[ebp+1321], eax
	mov	DWORD PTR _Temp$[ebp+1325], eax
	mov	BYTE PTR _Temp$[ebp+1329], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1330], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1331], eax
	mov	DWORD PTR _Temp$[ebp+1335], eax
	mov	DWORD PTR _Temp$[ebp+1339], eax
	mov	BYTE PTR _Temp$[ebp+1343], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1344], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1345], eax
	mov	DWORD PTR _Temp$[ebp+1349], eax
	mov	DWORD PTR _Temp$[ebp+1353], eax
	mov	BYTE PTR _Temp$[ebp+1357], al

; 636  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1358], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1359], eax
	mov	DWORD PTR _Temp$[ebp+1363], eax
	mov	DWORD PTR _Temp$[ebp+1367], eax
	mov	BYTE PTR _Temp$[ebp+1371], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1372], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1373], eax
	mov	DWORD PTR _Temp$[ebp+1377], eax
	mov	DWORD PTR _Temp$[ebp+1381], eax
	mov	BYTE PTR _Temp$[ebp+1385], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1386], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1387], eax
	mov	DWORD PTR _Temp$[ebp+1391], eax
	mov	DWORD PTR _Temp$[ebp+1395], eax
	mov	BYTE PTR _Temp$[ebp+1399], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1400], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1401], eax
	mov	DWORD PTR _Temp$[ebp+1405], eax
	mov	DWORD PTR _Temp$[ebp+1409], eax
	mov	BYTE PTR _Temp$[ebp+1413], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1414], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1415], eax
	mov	DWORD PTR _Temp$[ebp+1419], eax
	mov	DWORD PTR _Temp$[ebp+1423], eax
	mov	BYTE PTR _Temp$[ebp+1427], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1428], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1429], eax
	mov	DWORD PTR _Temp$[ebp+1433], eax
	mov	DWORD PTR _Temp$[ebp+1437], eax
	mov	BYTE PTR _Temp$[ebp+1441], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1442], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1443], eax
	mov	DWORD PTR _Temp$[ebp+1447], eax
	mov	DWORD PTR _Temp$[ebp+1451], eax
	mov	BYTE PTR _Temp$[ebp+1455], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1456], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1457], eax
	mov	DWORD PTR _Temp$[ebp+1461], eax
	mov	DWORD PTR _Temp$[ebp+1465], eax
	mov	BYTE PTR _Temp$[ebp+1469], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1470], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1471], eax
	mov	DWORD PTR _Temp$[ebp+1475], eax
	mov	DWORD PTR _Temp$[ebp+1479], eax
	mov	BYTE PTR _Temp$[ebp+1483], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1484], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1485], eax
	mov	DWORD PTR _Temp$[ebp+1489], eax
	mov	DWORD PTR _Temp$[ebp+1493], eax
	mov	BYTE PTR _Temp$[ebp+1497], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1498], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1499], eax
	mov	DWORD PTR _Temp$[ebp+1503], eax
	mov	DWORD PTR _Temp$[ebp+1507], eax
	mov	BYTE PTR _Temp$[ebp+1511], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1512], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1513], eax
	mov	DWORD PTR _Temp$[ebp+1517], eax
	mov	DWORD PTR _Temp$[ebp+1521], eax
	mov	BYTE PTR _Temp$[ebp+1525], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1526], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1527], eax
	mov	DWORD PTR _Temp$[ebp+1531], eax
	mov	DWORD PTR _Temp$[ebp+1535], eax
	mov	BYTE PTR _Temp$[ebp+1539], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1540], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1541], eax
	mov	DWORD PTR _Temp$[ebp+1545], eax
	mov	DWORD PTR _Temp$[ebp+1549], eax
	mov	BYTE PTR _Temp$[ebp+1553], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1554], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1555], eax
	mov	DWORD PTR _Temp$[ebp+1559], eax
	mov	DWORD PTR _Temp$[ebp+1563], eax
	mov	BYTE PTR _Temp$[ebp+1567], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1568], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1569], eax
	mov	DWORD PTR _Temp$[ebp+1573], eax
	mov	DWORD PTR _Temp$[ebp+1577], eax
	mov	BYTE PTR _Temp$[ebp+1581], al

; 637  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1582], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1583], eax
	mov	DWORD PTR _Temp$[ebp+1587], eax
	mov	DWORD PTR _Temp$[ebp+1591], eax
	mov	BYTE PTR _Temp$[ebp+1595], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1596], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1597], eax
	mov	DWORD PTR _Temp$[ebp+1601], eax
	mov	DWORD PTR _Temp$[ebp+1605], eax
	mov	BYTE PTR _Temp$[ebp+1609], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1610], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1611], eax
	mov	DWORD PTR _Temp$[ebp+1615], eax
	mov	DWORD PTR _Temp$[ebp+1619], eax
	mov	BYTE PTR _Temp$[ebp+1623], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1624], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1625], eax
	mov	DWORD PTR _Temp$[ebp+1629], eax
	mov	DWORD PTR _Temp$[ebp+1633], eax
	mov	BYTE PTR _Temp$[ebp+1637], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1638], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1639], eax
	mov	DWORD PTR _Temp$[ebp+1643], eax
	mov	DWORD PTR _Temp$[ebp+1647], eax
	mov	BYTE PTR _Temp$[ebp+1651], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1652], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1653], eax
	mov	DWORD PTR _Temp$[ebp+1657], eax
	mov	DWORD PTR _Temp$[ebp+1661], eax
	mov	BYTE PTR _Temp$[ebp+1665], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1666], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1667], eax
	mov	DWORD PTR _Temp$[ebp+1671], eax
	mov	DWORD PTR _Temp$[ebp+1675], eax
	mov	BYTE PTR _Temp$[ebp+1679], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1680], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1681], eax
	mov	DWORD PTR _Temp$[ebp+1685], eax
	mov	DWORD PTR _Temp$[ebp+1689], eax
	mov	BYTE PTR _Temp$[ebp+1693], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1694], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1695], eax
	mov	DWORD PTR _Temp$[ebp+1699], eax
	mov	DWORD PTR _Temp$[ebp+1703], eax
	mov	BYTE PTR _Temp$[ebp+1707], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1708], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1709], eax
	mov	DWORD PTR _Temp$[ebp+1713], eax
	mov	DWORD PTR _Temp$[ebp+1717], eax
	mov	BYTE PTR _Temp$[ebp+1721], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1722], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1723], eax
	mov	DWORD PTR _Temp$[ebp+1727], eax
	mov	DWORD PTR _Temp$[ebp+1731], eax
	mov	BYTE PTR _Temp$[ebp+1735], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1736], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1737], eax
	mov	DWORD PTR _Temp$[ebp+1741], eax
	mov	DWORD PTR _Temp$[ebp+1745], eax
	mov	BYTE PTR _Temp$[ebp+1749], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1750], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1751], eax
	mov	DWORD PTR _Temp$[ebp+1755], eax
	mov	DWORD PTR _Temp$[ebp+1759], eax
	mov	BYTE PTR _Temp$[ebp+1763], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1764], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1765], eax
	mov	DWORD PTR _Temp$[ebp+1769], eax
	mov	DWORD PTR _Temp$[ebp+1773], eax
	mov	BYTE PTR _Temp$[ebp+1777], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1778], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1779], eax
	mov	DWORD PTR _Temp$[ebp+1783], eax
	mov	DWORD PTR _Temp$[ebp+1787], eax
	mov	BYTE PTR _Temp$[ebp+1791], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1792], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1793], eax
	mov	DWORD PTR _Temp$[ebp+1797], eax
	mov	DWORD PTR _Temp$[ebp+1801], eax
	mov	BYTE PTR _Temp$[ebp+1805], al

; 638  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1806], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1807], eax
	mov	DWORD PTR _Temp$[ebp+1811], eax
	mov	DWORD PTR _Temp$[ebp+1815], eax
	mov	BYTE PTR _Temp$[ebp+1819], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1820], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1821], eax
	mov	DWORD PTR _Temp$[ebp+1825], eax
	mov	DWORD PTR _Temp$[ebp+1829], eax
	mov	BYTE PTR _Temp$[ebp+1833], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1834], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1835], eax
	mov	DWORD PTR _Temp$[ebp+1839], eax
	mov	DWORD PTR _Temp$[ebp+1843], eax
	mov	BYTE PTR _Temp$[ebp+1847], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1848], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1849], eax
	mov	DWORD PTR _Temp$[ebp+1853], eax
	mov	DWORD PTR _Temp$[ebp+1857], eax
	mov	BYTE PTR _Temp$[ebp+1861], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1862], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1863], eax
	mov	DWORD PTR _Temp$[ebp+1867], eax
	mov	DWORD PTR _Temp$[ebp+1871], eax
	mov	BYTE PTR _Temp$[ebp+1875], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1876], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1877], eax
	mov	DWORD PTR _Temp$[ebp+1881], eax
	mov	DWORD PTR _Temp$[ebp+1885], eax
	mov	BYTE PTR _Temp$[ebp+1889], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1890], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1891], eax
	mov	DWORD PTR _Temp$[ebp+1895], eax
	mov	DWORD PTR _Temp$[ebp+1899], eax
	mov	BYTE PTR _Temp$[ebp+1903], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1904], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1905], eax
	mov	DWORD PTR _Temp$[ebp+1909], eax
	mov	DWORD PTR _Temp$[ebp+1913], eax
	mov	BYTE PTR _Temp$[ebp+1917], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1918], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1919], eax
	mov	DWORD PTR _Temp$[ebp+1923], eax
	mov	DWORD PTR _Temp$[ebp+1927], eax
	mov	BYTE PTR _Temp$[ebp+1931], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1932], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1933], eax
	mov	DWORD PTR _Temp$[ebp+1937], eax
	mov	DWORD PTR _Temp$[ebp+1941], eax
	mov	BYTE PTR _Temp$[ebp+1945], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1946], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1947], eax
	mov	DWORD PTR _Temp$[ebp+1951], eax
	mov	DWORD PTR _Temp$[ebp+1955], eax
	mov	BYTE PTR _Temp$[ebp+1959], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1960], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1961], eax
	mov	DWORD PTR _Temp$[ebp+1965], eax
	mov	DWORD PTR _Temp$[ebp+1969], eax
	mov	BYTE PTR _Temp$[ebp+1973], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1974], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1975], eax
	mov	DWORD PTR _Temp$[ebp+1979], eax
	mov	DWORD PTR _Temp$[ebp+1983], eax
	mov	BYTE PTR _Temp$[ebp+1987], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+1988], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+1989], eax
	mov	DWORD PTR _Temp$[ebp+1993], eax
	mov	DWORD PTR _Temp$[ebp+1997], eax
	mov	BYTE PTR _Temp$[ebp+2001], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2002], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2003], eax
	mov	DWORD PTR _Temp$[ebp+2007], eax
	mov	DWORD PTR _Temp$[ebp+2011], eax
	mov	BYTE PTR _Temp$[ebp+2015], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2016], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2017], eax
	mov	DWORD PTR _Temp$[ebp+2021], eax
	mov	DWORD PTR _Temp$[ebp+2025], eax
	mov	BYTE PTR _Temp$[ebp+2029], al

; 639  : 				  "","","","","","","","","","","","Right Enter","Right Control","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2030], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2031], eax
	mov	DWORD PTR _Temp$[ebp+2035], eax
	mov	DWORD PTR _Temp$[ebp+2039], eax
	mov	BYTE PTR _Temp$[ebp+2043], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2044], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2045], eax
	mov	DWORD PTR _Temp$[ebp+2049], eax
	mov	DWORD PTR _Temp$[ebp+2053], eax
	mov	BYTE PTR _Temp$[ebp+2057], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2058], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2059], eax
	mov	DWORD PTR _Temp$[ebp+2063], eax
	mov	DWORD PTR _Temp$[ebp+2067], eax
	mov	BYTE PTR _Temp$[ebp+2071], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2072], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2073], eax
	mov	DWORD PTR _Temp$[ebp+2077], eax
	mov	DWORD PTR _Temp$[ebp+2081], eax
	mov	BYTE PTR _Temp$[ebp+2085], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2086], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2087], eax
	mov	DWORD PTR _Temp$[ebp+2091], eax
	mov	DWORD PTR _Temp$[ebp+2095], eax
	mov	BYTE PTR _Temp$[ebp+2099], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2100], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2101], eax
	mov	DWORD PTR _Temp$[ebp+2105], eax
	mov	DWORD PTR _Temp$[ebp+2109], eax
	mov	BYTE PTR _Temp$[ebp+2113], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2114], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2115], eax
	mov	DWORD PTR _Temp$[ebp+2119], eax
	mov	DWORD PTR _Temp$[ebp+2123], eax
	mov	BYTE PTR _Temp$[ebp+2127], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2128], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2129], eax
	mov	DWORD PTR _Temp$[ebp+2133], eax
	mov	DWORD PTR _Temp$[ebp+2137], eax
	mov	BYTE PTR _Temp$[ebp+2141], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2142], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2143], eax
	mov	DWORD PTR _Temp$[ebp+2147], eax
	mov	DWORD PTR _Temp$[ebp+2151], eax
	mov	BYTE PTR _Temp$[ebp+2155], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2156], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2157], eax
	mov	DWORD PTR _Temp$[ebp+2161], eax
	mov	DWORD PTR _Temp$[ebp+2165], eax
	mov	BYTE PTR _Temp$[ebp+2169], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2170], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2171], eax
	mov	DWORD PTR _Temp$[ebp+2175], eax
	mov	DWORD PTR _Temp$[ebp+2179], eax
	mov	BYTE PTR _Temp$[ebp+2183], al
	mov	eax, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@
	mov	DWORD PTR _Temp$[ebp+2184], eax
	mov	ecx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2188], ecx
	mov	edx, DWORD PTR ??_C@_0M@ICALLIHK@Right?5Enter?$AA@+8
	mov	DWORD PTR _Temp$[ebp+2192], edx
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+2196], ax
	mov	eax, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@
	mov	DWORD PTR _Temp$[ebp+2198], eax
	mov	ecx, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2202], ecx
	mov	edx, DWORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+8
	mov	DWORD PTR _Temp$[ebp+2206], edx
	mov	ax, WORD PTR ??_C@_0O@FHMBNID@Right?5Control?$AA@+12
	mov	WORD PTR _Temp$[ebp+2210], ax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2212], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2213], eax
	mov	DWORD PTR _Temp$[ebp+2217], eax
	mov	DWORD PTR _Temp$[ebp+2221], eax
	mov	BYTE PTR _Temp$[ebp+2225], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2226], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2227], eax
	mov	DWORD PTR _Temp$[ebp+2231], eax
	mov	DWORD PTR _Temp$[ebp+2235], eax
	mov	BYTE PTR _Temp$[ebp+2239], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2240], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2241], eax
	mov	DWORD PTR _Temp$[ebp+2245], eax
	mov	DWORD PTR _Temp$[ebp+2249], eax
	mov	BYTE PTR _Temp$[ebp+2253], al

; 640  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2254], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2255], eax
	mov	DWORD PTR _Temp$[ebp+2259], eax
	mov	DWORD PTR _Temp$[ebp+2263], eax
	mov	BYTE PTR _Temp$[ebp+2267], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2268], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2269], eax
	mov	DWORD PTR _Temp$[ebp+2273], eax
	mov	DWORD PTR _Temp$[ebp+2277], eax
	mov	BYTE PTR _Temp$[ebp+2281], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2282], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2283], eax
	mov	DWORD PTR _Temp$[ebp+2287], eax
	mov	DWORD PTR _Temp$[ebp+2291], eax
	mov	BYTE PTR _Temp$[ebp+2295], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2296], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2297], eax
	mov	DWORD PTR _Temp$[ebp+2301], eax
	mov	DWORD PTR _Temp$[ebp+2305], eax
	mov	BYTE PTR _Temp$[ebp+2309], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2310], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2311], eax
	mov	DWORD PTR _Temp$[ebp+2315], eax
	mov	DWORD PTR _Temp$[ebp+2319], eax
	mov	BYTE PTR _Temp$[ebp+2323], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2324], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2325], eax
	mov	DWORD PTR _Temp$[ebp+2329], eax
	mov	DWORD PTR _Temp$[ebp+2333], eax
	mov	BYTE PTR _Temp$[ebp+2337], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2338], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2339], eax
	mov	DWORD PTR _Temp$[ebp+2343], eax
	mov	DWORD PTR _Temp$[ebp+2347], eax
	mov	BYTE PTR _Temp$[ebp+2351], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2352], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2353], eax
	mov	DWORD PTR _Temp$[ebp+2357], eax
	mov	DWORD PTR _Temp$[ebp+2361], eax
	mov	BYTE PTR _Temp$[ebp+2365], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2366], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2367], eax
	mov	DWORD PTR _Temp$[ebp+2371], eax
	mov	DWORD PTR _Temp$[ebp+2375], eax
	mov	BYTE PTR _Temp$[ebp+2379], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2380], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2381], eax
	mov	DWORD PTR _Temp$[ebp+2385], eax
	mov	DWORD PTR _Temp$[ebp+2389], eax
	mov	BYTE PTR _Temp$[ebp+2393], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2394], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2395], eax
	mov	DWORD PTR _Temp$[ebp+2399], eax
	mov	DWORD PTR _Temp$[ebp+2403], eax
	mov	BYTE PTR _Temp$[ebp+2407], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2408], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2409], eax
	mov	DWORD PTR _Temp$[ebp+2413], eax
	mov	DWORD PTR _Temp$[ebp+2417], eax
	mov	BYTE PTR _Temp$[ebp+2421], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2422], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2423], eax
	mov	DWORD PTR _Temp$[ebp+2427], eax
	mov	DWORD PTR _Temp$[ebp+2431], eax
	mov	BYTE PTR _Temp$[ebp+2435], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2436], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2437], eax
	mov	DWORD PTR _Temp$[ebp+2441], eax
	mov	DWORD PTR _Temp$[ebp+2445], eax
	mov	BYTE PTR _Temp$[ebp+2449], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2450], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2451], eax
	mov	DWORD PTR _Temp$[ebp+2455], eax
	mov	DWORD PTR _Temp$[ebp+2459], eax
	mov	BYTE PTR _Temp$[ebp+2463], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2464], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2465], eax
	mov	DWORD PTR _Temp$[ebp+2469], eax
	mov	DWORD PTR _Temp$[ebp+2473], eax
	mov	BYTE PTR _Temp$[ebp+2477], al

; 641  : 				  "","Function F3","","","/ Num","","Print Screen","Right Alt","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2478], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2479], eax
	mov	DWORD PTR _Temp$[ebp+2483], eax
	mov	DWORD PTR _Temp$[ebp+2487], eax
	mov	BYTE PTR _Temp$[ebp+2491], al
	mov	eax, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@
	mov	DWORD PTR _Temp$[ebp+2492], eax
	mov	ecx, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2496], ecx
	mov	edx, DWORD PTR ??_C@_0M@LHBLIFBA@Function?5F3?$AA@+8
	mov	DWORD PTR _Temp$[ebp+2500], edx
	xor	eax, eax
	mov	WORD PTR _Temp$[ebp+2504], ax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2506], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2507], eax
	mov	DWORD PTR _Temp$[ebp+2511], eax
	mov	DWORD PTR _Temp$[ebp+2515], eax
	mov	BYTE PTR _Temp$[ebp+2519], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2520], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2521], eax
	mov	DWORD PTR _Temp$[ebp+2525], eax
	mov	DWORD PTR _Temp$[ebp+2529], eax
	mov	BYTE PTR _Temp$[ebp+2533], al
	mov	eax, DWORD PTR ??_C@_05IAKEFGOE@?1?5Num?$AA@
	mov	DWORD PTR _Temp$[ebp+2534], eax
	mov	cx, WORD PTR ??_C@_05IAKEFGOE@?1?5Num?$AA@+4
	mov	WORD PTR _Temp$[ebp+2538], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2540], eax
	mov	DWORD PTR _Temp$[ebp+2544], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2548], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2549], eax
	mov	DWORD PTR _Temp$[ebp+2553], eax
	mov	DWORD PTR _Temp$[ebp+2557], eax
	mov	BYTE PTR _Temp$[ebp+2561], al
	mov	eax, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@
	mov	DWORD PTR _Temp$[ebp+2562], eax
	mov	ecx, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2566], ecx
	mov	edx, DWORD PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+8
	mov	DWORD PTR _Temp$[ebp+2570], edx
	mov	al, BYTE PTR ??_C@_0N@CHCLIIDE@Print?5Screen?$AA@+12
	mov	BYTE PTR _Temp$[ebp+2574], al
	xor	eax, eax
	mov	BYTE PTR _Temp$[ebp+2575], al
	mov	eax, DWORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@
	mov	DWORD PTR _Temp$[ebp+2576], eax
	mov	ecx, DWORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2580], ecx
	mov	dx, WORD PTR ??_C@_09ELGHIMBO@Right?5Alt?$AA@+8
	mov	WORD PTR _Temp$[ebp+2584], dx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2586], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2590], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2591], eax
	mov	DWORD PTR _Temp$[ebp+2595], eax
	mov	DWORD PTR _Temp$[ebp+2599], eax
	mov	BYTE PTR _Temp$[ebp+2603], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2604], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2605], eax
	mov	DWORD PTR _Temp$[ebp+2609], eax
	mov	DWORD PTR _Temp$[ebp+2613], eax
	mov	BYTE PTR _Temp$[ebp+2617], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2618], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2619], eax
	mov	DWORD PTR _Temp$[ebp+2623], eax
	mov	DWORD PTR _Temp$[ebp+2627], eax
	mov	BYTE PTR _Temp$[ebp+2631], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2632], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2633], eax
	mov	DWORD PTR _Temp$[ebp+2637], eax
	mov	DWORD PTR _Temp$[ebp+2641], eax
	mov	BYTE PTR _Temp$[ebp+2645], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2646], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2647], eax
	mov	DWORD PTR _Temp$[ebp+2651], eax
	mov	DWORD PTR _Temp$[ebp+2655], eax
	mov	BYTE PTR _Temp$[ebp+2659], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2660], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2661], eax
	mov	DWORD PTR _Temp$[ebp+2665], eax
	mov	DWORD PTR _Temp$[ebp+2669], eax
	mov	BYTE PTR _Temp$[ebp+2673], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2674], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2675], eax
	mov	DWORD PTR _Temp$[ebp+2679], eax
	mov	DWORD PTR _Temp$[ebp+2683], eax
	mov	BYTE PTR _Temp$[ebp+2687], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2688], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2689], eax
	mov	DWORD PTR _Temp$[ebp+2693], eax
	mov	DWORD PTR _Temp$[ebp+2697], eax
	mov	BYTE PTR _Temp$[ebp+2701], al

; 642  : 				  "","","","","Pause","Break","Home","Up","Page Up","","Left","","Right","","End","Down",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2702], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2703], eax
	mov	DWORD PTR _Temp$[ebp+2707], eax
	mov	DWORD PTR _Temp$[ebp+2711], eax
	mov	BYTE PTR _Temp$[ebp+2715], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2716], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2717], eax
	mov	DWORD PTR _Temp$[ebp+2721], eax
	mov	DWORD PTR _Temp$[ebp+2725], eax
	mov	BYTE PTR _Temp$[ebp+2729], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2730], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2731], eax
	mov	DWORD PTR _Temp$[ebp+2735], eax
	mov	DWORD PTR _Temp$[ebp+2739], eax
	mov	BYTE PTR _Temp$[ebp+2743], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2744], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2745], eax
	mov	DWORD PTR _Temp$[ebp+2749], eax
	mov	DWORD PTR _Temp$[ebp+2753], eax
	mov	BYTE PTR _Temp$[ebp+2757], al
	mov	eax, DWORD PTR ??_C@_05PEDNBBBD@Pause?$AA@
	mov	DWORD PTR _Temp$[ebp+2758], eax
	mov	cx, WORD PTR ??_C@_05PEDNBBBD@Pause?$AA@+4
	mov	WORD PTR _Temp$[ebp+2762], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2764], eax
	mov	DWORD PTR _Temp$[ebp+2768], eax
	mov	eax, DWORD PTR ??_C@_05EMFLFCNO@Break?$AA@
	mov	DWORD PTR _Temp$[ebp+2772], eax
	mov	cx, WORD PTR ??_C@_05EMFLFCNO@Break?$AA@+4
	mov	WORD PTR _Temp$[ebp+2776], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2778], eax
	mov	DWORD PTR _Temp$[ebp+2782], eax
	mov	eax, DWORD PTR ??_C@_04GKJODLKO@Home?$AA@
	mov	DWORD PTR _Temp$[ebp+2786], eax
	mov	cl, BYTE PTR ??_C@_04GKJODLKO@Home?$AA@+4
	mov	BYTE PTR _Temp$[ebp+2790], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2791], eax
	mov	DWORD PTR _Temp$[ebp+2795], eax
	mov	BYTE PTR _Temp$[ebp+2799], al
	mov	ax, WORD PTR ??_C@_02EFPGLDEA@Up?$AA@
	mov	WORD PTR _Temp$[ebp+2800], ax
	mov	cl, BYTE PTR ??_C@_02EFPGLDEA@Up?$AA@+2
	mov	BYTE PTR _Temp$[ebp+2802], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2803], eax
	mov	DWORD PTR _Temp$[ebp+2807], eax
	mov	WORD PTR _Temp$[ebp+2811], ax
	mov	BYTE PTR _Temp$[ebp+2813], al
	mov	eax, DWORD PTR ??_C@_07EDGDGJEN@Page?5Up?$AA@
	mov	DWORD PTR _Temp$[ebp+2814], eax
	mov	ecx, DWORD PTR ??_C@_07EDGDGJEN@Page?5Up?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2818], ecx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2822], eax
	mov	WORD PTR _Temp$[ebp+2826], ax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2828], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2829], eax
	mov	DWORD PTR _Temp$[ebp+2833], eax
	mov	DWORD PTR _Temp$[ebp+2837], eax
	mov	BYTE PTR _Temp$[ebp+2841], al
	mov	eax, DWORD PTR ??_C@_04KPCPLBPL@Left?$AA@
	mov	DWORD PTR _Temp$[ebp+2842], eax
	mov	cl, BYTE PTR ??_C@_04KPCPLBPL@Left?$AA@+4
	mov	BYTE PTR _Temp$[ebp+2846], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2847], eax
	mov	DWORD PTR _Temp$[ebp+2851], eax
	mov	BYTE PTR _Temp$[ebp+2855], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2856], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2857], eax
	mov	DWORD PTR _Temp$[ebp+2861], eax
	mov	DWORD PTR _Temp$[ebp+2865], eax
	mov	BYTE PTR _Temp$[ebp+2869], al
	mov	eax, DWORD PTR ??_C@_05DADPALEM@Right?$AA@
	mov	DWORD PTR _Temp$[ebp+2870], eax
	mov	cx, WORD PTR ??_C@_05DADPALEM@Right?$AA@+4
	mov	WORD PTR _Temp$[ebp+2874], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2876], eax
	mov	DWORD PTR _Temp$[ebp+2880], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2884], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2885], eax
	mov	DWORD PTR _Temp$[ebp+2889], eax
	mov	DWORD PTR _Temp$[ebp+2893], eax
	mov	BYTE PTR _Temp$[ebp+2897], al
	mov	eax, DWORD PTR ??_C@_03DBKJMAGF@End?$AA@
	mov	DWORD PTR _Temp$[ebp+2898], eax
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2902], eax
	mov	DWORD PTR _Temp$[ebp+2906], eax
	mov	WORD PTR _Temp$[ebp+2910], ax
	mov	eax, DWORD PTR ??_C@_04FNCLCJMC@Down?$AA@
	mov	DWORD PTR _Temp$[ebp+2912], eax
	mov	cl, BYTE PTR ??_C@_04FNCLCJMC@Down?$AA@+4
	mov	BYTE PTR _Temp$[ebp+2916], cl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2917], eax
	mov	DWORD PTR _Temp$[ebp+2921], eax
	mov	BYTE PTR _Temp$[ebp+2925], al

; 643  : 				  "Page Down","Insert","Delete","","","","","","","","Left Windows","Right Windows","Thing","","","",

	mov	eax, DWORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@
	mov	DWORD PTR _Temp$[ebp+2926], eax
	mov	ecx, DWORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@+4
	mov	DWORD PTR _Temp$[ebp+2930], ecx
	mov	dx, WORD PTR ??_C@_09IOIDGKNA@Page?5Down?$AA@+8
	mov	WORD PTR _Temp$[ebp+2934], dx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2936], eax
	mov	eax, DWORD PTR ??_C@_06CPFCODOD@Insert?$AA@
	mov	DWORD PTR _Temp$[ebp+2940], eax
	mov	cx, WORD PTR ??_C@_06CPFCODOD@Insert?$AA@+4
	mov	WORD PTR _Temp$[ebp+2944], cx
	mov	dl, BYTE PTR ??_C@_06CPFCODOD@Insert?$AA@+6
	mov	BYTE PTR _Temp$[ebp+2946], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2947], eax
	mov	WORD PTR _Temp$[ebp+2951], ax
	mov	BYTE PTR _Temp$[ebp+2953], al
	mov	eax, DWORD PTR ??_C@_06JBKGCNBB@Delete?$AA@
	mov	DWORD PTR _Temp$[ebp+2954], eax
	mov	cx, WORD PTR ??_C@_06JBKGCNBB@Delete?$AA@+4
	mov	WORD PTR _Temp$[ebp+2958], cx
	mov	dl, BYTE PTR ??_C@_06JBKGCNBB@Delete?$AA@+6
	mov	BYTE PTR _Temp$[ebp+2960], dl
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2961], eax
	mov	WORD PTR _Temp$[ebp+2965], ax
	mov	BYTE PTR _Temp$[ebp+2967], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2968], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2969], eax
	mov	DWORD PTR _Temp$[ebp+2973], eax
	mov	DWORD PTR _Temp$[ebp+2977], eax
	mov	BYTE PTR _Temp$[ebp+2981], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2982], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2983], eax
	mov	DWORD PTR _Temp$[ebp+2987], eax
	mov	DWORD PTR _Temp$[ebp+2991], eax
	mov	BYTE PTR _Temp$[ebp+2995], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+2996], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+2997], eax
	mov	DWORD PTR _Temp$[ebp+3001], eax
	mov	DWORD PTR _Temp$[ebp+3005], eax
	mov	BYTE PTR _Temp$[ebp+3009], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3010], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3011], eax
	mov	DWORD PTR _Temp$[ebp+3015], eax
	mov	DWORD PTR _Temp$[ebp+3019], eax
	mov	BYTE PTR _Temp$[ebp+3023], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3024], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3025], eax
	mov	DWORD PTR _Temp$[ebp+3029], eax
	mov	DWORD PTR _Temp$[ebp+3033], eax
	mov	BYTE PTR _Temp$[ebp+3037], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3038], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3039], eax
	mov	DWORD PTR _Temp$[ebp+3043], eax
	mov	DWORD PTR _Temp$[ebp+3047], eax
	mov	BYTE PTR _Temp$[ebp+3051], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3052], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3053], eax
	mov	DWORD PTR _Temp$[ebp+3057], eax
	mov	DWORD PTR _Temp$[ebp+3061], eax
	mov	BYTE PTR _Temp$[ebp+3065], al
	mov	eax, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@
	mov	DWORD PTR _Temp$[ebp+3066], eax
	mov	ecx, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+4
	mov	DWORD PTR _Temp$[ebp+3070], ecx
	mov	edx, DWORD PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+8
	mov	DWORD PTR _Temp$[ebp+3074], edx
	mov	al, BYTE PTR ??_C@_0N@ILBHIOPE@Left?5Windows?$AA@+12
	mov	BYTE PTR _Temp$[ebp+3078], al
	xor	eax, eax
	mov	BYTE PTR _Temp$[ebp+3079], al
	mov	eax, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@
	mov	DWORD PTR _Temp$[ebp+3080], eax
	mov	ecx, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+4
	mov	DWORD PTR _Temp$[ebp+3084], ecx
	mov	edx, DWORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+8
	mov	DWORD PTR _Temp$[ebp+3088], edx
	mov	ax, WORD PTR ??_C@_0O@IDKBPDPO@Right?5Windows?$AA@+12
	mov	WORD PTR _Temp$[ebp+3092], ax
	mov	eax, DWORD PTR ??_C@_05FOLLILPC@Thing?$AA@
	mov	DWORD PTR _Temp$[ebp+3094], eax
	mov	cx, WORD PTR ??_C@_05FOLLILPC@Thing?$AA@+4
	mov	WORD PTR _Temp$[ebp+3098], cx
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3100], eax
	mov	DWORD PTR _Temp$[ebp+3104], eax
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3108], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3109], eax
	mov	DWORD PTR _Temp$[ebp+3113], eax
	mov	DWORD PTR _Temp$[ebp+3117], eax
	mov	BYTE PTR _Temp$[ebp+3121], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3122], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3123], eax
	mov	DWORD PTR _Temp$[ebp+3127], eax
	mov	DWORD PTR _Temp$[ebp+3131], eax
	mov	BYTE PTR _Temp$[ebp+3135], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3136], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3137], eax
	mov	DWORD PTR _Temp$[ebp+3141], eax
	mov	DWORD PTR _Temp$[ebp+3145], eax
	mov	BYTE PTR _Temp$[ebp+3149], al

; 644  : 				  "","","","","","","","","","","","","","","","",

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3150], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3151], eax
	mov	DWORD PTR _Temp$[ebp+3155], eax
	mov	DWORD PTR _Temp$[ebp+3159], eax
	mov	BYTE PTR _Temp$[ebp+3163], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3164], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3165], eax
	mov	DWORD PTR _Temp$[ebp+3169], eax
	mov	DWORD PTR _Temp$[ebp+3173], eax
	mov	BYTE PTR _Temp$[ebp+3177], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3178], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3179], eax
	mov	DWORD PTR _Temp$[ebp+3183], eax
	mov	DWORD PTR _Temp$[ebp+3187], eax
	mov	BYTE PTR _Temp$[ebp+3191], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3192], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3193], eax
	mov	DWORD PTR _Temp$[ebp+3197], eax
	mov	DWORD PTR _Temp$[ebp+3201], eax
	mov	BYTE PTR _Temp$[ebp+3205], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3206], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3207], eax
	mov	DWORD PTR _Temp$[ebp+3211], eax
	mov	DWORD PTR _Temp$[ebp+3215], eax
	mov	BYTE PTR _Temp$[ebp+3219], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3220], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3221], eax
	mov	DWORD PTR _Temp$[ebp+3225], eax
	mov	DWORD PTR _Temp$[ebp+3229], eax
	mov	BYTE PTR _Temp$[ebp+3233], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3234], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3235], eax
	mov	DWORD PTR _Temp$[ebp+3239], eax
	mov	DWORD PTR _Temp$[ebp+3243], eax
	mov	BYTE PTR _Temp$[ebp+3247], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3248], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3249], eax
	mov	DWORD PTR _Temp$[ebp+3253], eax
	mov	DWORD PTR _Temp$[ebp+3257], eax
	mov	BYTE PTR _Temp$[ebp+3261], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3262], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3263], eax
	mov	DWORD PTR _Temp$[ebp+3267], eax
	mov	DWORD PTR _Temp$[ebp+3271], eax
	mov	BYTE PTR _Temp$[ebp+3275], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3276], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3277], eax
	mov	DWORD PTR _Temp$[ebp+3281], eax
	mov	DWORD PTR _Temp$[ebp+3285], eax
	mov	BYTE PTR _Temp$[ebp+3289], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3290], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3291], eax
	mov	DWORD PTR _Temp$[ebp+3295], eax
	mov	DWORD PTR _Temp$[ebp+3299], eax
	mov	BYTE PTR _Temp$[ebp+3303], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3304], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3305], eax
	mov	DWORD PTR _Temp$[ebp+3309], eax
	mov	DWORD PTR _Temp$[ebp+3313], eax
	mov	BYTE PTR _Temp$[ebp+3317], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3318], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3319], eax
	mov	DWORD PTR _Temp$[ebp+3323], eax
	mov	DWORD PTR _Temp$[ebp+3327], eax
	mov	BYTE PTR _Temp$[ebp+3331], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3332], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3333], eax
	mov	DWORD PTR _Temp$[ebp+3337], eax
	mov	DWORD PTR _Temp$[ebp+3341], eax
	mov	BYTE PTR _Temp$[ebp+3345], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3346], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3347], eax
	mov	DWORD PTR _Temp$[ebp+3351], eax
	mov	DWORD PTR _Temp$[ebp+3355], eax
	mov	BYTE PTR _Temp$[ebp+3359], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3360], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3361], eax
	mov	DWORD PTR _Temp$[ebp+3365], eax
	mov	DWORD PTR _Temp$[ebp+3369], eax
	mov	BYTE PTR _Temp$[ebp+3373], al

; 645  : 				  "","","","","","","","","","","","","","","",""};

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3374], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3375], eax
	mov	DWORD PTR _Temp$[ebp+3379], eax
	mov	DWORD PTR _Temp$[ebp+3383], eax
	mov	BYTE PTR _Temp$[ebp+3387], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3388], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3389], eax
	mov	DWORD PTR _Temp$[ebp+3393], eax
	mov	DWORD PTR _Temp$[ebp+3397], eax
	mov	BYTE PTR _Temp$[ebp+3401], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3402], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3403], eax
	mov	DWORD PTR _Temp$[ebp+3407], eax
	mov	DWORD PTR _Temp$[ebp+3411], eax
	mov	BYTE PTR _Temp$[ebp+3415], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3416], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3417], eax
	mov	DWORD PTR _Temp$[ebp+3421], eax
	mov	DWORD PTR _Temp$[ebp+3425], eax
	mov	BYTE PTR _Temp$[ebp+3429], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3430], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3431], eax
	mov	DWORD PTR _Temp$[ebp+3435], eax
	mov	DWORD PTR _Temp$[ebp+3439], eax
	mov	BYTE PTR _Temp$[ebp+3443], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3444], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3445], eax
	mov	DWORD PTR _Temp$[ebp+3449], eax
	mov	DWORD PTR _Temp$[ebp+3453], eax
	mov	BYTE PTR _Temp$[ebp+3457], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3458], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3459], eax
	mov	DWORD PTR _Temp$[ebp+3463], eax
	mov	DWORD PTR _Temp$[ebp+3467], eax
	mov	BYTE PTR _Temp$[ebp+3471], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3472], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3473], eax
	mov	DWORD PTR _Temp$[ebp+3477], eax
	mov	DWORD PTR _Temp$[ebp+3481], eax
	mov	BYTE PTR _Temp$[ebp+3485], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3486], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3487], eax
	mov	DWORD PTR _Temp$[ebp+3491], eax
	mov	DWORD PTR _Temp$[ebp+3495], eax
	mov	BYTE PTR _Temp$[ebp+3499], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3500], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3501], eax
	mov	DWORD PTR _Temp$[ebp+3505], eax
	mov	DWORD PTR _Temp$[ebp+3509], eax
	mov	BYTE PTR _Temp$[ebp+3513], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3514], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3515], eax
	mov	DWORD PTR _Temp$[ebp+3519], eax
	mov	DWORD PTR _Temp$[ebp+3523], eax
	mov	BYTE PTR _Temp$[ebp+3527], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3528], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3529], eax
	mov	DWORD PTR _Temp$[ebp+3533], eax
	mov	DWORD PTR _Temp$[ebp+3537], eax
	mov	BYTE PTR _Temp$[ebp+3541], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3542], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3543], eax
	mov	DWORD PTR _Temp$[ebp+3547], eax
	mov	DWORD PTR _Temp$[ebp+3551], eax
	mov	BYTE PTR _Temp$[ebp+3555], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3556], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3557], eax
	mov	DWORD PTR _Temp$[ebp+3561], eax
	mov	DWORD PTR _Temp$[ebp+3565], eax
	mov	BYTE PTR _Temp$[ebp+3569], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3570], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3571], eax
	mov	DWORD PTR _Temp$[ebp+3575], eax
	mov	DWORD PTR _Temp$[ebp+3579], eax
	mov	BYTE PTR _Temp$[ebp+3583], al
	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _Temp$[ebp+3584], al
	xor	eax, eax
	mov	DWORD PTR _Temp$[ebp+3585], eax
	mov	DWORD PTR _Temp$[ebp+3589], eax
	mov	DWORD PTR _Temp$[ebp+3593], eax
	mov	BYTE PTR _Temp$[ebp+3597], al

; 646  : 	
; 647  : 	for(int i=0;i<257;i++)

	mov	DWORD PTR _i$91528[ebp], 0
	jmp	SHORT $LN11@KeyHandler@3
$LN10@KeyHandler@3:
	mov	eax, DWORD PTR _i$91528[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91528[ebp], eax
$LN11@KeyHandler@3:
	cmp	DWORD PTR _i$91528[ebp], 257		; 00000101H
	jge	SHORT $LN9@KeyHandler@3

; 648  : 		for(int j=0;j<14;j++)

	mov	DWORD PTR _j$91532[ebp], 0
	jmp	SHORT $LN8@KeyHandler@3
$LN7@KeyHandler@3:
	mov	eax, DWORD PTR _j$91532[ebp]
	add	eax, 1
	mov	DWORD PTR _j$91532[ebp], eax
$LN8@KeyHandler@3:
	cmp	DWORD PTR _j$91532[ebp], 14		; 0000000eH
	jge	SHORT $LN6@KeyHandler@3

; 649  : 			this->Keys[i][j]=Temp[i][j];

	mov	eax, DWORD PTR _i$91528[ebp]
	imul	eax, 14					; 0000000eH
	lea	ecx, DWORD PTR _Temp$[ebp+eax]
	mov	edx, DWORD PTR _i$91528[ebp]
	imul	edx, 14					; 0000000eH
	add	edx, DWORD PTR _j$91532[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _j$91532[ebp]
	mov	cl, BYTE PTR [ecx+esi]
	mov	BYTE PTR [eax+edx+1281], cl
	jmp	SHORT $LN7@KeyHandler@3
$LN6@KeyHandler@3:
	jmp	SHORT $LN10@KeyHandler@3
$LN9@KeyHandler@3:

; 650  : 
; 651  : 	for(int i=0;i<256;i++)

	mov	DWORD PTR _i$91536[ebp], 0
	jmp	SHORT $LN5@KeyHandler@3
$LN4@KeyHandler@3:
	mov	eax, DWORD PTR _i$91536[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91536[ebp], eax
$LN5@KeyHandler@3:
	cmp	DWORD PTR _i$91536[ebp], 256		; 00000100H
	jge	SHORT $LN3@KeyHandler@3

; 652  : 	{
; 653  : 		KeyState1[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91536[ebp]
	mov	BYTE PTR [eax+1], 0

; 654  : 		KeyState2[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91536[ebp]
	mov	BYTE PTR [eax+257], 0

; 655  : 		KeyState3[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91536[ebp]
	mov	BYTE PTR [eax+513], 0

; 656  : 		KeyState4[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91536[ebp]
	mov	BYTE PTR [eax+769], 0

; 657  : 		KeyState5[i]=false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91536[ebp]
	mov	BYTE PTR [eax+1025], 0

; 658  : 	}

	jmp	SHORT $LN4@KeyHandler@3
$LN3@KeyHandler@3:

; 659  : 
; 660  : 	this->CurrentMouse=Mouse;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Mouse$[ebp]
	mov	DWORD PTR [eax+4904], ecx

; 661  : 
; 662  : 	if(this->CurrentMouse!=NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4904], 0
	je	SHORT $LN2@KeyHandler@3

; 663  : 		this->Bound=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1

; 664  : 	else

	jmp	SHORT $LN1@KeyHandler@3
$LN2@KeyHandler@3:

; 665  : 		this->Bound=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
$LN1@KeyHandler@3:

; 666  : 
; 667  : 	this->MouseSyncX=XSpeed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _XSpeed$[ebp]
	mov	DWORD PTR [eax+4892], ecx

; 668  : 	this->MouseSyncY=YSpeed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _YSpeed$[ebp]
	mov	DWORD PTR [eax+4896], ecx

; 669  : 	this->MouseLeft=this->CharToInt(BindMouseXLeft)-1;

	mov	eax, DWORD PTR _BindMouseXLeft$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInt@KeyHandler@@QAEHPAD@Z	; KeyHandler::CharToInt
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4884], eax

; 670  : 	this->MouseRight=this->CharToInt(BindMouseXRight)-1;

	mov	eax, DWORD PTR _BindMouseXRight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInt@KeyHandler@@QAEHPAD@Z	; KeyHandler::CharToInt
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4888], eax

; 671  : 	this->MouseDown=this->CharToInt(BindMouseYDown)-1;

	mov	eax, DWORD PTR _BindMouseYDown$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInt@KeyHandler@@QAEHPAD@Z	; KeyHandler::CharToInt
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4880], eax

; 672  : 	this->MouseUp=this->CharToInt(BindMouseYUp)-1;

	mov	eax, DWORD PTR _BindMouseYUp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInt@KeyHandler@@QAEHPAD@Z	; KeyHandler::CharToInt
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4900], eax

; 673  : 
; 674  : 	return;
; 675  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
??0KeyHandler@@QAE@PAVMouseHandler@@HHPAD111@Z ENDP	; KeyHandler::KeyHandler
_TEXT	ENDS
PUBLIC	??_GMouseHandler@@QAEPAXI@Z			; MouseHandler::`scalar deleting destructor'
PUBLIC	??1KeyHandler@@QAE@XZ				; KeyHandler::~KeyHandler
; Function compile flags: /Odtp /ZI
;	COMDAT ??1KeyHandler@@QAE@XZ
_TEXT	SEGMENT
tv69 = -80						; size = 4
$T94504 = -76						; size = 4
$T94505 = -72						; size = 4
_this$ = -4						; size = 4
??1KeyHandler@@QAE@XZ PROC				; KeyHandler::~KeyHandler, COMDAT
; _this$ = ecx

; 677  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 678  : 	delete this->CurrentMouse;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4904]
	mov	DWORD PTR $T94505[ebp], ecx
	mov	edx, DWORD PTR $T94505[ebp]
	mov	DWORD PTR $T94504[ebp], edx
	cmp	DWORD PTR $T94504[ebp], 0
	je	SHORT $LN3@KeyHandler@4
	push	1
	mov	ecx, DWORD PTR $T94504[ebp]
	call	??_GMouseHandler@@QAEPAXI@Z
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@KeyHandler@4
$LN3@KeyHandler@4:
	mov	DWORD PTR tv69[ebp], 0
$LN1@KeyHandler@4:

; 679  : 
; 680  : 	return;
; 681  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1KeyHandler@@QAE@XZ ENDP				; KeyHandler::~KeyHandler
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ??_GMouseHandler@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMouseHandler@@QAEPAXI@Z PROC			; MouseHandler::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MouseHandler@@QAE@XZ			; MouseHandler::~MouseHandler
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMouseHandler@@QAEPAXI@Z ENDP			; MouseHandler::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?CompareStrings@KeyHandler@@IAE_NPAD0@Z		; KeyHandler::CompareStrings
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /ZI
;	COMDAT ?CompareStrings@KeyHandler@@IAE_NPAD0@Z
_TEXT	SEGMENT
_i$91557 = -8						; size = 4
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?CompareStrings@KeyHandler@@IAE_NPAD0@Z PROC		; KeyHandler::CompareStrings, COMDAT
; _this$ = ecx

; 683  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 684  : 	if(strlen(a)!=strlen(b))

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _b$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	cmp	esi, eax
	je	SHORT $LN5@CompareStr

; 685  : 		return false;

	xor	al, al
	jmp	SHORT $LN6@CompareStr
$LN5@CompareStr:

; 686  : 
; 687  : 	for(int i=0;a[i]==b[i];i++)

	mov	DWORD PTR _i$91557[ebp], 0
	jmp	SHORT $LN4@CompareStr
$LN3@CompareStr:
	mov	eax, DWORD PTR _i$91557[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91557[ebp], eax
$LN4@CompareStr:
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _i$91557[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _i$91557[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN2@CompareStr

; 688  : 		if(i==strlen(a)-1)

	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	sub	eax, 1
	cmp	DWORD PTR _i$91557[ebp], eax
	jne	SHORT $LN1@CompareStr

; 689  : 			return true;

	mov	al, 1
	jmp	SHORT $LN6@CompareStr
$LN1@CompareStr:

; 690  : 
; 691  : 	return false;

	jmp	SHORT $LN3@CompareStr
$LN2@CompareStr:
	xor	al, al
$LN6@CompareStr:

; 692  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?CompareStrings@KeyHandler@@IAE_NPAD0@Z ENDP		; KeyHandler::CompareStrings
_TEXT	ENDS
PUBLIC	?IsBound@KeyHandler@@QAE_NXZ			; KeyHandler::IsBound
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsBound@KeyHandler@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBound@KeyHandler@@QAE_NXZ PROC			; KeyHandler::IsBound, COMDAT
; _this$ = ecx

; 694  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 695  : 	return this->Bound;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]

; 696  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBound@KeyHandler@@QAE_NXZ ENDP			; KeyHandler::IsBound
_TEXT	ENDS
PUBLIC	?IsHeld@KeyHandler@@QAE_NPAD@Z			; KeyHandler::IsHeld
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsHeld@KeyHandler@@QAE_NPAD@Z
_TEXT	SEGMENT
tv94 = -76						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IsHeld@KeyHandler@@QAE_NPAD@Z PROC			; KeyHandler::IsHeld, COMDAT
; _this$ = ecx

; 698  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 699  : 	int i=CharToInt(Key);

	mov	eax, DWORD PTR _Key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInt@KeyHandler@@QAEHPAD@Z	; KeyHandler::CharToInt
	mov	DWORD PTR _i$[ebp], eax

; 700  : 
; 701  : 	if(i>=1&&i<=256)

	cmp	DWORD PTR _i$[ebp], 1
	jl	SHORT $LN2@IsHeld
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jg	SHORT $LN2@IsHeld

; 702  : 		return this->KeyState1[i-1]&&this->KeyState2[i-1]&&this->KeyState3[i-1]&&this->KeyState4[i-1]&&this->KeyState5[i-1];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@IsHeld
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+256]
	test	eax, eax
	je	SHORT $LN5@IsHeld
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+512]
	test	edx, edx
	je	SHORT $LN5@IsHeld
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+768]
	test	ecx, ecx
	je	SHORT $LN5@IsHeld
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+1024]
	test	eax, eax
	je	SHORT $LN5@IsHeld
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN6@IsHeld
$LN5@IsHeld:
	mov	DWORD PTR tv94[ebp], 0
$LN6@IsHeld:
	mov	al, BYTE PTR tv94[ebp]
	jmp	SHORT $LN3@IsHeld

; 703  : 	else

	jmp	SHORT $LN3@IsHeld
$LN2@IsHeld:

; 704  : 		return false;

	xor	al, al
$LN3@IsHeld:

; 705  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsHeld@KeyHandler@@QAE_NPAD@Z ENDP			; KeyHandler::IsHeld
_TEXT	ENDS
PUBLIC	?IsHeld@KeyHandler@@QAE_NH@Z			; KeyHandler::IsHeld
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsHeld@KeyHandler@@QAE_NH@Z
_TEXT	SEGMENT
tv86 = -72						; size = 4
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IsHeld@KeyHandler@@QAE_NH@Z PROC			; KeyHandler::IsHeld, COMDAT
; _this$ = ecx

; 707  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 708  : 	if(Key>=0&&Key<256)

	cmp	DWORD PTR _Key$[ebp], 0
	jl	SHORT $LN2@IsHeld@2
	cmp	DWORD PTR _Key$[ebp], 256		; 00000100H
	jge	SHORT $LN2@IsHeld@2

; 709  : 		return this->KeyState1[Key]&&this->KeyState2[Key]&&this->KeyState3[Key]&&this->KeyState4[Key]&&this->KeyState5[Key];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _Key$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN5@IsHeld@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _Key$[ebp]
	movzx	eax, BYTE PTR [edx+257]
	test	eax, eax
	je	SHORT $LN5@IsHeld@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _Key$[ebp]
	movzx	edx, BYTE PTR [ecx+513]
	test	edx, edx
	je	SHORT $LN5@IsHeld@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _Key$[ebp]
	movzx	ecx, BYTE PTR [eax+769]
	test	ecx, ecx
	je	SHORT $LN5@IsHeld@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _Key$[ebp]
	movzx	eax, BYTE PTR [edx+1025]
	test	eax, eax
	je	SHORT $LN5@IsHeld@2
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN6@IsHeld@2
$LN5@IsHeld@2:
	mov	DWORD PTR tv86[ebp], 0
$LN6@IsHeld@2:
	mov	al, BYTE PTR tv86[ebp]
	jmp	SHORT $LN3@IsHeld@2

; 710  : 	else

	jmp	SHORT $LN3@IsHeld@2
$LN2@IsHeld@2:

; 711  : 		return false;

	xor	al, al
$LN3@IsHeld@2:

; 712  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsHeld@KeyHandler@@QAE_NH@Z ENDP			; KeyHandler::IsHeld
_TEXT	ENDS
PUBLIC	?IsMashed@KeyHandler@@QAE_NPAD@Z		; KeyHandler::IsMashed
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsMashed@KeyHandler@@QAE_NPAD@Z
_TEXT	SEGMENT
tv94 = -76						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IsMashed@KeyHandler@@QAE_NPAD@Z PROC			; KeyHandler::IsMashed, COMDAT
; _this$ = ecx

; 714  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 715  : 	int i=CharToInt(Key);

	mov	eax, DWORD PTR _Key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInt@KeyHandler@@QAEHPAD@Z	; KeyHandler::CharToInt
	mov	DWORD PTR _i$[ebp], eax

; 716  : 
; 717  : 	if(i>=1&&i<=256)

	cmp	DWORD PTR _i$[ebp], 1
	jl	SHORT $LN2@IsMashed
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jg	SHORT $LN2@IsMashed

; 718  : 		if(this->KeyState1[i-1])

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@IsMashed

; 719  : 			return !this->KeyState2[i-1]&&(this->KeyState3[i-1]||this->KeyState4[i-1]||this->KeyState5[i-1]);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+256]
	test	ecx, ecx
	jne	SHORT $LN6@IsMashed
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+512]
	test	eax, eax
	jne	SHORT $LN5@IsMashed
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+768]
	test	edx, edx
	jne	SHORT $LN5@IsMashed
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+1024]
	test	ecx, ecx
	je	SHORT $LN6@IsMashed
$LN5@IsMashed:
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN7@IsMashed
$LN6@IsMashed:
	mov	DWORD PTR tv94[ebp], 0
$LN7@IsMashed:
	mov	al, BYTE PTR tv94[ebp]
	jmp	SHORT $LN3@IsMashed
$LN2@IsMashed:

; 720  : 	
; 721  : 	return false;

	xor	al, al
$LN3@IsMashed:

; 722  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsMashed@KeyHandler@@QAE_NPAD@Z ENDP			; KeyHandler::IsMashed
_TEXT	ENDS
PUBLIC	?IsMashed@KeyHandler@@QAE_NH@Z			; KeyHandler::IsMashed
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsMashed@KeyHandler@@QAE_NH@Z
_TEXT	SEGMENT
tv86 = -72						; size = 4
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IsMashed@KeyHandler@@QAE_NH@Z PROC			; KeyHandler::IsMashed, COMDAT
; _this$ = ecx

; 724  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 725  : 	if(Key>=0&&Key<256)

	cmp	DWORD PTR _Key$[ebp], 0
	jl	SHORT $LN2@IsMashed@2
	cmp	DWORD PTR _Key$[ebp], 256		; 00000100H
	jge	SHORT $LN2@IsMashed@2

; 726  : 		if(this->KeyState1[Key])

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _Key$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN2@IsMashed@2

; 727  : 			return !this->KeyState2[Key]&&(this->KeyState3[Key]||this->KeyState4[Key]||this->KeyState5[Key]);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _Key$[ebp]
	movzx	ecx, BYTE PTR [eax+257]
	test	ecx, ecx
	jne	SHORT $LN6@IsMashed@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _Key$[ebp]
	movzx	eax, BYTE PTR [edx+513]
	test	eax, eax
	jne	SHORT $LN5@IsMashed@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _Key$[ebp]
	movzx	edx, BYTE PTR [ecx+769]
	test	edx, edx
	jne	SHORT $LN5@IsMashed@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _Key$[ebp]
	movzx	ecx, BYTE PTR [eax+1025]
	test	ecx, ecx
	je	SHORT $LN6@IsMashed@2
$LN5@IsMashed@2:
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN7@IsMashed@2
$LN6@IsMashed@2:
	mov	DWORD PTR tv86[ebp], 0
$LN7@IsMashed@2:
	mov	al, BYTE PTR tv86[ebp]
	jmp	SHORT $LN3@IsMashed@2
$LN2@IsMashed@2:

; 728  : 	
; 729  : 	return false;

	xor	al, al
$LN3@IsMashed@2:

; 730  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsMashed@KeyHandler@@QAE_NH@Z ENDP			; KeyHandler::IsMashed
_TEXT	ENDS
PUBLIC	?IsPressed@KeyHandler@@QAE_NH@Z			; KeyHandler::IsPressed
PUBLIC	?IsPressed@KeyHandler@@QAE_NPAD@Z		; KeyHandler::IsPressed
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsPressed@KeyHandler@@QAE_NPAD@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IsPressed@KeyHandler@@QAE_NPAD@Z PROC			; KeyHandler::IsPressed, COMDAT
; _this$ = ecx

; 732  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 733  : 	int i=CharToInt(Key);

	mov	eax, DWORD PTR _Key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInt@KeyHandler@@QAEHPAD@Z	; KeyHandler::CharToInt
	mov	DWORD PTR _i$[ebp], eax

; 734  : 
; 735  : 	if(i>=1&&i<=256)

	cmp	DWORD PTR _i$[ebp], 1
	jl	SHORT $LN2@IsPressed
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jg	SHORT $LN2@IsPressed

; 736  : 		return this->IsPressed(i-1);

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPressed@KeyHandler@@QAE_NH@Z		; KeyHandler::IsPressed
	jmp	SHORT $LN3@IsPressed

; 737  : 	else

	jmp	SHORT $LN3@IsPressed
$LN2@IsPressed:

; 738  : 		return false;

	xor	al, al
$LN3@IsPressed:

; 739  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsPressed@KeyHandler@@QAE_NPAD@Z ENDP			; KeyHandler::IsPressed
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsPressed@KeyHandler@@QAE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IsPressed@KeyHandler@@QAE_NH@Z PROC			; KeyHandler::IsPressed, COMDAT
; _this$ = ecx

; 741  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 742  : 	if(Key>=0&&Key<256)

	cmp	DWORD PTR _Key$[ebp], 0
	jl	SHORT $LN2@IsPressed@2
	cmp	DWORD PTR _Key$[ebp], 256		; 00000100H
	jge	SHORT $LN2@IsPressed@2

; 743  : 		return this->KeyState1[Key];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _Key$[ebp]
	mov	al, BYTE PTR [eax+1]
	jmp	SHORT $LN3@IsPressed@2

; 744  : 	else

	jmp	SHORT $LN3@IsPressed@2
$LN2@IsPressed@2:

; 745  : 		return false;

	xor	al, al
$LN3@IsPressed@2:

; 746  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsPressed@KeyHandler@@QAE_NH@Z ENDP			; KeyHandler::IsPressed
_TEXT	ENDS
PUBLIC	?IntToChar@KeyHandler@@QAEPADH@Z		; KeyHandler::IntToChar
PUBLIC	?GetFirstKey$@KeyHandler@@QAEPADXZ		; KeyHandler::GetFirstKey$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetFirstKey$@KeyHandler@@QAEPADXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?GetFirstKey$@KeyHandler@@QAEPADXZ PROC			; KeyHandler::GetFirstKey$, COMDAT
; _this$ = ecx

; 748  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 749  : 	int i;
; 750  : 
; 751  : 	for(i=0;!this->KeyState1[i]&&i<256;i++);

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@GetFirstKe
$LN4@GetFirstKe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@GetFirstKe:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	jne	SHORT $LN3@GetFirstKe
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	SHORT $LN3@GetFirstKe
	jmp	SHORT $LN4@GetFirstKe
$LN3@GetFirstKe:

; 752  : 
; 753  : 	if(i==256)

	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jne	SHORT $LN2@GetFirstKe

; 754  : 		return this->IntToChar(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntToChar@KeyHandler@@QAEPADH@Z	; KeyHandler::IntToChar
	jmp	SHORT $LN6@GetFirstKe

; 755  : 	else

	jmp	SHORT $LN6@GetFirstKe
$LN2@GetFirstKe:

; 756  : 		return this->IntToChar(i+1);

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntToChar@KeyHandler@@QAEPADH@Z	; KeyHandler::IntToChar
$LN6@GetFirstKe:

; 757  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstKey$@KeyHandler@@QAEPADXZ ENDP			; KeyHandler::GetFirstKey$
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IntToChar@KeyHandler@@QAEPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?IntToChar@KeyHandler@@QAEPADH@Z PROC			; KeyHandler::IntToChar, COMDAT
; _this$ = ecx

; 759  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 760  : 	if(Key<0||Key>256)

	cmp	DWORD PTR _Key$[ebp], 0
	jl	SHORT $LN1@IntToChar
	cmp	DWORD PTR _Key$[ebp], 256		; 00000100H
	jle	SHORT $LN2@IntToChar
$LN1@IntToChar:

; 761  : 		return "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN3@IntToChar
$LN2@IntToChar:

; 762  : 
; 763  : 	return this->Keys[Key];

	mov	eax, DWORD PTR _Key$[ebp]
	imul	eax, 14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax+1281]
$LN3@IntToChar:

; 764  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IntToChar@KeyHandler@@QAEPADH@Z ENDP			; KeyHandler::IntToChar
_TEXT	ENDS
PUBLIC	?MouseBindDown$@KeyHandler@@QAEPADXZ		; KeyHandler::MouseBindDown$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindDown$@KeyHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindDown$@KeyHandler@@QAEPADXZ PROC		; KeyHandler::MouseBindDown$, COMDAT
; _this$ = ecx

; 766  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 767  : 	return this->IntToChar(this->MouseDown+1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4880]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntToChar@KeyHandler@@QAEPADH@Z	; KeyHandler::IntToChar

; 768  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindDown$@KeyHandler@@QAEPADXZ ENDP		; KeyHandler::MouseBindDown$
_TEXT	ENDS
PUBLIC	?MouseBindLeft$@KeyHandler@@QAEPADXZ		; KeyHandler::MouseBindLeft$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindLeft$@KeyHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindLeft$@KeyHandler@@QAEPADXZ PROC		; KeyHandler::MouseBindLeft$, COMDAT
; _this$ = ecx

; 770  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 771  : 	return this->IntToChar(this->MouseLeft+1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4884]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntToChar@KeyHandler@@QAEPADH@Z	; KeyHandler::IntToChar

; 772  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindLeft$@KeyHandler@@QAEPADXZ ENDP		; KeyHandler::MouseBindLeft$
_TEXT	ENDS
PUBLIC	?MouseBindRight$@KeyHandler@@QAEPADXZ		; KeyHandler::MouseBindRight$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindRight$@KeyHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindRight$@KeyHandler@@QAEPADXZ PROC		; KeyHandler::MouseBindRight$, COMDAT
; _this$ = ecx

; 774  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 775  : 	return this->IntToChar(this->MouseRight+1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4888]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntToChar@KeyHandler@@QAEPADH@Z	; KeyHandler::IntToChar

; 776  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindRight$@KeyHandler@@QAEPADXZ ENDP		; KeyHandler::MouseBindRight$
_TEXT	ENDS
PUBLIC	?MouseBindUp$@KeyHandler@@QAEPADXZ		; KeyHandler::MouseBindUp$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindUp$@KeyHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindUp$@KeyHandler@@QAEPADXZ PROC			; KeyHandler::MouseBindUp$, COMDAT
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 	return this->IntToChar(this->MouseUp+1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4900]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntToChar@KeyHandler@@QAEPADH@Z	; KeyHandler::IntToChar

; 780  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindUp$@KeyHandler@@QAEPADXZ ENDP			; KeyHandler::MouseBindUp$
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?CharToInt@KeyHandler@@QAEHPAD@Z
_TEXT	SEGMENT
_i$91635 = -8						; size = 4
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?CharToInt@KeyHandler@@QAEHPAD@Z PROC			; KeyHandler::CharToInt, COMDAT
; _this$ = ecx

; 782  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 783  : 	for(int i=1;i<257;i++)

	mov	DWORD PTR _i$91635[ebp], 1
	jmp	SHORT $LN4@CharToInt
$LN3@CharToInt:
	mov	eax, DWORD PTR _i$91635[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91635[ebp], eax
$LN4@CharToInt:
	cmp	DWORD PTR _i$91635[ebp], 257		; 00000101H
	jge	SHORT $LN2@CharToInt

; 784  : 		if(this->CompareStrings(Key,Keys[i]))

	mov	eax, DWORD PTR _i$91635[ebp]
	imul	eax, 14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1281]
	push	edx
	mov	eax, DWORD PTR _Key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CompareStrings@KeyHandler@@IAE_NPAD0@Z	; KeyHandler::CompareStrings
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@CharToInt

; 785  : 			return i;

	mov	eax, DWORD PTR _i$91635[ebp]
	jmp	SHORT $LN5@CharToInt
$LN1@CharToInt:

; 786  : 
; 787  : 	return 0;

	jmp	SHORT $LN3@CharToInt
$LN2@CharToInt:
	xor	eax, eax
$LN5@CharToInt:

; 788  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?CharToInt@KeyHandler@@QAEHPAD@Z ENDP			; KeyHandler::CharToInt
_TEXT	ENDS
PUBLIC	?GetFirstKey@KeyHandler@@QAEHXZ			; KeyHandler::GetFirstKey
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetFirstKey@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?GetFirstKey@KeyHandler@@QAEHXZ PROC			; KeyHandler::GetFirstKey, COMDAT
; _this$ = ecx

; 790  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 791  : 	int i;
; 792  : 
; 793  : 	for(i=0;!this->KeyState1[i]&&i<256;i++);

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@GetFirstKe@2
$LN4@GetFirstKe@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@GetFirstKe@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	jne	SHORT $LN3@GetFirstKe@2
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jge	SHORT $LN3@GetFirstKe@2
	jmp	SHORT $LN4@GetFirstKe@2
$LN3@GetFirstKe@2:

; 794  : 
; 795  : 	if(i==256)

	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jne	SHORT $LN2@GetFirstKe@2

; 796  : 		return -1;

	or	eax, -1
	jmp	SHORT $LN6@GetFirstKe@2

; 797  : 	else

	jmp	SHORT $LN6@GetFirstKe@2
$LN2@GetFirstKe@2:

; 798  : 		return i;

	mov	eax, DWORD PTR _i$[ebp]
$LN6@GetFirstKe@2:

; 799  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstKey@KeyHandler@@QAEHXZ ENDP			; KeyHandler::GetFirstKey
_TEXT	ENDS
PUBLIC	?GetMouseSpeedX@KeyHandler@@QAEHXZ		; KeyHandler::GetMouseSpeedX
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMouseSpeedX@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseSpeedX@KeyHandler@@QAEHXZ PROC			; KeyHandler::GetMouseSpeedX, COMDAT
; _this$ = ecx

; 801  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 802  : 	return this->MouseSyncX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4892]

; 803  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseSpeedX@KeyHandler@@QAEHXZ ENDP			; KeyHandler::GetMouseSpeedX
_TEXT	ENDS
PUBLIC	?GetMouseSpeedY@KeyHandler@@QAEHXZ		; KeyHandler::GetMouseSpeedY
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMouseSpeedY@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseSpeedY@KeyHandler@@QAEHXZ PROC			; KeyHandler::GetMouseSpeedY, COMDAT
; _this$ = ecx

; 805  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 806  : 	return this->MouseSyncY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4896]

; 807  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseSpeedY@KeyHandler@@QAEHXZ ENDP			; KeyHandler::GetMouseSpeedY
_TEXT	ENDS
PUBLIC	?KeyBound@KeyHandler@@IAEHH@Z			; KeyHandler::KeyBound
; Function compile flags: /Odtp /ZI
;	COMDAT ?KeyBound@KeyHandler@@IAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Binding$ = 8						; size = 4
?KeyBound@KeyHandler@@IAEHH@Z PROC			; KeyHandler::KeyBound, COMDAT
; _this$ = ecx

; 809  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 	if(this->IsPressed(Binding))

	mov	eax, DWORD PTR _Binding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPressed@KeyHandler@@QAE_NH@Z		; KeyHandler::IsPressed
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@KeyBound

; 811  : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN3@KeyBound

; 812  : 	else

	jmp	SHORT $LN3@KeyBound
$LN2@KeyBound:

; 813  : 		return 0;

	xor	eax, eax
$LN3@KeyBound:

; 814  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?KeyBound@KeyHandler@@IAEHH@Z ENDP			; KeyHandler::KeyBound
_TEXT	ENDS
PUBLIC	?MouseBindDown@KeyHandler@@QAEHXZ		; KeyHandler::MouseBindDown
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindDown@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindDown@KeyHandler@@QAEHXZ PROC			; KeyHandler::MouseBindDown, COMDAT
; _this$ = ecx

; 816  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 817  : 	return this->MouseDown;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4880]

; 818  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindDown@KeyHandler@@QAEHXZ ENDP			; KeyHandler::MouseBindDown
_TEXT	ENDS
PUBLIC	?MouseBindLeft@KeyHandler@@QAEHXZ		; KeyHandler::MouseBindLeft
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindLeft@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindLeft@KeyHandler@@QAEHXZ PROC			; KeyHandler::MouseBindLeft, COMDAT
; _this$ = ecx

; 820  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 821  : 	return this->MouseLeft;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4884]

; 822  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindLeft@KeyHandler@@QAEHXZ ENDP			; KeyHandler::MouseBindLeft
_TEXT	ENDS
PUBLIC	?MouseBindRight@KeyHandler@@QAEHXZ		; KeyHandler::MouseBindRight
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindRight@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindRight@KeyHandler@@QAEHXZ PROC			; KeyHandler::MouseBindRight, COMDAT
; _this$ = ecx

; 824  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 825  : 	return this->MouseRight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4888]

; 826  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindRight@KeyHandler@@QAEHXZ ENDP			; KeyHandler::MouseBindRight
_TEXT	ENDS
PUBLIC	?MouseBindUp@KeyHandler@@QAEHXZ			; KeyHandler::MouseBindUp
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindUp@KeyHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindUp@KeyHandler@@QAEHXZ PROC			; KeyHandler::MouseBindUp, COMDAT
; _this$ = ecx

; 828  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 829  : 	return this->MouseUp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4900]

; 830  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindUp@KeyHandler@@QAEHXZ ENDP			; KeyHandler::MouseBindUp
_TEXT	ENDS
PUBLIC	?BindMouse@KeyHandler@@QAEX_N@Z			; KeyHandler::BindMouse
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouse@KeyHandler@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Bind$ = 8						; size = 1
?BindMouse@KeyHandler@@QAEX_N@Z PROC			; KeyHandler::BindMouse, COMDAT
; _this$ = ecx

; 832  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 833  : 	this->Bound=Bind;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _Bind$[ebp]
	mov	BYTE PTR [eax], cl

; 834  : 	
; 835  : 	return;
; 836  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouse@KeyHandler@@QAEX_N@Z ENDP			; KeyHandler::BindMouse
_TEXT	ENDS
PUBLIC	?BindMouseXLeft@KeyHandler@@QAEXPAD@Z		; KeyHandler::BindMouseXLeft
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXLeft@KeyHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_Key$ = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?BindMouseXLeft@KeyHandler@@QAEXPAD@Z PROC		; KeyHandler::BindMouseXLeft, COMDAT
; _this$ = ecx

; 838  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 839  : 	int Key=this->CharToInt(i)-1;

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInt@KeyHandler@@QAEHPAD@Z	; KeyHandler::CharToInt
	sub	eax, 1
	mov	DWORD PTR _Key$[ebp], eax

; 840  : 
; 841  : 	if(Key<0||Key>=256)

	js	SHORT $LN1@BindMouseX
	cmp	DWORD PTR _Key$[ebp], 256		; 00000100H
	jl	SHORT $LN2@BindMouseX
$LN1@BindMouseX:

; 842  : 		return;

	jmp	SHORT $LN3@BindMouseX
$LN2@BindMouseX:

; 843  : 
; 844  : 	this->MouseLeft=Key;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Key$[ebp]
	mov	DWORD PTR [eax+4884], ecx
$LN3@BindMouseX:

; 845  : 
; 846  : 	return;
; 847  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseXLeft@KeyHandler@@QAEXPAD@Z ENDP		; KeyHandler::BindMouseXLeft
_TEXT	ENDS
PUBLIC	?BindMouseXLeft@KeyHandler@@QAEXH@Z		; KeyHandler::BindMouseXLeft
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXLeft@KeyHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?BindMouseXLeft@KeyHandler@@QAEXH@Z PROC		; KeyHandler::BindMouseXLeft, COMDAT
; _this$ = ecx

; 849  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 850  : 	if(Key<0||Key>=256)

	cmp	DWORD PTR _Key$[ebp], 0
	jl	SHORT $LN1@BindMouseX@2
	cmp	DWORD PTR _Key$[ebp], 256		; 00000100H
	jl	SHORT $LN2@BindMouseX@2
$LN1@BindMouseX@2:

; 851  : 		return;

	jmp	SHORT $LN3@BindMouseX@2
$LN2@BindMouseX@2:

; 852  : 
; 853  : 	this->MouseLeft=Key;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Key$[ebp]
	mov	DWORD PTR [eax+4884], ecx
$LN3@BindMouseX@2:

; 854  : 
; 855  : 	return;
; 856  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseXLeft@KeyHandler@@QAEXH@Z ENDP		; KeyHandler::BindMouseXLeft
_TEXT	ENDS
PUBLIC	?BindMouseXRight@KeyHandler@@QAEXPAD@Z		; KeyHandler::BindMouseXRight
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXRight@KeyHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_Key$ = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?BindMouseXRight@KeyHandler@@QAEXPAD@Z PROC		; KeyHandler::BindMouseXRight, COMDAT
; _this$ = ecx

; 858  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 859  : 	int Key=this->CharToInt(i)-1;

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInt@KeyHandler@@QAEHPAD@Z	; KeyHandler::CharToInt
	sub	eax, 1
	mov	DWORD PTR _Key$[ebp], eax

; 860  : 
; 861  : 	if(Key<0||Key>=256)

	js	SHORT $LN1@BindMouseX@3
	cmp	DWORD PTR _Key$[ebp], 256		; 00000100H
	jl	SHORT $LN2@BindMouseX@3
$LN1@BindMouseX@3:

; 862  : 		return;

	jmp	SHORT $LN3@BindMouseX@3
$LN2@BindMouseX@3:

; 863  : 
; 864  : 	this->MouseRight=Key;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Key$[ebp]
	mov	DWORD PTR [eax+4888], ecx
$LN3@BindMouseX@3:

; 865  : 
; 866  : 	return;
; 867  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseXRight@KeyHandler@@QAEXPAD@Z ENDP		; KeyHandler::BindMouseXRight
_TEXT	ENDS
PUBLIC	?BindMouseXRight@KeyHandler@@QAEXH@Z		; KeyHandler::BindMouseXRight
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXRight@KeyHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?BindMouseXRight@KeyHandler@@QAEXH@Z PROC		; KeyHandler::BindMouseXRight, COMDAT
; _this$ = ecx

; 869  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 870  : 	if(Key<0||Key>=256)

	cmp	DWORD PTR _Key$[ebp], 0
	jl	SHORT $LN1@BindMouseX@4
	cmp	DWORD PTR _Key$[ebp], 256		; 00000100H
	jl	SHORT $LN2@BindMouseX@4
$LN1@BindMouseX@4:

; 871  : 		return;

	jmp	SHORT $LN3@BindMouseX@4
$LN2@BindMouseX@4:

; 872  : 
; 873  : 	this->MouseRight=Key;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Key$[ebp]
	mov	DWORD PTR [eax+4888], ecx
$LN3@BindMouseX@4:

; 874  : 
; 875  : 	return;
; 876  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseXRight@KeyHandler@@QAEXH@Z ENDP		; KeyHandler::BindMouseXRight
_TEXT	ENDS
PUBLIC	?BindMouseYDown@KeyHandler@@QAEXPAD@Z		; KeyHandler::BindMouseYDown
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYDown@KeyHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_Key$ = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?BindMouseYDown@KeyHandler@@QAEXPAD@Z PROC		; KeyHandler::BindMouseYDown, COMDAT
; _this$ = ecx

; 878  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 879  : 	int Key=this->CharToInt(i)-1;

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInt@KeyHandler@@QAEHPAD@Z	; KeyHandler::CharToInt
	sub	eax, 1
	mov	DWORD PTR _Key$[ebp], eax

; 880  : 
; 881  : 	if(Key<0||Key>=256)

	js	SHORT $LN1@BindMouseY
	cmp	DWORD PTR _Key$[ebp], 256		; 00000100H
	jl	SHORT $LN2@BindMouseY
$LN1@BindMouseY:

; 882  : 		return;

	jmp	SHORT $LN3@BindMouseY
$LN2@BindMouseY:

; 883  : 
; 884  : 	this->MouseDown=Key;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Key$[ebp]
	mov	DWORD PTR [eax+4880], ecx
$LN3@BindMouseY:

; 885  : 
; 886  : 	return;
; 887  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseYDown@KeyHandler@@QAEXPAD@Z ENDP		; KeyHandler::BindMouseYDown
_TEXT	ENDS
PUBLIC	?BindMouseYDown@KeyHandler@@QAEXH@Z		; KeyHandler::BindMouseYDown
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYDown@KeyHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?BindMouseYDown@KeyHandler@@QAEXH@Z PROC		; KeyHandler::BindMouseYDown, COMDAT
; _this$ = ecx

; 889  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 890  : 	if(Key<0||Key>=256)

	cmp	DWORD PTR _Key$[ebp], 0
	jl	SHORT $LN1@BindMouseY@2
	cmp	DWORD PTR _Key$[ebp], 256		; 00000100H
	jl	SHORT $LN2@BindMouseY@2
$LN1@BindMouseY@2:

; 891  : 		return;

	jmp	SHORT $LN3@BindMouseY@2
$LN2@BindMouseY@2:

; 892  : 
; 893  : 	this->MouseDown=Key;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Key$[ebp]
	mov	DWORD PTR [eax+4880], ecx
$LN3@BindMouseY@2:

; 894  : 
; 895  : 	return;
; 896  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseYDown@KeyHandler@@QAEXH@Z ENDP		; KeyHandler::BindMouseYDown
_TEXT	ENDS
PUBLIC	?BindMouseYUp@KeyHandler@@QAEXPAD@Z		; KeyHandler::BindMouseYUp
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYUp@KeyHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_Key$ = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?BindMouseYUp@KeyHandler@@QAEXPAD@Z PROC		; KeyHandler::BindMouseYUp, COMDAT
; _this$ = ecx

; 898  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 899  : 	int Key=this->CharToInt(i)-1;

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInt@KeyHandler@@QAEHPAD@Z	; KeyHandler::CharToInt
	sub	eax, 1
	mov	DWORD PTR _Key$[ebp], eax

; 900  : 
; 901  : 	if(Key<0||Key>=256)

	js	SHORT $LN1@BindMouseY@3
	cmp	DWORD PTR _Key$[ebp], 256		; 00000100H
	jl	SHORT $LN2@BindMouseY@3
$LN1@BindMouseY@3:

; 902  : 		return;

	jmp	SHORT $LN3@BindMouseY@3
$LN2@BindMouseY@3:

; 903  : 
; 904  : 	this->MouseUp=Key;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Key$[ebp]
	mov	DWORD PTR [eax+4900], ecx
$LN3@BindMouseY@3:

; 905  : 
; 906  : 	return;
; 907  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseYUp@KeyHandler@@QAEXPAD@Z ENDP		; KeyHandler::BindMouseYUp
_TEXT	ENDS
PUBLIC	?BindMouseYUp@KeyHandler@@QAEXH@Z		; KeyHandler::BindMouseYUp
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYUp@KeyHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Key$ = 8						; size = 4
?BindMouseYUp@KeyHandler@@QAEXH@Z PROC			; KeyHandler::BindMouseYUp, COMDAT
; _this$ = ecx

; 909  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 910  : 	if(Key<0||Key>=256)

	cmp	DWORD PTR _Key$[ebp], 0
	jl	SHORT $LN1@BindMouseY@4
	cmp	DWORD PTR _Key$[ebp], 256		; 00000100H
	jl	SHORT $LN2@BindMouseY@4
$LN1@BindMouseY@4:

; 911  : 		return;

	jmp	SHORT $LN3@BindMouseY@4
$LN2@BindMouseY@4:

; 912  : 
; 913  : 	this->MouseUp=Key;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Key$[ebp]
	mov	DWORD PTR [eax+4900], ecx
$LN3@BindMouseY@4:

; 914  : 
; 915  : 	return;
; 916  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseYUp@KeyHandler@@QAEXH@Z ENDP			; KeyHandler::BindMouseYUp
_TEXT	ENDS
PUBLIC	?SetMouse@KeyHandler@@QAEXPAVMouseHandler@@@Z	; KeyHandler::SetMouse
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouse@KeyHandler@@QAEXPAVMouseHandler@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Mouse$ = 8						; size = 4
?SetMouse@KeyHandler@@QAEXPAVMouseHandler@@@Z PROC	; KeyHandler::SetMouse, COMDAT
; _this$ = ecx

; 918  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 919  : 	this->CurrentMouse=Mouse;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Mouse$[ebp]
	mov	DWORD PTR [eax+4904], ecx

; 920  : 
; 921  : 	if(Mouse!=NULL)

	cmp	DWORD PTR _Mouse$[ebp], 0
	je	SHORT $LN2@SetMouse

; 922  : 		this->Bound=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1

; 923  : 	else

	jmp	SHORT $LN3@SetMouse
$LN2@SetMouse:

; 924  : 		this->Bound=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
$LN3@SetMouse:

; 925  : 
; 926  : 	return;
; 927  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouse@KeyHandler@@QAEXPAVMouseHandler@@@Z ENDP	; KeyHandler::SetMouse
_TEXT	ENDS
PUBLIC	?SetMouseSpeedX@KeyHandler@@QAEXH@Z		; KeyHandler::SetMouseSpeedX
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouseSpeedX@KeyHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
?SetMouseSpeedX@KeyHandler@@QAEXH@Z PROC		; KeyHandler::SetMouseSpeedX, COMDAT
; _this$ = ecx

; 929  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 930  : 	if(X<0)

	cmp	DWORD PTR _X$[ebp], 0
	jge	SHORT $LN1@SetMouseSp

; 931  : 		return;

	jmp	SHORT $LN2@SetMouseSp
$LN1@SetMouseSp:

; 932  : 
; 933  : 	this->MouseSyncX=X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _X$[ebp]
	mov	DWORD PTR [eax+4892], ecx
$LN2@SetMouseSp:

; 934  : 
; 935  : 	return;
; 936  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseSpeedX@KeyHandler@@QAEXH@Z ENDP		; KeyHandler::SetMouseSpeedX
_TEXT	ENDS
PUBLIC	?SetMouseSpeedY@KeyHandler@@QAEXH@Z		; KeyHandler::SetMouseSpeedY
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouseSpeedY@KeyHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Y$ = 8							; size = 4
?SetMouseSpeedY@KeyHandler@@QAEXH@Z PROC		; KeyHandler::SetMouseSpeedY, COMDAT
; _this$ = ecx

; 938  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 939  : 	if(Y<0)

	cmp	DWORD PTR _Y$[ebp], 0
	jge	SHORT $LN1@SetMouseSp@2

; 940  : 		return;

	jmp	SHORT $LN2@SetMouseSp@2
$LN1@SetMouseSp@2:

; 941  : 
; 942  : 	this->MouseSyncY=Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Y$[ebp]
	mov	DWORD PTR [eax+4896], ecx
$LN2@SetMouseSp@2:

; 943  : 
; 944  : 	return;
; 945  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseSpeedY@KeyHandler@@QAEXH@Z ENDP		; KeyHandler::SetMouseSpeedY
_TEXT	ENDS
PUBLIC	?Update@KeyHandler@@QAEXXZ			; KeyHandler::Update
EXTRN	?dbKeyState@@YAHH@Z:PROC			; dbKeyState
; Function compile flags: /Odtp /ZI
;	COMDAT ?Update@KeyHandler@@QAEXXZ
_TEXT	SEGMENT
_i$91752 = -12						; size = 4
_i$91748 = -8						; size = 4
_this$ = -4						; size = 4
?Update@KeyHandler@@QAEXXZ PROC				; KeyHandler::Update, COMDAT
; _this$ = ecx

; 947  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 948  : 	for(int i=255;i>=0;i--)

	mov	DWORD PTR _i$91748[ebp], 255		; 000000ffH
	jmp	SHORT $LN9@Update@2
$LN8@Update@2:
	mov	eax, DWORD PTR _i$91748[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$91748[ebp], eax
$LN9@Update@2:
	cmp	DWORD PTR _i$91748[ebp], 0
	jl	SHORT $LN7@Update@2

; 949  : 	{
; 950  : 		KeyState5[i]=KeyState4[i];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91748[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$91748[ebp]
	mov	dl, BYTE PTR [ecx+769]
	mov	BYTE PTR [eax+1025], dl

; 951  : 		KeyState4[i]=KeyState3[i];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91748[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$91748[ebp]
	mov	dl, BYTE PTR [ecx+513]
	mov	BYTE PTR [eax+769], dl

; 952  : 		KeyState3[i]=KeyState2[i];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91748[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$91748[ebp]
	mov	dl, BYTE PTR [ecx+257]
	mov	BYTE PTR [eax+513], dl

; 953  : 		KeyState2[i]=KeyState1[i];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$91748[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$91748[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+257], dl

; 954  : 	}

	jmp	SHORT $LN8@Update@2
$LN7@Update@2:

; 955  : 
; 956  : 	for(int i=1;i<257;i++)

	mov	DWORD PTR _i$91752[ebp], 1
	jmp	SHORT $LN6@Update@2
$LN5@Update@2:
	mov	eax, DWORD PTR _i$91752[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91752[ebp], eax
$LN6@Update@2:
	cmp	DWORD PTR _i$91752[ebp], 257		; 00000101H
	jge	SHORT $LN4@Update@2

; 957  : 		KeyState1[i-1]=dbKeyState(i);

	mov	eax, DWORD PTR _i$91752[ebp]
	push	eax
	call	?dbKeyState@@YAHH@Z			; dbKeyState
	add	esp, 4
	test	eax, eax
	setne	cl
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$91752[ebp]
	mov	BYTE PTR [edx], cl
	jmp	SHORT $LN5@Update@2
$LN4@Update@2:

; 958  : 
; 959  : 	if(this->CurrentMouse!=NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4904], 0
	je	$LN10@Update@2

; 960  : 		if(this->Bound||this->CurrentMouse->GetCursorName()!="")

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN1@Update@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4904]
	call	?GetCursorName@MouseHandler@@QAEPADXZ	; MouseHandler::GetCursorName
	cmp	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	$LN10@Update@2
$LN1@Update@2:

; 961  : 			this->CurrentMouse->MoveMouse(this->MouseSyncX*this->KeyBound(this->MouseRight)-this->MouseSyncX*this->KeyBound(this->MouseLeft),this->MouseSyncY*this->KeyBound(this->MouseDown)-this->MouseSyncY*this->KeyBound(this->MouseUp),0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4880]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?KeyBound@KeyHandler@@IAEHH@Z		; KeyHandler::KeyBound
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, eax
	imul	esi, DWORD PTR [edx+4896]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4900]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?KeyBound@KeyHandler@@IAEHH@Z		; KeyHandler::KeyBound
	mov	edx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [edx+4896]
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4888]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?KeyBound@KeyHandler@@IAEHH@Z		; KeyHandler::KeyBound
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, eax
	imul	esi, DWORD PTR [edx+4892]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4884]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?KeyBound@KeyHandler@@IAEHH@Z		; KeyHandler::KeyBound
	mov	edx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [edx+4892]
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4904]
	call	?MoveMouse@MouseHandler@@QAEXHHH@Z	; MouseHandler::MoveMouse
$LN10@Update@2:

; 962  : 
; 963  : 	return;
; 964  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Update@KeyHandler@@QAEXXZ ENDP				; KeyHandler::Update
_TEXT	ENDS
PUBLIC	??0DeviceHandler@@QAE@XZ			; DeviceHandler::DeviceHandler
EXTRN	?dbEmptyChecklist@@YAXXZ:PROC			; dbEmptyChecklist
EXTRN	?dbChecklistValueA@@YAHH@Z:PROC			; dbChecklistValueA
EXTRN	?dbSetControlDevice@@YAXPAD@Z:PROC		; dbSetControlDevice
EXTRN	?dbChecklistString@@YAPADH@Z:PROC		; dbChecklistString
EXTRN	?dbPerformChecklistControlDevices@@YAXXZ:PROC	; dbPerformChecklistControlDevices
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DeviceHandler@@QAE@XZ
_TEXT	SEGMENT
_i$91778 = -24						; size = 4
_j$91774 = -20						; size = 4
_i$91770 = -16						; size = 4
_j$91766 = -12						; size = 4
_i$91762 = -8						; size = 4
_this$ = -4						; size = 4
??0DeviceHandler@@QAE@XZ PROC				; DeviceHandler::DeviceHandler, COMDAT
; _this$ = ecx

; 969  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 970  : 	this->MouseSyncX=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3232], 0

; 971  : 	this->MouseSyncY=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3236], 0

; 972  : 	this->PercentBindX=1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+3208]

; 973  : 	this->PercentBindY=1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+3212]

; 974  : 	this->MouseDown=-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3220], -1

; 975  : 	this->MouseLeft=-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3224], -1

; 976  : 	this->MouseRight=-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3228], -1

; 977  : 	this->MouseUp=-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3240], -1

; 978  : 	this->CurrentMouse=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8844], 0

; 979  : 	this->Bound=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0

; 980  : 
; 981  : 	for(int i=0;i<100;i++)

	mov	DWORD PTR _i$91762[ebp], 0
	jmp	SHORT $LN22@DeviceHand
$LN21@DeviceHand:
	mov	eax, DWORD PTR _i$91762[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91762[ebp], eax
$LN22@DeviceHand:
	cmp	DWORD PTR _i$91762[ebp], 100		; 00000064H
	jge	SHORT $LN20@DeviceHand

; 982  : 		for(int j=0;j<32;j++)

	mov	DWORD PTR _j$91766[ebp], 0
	jmp	SHORT $LN19@DeviceHand
$LN18@DeviceHand:
	mov	eax, DWORD PTR _j$91766[ebp]
	add	eax, 1
	mov	DWORD PTR _j$91766[ebp], eax
$LN19@DeviceHand:
	cmp	DWORD PTR _j$91766[ebp], 32		; 00000020H
	jge	SHORT $LN17@DeviceHand

; 983  : 			this->Buttons[j][i]=false;

	mov	eax, DWORD PTR _j$91766[ebp]
	imul	eax, 100				; 00000064H
	add	eax, DWORD PTR _i$91762[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+3], 0
	jmp	SHORT $LN18@DeviceHand
$LN17@DeviceHand:
	jmp	SHORT $LN21@DeviceHand
$LN20@DeviceHand:

; 984  : 
; 985  : 	for(int i=0;i<100;i++)

	mov	DWORD PTR _i$91770[ebp], 0
	jmp	SHORT $LN16@DeviceHand
$LN15@DeviceHand:
	mov	eax, DWORD PTR _i$91770[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91770[ebp], eax
$LN16@DeviceHand:
	cmp	DWORD PTR _i$91770[ebp], 100		; 00000064H
	jge	SHORT $LN14@DeviceHand

; 986  : 		for(int j=0;j<4;j++)

	mov	DWORD PTR _j$91774[ebp], 0
	jmp	SHORT $LN13@DeviceHand
$LN12@DeviceHand:
	mov	eax, DWORD PTR _j$91774[ebp]
	add	eax, 1
	mov	DWORD PTR _j$91774[ebp], eax
$LN13@DeviceHand:
	cmp	DWORD PTR _j$91774[ebp], 4
	jge	SHORT $LN11@DeviceHand

; 987  : 			this->HatAngles[j][i]=-1;

	mov	eax, DWORD PTR _j$91774[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4444]
	mov	eax, DWORD PTR _i$91770[ebp]
	mov	DWORD PTR [edx+eax*4], -1
	jmp	SHORT $LN12@DeviceHand
$LN11@DeviceHand:
	jmp	SHORT $LN15@DeviceHand
$LN14@DeviceHand:

; 988  : 
; 989  : 	for(int i=0;i<100;i++)

	mov	DWORD PTR _i$91778[ebp], 0
	jmp	SHORT $LN10@DeviceHand
$LN9@DeviceHand:
	mov	eax, DWORD PTR _i$91778[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91778[ebp], eax
$LN10@DeviceHand:
	cmp	DWORD PTR _i$91778[ebp], 100		; 00000064H
	jge	$LN8@DeviceHand

; 990  : 	{
; 991  : 		this->JoyStickSliderA[i]=0;

	mov	eax, DWORD PTR _i$91778[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+6044], 0

; 992  : 		this->JoyStickSliderB[i]=0;

	mov	eax, DWORD PTR _i$91778[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+6444], 0

; 993  : 		this->JoyStickSliderC[i]=0;

	mov	eax, DWORD PTR _i$91778[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+6844], 0

; 994  : 		this->JoyStickSliderD[i]=0;

	mov	eax, DWORD PTR _i$91778[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+7244], 0

; 995  : 		this->JoyStickTwistX[i]=0;

	mov	eax, DWORD PTR _i$91778[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+7644], 0

; 996  : 		this->JoyStickTwistY[i]=0;

	mov	eax, DWORD PTR _i$91778[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+8044], 0

; 997  : 		this->JoyStickTwistZ[i]=0;

	mov	eax, DWORD PTR _i$91778[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+8444], 0

; 998  : 		this->JoyStickX[i]=0;

	mov	eax, DWORD PTR _i$91778[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+3244], 0

; 999  : 		this->JoyStickY[i]=0;

	mov	eax, DWORD PTR _i$91778[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+3644], 0

; 1000 : 		this->JoyStickZ[i]=0;

	mov	eax, DWORD PTR _i$91778[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+4044], 0

; 1001 : 	}

	jmp	$LN9@DeviceHand
$LN8@DeviceHand:

; 1002 : 
; 1003 : 	dbPerformChecklistControlDevices();

	call	?dbPerformChecklistControlDevices@@YAXXZ ; dbPerformChecklistControlDevices

; 1004 : 	for(this->CurrentDevice=1;dbChecklistString(this->CurrentDevice)==NULL;this->CurrentDevice++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3216], 1
	jmp	SHORT $LN7@DeviceHand
$LN6@DeviceHand:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3216]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3216], ecx
$LN7@DeviceHand:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3216]
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@DeviceHand
	jmp	SHORT $LN6@DeviceHand
$LN5@DeviceHand:

; 1005 : 	this->CurrentDevice$=dbChecklistString(this->CurrentDevice);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3216]
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3204], eax

; 1006 : 	if(this->CurrentDevice$!=NULL&&this->CurrentDevice$!="")

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+3204], 0
	je	SHORT $LN4@DeviceHand
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+3204], OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	SHORT $LN4@DeviceHand

; 1007 : 		dbSetControlDevice(this->CurrentDevice$);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3204]
	push	ecx
	call	?dbSetControlDevice@@YAXPAD@Z		; dbSetControlDevice
	add	esp, 4

; 1008 : 	else

	jmp	SHORT $LN3@DeviceHand
$LN4@DeviceHand:

; 1009 : 		this->CurrentDevice=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3216], 0
$LN3@DeviceHand:

; 1010 : 	if(dbChecklistValueA(this->CurrentDevice)==1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3216]
	push	ecx
	call	?dbChecklistValueA@@YAHH@Z		; dbChecklistValueA
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN2@DeviceHand

; 1011 : 	{
; 1012 : 		this->ForceFeedback=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 1013 : 		this->ForceFeedbackOn=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2], 1

; 1014 : 	}
; 1015 : 	else

	jmp	SHORT $LN1@DeviceHand
$LN2@DeviceHand:

; 1016 : 	{
; 1017 : 		this->ForceFeedback=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0

; 1018 : 		this->ForceFeedbackOn=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2], 0
$LN1@DeviceHand:

; 1019 : 	}
; 1020 : 	dbEmptyChecklist();

	call	?dbEmptyChecklist@@YAXXZ		; dbEmptyChecklist

; 1021 : 
; 1022 : 	return;
; 1023 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0DeviceHandler@@QAE@XZ ENDP				; DeviceHandler::DeviceHandler
_TEXT	ENDS
PUBLIC	?CharToInputInt@DeviceHandler@@QAEHPAD@Z	; DeviceHandler::CharToInputInt
PUBLIC	??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMPAD111@Z ; DeviceHandler::DeviceHandler
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMPAD111@Z
_TEXT	SEGMENT
_i$91817 = -24						; size = 4
_j$91813 = -20						; size = 4
_i$91809 = -16						; size = 4
_j$91805 = -12						; size = 4
_i$91801 = -8						; size = 4
_this$ = -4						; size = 4
_Mouse$ = 8						; size = 4
_XSpeed$ = 12						; size = 4
_YSpeed$ = 16						; size = 4
_PercentXBind$ = 20					; size = 4
_PercentYBind$ = 24					; size = 4
_Down$ = 28						; size = 4
_Left$ = 32						; size = 4
_Right$ = 36						; size = 4
_Up$ = 40						; size = 4
??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMPAD111@Z PROC ; DeviceHandler::DeviceHandler, COMDAT
; _this$ = ecx

; 1025 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1026 : 	this->MouseSyncX=XSpeed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _XSpeed$[ebp]
	mov	DWORD PTR [eax+3232], ecx

; 1027 : 	this->MouseSyncY=YSpeed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _YSpeed$[ebp]
	mov	DWORD PTR [eax+3236], ecx

; 1028 : 	this->PercentBindX=PercentXBind;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _PercentXBind$[ebp]
	fstp	DWORD PTR [eax+3208]

; 1029 : 	this->PercentBindY=PercentYBind;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _PercentYBind$[ebp]
	fstp	DWORD PTR [eax+3212]

; 1030 : 	this->MouseDown=this->CharToInputInt(Down);

	mov	eax, DWORD PTR _Down$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3220], eax

; 1031 : 	this->MouseLeft=this->CharToInputInt(Left);

	mov	eax, DWORD PTR _Left$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3224], eax

; 1032 : 	this->MouseRight=this->CharToInputInt(Right);

	mov	eax, DWORD PTR _Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3228], eax

; 1033 : 	this->MouseUp=this->CharToInputInt(Up);

	mov	eax, DWORD PTR _Up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3240], eax

; 1034 : 	this->CurrentMouse=Mouse;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Mouse$[ebp]
	mov	DWORD PTR [eax+8844], ecx

; 1035 : 	this->Bound=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1

; 1036 : 
; 1037 : 	for(int i=0;i<100;i++)

	mov	DWORD PTR _i$91801[ebp], 0
	jmp	SHORT $LN19@DeviceHand@2
$LN18@DeviceHand@2:
	mov	eax, DWORD PTR _i$91801[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91801[ebp], eax
$LN19@DeviceHand@2:
	cmp	DWORD PTR _i$91801[ebp], 100		; 00000064H
	jge	SHORT $LN17@DeviceHand@2

; 1038 : 		for(int j=0;j<32;j++)

	mov	DWORD PTR _j$91805[ebp], 0
	jmp	SHORT $LN16@DeviceHand@2
$LN15@DeviceHand@2:
	mov	eax, DWORD PTR _j$91805[ebp]
	add	eax, 1
	mov	DWORD PTR _j$91805[ebp], eax
$LN16@DeviceHand@2:
	cmp	DWORD PTR _j$91805[ebp], 32		; 00000020H
	jge	SHORT $LN14@DeviceHand@2

; 1039 : 			this->Buttons[j][i]=false;

	mov	eax, DWORD PTR _j$91805[ebp]
	imul	eax, 100				; 00000064H
	add	eax, DWORD PTR _i$91801[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+3], 0
	jmp	SHORT $LN15@DeviceHand@2
$LN14@DeviceHand@2:
	jmp	SHORT $LN18@DeviceHand@2
$LN17@DeviceHand@2:

; 1040 : 
; 1041 : 	for(int i=0;i<100;i++)

	mov	DWORD PTR _i$91809[ebp], 0
	jmp	SHORT $LN13@DeviceHand@2
$LN12@DeviceHand@2:
	mov	eax, DWORD PTR _i$91809[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91809[ebp], eax
$LN13@DeviceHand@2:
	cmp	DWORD PTR _i$91809[ebp], 100		; 00000064H
	jge	SHORT $LN11@DeviceHand@2

; 1042 : 		for(int j=0;j<4;j++)

	mov	DWORD PTR _j$91813[ebp], 0
	jmp	SHORT $LN10@DeviceHand@2
$LN9@DeviceHand@2:
	mov	eax, DWORD PTR _j$91813[ebp]
	add	eax, 1
	mov	DWORD PTR _j$91813[ebp], eax
$LN10@DeviceHand@2:
	cmp	DWORD PTR _j$91813[ebp], 4
	jge	SHORT $LN8@DeviceHand@2

; 1043 : 			this->HatAngles[j][i]=-1;

	mov	eax, DWORD PTR _j$91813[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4444]
	mov	eax, DWORD PTR _i$91809[ebp]
	mov	DWORD PTR [edx+eax*4], -1
	jmp	SHORT $LN9@DeviceHand@2
$LN8@DeviceHand@2:
	jmp	SHORT $LN12@DeviceHand@2
$LN11@DeviceHand@2:

; 1044 : 
; 1045 : 	for(int i=0;i<100;i++)

	mov	DWORD PTR _i$91817[ebp], 0
	jmp	SHORT $LN7@DeviceHand@2
$LN6@DeviceHand@2:
	mov	eax, DWORD PTR _i$91817[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91817[ebp], eax
$LN7@DeviceHand@2:
	cmp	DWORD PTR _i$91817[ebp], 100		; 00000064H
	jge	$LN5@DeviceHand@2

; 1046 : 	{
; 1047 : 		this->JoyStickSliderA[i]=0;

	mov	eax, DWORD PTR _i$91817[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+6044], 0

; 1048 : 		this->JoyStickSliderB[i]=0;

	mov	eax, DWORD PTR _i$91817[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+6444], 0

; 1049 : 		this->JoyStickSliderC[i]=0;

	mov	eax, DWORD PTR _i$91817[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+6844], 0

; 1050 : 		this->JoyStickSliderD[i]=0;

	mov	eax, DWORD PTR _i$91817[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+7244], 0

; 1051 : 		this->JoyStickTwistX[i]=0;

	mov	eax, DWORD PTR _i$91817[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+7644], 0

; 1052 : 		this->JoyStickTwistY[i]=0;

	mov	eax, DWORD PTR _i$91817[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+8044], 0

; 1053 : 		this->JoyStickTwistZ[i]=0;

	mov	eax, DWORD PTR _i$91817[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+8444], 0

; 1054 : 		this->JoyStickX[i]=0;

	mov	eax, DWORD PTR _i$91817[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+3244], 0

; 1055 : 		this->JoyStickY[i]=0;

	mov	eax, DWORD PTR _i$91817[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+3644], 0

; 1056 : 		this->JoyStickZ[i]=0;

	mov	eax, DWORD PTR _i$91817[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+4044], 0

; 1057 : 	}

	jmp	$LN6@DeviceHand@2
$LN5@DeviceHand@2:

; 1058 : 
; 1059 : 	dbPerformChecklistControlDevices();

	call	?dbPerformChecklistControlDevices@@YAXXZ ; dbPerformChecklistControlDevices

; 1060 : 	this->CurrentDevice=1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3216], 1

; 1061 : 	this->CurrentDevice$=dbChecklistString(this->CurrentDevice);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3216]
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3204], eax

; 1062 : 	if(this->CurrentDevice$!=NULL&&this->CurrentDevice$!="")

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+3204], 0
	je	SHORT $LN4@DeviceHand@2
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+3204], OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	SHORT $LN4@DeviceHand@2

; 1063 : 		dbSetControlDevice(this->CurrentDevice$);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3204]
	push	ecx
	call	?dbSetControlDevice@@YAXPAD@Z		; dbSetControlDevice
	add	esp, 4

; 1064 : 	else

	jmp	SHORT $LN3@DeviceHand@2
$LN4@DeviceHand@2:

; 1065 : 		this->CurrentDevice=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3216], 0
$LN3@DeviceHand@2:

; 1066 : 	if(dbChecklistValueA(this->CurrentDevice)==1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3216]
	push	ecx
	call	?dbChecklistValueA@@YAHH@Z		; dbChecklistValueA
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN2@DeviceHand@2

; 1067 : 	{
; 1068 : 		this->ForceFeedback=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 1069 : 		this->ForceFeedbackOn=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2], 1

; 1070 : 	}
; 1071 : 	else

	jmp	SHORT $LN1@DeviceHand@2
$LN2@DeviceHand@2:

; 1072 : 	{
; 1073 : 		this->ForceFeedback=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0

; 1074 : 		this->ForceFeedbackOn=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2], 0
$LN1@DeviceHand@2:

; 1075 : 	}
; 1076 : 	dbEmptyChecklist();

	call	?dbEmptyChecklist@@YAXXZ		; dbEmptyChecklist

; 1077 : 
; 1078 : 	return;
; 1079 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMPAD111@Z ENDP ; DeviceHandler::DeviceHandler
_TEXT	ENDS
PUBLIC	??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMHHHH@Z ; DeviceHandler::DeviceHandler
; Function compile flags: /Odtp /ZI
;	COMDAT ??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMHHHH@Z
_TEXT	SEGMENT
_i$91853 = -24						; size = 4
_j$91849 = -20						; size = 4
_i$91845 = -16						; size = 4
_j$91841 = -12						; size = 4
_i$91837 = -8						; size = 4
_this$ = -4						; size = 4
_Mouse$ = 8						; size = 4
_XSpeed$ = 12						; size = 4
_YSpeed$ = 16						; size = 4
_PercentXBind$ = 20					; size = 4
_PercentYBind$ = 24					; size = 4
_Down$ = 28						; size = 4
_Left$ = 32						; size = 4
_Right$ = 36						; size = 4
_Up$ = 40						; size = 4
??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMHHHH@Z PROC	; DeviceHandler::DeviceHandler, COMDAT
; _this$ = ecx

; 1081 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1082 : 	this->MouseSyncX=XSpeed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _XSpeed$[ebp]
	mov	DWORD PTR [eax+3232], ecx

; 1083 : 	this->MouseSyncY=YSpeed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _YSpeed$[ebp]
	mov	DWORD PTR [eax+3236], ecx

; 1084 : 	this->PercentBindX=PercentXBind;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _PercentXBind$[ebp]
	fstp	DWORD PTR [eax+3208]

; 1085 : 	this->PercentBindY=PercentYBind;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _PercentYBind$[ebp]
	fstp	DWORD PTR [eax+3212]

; 1086 : 	this->MouseDown=Down;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Down$[ebp]
	mov	DWORD PTR [eax+3220], ecx

; 1087 : 	this->MouseLeft=Left;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Left$[ebp]
	mov	DWORD PTR [eax+3224], ecx

; 1088 : 	this->MouseRight=Right;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Right$[ebp]
	mov	DWORD PTR [eax+3228], ecx

; 1089 : 	this->MouseUp=Up;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Up$[ebp]
	mov	DWORD PTR [eax+3240], ecx

; 1090 : 	this->CurrentMouse=Mouse;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Mouse$[ebp]
	mov	DWORD PTR [eax+8844], ecx

; 1091 : 	this->Bound=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1

; 1092 : 
; 1093 : 	for(int i=0;i<100;i++)

	mov	DWORD PTR _i$91837[ebp], 0
	jmp	SHORT $LN22@DeviceHand@3
$LN21@DeviceHand@3:
	mov	eax, DWORD PTR _i$91837[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91837[ebp], eax
$LN22@DeviceHand@3:
	cmp	DWORD PTR _i$91837[ebp], 100		; 00000064H
	jge	SHORT $LN20@DeviceHand@3

; 1094 : 		for(int j=0;j<32;j++)

	mov	DWORD PTR _j$91841[ebp], 0
	jmp	SHORT $LN19@DeviceHand@3
$LN18@DeviceHand@3:
	mov	eax, DWORD PTR _j$91841[ebp]
	add	eax, 1
	mov	DWORD PTR _j$91841[ebp], eax
$LN19@DeviceHand@3:
	cmp	DWORD PTR _j$91841[ebp], 32		; 00000020H
	jge	SHORT $LN17@DeviceHand@3

; 1095 : 			this->Buttons[j][i]=false;

	mov	eax, DWORD PTR _j$91841[ebp]
	imul	eax, 100				; 00000064H
	add	eax, DWORD PTR _i$91837[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+3], 0
	jmp	SHORT $LN18@DeviceHand@3
$LN17@DeviceHand@3:
	jmp	SHORT $LN21@DeviceHand@3
$LN20@DeviceHand@3:

; 1096 : 
; 1097 : 	for(int i=0;i<100;i++)

	mov	DWORD PTR _i$91845[ebp], 0
	jmp	SHORT $LN16@DeviceHand@3
$LN15@DeviceHand@3:
	mov	eax, DWORD PTR _i$91845[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91845[ebp], eax
$LN16@DeviceHand@3:
	cmp	DWORD PTR _i$91845[ebp], 100		; 00000064H
	jge	SHORT $LN14@DeviceHand@3

; 1098 : 		for(int j=0;j<4;j++)

	mov	DWORD PTR _j$91849[ebp], 0
	jmp	SHORT $LN13@DeviceHand@3
$LN12@DeviceHand@3:
	mov	eax, DWORD PTR _j$91849[ebp]
	add	eax, 1
	mov	DWORD PTR _j$91849[ebp], eax
$LN13@DeviceHand@3:
	cmp	DWORD PTR _j$91849[ebp], 4
	jge	SHORT $LN11@DeviceHand@3

; 1099 : 			this->HatAngles[j][i]=-1;

	mov	eax, DWORD PTR _j$91849[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4444]
	mov	eax, DWORD PTR _i$91845[ebp]
	mov	DWORD PTR [edx+eax*4], -1
	jmp	SHORT $LN12@DeviceHand@3
$LN11@DeviceHand@3:
	jmp	SHORT $LN15@DeviceHand@3
$LN14@DeviceHand@3:

; 1100 : 
; 1101 : 	for(int i=0;i<100;i++)

	mov	DWORD PTR _i$91853[ebp], 0
	jmp	SHORT $LN10@DeviceHand@3
$LN9@DeviceHand@3:
	mov	eax, DWORD PTR _i$91853[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91853[ebp], eax
$LN10@DeviceHand@3:
	cmp	DWORD PTR _i$91853[ebp], 100		; 00000064H
	jge	$LN8@DeviceHand@3

; 1102 : 	{
; 1103 : 		this->JoyStickSliderA[i]=0;

	mov	eax, DWORD PTR _i$91853[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+6044], 0

; 1104 : 		this->JoyStickSliderB[i]=0;

	mov	eax, DWORD PTR _i$91853[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+6444], 0

; 1105 : 		this->JoyStickSliderC[i]=0;

	mov	eax, DWORD PTR _i$91853[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+6844], 0

; 1106 : 		this->JoyStickSliderD[i]=0;

	mov	eax, DWORD PTR _i$91853[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+7244], 0

; 1107 : 		this->JoyStickTwistX[i]=0;

	mov	eax, DWORD PTR _i$91853[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+7644], 0

; 1108 : 		this->JoyStickTwistY[i]=0;

	mov	eax, DWORD PTR _i$91853[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+8044], 0

; 1109 : 		this->JoyStickTwistZ[i]=0;

	mov	eax, DWORD PTR _i$91853[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+8444], 0

; 1110 : 		this->JoyStickX[i]=0;

	mov	eax, DWORD PTR _i$91853[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+3244], 0

; 1111 : 		this->JoyStickY[i]=0;

	mov	eax, DWORD PTR _i$91853[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+3644], 0

; 1112 : 		this->JoyStickZ[i]=0;

	mov	eax, DWORD PTR _i$91853[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+4044], 0

; 1113 : 	}

	jmp	$LN9@DeviceHand@3
$LN8@DeviceHand@3:

; 1114 : 
; 1115 : 	dbPerformChecklistControlDevices();

	call	?dbPerformChecklistControlDevices@@YAXXZ ; dbPerformChecklistControlDevices

; 1116 : 	for(this->CurrentDevice=1;dbChecklistString(this->CurrentDevice)==NULL;this->CurrentDevice++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3216], 1
	jmp	SHORT $LN7@DeviceHand@3
$LN6@DeviceHand@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3216]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3216], ecx
$LN7@DeviceHand@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3216]
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@DeviceHand@3
	jmp	SHORT $LN6@DeviceHand@3
$LN5@DeviceHand@3:

; 1117 : 	this->CurrentDevice$=dbChecklistString(this->CurrentDevice);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3216]
	push	ecx
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+3204], eax

; 1118 : 	if(this->CurrentDevice$!=NULL&&this->CurrentDevice$!="")

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+3204], 0
	je	SHORT $LN4@DeviceHand@3
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+3204], OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	SHORT $LN4@DeviceHand@3

; 1119 : 		dbSetControlDevice(this->CurrentDevice$);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3204]
	push	ecx
	call	?dbSetControlDevice@@YAXPAD@Z		; dbSetControlDevice
	add	esp, 4

; 1120 : 	else

	jmp	SHORT $LN3@DeviceHand@3
$LN4@DeviceHand@3:

; 1121 : 		this->CurrentDevice=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3216], 0
$LN3@DeviceHand@3:

; 1122 : 	if(dbChecklistValueA(this->CurrentDevice)==1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3216]
	push	ecx
	call	?dbChecklistValueA@@YAHH@Z		; dbChecklistValueA
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN2@DeviceHand@3

; 1123 : 	{
; 1124 : 		this->ForceFeedback=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 1125 : 		this->ForceFeedbackOn=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2], 1

; 1126 : 	}
; 1127 : 	else

	jmp	SHORT $LN1@DeviceHand@3
$LN2@DeviceHand@3:

; 1128 : 	{
; 1129 : 		this->ForceFeedback=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0

; 1130 : 		this->ForceFeedbackOn=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2], 0
$LN1@DeviceHand@3:

; 1131 : 	}
; 1132 : 	dbEmptyChecklist();

	call	?dbEmptyChecklist@@YAXXZ		; dbEmptyChecklist

; 1133 : 
; 1134 : 	return;
; 1135 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0DeviceHandler@@QAE@PAVMouseHandler@@HHMMHHHH@Z ENDP	; DeviceHandler::DeviceHandler
_TEXT	ENDS
PUBLIC	??1DeviceHandler@@QAE@XZ			; DeviceHandler::~DeviceHandler
; Function compile flags: /Odtp /ZI
;	COMDAT ??1DeviceHandler@@QAE@XZ
_TEXT	SEGMENT
tv71 = -84						; size = 4
$T94600 = -80						; size = 4
$T94601 = -76						; size = 4
$T94602 = -72						; size = 4
_this$ = -4						; size = 4
??1DeviceHandler@@QAE@XZ PROC				; DeviceHandler::~DeviceHandler, COMDAT
; _this$ = ecx

; 1137 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1138 : 	delete this->CurrentDevice$;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3204]
	mov	DWORD PTR $T94600[ebp], ecx
	mov	edx, DWORD PTR $T94600[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1139 : 	delete this->CurrentMouse;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8844]
	mov	DWORD PTR $T94602[ebp], ecx
	mov	edx, DWORD PTR $T94602[ebp]
	mov	DWORD PTR $T94601[ebp], edx
	cmp	DWORD PTR $T94601[ebp], 0
	je	SHORT $LN3@DeviceHand@4
	push	1
	mov	ecx, DWORD PTR $T94601[ebp]
	call	??_GMouseHandler@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN1@DeviceHand@4
$LN3@DeviceHand@4:
	mov	DWORD PTR tv71[ebp], 0
$LN1@DeviceHand@4:

; 1140 : 
; 1141 : 	return;
; 1142 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1DeviceHandler@@QAE@XZ ENDP				; DeviceHandler::~DeviceHandler
_TEXT	ENDS
PUBLIC	?GetForceFeedback@DeviceHandler@@QAE_NXZ	; DeviceHandler::GetForceFeedback
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetForceFeedback@DeviceHandler@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetForceFeedback@DeviceHandler@@QAE_NXZ PROC		; DeviceHandler::GetForceFeedback, COMDAT
; _this$ = ecx

; 1144 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1145 : 	return this->ForceFeedback;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+1]

; 1146 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetForceFeedback@DeviceHandler@@QAE_NXZ ENDP		; DeviceHandler::GetForceFeedback
_TEXT	ENDS
PUBLIC	?GetForceFeedbackOn@DeviceHandler@@QAE_NXZ	; DeviceHandler::GetForceFeedbackOn
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetForceFeedbackOn@DeviceHandler@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetForceFeedbackOn@DeviceHandler@@QAE_NXZ PROC		; DeviceHandler::GetForceFeedbackOn, COMDAT
; _this$ = ecx

; 1148 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1149 : 	return this->ForceFeedbackOn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+2]

; 1150 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetForceFeedbackOn@DeviceHandler@@QAE_NXZ ENDP		; DeviceHandler::GetForceFeedbackOn
_TEXT	ENDS
PUBLIC	?GetIsJoy@DeviceHandler@@QAE_NHM@Z		; DeviceHandler::GetIsJoy
PUBLIC	?GetHatAngle@DeviceHandler@@QAEHH@Z		; DeviceHandler::GetHatAngle
PUBLIC	?IsPressed@DeviceHandler@@QAE_NH@Z		; DeviceHandler::IsPressed
PUBLIC	__real@00000000
PUBLIC	?GetIsGenericInput@DeviceHandler@@QAE_NPAD@Z	; DeviceHandler::GetIsGenericInput
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?GetIsGenericInput@DeviceHandler@@QAE_NPAD@Z
_TEXT	SEGMENT
_InputChannel$ = -12					; size = 4
_Percent$ = -8						; size = 4
_this$ = -4						; size = 4
_InputChannel$$ = 8					; size = 4
?GetIsGenericInput@DeviceHandler@@QAE_NPAD@Z PROC	; DeviceHandler::GetIsGenericInput, COMDAT
; _this$ = ecx

; 1152 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1153 : 	float Percent=0.0f;

	fldz
	fstp	DWORD PTR _Percent$[ebp]

; 1154 : 	int InputChannel=this->CharToInputInt(InputChannel$);

	mov	eax, DWORD PTR _InputChannel$$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
	mov	DWORD PTR _InputChannel$[ebp], eax

; 1155 : 
; 1156 : 	if(InputChannel<32)

	cmp	DWORD PTR _InputChannel$[ebp], 32	; 00000020H
	jge	SHORT $LN3@GetIsGener

; 1157 : 		return this->IsPressed(InputChannel);

	mov	eax, DWORD PTR _InputChannel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPressed@DeviceHandler@@QAE_NH@Z	; DeviceHandler::IsPressed
	jmp	SHORT $LN4@GetIsGener
$LN3@GetIsGener:

; 1158 : 
; 1159 : 	if(InputChannel<64)

	cmp	DWORD PTR _InputChannel$[ebp], 64	; 00000040H
	jge	SHORT $LN2@GetIsGener

; 1160 : 		return (this->GetHatAngle((InputChannel-32)/8)==((InputChannel-32)%8)*45);

	mov	eax, DWORD PTR _InputChannel$[ebp]
	sub	eax, 32					; 00000020H
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHatAngle@DeviceHandler@@QAEHH@Z	; DeviceHandler::GetHatAngle
	mov	ecx, DWORD PTR _InputChannel$[ebp]
	sub	ecx, 32					; 00000020H
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN6@GetIsGener
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN6@GetIsGener:
	imul	ecx, 45					; 0000002dH
	xor	edx, edx
	cmp	eax, ecx
	sete	dl
	mov	al, dl
	jmp	SHORT $LN4@GetIsGener
$LN2@GetIsGener:

; 1161 : 
; 1162 : 	if(InputChannel<84)

	cmp	DWORD PTR _InputChannel$[ebp], 84	; 00000054H
	jge	SHORT $LN1@GetIsGener

; 1163 : 		return this->GetIsJoy(InputChannel-63,Percent);

	push	ecx
	fld	DWORD PTR _Percent$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _InputChannel$[ebp]
	sub	eax, 63					; 0000003fH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIsJoy@DeviceHandler@@QAE_NHM@Z	; DeviceHandler::GetIsJoy
	jmp	SHORT $LN4@GetIsGener
$LN1@GetIsGener:

; 1164 : 
; 1165 : 	return false;

	xor	al, al
$LN4@GetIsGener:

; 1166 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIsGenericInput@DeviceHandler@@QAE_NPAD@Z ENDP	; DeviceHandler::GetIsGenericInput
_TEXT	ENDS
PUBLIC	?GetIsGenericInput@DeviceHandler@@QAE_NPADM@Z	; DeviceHandler::GetIsGenericInput
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetIsGenericInput@DeviceHandler@@QAE_NPADM@Z
_TEXT	SEGMENT
_InputChannel$ = -8					; size = 4
_this$ = -4						; size = 4
_InputChannel$$ = 8					; size = 4
_Percent$ = 12						; size = 4
?GetIsGenericInput@DeviceHandler@@QAE_NPADM@Z PROC	; DeviceHandler::GetIsGenericInput, COMDAT
; _this$ = ecx

; 1168 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1169 : 	int InputChannel=this->CharToInputInt(InputChannel$);

	mov	eax, DWORD PTR _InputChannel$$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
	mov	DWORD PTR _InputChannel$[ebp], eax

; 1170 : 
; 1171 : 	if(InputChannel<32)

	cmp	DWORD PTR _InputChannel$[ebp], 32	; 00000020H
	jge	SHORT $LN3@GetIsGener@2

; 1172 : 		return this->IsPressed(InputChannel);

	mov	eax, DWORD PTR _InputChannel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPressed@DeviceHandler@@QAE_NH@Z	; DeviceHandler::IsPressed
	jmp	SHORT $LN4@GetIsGener@2
$LN3@GetIsGener@2:

; 1173 : 
; 1174 : 	if(InputChannel<64)

	cmp	DWORD PTR _InputChannel$[ebp], 64	; 00000040H
	jge	SHORT $LN2@GetIsGener@2

; 1175 : 		return (this->GetHatAngle((InputChannel-32)/8)==((InputChannel-32)%8)*45);

	mov	eax, DWORD PTR _InputChannel$[ebp]
	sub	eax, 32					; 00000020H
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHatAngle@DeviceHandler@@QAEHH@Z	; DeviceHandler::GetHatAngle
	mov	ecx, DWORD PTR _InputChannel$[ebp]
	sub	ecx, 32					; 00000020H
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN6@GetIsGener@2
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN6@GetIsGener@2:
	imul	ecx, 45					; 0000002dH
	xor	edx, edx
	cmp	eax, ecx
	sete	dl
	mov	al, dl
	jmp	SHORT $LN4@GetIsGener@2
$LN2@GetIsGener@2:

; 1176 : 
; 1177 : 	if(InputChannel<84)

	cmp	DWORD PTR _InputChannel$[ebp], 84	; 00000054H
	jge	SHORT $LN1@GetIsGener@2

; 1178 : 		return this->GetIsJoy(InputChannel-63,Percent);

	push	ecx
	fld	DWORD PTR _Percent$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _InputChannel$[ebp]
	sub	eax, 63					; 0000003fH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIsJoy@DeviceHandler@@QAE_NHM@Z	; DeviceHandler::GetIsJoy
	jmp	SHORT $LN4@GetIsGener@2
$LN1@GetIsGener@2:

; 1179 : 
; 1180 : 	return false;

	xor	al, al
$LN4@GetIsGener@2:

; 1181 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetIsGenericInput@DeviceHandler@@QAE_NPADM@Z ENDP	; DeviceHandler::GetIsGenericInput
_TEXT	ENDS
PUBLIC	?GetIsGenericInput@DeviceHandler@@QAE_NH@Z	; DeviceHandler::GetIsGenericInput
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetIsGenericInput@DeviceHandler@@QAE_NH@Z
_TEXT	SEGMENT
_Percent$ = -8						; size = 4
_this$ = -4						; size = 4
_InputChannel$ = 8					; size = 4
?GetIsGenericInput@DeviceHandler@@QAE_NH@Z PROC		; DeviceHandler::GetIsGenericInput, COMDAT
; _this$ = ecx

; 1183 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1184 : 	float Percent=0.0f;

	fldz
	fstp	DWORD PTR _Percent$[ebp]

; 1185 : 
; 1186 : 	if(InputChannel<32)

	cmp	DWORD PTR _InputChannel$[ebp], 32	; 00000020H
	jge	SHORT $LN3@GetIsGener@3

; 1187 : 		return this->IsPressed(InputChannel);

	mov	eax, DWORD PTR _InputChannel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPressed@DeviceHandler@@QAE_NH@Z	; DeviceHandler::IsPressed
	jmp	SHORT $LN4@GetIsGener@3
$LN3@GetIsGener@3:

; 1188 : 
; 1189 : 	if(InputChannel<64)

	cmp	DWORD PTR _InputChannel$[ebp], 64	; 00000040H
	jge	SHORT $LN2@GetIsGener@3

; 1190 : 		return (this->GetHatAngle((InputChannel-32)/8)==((InputChannel-32)%8)*45);

	mov	eax, DWORD PTR _InputChannel$[ebp]
	sub	eax, 32					; 00000020H
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHatAngle@DeviceHandler@@QAEHH@Z	; DeviceHandler::GetHatAngle
	mov	ecx, DWORD PTR _InputChannel$[ebp]
	sub	ecx, 32					; 00000020H
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN6@GetIsGener@3
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN6@GetIsGener@3:
	imul	ecx, 45					; 0000002dH
	xor	edx, edx
	cmp	eax, ecx
	sete	dl
	mov	al, dl
	jmp	SHORT $LN4@GetIsGener@3
$LN2@GetIsGener@3:

; 1191 : 
; 1192 : 	if(InputChannel<84)

	cmp	DWORD PTR _InputChannel$[ebp], 84	; 00000054H
	jge	SHORT $LN1@GetIsGener@3

; 1193 : 		return this->GetIsJoy(InputChannel-63,Percent);

	push	ecx
	fld	DWORD PTR _Percent$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _InputChannel$[ebp]
	sub	eax, 63					; 0000003fH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIsJoy@DeviceHandler@@QAE_NHM@Z	; DeviceHandler::GetIsJoy
	jmp	SHORT $LN4@GetIsGener@3
$LN1@GetIsGener@3:

; 1194 : 
; 1195 : 	return false;

	xor	al, al
$LN4@GetIsGener@3:

; 1196 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIsGenericInput@DeviceHandler@@QAE_NH@Z ENDP		; DeviceHandler::GetIsGenericInput
_TEXT	ENDS
PUBLIC	?GetIsGenericInput@DeviceHandler@@QAE_NHM@Z	; DeviceHandler::GetIsGenericInput
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetIsGenericInput@DeviceHandler@@QAE_NHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputChannel$ = 8					; size = 4
_Percent$ = 12						; size = 4
?GetIsGenericInput@DeviceHandler@@QAE_NHM@Z PROC	; DeviceHandler::GetIsGenericInput, COMDAT
; _this$ = ecx

; 1198 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1199 : 	if(InputChannel<32)

	cmp	DWORD PTR _InputChannel$[ebp], 32	; 00000020H
	jge	SHORT $LN3@GetIsGener@4

; 1200 : 		return this->IsPressed(InputChannel);

	mov	eax, DWORD PTR _InputChannel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPressed@DeviceHandler@@QAE_NH@Z	; DeviceHandler::IsPressed
	jmp	SHORT $LN4@GetIsGener@4
$LN3@GetIsGener@4:

; 1201 : 
; 1202 : 	if(InputChannel<64)

	cmp	DWORD PTR _InputChannel$[ebp], 64	; 00000040H
	jge	SHORT $LN2@GetIsGener@4

; 1203 : 		return (this->GetHatAngle((InputChannel-32)/8)==((InputChannel-32)%8)*45);

	mov	eax, DWORD PTR _InputChannel$[ebp]
	sub	eax, 32					; 00000020H
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHatAngle@DeviceHandler@@QAEHH@Z	; DeviceHandler::GetHatAngle
	mov	ecx, DWORD PTR _InputChannel$[ebp]
	sub	ecx, 32					; 00000020H
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN6@GetIsGener@4
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN6@GetIsGener@4:
	imul	ecx, 45					; 0000002dH
	xor	edx, edx
	cmp	eax, ecx
	sete	dl
	mov	al, dl
	jmp	SHORT $LN4@GetIsGener@4
$LN2@GetIsGener@4:

; 1204 : 
; 1205 : 	if(InputChannel<84)

	cmp	DWORD PTR _InputChannel$[ebp], 84	; 00000054H
	jge	SHORT $LN1@GetIsGener@4

; 1206 : 		return this->GetIsJoy(InputChannel-63,Percent);

	push	ecx
	fld	DWORD PTR _Percent$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _InputChannel$[ebp]
	sub	eax, 63					; 0000003fH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIsJoy@DeviceHandler@@QAE_NHM@Z	; DeviceHandler::GetIsJoy
	jmp	SHORT $LN4@GetIsGener@4
$LN1@GetIsGener@4:

; 1207 : 
; 1208 : 	return false;

	xor	al, al
$LN4@GetIsGener@4:

; 1209 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?GetIsGenericInput@DeviceHandler@@QAE_NHM@Z ENDP	; DeviceHandler::GetIsGenericInput
_TEXT	ENDS
PUBLIC	?IsJoyStickSliderDMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderDMax
PUBLIC	?IsJoyStickSliderDMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderDMin
PUBLIC	?IsJoyStickSliderCMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderCMax
PUBLIC	?IsJoyStickSliderCMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderCMin
PUBLIC	?IsJoyStickSliderBMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderBMax
PUBLIC	?IsJoyStickSliderBMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderBMin
PUBLIC	?IsJoyStickSliderAMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderAMax
PUBLIC	?IsJoyStickSliderAMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderAMin
PUBLIC	?IsJoyStickTwistZMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistZMax
PUBLIC	?IsJoyStickTwistZMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistZMin
PUBLIC	?IsJoyStickTwistYMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistYMax
PUBLIC	?IsJoyStickTwistYMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistYMin
PUBLIC	?IsJoyStickTwistXMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistXMax
PUBLIC	?IsJoyStickTwistXMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistXMin
PUBLIC	?IsJoyStickZMax@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickZMax
PUBLIC	?IsJoyStickZMin@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickZMin
PUBLIC	?IsJoyStickYMax@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickYMax
PUBLIC	?IsJoyStickYMin@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickYMin
PUBLIC	?IsJoyStickXMax@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickXMax
PUBLIC	?IsJoyStickXMin@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickXMin
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetIsJoy@DeviceHandler@@QAE_NHM@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Joystick$ = 8						; size = 4
_MinimumPercent$ = 12					; size = 4
?GetIsJoy@DeviceHandler@@QAE_NHM@Z PROC			; DeviceHandler::GetIsJoy, COMDAT
; _this$ = ecx

; 1211 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1212 : 	switch(Joystick)

	mov	eax, DWORD PTR _Joystick$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 19			; 00000013H
	ja	$LN1@GetIsJoy
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN26@GetIsJoy[edx*4]
$LN21@GetIsJoy:

; 1213 : 	{
; 1214 : 	case 1:
; 1215 : 		return this->IsJoyStickXMin(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickXMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickXMin
	jmp	$LN22@GetIsJoy

; 1216 : 		break;

	jmp	$LN22@GetIsJoy
$LN20@GetIsJoy:

; 1217 : 	case 2:
; 1218 : 		return this->IsJoyStickXMax(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickXMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickXMax
	jmp	$LN22@GetIsJoy

; 1219 : 		break;

	jmp	$LN22@GetIsJoy
$LN19@GetIsJoy:

; 1220 : 	case 3:
; 1221 : 		return this->IsJoyStickYMin(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickYMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickYMin
	jmp	$LN22@GetIsJoy

; 1222 : 		break;

	jmp	$LN22@GetIsJoy
$LN18@GetIsJoy:

; 1223 : 	case 4:
; 1224 : 		return this->IsJoyStickYMax(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickYMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickYMax
	jmp	$LN22@GetIsJoy

; 1225 : 		break;

	jmp	$LN22@GetIsJoy
$LN17@GetIsJoy:

; 1226 : 	case 5:
; 1227 : 		return this->IsJoyStickZMin(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickZMin@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickZMin
	jmp	$LN22@GetIsJoy

; 1228 : 		break;

	jmp	$LN22@GetIsJoy
$LN16@GetIsJoy:

; 1229 : 	case 6:
; 1230 : 		return this->IsJoyStickZMax(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickZMax@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickZMax
	jmp	$LN22@GetIsJoy

; 1231 : 		break;

	jmp	$LN22@GetIsJoy
$LN15@GetIsJoy:

; 1232 : 	case 7:
; 1233 : 		return this->IsJoyStickTwistXMin(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickTwistXMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistXMin
	jmp	$LN22@GetIsJoy

; 1234 : 		break;

	jmp	$LN22@GetIsJoy
$LN14@GetIsJoy:

; 1235 : 	case 8:
; 1236 : 		return this->IsJoyStickTwistXMax(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickTwistXMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistXMax
	jmp	$LN22@GetIsJoy

; 1237 : 		break;

	jmp	$LN22@GetIsJoy
$LN13@GetIsJoy:

; 1238 : 	case 9:
; 1239 : 		return this->IsJoyStickTwistYMin(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickTwistYMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistYMin
	jmp	$LN22@GetIsJoy

; 1240 : 		break;

	jmp	$LN22@GetIsJoy
$LN12@GetIsJoy:

; 1241 : 	case 10:
; 1242 : 		return this->IsJoyStickTwistYMax(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickTwistYMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistYMax
	jmp	$LN22@GetIsJoy

; 1243 : 		break;

	jmp	$LN22@GetIsJoy
$LN11@GetIsJoy:

; 1244 : 	case 11:
; 1245 : 		return this->IsJoyStickTwistZMin(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickTwistZMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistZMin
	jmp	$LN22@GetIsJoy

; 1246 : 		break;

	jmp	$LN22@GetIsJoy
$LN10@GetIsJoy:

; 1247 : 	case 12:
; 1248 : 		return this->IsJoyStickTwistZMax(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickTwistZMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistZMax
	jmp	$LN22@GetIsJoy

; 1249 : 		break;

	jmp	$LN22@GetIsJoy
$LN9@GetIsJoy:

; 1250 : 	case 13:
; 1251 : 		return this->IsJoyStickSliderAMin(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickSliderAMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderAMin
	jmp	$LN22@GetIsJoy

; 1252 : 		break;

	jmp	$LN22@GetIsJoy
$LN8@GetIsJoy:

; 1253 : 	case 14:
; 1254 : 		return this->IsJoyStickSliderAMax(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickSliderAMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderAMax
	jmp	SHORT $LN22@GetIsJoy

; 1255 : 		break;

	jmp	SHORT $LN22@GetIsJoy
$LN7@GetIsJoy:

; 1256 : 	case 15:
; 1257 : 		return this->IsJoyStickSliderBMin(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickSliderBMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderBMin
	jmp	SHORT $LN22@GetIsJoy

; 1258 : 		break;

	jmp	SHORT $LN22@GetIsJoy
$LN6@GetIsJoy:

; 1259 : 	case 16:
; 1260 : 		return this->IsJoyStickSliderBMax(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickSliderBMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderBMax
	jmp	SHORT $LN22@GetIsJoy

; 1261 : 		break;

	jmp	SHORT $LN22@GetIsJoy
$LN5@GetIsJoy:

; 1262 : 	case 17:
; 1263 : 		return this->IsJoyStickSliderCMin(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickSliderCMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderCMin
	jmp	SHORT $LN22@GetIsJoy

; 1264 : 		break;

	jmp	SHORT $LN22@GetIsJoy
$LN4@GetIsJoy:

; 1265 : 	case 18:
; 1266 : 		return this->IsJoyStickSliderCMax(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickSliderCMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderCMax
	jmp	SHORT $LN22@GetIsJoy

; 1267 : 		break;

	jmp	SHORT $LN22@GetIsJoy
$LN3@GetIsJoy:

; 1268 : 	case 19:
; 1269 : 		return this->IsJoyStickSliderDMin(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickSliderDMin@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderDMin
	jmp	SHORT $LN22@GetIsJoy

; 1270 : 		break;

	jmp	SHORT $LN22@GetIsJoy
$LN2@GetIsJoy:

; 1271 : 	case 20:
; 1272 : 		return this->IsJoyStickSliderDMax(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickSliderDMax@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderDMax
	jmp	SHORT $LN22@GetIsJoy

; 1273 : 		break;

	jmp	SHORT $LN22@GetIsJoy
$LN1@GetIsJoy:

; 1274 : 	default:
; 1275 : 		return NULL;

	xor	al, al
$LN22@GetIsJoy:

; 1276 : 		break;
; 1277 : 	}
; 1278 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN26@GetIsJoy:
	DD	$LN21@GetIsJoy
	DD	$LN20@GetIsJoy
	DD	$LN19@GetIsJoy
	DD	$LN18@GetIsJoy
	DD	$LN17@GetIsJoy
	DD	$LN16@GetIsJoy
	DD	$LN15@GetIsJoy
	DD	$LN14@GetIsJoy
	DD	$LN13@GetIsJoy
	DD	$LN12@GetIsJoy
	DD	$LN11@GetIsJoy
	DD	$LN10@GetIsJoy
	DD	$LN9@GetIsJoy
	DD	$LN8@GetIsJoy
	DD	$LN7@GetIsJoy
	DD	$LN6@GetIsJoy
	DD	$LN5@GetIsJoy
	DD	$LN4@GetIsJoy
	DD	$LN3@GetIsJoy
	DD	$LN2@GetIsJoy
?GetIsJoy@DeviceHandler@@QAE_NHM@Z ENDP			; DeviceHandler::GetIsJoy
_TEXT	ENDS
PUBLIC	?IsJoyStickSliderD@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderD
PUBLIC	?IsJoyStickSliderC@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderC
PUBLIC	?IsJoyStickSliderB@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderB
PUBLIC	?IsJoyStickSliderA@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickSliderA
PUBLIC	?IsJoyStickTwistZ@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistZ
PUBLIC	?IsJoyStickTwistY@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistY
PUBLIC	?IsJoyStickTwistX@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickTwistX
PUBLIC	?IsJoyStickZ@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickZ
PUBLIC	?IsJoyStickY@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickY
PUBLIC	?IsJoyStickX@DeviceHandler@@QAE_NM@Z		; DeviceHandler::IsJoyStickX
PUBLIC	?GetIsJoyUndirectional@DeviceHandler@@QAE_NHM@Z	; DeviceHandler::GetIsJoyUndirectional
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetIsJoyUndirectional@DeviceHandler@@QAE_NHM@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Joystick$ = 8						; size = 4
_MinimumPercent$ = 12					; size = 4
?GetIsJoyUndirectional@DeviceHandler@@QAE_NHM@Z PROC	; DeviceHandler::GetIsJoyUndirectional, COMDAT
; _this$ = ecx

; 1280 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1281 : 	switch(Joystick)

	mov	eax, DWORD PTR _Joystick$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 9
	ja	$LN1@GetIsJoyUn
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN16@GetIsJoyUn[edx*4]
$LN11@GetIsJoyUn:

; 1282 : 	{
; 1283 : 	case 1:
; 1284 : 		return this->IsJoyStickX(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickX@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickX
	jmp	$LN12@GetIsJoyUn

; 1285 : 		break;

	jmp	$LN12@GetIsJoyUn
$LN10@GetIsJoyUn:

; 1286 : 	case 2:
; 1287 : 		return this->IsJoyStickY(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickY@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickY
	jmp	$LN12@GetIsJoyUn

; 1288 : 		break;

	jmp	$LN12@GetIsJoyUn
$LN9@GetIsJoyUn:

; 1289 : 	case 3:
; 1290 : 		return this->IsJoyStickZ(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickZ@DeviceHandler@@QAE_NM@Z	; DeviceHandler::IsJoyStickZ
	jmp	$LN12@GetIsJoyUn

; 1291 : 		break;

	jmp	$LN12@GetIsJoyUn
$LN8@GetIsJoyUn:

; 1292 : 	case 4:
; 1293 : 		return this->IsJoyStickTwistX(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickTwistX@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistX
	jmp	SHORT $LN12@GetIsJoyUn

; 1294 : 		break;

	jmp	SHORT $LN12@GetIsJoyUn
$LN7@GetIsJoyUn:

; 1295 : 	case 5:
; 1296 : 		return this->IsJoyStickTwistY(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickTwistY@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistY
	jmp	SHORT $LN12@GetIsJoyUn

; 1297 : 		break;

	jmp	SHORT $LN12@GetIsJoyUn
$LN6@GetIsJoyUn:

; 1298 : 	case 6:
; 1299 : 		return this->IsJoyStickTwistZ(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickTwistZ@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickTwistZ
	jmp	SHORT $LN12@GetIsJoyUn

; 1300 : 		break;

	jmp	SHORT $LN12@GetIsJoyUn
$LN5@GetIsJoyUn:

; 1301 : 	case 7:
; 1302 : 		return this->IsJoyStickSliderA(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickSliderA@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderA
	jmp	SHORT $LN12@GetIsJoyUn

; 1303 : 		break;

	jmp	SHORT $LN12@GetIsJoyUn
$LN4@GetIsJoyUn:

; 1304 : 	case 8:
; 1305 : 		return this->IsJoyStickSliderB(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickSliderB@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderB
	jmp	SHORT $LN12@GetIsJoyUn

; 1306 : 		break;

	jmp	SHORT $LN12@GetIsJoyUn
$LN3@GetIsJoyUn:

; 1307 : 	case 9:
; 1308 : 		return this->IsJoyStickSliderC(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickSliderC@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderC
	jmp	SHORT $LN12@GetIsJoyUn

; 1309 : 		break;

	jmp	SHORT $LN12@GetIsJoyUn
$LN2@GetIsJoyUn:

; 1310 : 	case 10:
; 1311 : 		return this->IsJoyStickSliderD(MinimumPercent);

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsJoyStickSliderD@DeviceHandler@@QAE_NM@Z ; DeviceHandler::IsJoyStickSliderD
	jmp	SHORT $LN12@GetIsJoyUn

; 1312 : 		break;

	jmp	SHORT $LN12@GetIsJoyUn
$LN1@GetIsJoyUn:

; 1313 : 	default:
; 1314 : 		return NULL;

	xor	al, al
$LN12@GetIsJoyUn:

; 1315 : 		break;
; 1316 : 	}
; 1317 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN16@GetIsJoyUn:
	DD	$LN11@GetIsJoyUn
	DD	$LN10@GetIsJoyUn
	DD	$LN9@GetIsJoyUn
	DD	$LN8@GetIsJoyUn
	DD	$LN7@GetIsJoyUn
	DD	$LN6@GetIsJoyUn
	DD	$LN5@GetIsJoyUn
	DD	$LN4@GetIsJoyUn
	DD	$LN3@GetIsJoyUn
	DD	$LN2@GetIsJoyUn
?GetIsJoyUndirectional@DeviceHandler@@QAE_NHM@Z ENDP	; DeviceHandler::GetIsJoyUndirectional
_TEXT	ENDS
PUBLIC	?HatRotateRight@DeviceHandler@@QAE_NHH@Z	; DeviceHandler::HatRotateRight
PUBLIC	?HatRotateLeft@DeviceHandler@@QAE_NHH@Z		; DeviceHandler::HatRotateLeft
PUBLIC	?HatRotate@DeviceHandler@@QAE_NHH@Z		; DeviceHandler::HatRotate
; Function compile flags: /Odtp /ZI
;	COMDAT ?HatRotate@DeviceHandler@@QAE_NHH@Z
_TEXT	SEGMENT
tv76 = -72						; size = 4
_this$ = -4						; size = 4
_Hat$ = 8						; size = 4
_MaximumLag$ = 12					; size = 4
?HatRotate@DeviceHandler@@QAE_NHH@Z PROC		; DeviceHandler::HatRotate, COMDAT
; _this$ = ecx

; 1319 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1320 : 	return (this->HatRotateLeft(Hat,MaximumLag)||this->HatRotateRight(Hat,MaximumLag));

	mov	eax, DWORD PTR _MaximumLag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Hat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HatRotateLeft@DeviceHandler@@QAE_NHH@Z	; DeviceHandler::HatRotateLeft
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@HatRotate
	mov	eax, DWORD PTR _MaximumLag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Hat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HatRotateRight@DeviceHandler@@QAE_NHH@Z ; DeviceHandler::HatRotateRight
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@HatRotate
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN4@HatRotate
$LN3@HatRotate:
	mov	DWORD PTR tv76[ebp], 1
$LN4@HatRotate:
	mov	al, BYTE PTR tv76[ebp]

; 1321 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?HatRotate@DeviceHandler@@QAE_NHH@Z ENDP		; DeviceHandler::HatRotate
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?HatRotateLeft@DeviceHandler@@QAE_NHH@Z
_TEXT	SEGMENT
_j$91978 = -28						; size = 4
_start$91975 = -24					; size = 4
_pos$91974 = -20					; size = 4
_lasti$91973 = -16					; size = 4
_i$91972 = -12						; size = 4
_FlagOfFirst$91971 = -5					; size = 1
_this$ = -4						; size = 4
_Hat$ = 8						; size = 4
_MaximumLag$ = 12					; size = 4
?HatRotateLeft@DeviceHandler@@QAE_NHH@Z PROC		; DeviceHandler::HatRotateLeft, COMDAT
; _this$ = ecx

; 1323 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1324 : 	if(this->HatAngles[Hat][0]!=-1)

	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+4444], -1
	je	$LN18@HatRotateL

; 1325 : 	{
; 1326 : 		bool FlagOfFirst;
; 1327 : 		int i;
; 1328 : 		int lasti;
; 1329 : 		int pos;
; 1330 : 		unsigned int start=this->HatAngles[Hat][0]/45;

	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax+4444]
	cdq
	mov	ecx, 45					; 0000002dH
	idiv	ecx
	mov	DWORD PTR _start$91975[ebp], eax

; 1331 : 		FlagOfFirst=false;

	mov	BYTE PTR _FlagOfFirst$91971[ebp], 0

; 1332 : 		i=0;

	mov	DWORD PTR _i$91972[ebp], 0

; 1333 : 		if(start==0)

	cmp	DWORD PTR _start$91975[ebp], 0
	jne	SHORT $LN17@HatRotateL

; 1334 : 			pos=7;

	mov	DWORD PTR _pos$91974[ebp], 7

; 1335 : 		else

	jmp	SHORT $LN16@HatRotateL
$LN17@HatRotateL:

; 1336 : 			pos=start-1;

	mov	eax, DWORD PTR _start$91975[ebp]
	sub	eax, 1
	mov	DWORD PTR _pos$91974[ebp], eax
$LN16@HatRotateL:

; 1337 : 
; 1338 : 		for(int j=0;j<9;j++)

	mov	DWORD PTR _j$91978[ebp], 0
	jmp	SHORT $LN15@HatRotateL
$LN14@HatRotateL:
	mov	eax, DWORD PTR _j$91978[ebp]
	add	eax, 1
	mov	DWORD PTR _j$91978[ebp], eax
$LN15@HatRotateL:
	cmp	DWORD PTR _j$91978[ebp], 9
	jge	$LN18@HatRotateL

; 1339 : 		{
; 1340 : 			if(i==99)

	cmp	DWORD PTR _i$91972[ebp], 99		; 00000063H
	jne	SHORT $LN12@HatRotateL

; 1341 : 				return false;

	xor	al, al
	jmp	$LN19@HatRotateL
$LN12@HatRotateL:

; 1342 : 
; 1343 : 			lasti=i;

	mov	eax, DWORD PTR _i$91972[ebp]
	mov	DWORD PTR _lasti$91973[ebp], eax

; 1344 : 
; 1345 : 			for(pos++;(this->HatAngles[Hat][i]==pos*45||this->HatAngles[Hat][i]==-1)&&i-lasti<=MaximumLag;i++);

	mov	eax, DWORD PTR _pos$91974[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$91974[ebp], eax
	jmp	SHORT $LN11@HatRotateL
$LN10@HatRotateL:
	mov	eax, DWORD PTR _i$91972[ebp]
	add	eax, 1
	mov	DWORD PTR _i$91972[ebp], eax
$LN11@HatRotateL:
	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4444]
	mov	eax, DWORD PTR _pos$91974[ebp]
	imul	eax, 45					; 0000002dH
	mov	ecx, DWORD PTR _i$91972[ebp]
	cmp	DWORD PTR [edx+ecx*4], eax
	je	SHORT $LN8@HatRotateL
	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4444]
	mov	eax, DWORD PTR _i$91972[ebp]
	cmp	DWORD PTR [edx+eax*4], -1
	jne	SHORT $LN9@HatRotateL
$LN8@HatRotateL:
	mov	eax, DWORD PTR _i$91972[ebp]
	sub	eax, DWORD PTR _lasti$91973[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jg	SHORT $LN9@HatRotateL
	jmp	SHORT $LN10@HatRotateL
$LN9@HatRotateL:

; 1346 : 
; 1347 : 			if(i-lasti>MaximumLag)

	mov	eax, DWORD PTR _i$91972[ebp]
	sub	eax, DWORD PTR _lasti$91973[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jle	SHORT $LN7@HatRotateL

; 1348 : 				return false;

	xor	al, al
	jmp	SHORT $LN19@HatRotateL
$LN7@HatRotateL:

; 1349 : 
; 1350 : 			if(pos==7)

	cmp	DWORD PTR _pos$91974[ebp], 7
	jne	SHORT $LN6@HatRotateL

; 1351 : 			{
; 1352 : 				if(this->HatAngles[Hat][i]!=0)

	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4444]
	mov	eax, DWORD PTR _i$91972[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN5@HatRotateL

; 1353 : 					return false;

	xor	al, al
	jmp	SHORT $LN19@HatRotateL
$LN5@HatRotateL:

; 1354 : 
; 1355 : 				pos=-1;

	mov	DWORD PTR _pos$91974[ebp], -1

; 1356 : 			}
; 1357 : 			else

	jmp	SHORT $LN4@HatRotateL
$LN6@HatRotateL:

; 1358 : 				if(this->HatAngles[Hat][i]!=(pos+1)*45)

	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4444]
	mov	eax, DWORD PTR _pos$91974[ebp]
	add	eax, 1
	imul	eax, 45					; 0000002dH
	mov	ecx, DWORD PTR _i$91972[ebp]
	cmp	DWORD PTR [edx+ecx*4], eax
	je	SHORT $LN4@HatRotateL

; 1359 : 					return false;

	xor	al, al
	jmp	SHORT $LN19@HatRotateL
$LN4@HatRotateL:

; 1360 : 
; 1361 : 			if(pos==start&&FlagOfFirst)

	mov	eax, DWORD PTR _pos$91974[ebp]
	cmp	eax, DWORD PTR _start$91975[ebp]
	jne	SHORT $LN2@HatRotateL
	movzx	eax, BYTE PTR _FlagOfFirst$91971[ebp]
	test	eax, eax
	je	SHORT $LN2@HatRotateL

; 1362 : 				return true;

	mov	al, 1
	jmp	SHORT $LN19@HatRotateL

; 1363 : 			else

	jmp	SHORT $LN1@HatRotateL
$LN2@HatRotateL:

; 1364 : 				FlagOfFirst=true;

	mov	BYTE PTR _FlagOfFirst$91971[ebp], 1
$LN1@HatRotateL:

; 1365 : 		}

	jmp	$LN14@HatRotateL
$LN18@HatRotateL:

; 1366 : 	}
; 1367 : 
; 1368 : 	return false;

	xor	al, al
$LN19@HatRotateL:

; 1369 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?HatRotateLeft@DeviceHandler@@QAE_NHH@Z ENDP		; DeviceHandler::HatRotateLeft
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?HatRotateRight@DeviceHandler@@QAE_NHH@Z
_TEXT	SEGMENT
_j$92007 = -28						; size = 4
_start$92004 = -24					; size = 4
_pos$92003 = -20					; size = 4
_lasti$92002 = -16					; size = 4
_i$92001 = -12						; size = 4
_FlagOfFirst$92000 = -5					; size = 1
_this$ = -4						; size = 4
_Hat$ = 8						; size = 4
_MaximumLag$ = 12					; size = 4
?HatRotateRight@DeviceHandler@@QAE_NHH@Z PROC		; DeviceHandler::HatRotateRight, COMDAT
; _this$ = ecx

; 1371 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1372 : 	if(this->HatAngles[Hat][0]!=-1)

	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+4444], -1
	je	$LN18@HatRotateR

; 1373 : 	{
; 1374 : 		bool FlagOfFirst;
; 1375 : 		int i;
; 1376 : 		int lasti;
; 1377 : 		int pos;
; 1378 : 		unsigned int start=this->HatAngles[Hat][0]/45;

	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax+4444]
	cdq
	mov	ecx, 45					; 0000002dH
	idiv	ecx
	mov	DWORD PTR _start$92004[ebp], eax

; 1379 : 		FlagOfFirst=false;

	mov	BYTE PTR _FlagOfFirst$92000[ebp], 0

; 1380 : 		i=0;

	mov	DWORD PTR _i$92001[ebp], 0

; 1381 : 		if(start==7)

	cmp	DWORD PTR _start$92004[ebp], 7
	jne	SHORT $LN17@HatRotateR

; 1382 : 			pos=0;

	mov	DWORD PTR _pos$92003[ebp], 0

; 1383 : 		else

	jmp	SHORT $LN16@HatRotateR
$LN17@HatRotateR:

; 1384 : 			pos=start+1;

	mov	eax, DWORD PTR _start$92004[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$92003[ebp], eax
$LN16@HatRotateR:

; 1385 : 
; 1386 : 		for(int j=0;j<9;j++)

	mov	DWORD PTR _j$92007[ebp], 0
	jmp	SHORT $LN15@HatRotateR
$LN14@HatRotateR:
	mov	eax, DWORD PTR _j$92007[ebp]
	add	eax, 1
	mov	DWORD PTR _j$92007[ebp], eax
$LN15@HatRotateR:
	cmp	DWORD PTR _j$92007[ebp], 9
	jge	$LN18@HatRotateR

; 1387 : 		{
; 1388 : 			if(i==99)

	cmp	DWORD PTR _i$92001[ebp], 99		; 00000063H
	jne	SHORT $LN12@HatRotateR

; 1389 : 				return false;

	xor	al, al
	jmp	$LN19@HatRotateR
$LN12@HatRotateR:

; 1390 : 
; 1391 : 			lasti=i;

	mov	eax, DWORD PTR _i$92001[ebp]
	mov	DWORD PTR _lasti$92002[ebp], eax

; 1392 : 
; 1393 : 			for(pos--;(this->HatAngles[Hat][i]==pos*45||this->HatAngles[Hat][i]==-1)&&i-lasti<=MaximumLag;i++);

	mov	eax, DWORD PTR _pos$92003[ebp]
	sub	eax, 1
	mov	DWORD PTR _pos$92003[ebp], eax
	jmp	SHORT $LN11@HatRotateR
$LN10@HatRotateR:
	mov	eax, DWORD PTR _i$92001[ebp]
	add	eax, 1
	mov	DWORD PTR _i$92001[ebp], eax
$LN11@HatRotateR:
	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4444]
	mov	eax, DWORD PTR _pos$92003[ebp]
	imul	eax, 45					; 0000002dH
	mov	ecx, DWORD PTR _i$92001[ebp]
	cmp	DWORD PTR [edx+ecx*4], eax
	je	SHORT $LN8@HatRotateR
	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4444]
	mov	eax, DWORD PTR _i$92001[ebp]
	cmp	DWORD PTR [edx+eax*4], -1
	jne	SHORT $LN9@HatRotateR
$LN8@HatRotateR:
	mov	eax, DWORD PTR _i$92001[ebp]
	sub	eax, DWORD PTR _lasti$92002[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jg	SHORT $LN9@HatRotateR
	jmp	SHORT $LN10@HatRotateR
$LN9@HatRotateR:

; 1394 : 
; 1395 : 			if(i-lasti>MaximumLag)

	mov	eax, DWORD PTR _i$92001[ebp]
	sub	eax, DWORD PTR _lasti$92002[ebp]
	cmp	eax, DWORD PTR _MaximumLag$[ebp]
	jle	SHORT $LN7@HatRotateR

; 1396 : 				return false;

	xor	al, al
	jmp	SHORT $LN19@HatRotateR
$LN7@HatRotateR:

; 1397 : 
; 1398 : 			if(pos==0)

	cmp	DWORD PTR _pos$92003[ebp], 0
	jne	SHORT $LN6@HatRotateR

; 1399 : 			{
; 1400 : 				if(this->HatAngles[Hat][i]!=45*7)

	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4444]
	mov	eax, DWORD PTR _i$92001[ebp]
	cmp	DWORD PTR [edx+eax*4], 315		; 0000013bH
	je	SHORT $LN5@HatRotateR

; 1401 : 					return false;

	xor	al, al
	jmp	SHORT $LN19@HatRotateR
$LN5@HatRotateR:

; 1402 : 
; 1403 : 				pos=8;

	mov	DWORD PTR _pos$92003[ebp], 8

; 1404 : 			}
; 1405 : 			else

	jmp	SHORT $LN4@HatRotateR
$LN6@HatRotateR:

; 1406 : 				if(this->HatAngles[Hat][i]!=(pos-1)*45)

	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4444]
	mov	eax, DWORD PTR _pos$92003[ebp]
	sub	eax, 1
	imul	eax, 45					; 0000002dH
	mov	ecx, DWORD PTR _i$92001[ebp]
	cmp	DWORD PTR [edx+ecx*4], eax
	je	SHORT $LN4@HatRotateR

; 1407 : 					return false;

	xor	al, al
	jmp	SHORT $LN19@HatRotateR
$LN4@HatRotateR:

; 1408 : 
; 1409 : 			if(pos==start&&FlagOfFirst)

	mov	eax, DWORD PTR _pos$92003[ebp]
	cmp	eax, DWORD PTR _start$92004[ebp]
	jne	SHORT $LN2@HatRotateR
	movzx	eax, BYTE PTR _FlagOfFirst$92000[ebp]
	test	eax, eax
	je	SHORT $LN2@HatRotateR

; 1410 : 				return true;

	mov	al, 1
	jmp	SHORT $LN19@HatRotateR

; 1411 : 			else

	jmp	SHORT $LN1@HatRotateR
$LN2@HatRotateR:

; 1412 : 				FlagOfFirst=true;

	mov	BYTE PTR _FlagOfFirst$92000[ebp], 1
$LN1@HatRotateR:

; 1413 : 		}

	jmp	$LN14@HatRotateR
$LN18@HatRotateR:

; 1414 : 	}
; 1415 : 
; 1416 : 	return false;

	xor	al, al
$LN19@HatRotateR:

; 1417 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?HatRotateRight@DeviceHandler@@QAE_NHH@Z ENDP		; DeviceHandler::HatRotateRight
_TEXT	ENDS
PUBLIC	?IsHoldFor@DeviceHandler@@QAE_NHH@Z		; DeviceHandler::IsHoldFor
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsHoldFor@DeviceHandler@@QAE_NHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_Button$ = 8						; size = 4
_Length$ = 12						; size = 4
?IsHoldFor@DeviceHandler@@QAE_NHH@Z PROC		; DeviceHandler::IsHoldFor, COMDAT
; _this$ = ecx

; 1419 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1420 : 	int i;
; 1421 : 
; 1422 : 	for(i=0;this->Buttons[Button][i]&&i<Length;i++);

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@IsHoldFor@2
$LN4@IsHoldFor@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@IsHoldFor@2:
	mov	eax, DWORD PTR _Button$[ebp]
	imul	eax, 100				; 00000064H
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+3]
	test	edx, edx
	je	SHORT $LN3@IsHoldFor@2
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _Length$[ebp]
	jge	SHORT $LN3@IsHoldFor@2
	jmp	SHORT $LN4@IsHoldFor@2
$LN3@IsHoldFor@2:

; 1423 : 
; 1424 : 	if(i==Length)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _Length$[ebp]
	jne	SHORT $LN2@IsHoldFor@2

; 1425 : 		return true;

	mov	al, 1
	jmp	SHORT $LN6@IsHoldFor@2

; 1426 : 	else

	jmp	SHORT $LN6@IsHoldFor@2
$LN2@IsHoldFor@2:

; 1427 : 		return false;

	xor	al, al
$LN6@IsHoldFor@2:

; 1428 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?IsHoldFor@DeviceHandler@@QAE_NHH@Z ENDP		; DeviceHandler::IsHoldFor
_TEXT	ENDS
PUBLIC	?IsHatPosition@DeviceHandler@@QAE_NHH@Z		; DeviceHandler::IsHatPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsHatPosition@DeviceHandler@@QAE_NHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Hat$ = 8						; size = 4
_Position$ = 12						; size = 4
?IsHatPosition@DeviceHandler@@QAE_NHH@Z PROC		; DeviceHandler::IsHatPosition, COMDAT
; _this$ = ecx

; 1430 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1431 : 	if(Hat<4&&Hat>=0)

	cmp	DWORD PTR _Hat$[ebp], 4
	jge	SHORT $LN2@IsHatPosit
	cmp	DWORD PTR _Hat$[ebp], 0
	jl	SHORT $LN2@IsHatPosit

; 1432 : 		if(this->GetHatAngle(Hat)==Position*45)

	mov	eax, DWORD PTR _Hat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHatAngle@DeviceHandler@@QAEHH@Z	; DeviceHandler::GetHatAngle
	mov	ecx, DWORD PTR _Position$[ebp]
	imul	ecx, 45					; 0000002dH
	cmp	eax, ecx
	jne	SHORT $LN2@IsHatPosit

; 1433 : 			return true;

	mov	al, 1
	jmp	SHORT $LN3@IsHatPosit
$LN2@IsHatPosit:

; 1434 : 	
; 1435 : 	return false;

	xor	al, al
$LN3@IsHatPosit:

; 1436 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?IsHatPosition@DeviceHandler@@QAE_NHH@Z ENDP		; DeviceHandler::IsHatPosition
_TEXT	ENDS
PUBLIC	?IsMashed@DeviceHandler@@QAE_NHH@Z		; DeviceHandler::IsMashed
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsMashed@DeviceHandler@@QAE_NHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_Button$ = 8						; size = 4
_MinimumMashSpeed$ = 12					; size = 4
?IsMashed@DeviceHandler@@QAE_NHH@Z PROC			; DeviceHandler::IsMashed, COMDAT
; _this$ = ecx

; 1438 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1439 : 	int i;
; 1440 : 
; 1441 : 	if(Button>=0&&Button<32)

	cmp	DWORD PTR _Button$[ebp], 0
	jl	SHORT $LN7@IsMashed@3
	cmp	DWORD PTR _Button$[ebp], 32		; 00000020H
	jge	SHORT $LN7@IsMashed@3

; 1442 : 		if(this->Buttons[Button][0]&&!this->Buttons[Button][1])

	mov	eax, DWORD PTR _Button$[ebp]
	imul	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+3]
	test	edx, edx
	je	SHORT $LN7@IsMashed@3
	mov	eax, DWORD PTR _Button$[ebp]
	imul	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+4]
	test	edx, edx
	jne	SHORT $LN7@IsMashed@3

; 1443 : 		{
; 1444 : 			for(i=2;!this->Buttons[Button][i]&&i<MinimumMashSpeed+1;i++);

	mov	DWORD PTR _i$[ebp], 2
	jmp	SHORT $LN5@IsMashed@3
$LN4@IsMashed@3:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@IsMashed@3:
	mov	eax, DWORD PTR _Button$[ebp]
	imul	eax, 100				; 00000064H
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+3]
	test	edx, edx
	jne	SHORT $LN3@IsMashed@3
	mov	eax, DWORD PTR _MinimumMashSpeed$[ebp]
	add	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN3@IsMashed@3
	jmp	SHORT $LN4@IsMashed@3
$LN3@IsMashed@3:

; 1445 : 			if(i!=MinimumMashSpeed)

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _MinimumMashSpeed$[ebp]
	je	SHORT $LN2@IsMashed@3

; 1446 : 				return true;

	mov	al, 1
	jmp	SHORT $LN8@IsMashed@3

; 1447 : 			else

	jmp	SHORT $LN7@IsMashed@3
$LN2@IsMashed@3:

; 1448 : 				return false;

	xor	al, al
	jmp	SHORT $LN8@IsMashed@3
$LN7@IsMashed@3:

; 1449 : 		}
; 1450 : 
; 1451 : 	return false;

	xor	al, al
$LN8@IsMashed@3:

; 1452 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?IsMashed@DeviceHandler@@QAE_NHH@Z ENDP			; DeviceHandler::IsMashed
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsPressed@DeviceHandler@@QAE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Button$ = 8						; size = 4
?IsPressed@DeviceHandler@@QAE_NH@Z PROC			; DeviceHandler::IsPressed, COMDAT
; _this$ = ecx

; 1454 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1455 : 	return this->Buttons[Button][0];

	mov	eax, DWORD PTR _Button$[ebp]
	imul	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [ecx+eax+3]

; 1456 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsPressed@DeviceHandler@@QAE_NH@Z ENDP			; DeviceHandler::IsPressed
_TEXT	ENDS
PUBLIC	?JoyStickASliderPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickASliderPosition
PUBLIC	__real@0000000000000000
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?IsJoyStickSliderA@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderA@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickSliderA, COMDAT
; _this$ = ecx

; 1458 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1459 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick

; 1460 : 	{
; 1461 : 		if(this->JoyStickASliderPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick

; 1462 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick
$LN6@IsJoyStick:

; 1463 : 	}

	jmp	SHORT $LN1@IsJoyStick
$LN7@IsJoyStick:

; 1464 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick

; 1465 : 	{
; 1466 : 		if(this->JoyStickASliderPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick

; 1467 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick
$LN3@IsJoyStick:

; 1468 : 	}
; 1469 : 	else

	jmp	SHORT $LN1@IsJoyStick
$LN4@IsJoyStick:

; 1470 : 		if(this->JoyStickASliderPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick

; 1471 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick
$LN1@IsJoyStick:

; 1472 : 
; 1473 : 	return false;

	xor	al, al
$LN8@IsJoyStick:

; 1474 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickSliderA@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickSliderA
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?IsJoyStickSliderAMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderAMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderAMax, COMDAT
; _this$ = ecx

; 1476 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1477 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@2

; 1478 : 	{
; 1479 : 		if(this->JoyStickASliderPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@2

; 1480 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@2
$LN6@IsJoyStick@2:

; 1481 : 	}

	jmp	SHORT $LN1@IsJoyStick@2
$LN7@IsJoyStick@2:

; 1482 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@2

; 1483 : 	{
; 1484 : 		if(this->JoyStickASliderPosition()>Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@IsJoyStick@2

; 1485 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@2
$LN3@IsJoyStick@2:

; 1486 : 	}
; 1487 : 	else

	jmp	SHORT $LN1@IsJoyStick@2
$LN4@IsJoyStick@2:

; 1488 : 		if(this->JoyStickASliderPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@2

; 1489 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@2
$LN1@IsJoyStick@2:

; 1490 : 
; 1491 : 	return false;

	xor	al, al
$LN8@IsJoyStick@2:

; 1492 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickSliderAMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderAMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderAMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderAMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderAMin, COMDAT
; _this$ = ecx

; 1494 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1495 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@3

; 1496 : 	{
; 1497 : 		if(this->JoyStickASliderPosition()<Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@IsJoyStick@3

; 1498 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@3
$LN6@IsJoyStick@3:

; 1499 : 	}

	jmp	SHORT $LN1@IsJoyStick@3
$LN7@IsJoyStick@3:

; 1500 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@3

; 1501 : 	{
; 1502 : 		if(this->JoyStickASliderPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@3

; 1503 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@3
$LN3@IsJoyStick@3:

; 1504 : 	}
; 1505 : 	else

	jmp	SHORT $LN1@IsJoyStick@3
$LN4@IsJoyStick@3:

; 1506 : 		if(this->JoyStickASliderPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@3

; 1507 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@3
$LN1@IsJoyStick@3:

; 1508 : 
; 1509 : 	return false;

	xor	al, al
$LN8@IsJoyStick@3:

; 1510 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickSliderAMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderAMin
_TEXT	ENDS
PUBLIC	?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickBSliderPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickSliderB@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderB@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickSliderB, COMDAT
; _this$ = ecx

; 1512 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1513 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@4

; 1514 : 	{
; 1515 : 		if(this->JoyStickBSliderPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@4

; 1516 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@4
$LN6@IsJoyStick@4:

; 1517 : 	}

	jmp	SHORT $LN1@IsJoyStick@4
$LN7@IsJoyStick@4:

; 1518 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@4

; 1519 : 	{
; 1520 : 		if(this->JoyStickBSliderPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@4

; 1521 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@4
$LN3@IsJoyStick@4:

; 1522 : 	}
; 1523 : 	else

	jmp	SHORT $LN1@IsJoyStick@4
$LN4@IsJoyStick@4:

; 1524 : 		if(this->JoyStickBSliderPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@4

; 1525 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@4
$LN1@IsJoyStick@4:

; 1526 : 
; 1527 : 	return false;

	xor	al, al
$LN8@IsJoyStick@4:

; 1528 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickSliderB@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickSliderB
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderBMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderBMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderBMax, COMDAT
; _this$ = ecx

; 1530 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1531 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@5

; 1532 : 	{
; 1533 : 		if(this->JoyStickBSliderPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@5

; 1534 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@5
$LN6@IsJoyStick@5:

; 1535 : 	}

	jmp	SHORT $LN1@IsJoyStick@5
$LN7@IsJoyStick@5:

; 1536 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@5

; 1537 : 	{
; 1538 : 		if(this->JoyStickBSliderPosition()>Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@IsJoyStick@5

; 1539 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@5
$LN3@IsJoyStick@5:

; 1540 : 	}
; 1541 : 	else

	jmp	SHORT $LN1@IsJoyStick@5
$LN4@IsJoyStick@5:

; 1542 : 		if(this->JoyStickBSliderPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@5

; 1543 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@5
$LN1@IsJoyStick@5:

; 1544 : 
; 1545 : 	return false;

	xor	al, al
$LN8@IsJoyStick@5:

; 1546 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickSliderBMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderBMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderBMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderBMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderBMin, COMDAT
; _this$ = ecx

; 1548 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1549 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@6

; 1550 : 	{
; 1551 : 		if(this->JoyStickBSliderPosition()<Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@IsJoyStick@6

; 1552 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@6
$LN6@IsJoyStick@6:

; 1553 : 	}

	jmp	SHORT $LN1@IsJoyStick@6
$LN7@IsJoyStick@6:

; 1554 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@6

; 1555 : 	{
; 1556 : 		if(this->JoyStickBSliderPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@6

; 1557 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@6
$LN3@IsJoyStick@6:

; 1558 : 	}
; 1559 : 	else

	jmp	SHORT $LN1@IsJoyStick@6
$LN4@IsJoyStick@6:

; 1560 : 		if(this->JoyStickBSliderPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@6

; 1561 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@6
$LN1@IsJoyStick@6:

; 1562 : 
; 1563 : 	return false;

	xor	al, al
$LN8@IsJoyStick@6:

; 1564 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickSliderBMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderBMin
_TEXT	ENDS
PUBLIC	?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickCSliderPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickSliderC@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderC@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickSliderC, COMDAT
; _this$ = ecx

; 1566 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1567 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@7

; 1568 : 	{
; 1569 : 		if(this->JoyStickCSliderPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@7

; 1570 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@7
$LN6@IsJoyStick@7:

; 1571 : 	}

	jmp	SHORT $LN1@IsJoyStick@7
$LN7@IsJoyStick@7:

; 1572 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@7

; 1573 : 	{
; 1574 : 		if(this->JoyStickCSliderPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@7

; 1575 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@7
$LN3@IsJoyStick@7:

; 1576 : 	}
; 1577 : 	else

	jmp	SHORT $LN1@IsJoyStick@7
$LN4@IsJoyStick@7:

; 1578 : 		if(this->JoyStickCSliderPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@7

; 1579 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@7
$LN1@IsJoyStick@7:

; 1580 : 
; 1581 : 	return false;

	xor	al, al
$LN8@IsJoyStick@7:

; 1582 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickSliderC@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickSliderC
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderCMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderCMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderCMax, COMDAT
; _this$ = ecx

; 1584 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1585 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@8

; 1586 : 	{
; 1587 : 		if(this->JoyStickCSliderPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@8

; 1588 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@8
$LN6@IsJoyStick@8:

; 1589 : 	}

	jmp	SHORT $LN1@IsJoyStick@8
$LN7@IsJoyStick@8:

; 1590 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@8

; 1591 : 	{
; 1592 : 		if(this->JoyStickCSliderPosition()>Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@IsJoyStick@8

; 1593 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@8
$LN3@IsJoyStick@8:

; 1594 : 	}
; 1595 : 	else

	jmp	SHORT $LN1@IsJoyStick@8
$LN4@IsJoyStick@8:

; 1596 : 		if(this->JoyStickCSliderPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@8

; 1597 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@8
$LN1@IsJoyStick@8:

; 1598 : 
; 1599 : 	return false;

	xor	al, al
$LN8@IsJoyStick@8:

; 1600 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickSliderCMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderCMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderCMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderCMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderCMin, COMDAT
; _this$ = ecx

; 1602 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1603 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@9

; 1604 : 	{
; 1605 : 		if(this->JoyStickCSliderPosition()<Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@IsJoyStick@9

; 1606 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@9
$LN6@IsJoyStick@9:

; 1607 : 	}

	jmp	SHORT $LN1@IsJoyStick@9
$LN7@IsJoyStick@9:

; 1608 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@9

; 1609 : 	{
; 1610 : 		if(this->JoyStickCSliderPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@9

; 1611 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@9
$LN3@IsJoyStick@9:

; 1612 : 	}
; 1613 : 	else

	jmp	SHORT $LN1@IsJoyStick@9
$LN4@IsJoyStick@9:

; 1614 : 		if(this->JoyStickCSliderPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@9

; 1615 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@9
$LN1@IsJoyStick@9:

; 1616 : 
; 1617 : 	return false;

	xor	al, al
$LN8@IsJoyStick@9:

; 1618 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickSliderCMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderCMin
_TEXT	ENDS
PUBLIC	?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickDSliderPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickSliderD@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderD@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickSliderD, COMDAT
; _this$ = ecx

; 1620 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1621 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@10

; 1622 : 	{
; 1623 : 		if(this->JoyStickDSliderPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@10

; 1624 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@10
$LN6@IsJoyStick@10:

; 1625 : 	}

	jmp	SHORT $LN1@IsJoyStick@10
$LN7@IsJoyStick@10:

; 1626 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@10

; 1627 : 	{
; 1628 : 		if(this->JoyStickDSliderPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@10

; 1629 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@10
$LN3@IsJoyStick@10:

; 1630 : 	}
; 1631 : 	else

	jmp	SHORT $LN1@IsJoyStick@10
$LN4@IsJoyStick@10:

; 1632 : 		if(this->JoyStickDSliderPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@10

; 1633 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@10
$LN1@IsJoyStick@10:

; 1634 : 
; 1635 : 	return false;

	xor	al, al
$LN8@IsJoyStick@10:

; 1636 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickSliderD@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickSliderD
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderDMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderDMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderDMax, COMDAT
; _this$ = ecx

; 1638 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1639 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@11

; 1640 : 	{
; 1641 : 		if(this->JoyStickDSliderPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@11

; 1642 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@11
$LN6@IsJoyStick@11:

; 1643 : 	}

	jmp	SHORT $LN1@IsJoyStick@11
$LN7@IsJoyStick@11:

; 1644 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@11

; 1645 : 	{
; 1646 : 		if(this->JoyStickDSliderPosition()>Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@IsJoyStick@11

; 1647 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@11
$LN3@IsJoyStick@11:

; 1648 : 	}
; 1649 : 	else

	jmp	SHORT $LN1@IsJoyStick@11
$LN4@IsJoyStick@11:

; 1650 : 		if(this->JoyStickDSliderPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@11

; 1651 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@11
$LN1@IsJoyStick@11:

; 1652 : 
; 1653 : 	return false;

	xor	al, al
$LN8@IsJoyStick@11:

; 1654 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickSliderDMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderDMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickSliderDMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickSliderDMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickSliderDMin, COMDAT
; _this$ = ecx

; 1656 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1657 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@12

; 1658 : 	{
; 1659 : 		if(this->JoyStickDSliderPosition()<Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@IsJoyStick@12

; 1660 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@12
$LN6@IsJoyStick@12:

; 1661 : 	}

	jmp	SHORT $LN1@IsJoyStick@12
$LN7@IsJoyStick@12:

; 1662 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@12

; 1663 : 	{
; 1664 : 		if(this->JoyStickDSliderPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@12

; 1665 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@12
$LN3@IsJoyStick@12:

; 1666 : 	}
; 1667 : 	else

	jmp	SHORT $LN1@IsJoyStick@12
$LN4@IsJoyStick@12:

; 1668 : 		if(this->JoyStickDSliderPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@12

; 1669 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@12
$LN1@IsJoyStick@12:

; 1670 : 
; 1671 : 	return false;

	xor	al, al
$LN8@IsJoyStick@12:

; 1672 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickSliderDMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickSliderDMin
_TEXT	ENDS
PUBLIC	?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickXTwistPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickTwistX@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistX@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickTwistX, COMDAT
; _this$ = ecx

; 1674 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1675 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@13

; 1676 : 	{
; 1677 : 		if(this->JoyStickXTwistPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@13

; 1678 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@13
$LN6@IsJoyStick@13:

; 1679 : 	}

	jmp	SHORT $LN1@IsJoyStick@13
$LN7@IsJoyStick@13:

; 1680 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@13

; 1681 : 	{
; 1682 : 		if(this->JoyStickXTwistPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@13

; 1683 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@13
$LN3@IsJoyStick@13:

; 1684 : 	}
; 1685 : 	else

	jmp	SHORT $LN1@IsJoyStick@13
$LN4@IsJoyStick@13:

; 1686 : 		if(this->JoyStickXTwistPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@13

; 1687 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@13
$LN1@IsJoyStick@13:

; 1688 : 
; 1689 : 	return false;

	xor	al, al
$LN8@IsJoyStick@13:

; 1690 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickTwistX@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickTwistX
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickTwistXMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistXMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickTwistXMax, COMDAT
; _this$ = ecx

; 1692 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1693 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@14

; 1694 : 	{
; 1695 : 		if(this->JoyStickXTwistPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@14

; 1696 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@14
$LN6@IsJoyStick@14:

; 1697 : 	}

	jmp	SHORT $LN1@IsJoyStick@14
$LN7@IsJoyStick@14:

; 1698 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@14

; 1699 : 	{
; 1700 : 		if(this->JoyStickXTwistPosition()>Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@IsJoyStick@14

; 1701 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@14
$LN3@IsJoyStick@14:

; 1702 : 	}
; 1703 : 	else

	jmp	SHORT $LN1@IsJoyStick@14
$LN4@IsJoyStick@14:

; 1704 : 		if(this->JoyStickXTwistPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@14

; 1705 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@14
$LN1@IsJoyStick@14:

; 1706 : 
; 1707 : 	return false;

	xor	al, al
$LN8@IsJoyStick@14:

; 1708 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickTwistXMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickTwistXMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickTwistXMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistXMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickTwistXMin, COMDAT
; _this$ = ecx

; 1710 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1711 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@15

; 1712 : 	{
; 1713 : 		if(this->JoyStickXTwistPosition()<Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@IsJoyStick@15

; 1714 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@15
$LN6@IsJoyStick@15:

; 1715 : 	}

	jmp	SHORT $LN1@IsJoyStick@15
$LN7@IsJoyStick@15:

; 1716 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@15

; 1717 : 	{
; 1718 : 		if(this->JoyStickXTwistPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@15

; 1719 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@15
$LN3@IsJoyStick@15:

; 1720 : 	}
; 1721 : 	else

	jmp	SHORT $LN1@IsJoyStick@15
$LN4@IsJoyStick@15:

; 1722 : 		if(this->JoyStickXTwistPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@15

; 1723 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@15
$LN1@IsJoyStick@15:

; 1724 : 
; 1725 : 	return false;

	xor	al, al
$LN8@IsJoyStick@15:

; 1726 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickTwistXMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickTwistXMin
_TEXT	ENDS
PUBLIC	?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickYTwistPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickTwistY@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistY@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickTwistY, COMDAT
; _this$ = ecx

; 1728 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1729 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@16

; 1730 : 	{
; 1731 : 		if(this->JoyStickYTwistPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@16

; 1732 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@16
$LN6@IsJoyStick@16:

; 1733 : 	}

	jmp	SHORT $LN1@IsJoyStick@16
$LN7@IsJoyStick@16:

; 1734 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@16

; 1735 : 	{
; 1736 : 		if(this->JoyStickYTwistPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@16

; 1737 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@16
$LN3@IsJoyStick@16:

; 1738 : 	}
; 1739 : 	else

	jmp	SHORT $LN1@IsJoyStick@16
$LN4@IsJoyStick@16:

; 1740 : 		if(this->JoyStickYTwistPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@16

; 1741 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@16
$LN1@IsJoyStick@16:

; 1742 : 
; 1743 : 	return false;

	xor	al, al
$LN8@IsJoyStick@16:

; 1744 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickTwistY@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickTwistY
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickTwistYMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistYMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickTwistYMax, COMDAT
; _this$ = ecx

; 1746 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1747 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@17

; 1748 : 	{
; 1749 : 		if(this->JoyStickYTwistPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@17

; 1750 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@17
$LN6@IsJoyStick@17:

; 1751 : 	}

	jmp	SHORT $LN1@IsJoyStick@17
$LN7@IsJoyStick@17:

; 1752 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@17

; 1753 : 	{
; 1754 : 		if(this->JoyStickYTwistPosition()>Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@IsJoyStick@17

; 1755 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@17
$LN3@IsJoyStick@17:

; 1756 : 	}
; 1757 : 	else

	jmp	SHORT $LN1@IsJoyStick@17
$LN4@IsJoyStick@17:

; 1758 : 		if(this->JoyStickYTwistPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@17

; 1759 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@17
$LN1@IsJoyStick@17:

; 1760 : 
; 1761 : 	return false;

	xor	al, al
$LN8@IsJoyStick@17:

; 1762 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickTwistYMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickTwistYMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickTwistYMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistYMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickTwistYMin, COMDAT
; _this$ = ecx

; 1764 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1765 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@18

; 1766 : 	{
; 1767 : 		if(this->JoyStickYTwistPosition()<Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@IsJoyStick@18

; 1768 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@18
$LN6@IsJoyStick@18:

; 1769 : 	}

	jmp	SHORT $LN1@IsJoyStick@18
$LN7@IsJoyStick@18:

; 1770 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@18

; 1771 : 	{
; 1772 : 		if(this->JoyStickYTwistPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@18

; 1773 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@18
$LN3@IsJoyStick@18:

; 1774 : 	}
; 1775 : 	else

	jmp	SHORT $LN1@IsJoyStick@18
$LN4@IsJoyStick@18:

; 1776 : 		if(this->JoyStickYTwistPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@18

; 1777 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@18
$LN1@IsJoyStick@18:

; 1778 : 
; 1779 : 	return false;

	xor	al, al
$LN8@IsJoyStick@18:

; 1780 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickTwistYMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickTwistYMin
_TEXT	ENDS
PUBLIC	?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickZTwistPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickTwistZ@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistZ@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickTwistZ, COMDAT
; _this$ = ecx

; 1782 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1783 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@19

; 1784 : 	{
; 1785 : 		if(this->JoyStickZTwistPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@19

; 1786 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@19
$LN6@IsJoyStick@19:

; 1787 : 	}

	jmp	SHORT $LN1@IsJoyStick@19
$LN7@IsJoyStick@19:

; 1788 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@19

; 1789 : 	{
; 1790 : 		if(this->JoyStickZTwistPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@19

; 1791 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@19
$LN3@IsJoyStick@19:

; 1792 : 	}
; 1793 : 	else

	jmp	SHORT $LN1@IsJoyStick@19
$LN4@IsJoyStick@19:

; 1794 : 		if(this->JoyStickZTwistPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@19

; 1795 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@19
$LN1@IsJoyStick@19:

; 1796 : 
; 1797 : 	return false;

	xor	al, al
$LN8@IsJoyStick@19:

; 1798 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickTwistZ@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickTwistZ
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickTwistZMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistZMax@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickTwistZMax, COMDAT
; _this$ = ecx

; 1800 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1801 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@20

; 1802 : 	{
; 1803 : 		if(this->JoyStickZTwistPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@20

; 1804 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@20
$LN6@IsJoyStick@20:

; 1805 : 	}

	jmp	SHORT $LN1@IsJoyStick@20
$LN7@IsJoyStick@20:

; 1806 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@20

; 1807 : 	{
; 1808 : 		if(this->JoyStickZTwistPosition()>Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@IsJoyStick@20

; 1809 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@20
$LN3@IsJoyStick@20:

; 1810 : 	}
; 1811 : 	else

	jmp	SHORT $LN1@IsJoyStick@20
$LN4@IsJoyStick@20:

; 1812 : 		if(this->JoyStickZTwistPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@20

; 1813 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@20
$LN1@IsJoyStick@20:

; 1814 : 
; 1815 : 	return false;

	xor	al, al
$LN8@IsJoyStick@20:

; 1816 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickTwistZMax@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickTwistZMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickTwistZMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickTwistZMin@DeviceHandler@@QAE_NM@Z PROC	; DeviceHandler::IsJoyStickTwistZMin, COMDAT
; _this$ = ecx

; 1818 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1819 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@21

; 1820 : 	{
; 1821 : 		if(this->JoyStickZTwistPosition()<Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@IsJoyStick@21

; 1822 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@21
$LN6@IsJoyStick@21:

; 1823 : 	}

	jmp	SHORT $LN1@IsJoyStick@21
$LN7@IsJoyStick@21:

; 1824 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@21

; 1825 : 	{
; 1826 : 		if(this->JoyStickZTwistPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@21

; 1827 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@21
$LN3@IsJoyStick@21:

; 1828 : 	}
; 1829 : 	else

	jmp	SHORT $LN1@IsJoyStick@21
$LN4@IsJoyStick@21:

; 1830 : 		if(this->JoyStickZTwistPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@21

; 1831 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@21
$LN1@IsJoyStick@21:

; 1832 : 
; 1833 : 	return false;

	xor	al, al
$LN8@IsJoyStick@21:

; 1834 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickTwistZMin@DeviceHandler@@QAE_NM@Z ENDP	; DeviceHandler::IsJoyStickTwistZMin
_TEXT	ENDS
PUBLIC	?JoyStickXPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickXPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickX@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickX@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickX, COMDAT
; _this$ = ecx

; 1836 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1837 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@22

; 1838 : 	{
; 1839 : 		if(this->JoyStickXPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@22

; 1840 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@22
$LN6@IsJoyStick@22:

; 1841 : 	}

	jmp	SHORT $LN1@IsJoyStick@22
$LN7@IsJoyStick@22:

; 1842 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@22

; 1843 : 	{
; 1844 : 		if(this->JoyStickXPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@22

; 1845 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@22
$LN3@IsJoyStick@22:

; 1846 : 	}
; 1847 : 	else

	jmp	SHORT $LN1@IsJoyStick@22
$LN4@IsJoyStick@22:

; 1848 : 		if(this->JoyStickXPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@22

; 1849 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@22
$LN1@IsJoyStick@22:

; 1850 : 
; 1851 : 	return false;

	xor	al, al
$LN8@IsJoyStick@22:

; 1852 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickX@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickX
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickXMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickXMax@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickXMax, COMDAT
; _this$ = ecx

; 1854 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1855 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@23

; 1856 : 	{
; 1857 : 		if(this->JoyStickXPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@23

; 1858 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@23
$LN6@IsJoyStick@23:

; 1859 : 	}

	jmp	SHORT $LN1@IsJoyStick@23
$LN7@IsJoyStick@23:

; 1860 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@23

; 1861 : 	{
; 1862 : 		if(this->JoyStickXPosition()>Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@IsJoyStick@23

; 1863 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@23
$LN3@IsJoyStick@23:

; 1864 : 	}
; 1865 : 	else

	jmp	SHORT $LN1@IsJoyStick@23
$LN4@IsJoyStick@23:

; 1866 : 		if(this->JoyStickXPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@23

; 1867 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@23
$LN1@IsJoyStick@23:

; 1868 : 
; 1869 : 	return false;

	xor	al, al
$LN8@IsJoyStick@23:

; 1870 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickXMax@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickXMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickXMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickXMin@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickXMin, COMDAT
; _this$ = ecx

; 1872 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1873 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@24

; 1874 : 	{
; 1875 : 		if(this->JoyStickXPosition()<Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@IsJoyStick@24

; 1876 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@24
$LN6@IsJoyStick@24:

; 1877 : 	}

	jmp	SHORT $LN1@IsJoyStick@24
$LN7@IsJoyStick@24:

; 1878 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@24

; 1879 : 	{
; 1880 : 		if(this->JoyStickXPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@24

; 1881 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@24
$LN3@IsJoyStick@24:

; 1882 : 	}
; 1883 : 	else

	jmp	SHORT $LN1@IsJoyStick@24
$LN4@IsJoyStick@24:

; 1884 : 		if(this->JoyStickXPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@24

; 1885 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@24
$LN1@IsJoyStick@24:

; 1886 : 
; 1887 : 	return false;

	xor	al, al
$LN8@IsJoyStick@24:

; 1888 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickXMin@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickXMin
_TEXT	ENDS
PUBLIC	?JoyStickYPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickYPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickY@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickY@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickY, COMDAT
; _this$ = ecx

; 1890 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1891 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@25

; 1892 : 	{
; 1893 : 		if(this->JoyStickYPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@25

; 1894 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@25
$LN6@IsJoyStick@25:

; 1895 : 	}

	jmp	SHORT $LN1@IsJoyStick@25
$LN7@IsJoyStick@25:

; 1896 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@25

; 1897 : 	{
; 1898 : 		if(this->JoyStickYPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@25

; 1899 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@25
$LN3@IsJoyStick@25:

; 1900 : 	}
; 1901 : 	else

	jmp	SHORT $LN1@IsJoyStick@25
$LN4@IsJoyStick@25:

; 1902 : 		if(this->JoyStickYPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@25

; 1903 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@25
$LN1@IsJoyStick@25:

; 1904 : 
; 1905 : 	return false;

	xor	al, al
$LN8@IsJoyStick@25:

; 1906 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickY@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickY
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickYMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickYMax@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickYMax, COMDAT
; _this$ = ecx

; 1908 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1909 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@26

; 1910 : 	{
; 1911 : 		if(this->JoyStickYPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@26

; 1912 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@26
$LN6@IsJoyStick@26:

; 1913 : 	}

	jmp	SHORT $LN1@IsJoyStick@26
$LN7@IsJoyStick@26:

; 1914 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@26

; 1915 : 	{
; 1916 : 		if(this->JoyStickYPosition()>Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@IsJoyStick@26

; 1917 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@26
$LN3@IsJoyStick@26:

; 1918 : 	}
; 1919 : 	else

	jmp	SHORT $LN1@IsJoyStick@26
$LN4@IsJoyStick@26:

; 1920 : 		if(this->JoyStickYPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@26

; 1921 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@26
$LN1@IsJoyStick@26:

; 1922 : 
; 1923 : 	return false;

	xor	al, al
$LN8@IsJoyStick@26:

; 1924 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickYMax@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickYMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickYMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickYMin@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickYMin, COMDAT
; _this$ = ecx

; 1926 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1927 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@27

; 1928 : 	{
; 1929 : 		if(this->JoyStickYPosition()<Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@IsJoyStick@27

; 1930 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@27
$LN6@IsJoyStick@27:

; 1931 : 	}

	jmp	SHORT $LN1@IsJoyStick@27
$LN7@IsJoyStick@27:

; 1932 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@27

; 1933 : 	{
; 1934 : 		if(this->JoyStickYPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@27

; 1935 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@27
$LN3@IsJoyStick@27:

; 1936 : 	}
; 1937 : 	else

	jmp	SHORT $LN1@IsJoyStick@27
$LN4@IsJoyStick@27:

; 1938 : 		if(this->JoyStickYPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@27

; 1939 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@27
$LN1@IsJoyStick@27:

; 1940 : 
; 1941 : 	return false;

	xor	al, al
$LN8@IsJoyStick@27:

; 1942 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickYMin@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickYMin
_TEXT	ENDS
PUBLIC	?JoyStickZPosition@DeviceHandler@@QAEMXZ	; DeviceHandler::JoyStickZPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?IsJoyStickZ@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickZ@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickZ, COMDAT
; _this$ = ecx

; 1944 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1945 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@28

; 1946 : 	{
; 1947 : 		if(this->JoyStickZPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@28

; 1948 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@28
$LN6@IsJoyStick@28:

; 1949 : 	}

	jmp	SHORT $LN1@IsJoyStick@28
$LN7@IsJoyStick@28:

; 1950 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@28

; 1951 : 	{
; 1952 : 		if(this->JoyStickZPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@28

; 1953 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@28
$LN3@IsJoyStick@28:

; 1954 : 	}
; 1955 : 	else

	jmp	SHORT $LN1@IsJoyStick@28
$LN4@IsJoyStick@28:

; 1956 : 		if(this->JoyStickZPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@28

; 1957 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@28
$LN1@IsJoyStick@28:

; 1958 : 
; 1959 : 	return false;

	xor	al, al
$LN8@IsJoyStick@28:

; 1960 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickZ@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickZ
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickZMax@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickZMax@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickZMax, COMDAT
; _this$ = ecx

; 1962 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1963 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@29

; 1964 : 	{
; 1965 : 		if(this->JoyStickZPosition()>Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@IsJoyStick@29

; 1966 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@29
$LN6@IsJoyStick@29:

; 1967 : 	}

	jmp	SHORT $LN1@IsJoyStick@29
$LN7@IsJoyStick@29:

; 1968 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@29

; 1969 : 	{
; 1970 : 		if(this->JoyStickZPosition()>Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@IsJoyStick@29

; 1971 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@29
$LN3@IsJoyStick@29:

; 1972 : 	}
; 1973 : 	else

	jmp	SHORT $LN1@IsJoyStick@29
$LN4@IsJoyStick@29:

; 1974 : 		if(this->JoyStickZPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@29

; 1975 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@29
$LN1@IsJoyStick@29:

; 1976 : 
; 1977 : 	return false;

	xor	al, al
$LN8@IsJoyStick@29:

; 1978 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickZMax@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickZMax
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?IsJoyStickZMin@DeviceHandler@@QAE_NM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?IsJoyStickZMin@DeviceHandler@@QAE_NM@Z PROC		; DeviceHandler::IsJoyStickZMin, COMDAT
; _this$ = ecx

; 1980 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1981 : 	if(Percent>0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@IsJoyStick@30

; 1982 : 	{
; 1983 : 		if(this->JoyStickZPosition()<Percent*-1)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
	fld	DWORD PTR _Percent$[ebp]
	fmul	QWORD PTR __real@bff0000000000000
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN6@IsJoyStick@30

; 1984 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@30
$LN6@IsJoyStick@30:

; 1985 : 	}

	jmp	SHORT $LN1@IsJoyStick@30
$LN7@IsJoyStick@30:

; 1986 : 	else if(Percent<0)

	fld	DWORD PTR _Percent$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@IsJoyStick@30

; 1987 : 	{
; 1988 : 		if(this->JoyStickZPosition()<Percent)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
	fld	DWORD PTR _Percent$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@IsJoyStick@30

; 1989 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@30
$LN3@IsJoyStick@30:

; 1990 : 	}
; 1991 : 	else

	jmp	SHORT $LN1@IsJoyStick@30
$LN4@IsJoyStick@30:

; 1992 : 		if(this->JoyStickZPosition()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsJoyStick@30

; 1993 : 			return true;

	mov	al, 1
	jmp	SHORT $LN8@IsJoyStick@30
$LN1@IsJoyStick@30:

; 1994 : 
; 1995 : 	return false;

	xor	al, al
$LN8@IsJoyStick@30:

; 1996 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsJoyStickZMin@DeviceHandler@@QAE_NM@Z ENDP		; DeviceHandler::IsJoyStickZMin
_TEXT	ENDS
PUBLIC	??_C@_06NOADDNNE@Center?$AA@			; `string'
PUBLIC	??_C@_0L@FOKBDNEF@North?9West?$AA@		; `string'
PUBLIC	??_C@_04KCPCHGPD@West?$AA@			; `string'
PUBLIC	??_C@_0L@FPKCNJEA@South?9West?$AA@		; `string'
PUBLIC	??_C@_05HNHILFBE@South?$AA@			; `string'
PUBLIC	??_C@_0L@MKOAIKPF@South?9East?$AA@		; `string'
PUBLIC	??_C@_04DHLACFEG@East?$AA@			; `string'
PUBLIC	??_C@_0L@MLODGOPA@North?9East?$AA@		; `string'
PUBLIC	??_C@_05FPOHJMOI@North?$AA@			; `string'
PUBLIC	?AngleToChar@DeviceHandler@@QAEPADH@Z		; DeviceHandler::AngleToChar
;	COMDAT ??_C@_06NOADDNNE@Center?$AA@
CONST	SEGMENT
??_C@_06NOADDNNE@Center?$AA@ DB 'Center', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FOKBDNEF@North?9West?$AA@
CONST	SEGMENT
??_C@_0L@FOKBDNEF@North?9West?$AA@ DB 'North-West', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KCPCHGPD@West?$AA@
CONST	SEGMENT
??_C@_04KCPCHGPD@West?$AA@ DB 'West', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FPKCNJEA@South?9West?$AA@
CONST	SEGMENT
??_C@_0L@FPKCNJEA@South?9West?$AA@ DB 'South-West', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HNHILFBE@South?$AA@
CONST	SEGMENT
??_C@_05HNHILFBE@South?$AA@ DB 'South', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MKOAIKPF@South?9East?$AA@
CONST	SEGMENT
??_C@_0L@MKOAIKPF@South?9East?$AA@ DB 'South-East', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DHLACFEG@East?$AA@
CONST	SEGMENT
??_C@_04DHLACFEG@East?$AA@ DB 'East', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MLODGOPA@North?9East?$AA@
CONST	SEGMENT
??_C@_0L@MLODGOPA@North?9East?$AA@ DB 'North-East', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FPOHJMOI@North?$AA@
CONST	SEGMENT
??_C@_05FPOHJMOI@North?$AA@ DB 'North', 00H		; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?AngleToChar@DeviceHandler@@QAEPADH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Angle$ = 8						; size = 4
?AngleToChar@DeviceHandler@@QAEPADH@Z PROC		; DeviceHandler::AngleToChar, COMDAT
; _this$ = ecx

; 1998 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1999 : 	switch(Angle)

	mov	eax, DWORD PTR _Angle$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 180		; 000000b4H
	jg	SHORT $LN14@AngleToCha
	cmp	DWORD PTR tv64[ebp], 180		; 000000b4H
	je	SHORT $LN5@AngleToCha
	cmp	DWORD PTR tv64[ebp], 135		; 00000087H
	ja	SHORT $LN1@AngleToCha
	mov	ecx, DWORD PTR tv64[ebp]
	movzx	edx, BYTE PTR $LN15@AngleToCha[ecx]
	jmp	DWORD PTR $LN16@AngleToCha[edx*4]
$LN14@AngleToCha:
	cmp	DWORD PTR tv64[ebp], 225		; 000000e1H
	je	SHORT $LN4@AngleToCha
	cmp	DWORD PTR tv64[ebp], 270		; 0000010eH
	je	SHORT $LN3@AngleToCha
	cmp	DWORD PTR tv64[ebp], 315		; 0000013bH
	je	SHORT $LN2@AngleToCha
	jmp	SHORT $LN1@AngleToCha
$LN9@AngleToCha:

; 2000 : 	{
; 2001 : 	case 0:
; 2002 : 		return "North";

	mov	eax, OFFSET ??_C@_05FPOHJMOI@North?$AA@
	jmp	SHORT $LN12@AngleToCha

; 2003 : 		break;

	jmp	SHORT $LN10@AngleToCha
$LN8@AngleToCha:

; 2004 : 	case 45:
; 2005 : 		return "North-East";

	mov	eax, OFFSET ??_C@_0L@MLODGOPA@North?9East?$AA@
	jmp	SHORT $LN12@AngleToCha

; 2006 : 		break;

	jmp	SHORT $LN10@AngleToCha
$LN7@AngleToCha:

; 2007 : 	case 90:
; 2008 : 		return "East";

	mov	eax, OFFSET ??_C@_04DHLACFEG@East?$AA@
	jmp	SHORT $LN12@AngleToCha

; 2009 : 		break;

	jmp	SHORT $LN10@AngleToCha
$LN6@AngleToCha:

; 2010 : 	case 135:
; 2011 : 		return "South-East";

	mov	eax, OFFSET ??_C@_0L@MKOAIKPF@South?9East?$AA@
	jmp	SHORT $LN12@AngleToCha

; 2012 : 		break;

	jmp	SHORT $LN10@AngleToCha
$LN5@AngleToCha:

; 2013 : 	case 180:
; 2014 : 		return "South";

	mov	eax, OFFSET ??_C@_05HNHILFBE@South?$AA@
	jmp	SHORT $LN12@AngleToCha

; 2015 : 		break;

	jmp	SHORT $LN10@AngleToCha
$LN4@AngleToCha:

; 2016 : 	case 225:
; 2017 : 		return "South-West";

	mov	eax, OFFSET ??_C@_0L@FPKCNJEA@South?9West?$AA@
	jmp	SHORT $LN12@AngleToCha

; 2018 : 		break;

	jmp	SHORT $LN10@AngleToCha
$LN3@AngleToCha:

; 2019 : 	case 270:
; 2020 : 		return "West";

	mov	eax, OFFSET ??_C@_04KCPCHGPD@West?$AA@
	jmp	SHORT $LN12@AngleToCha

; 2021 : 		break;

	jmp	SHORT $LN10@AngleToCha
$LN2@AngleToCha:

; 2022 : 	case 315:
; 2023 : 		return "North-West";

	mov	eax, OFFSET ??_C@_0L@FOKBDNEF@North?9West?$AA@
	jmp	SHORT $LN12@AngleToCha

; 2024 : 		break;

	jmp	SHORT $LN10@AngleToCha
$LN1@AngleToCha:

; 2025 : 	case -1:
; 2026 : 	default:
; 2027 : 		return "Center";

	mov	eax, OFFSET ??_C@_06NOADDNNE@Center?$AA@
	jmp	SHORT $LN12@AngleToCha
$LN10@AngleToCha:

; 2028 : 		break;
; 2029 : 	}
; 2030 : 
; 2031 : 	return "Center";

	mov	eax, OFFSET ??_C@_06NOADDNNE@Center?$AA@
$LN12@AngleToCha:

; 2032 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN16@AngleToCha:
	DD	$LN9@AngleToCha
	DD	$LN8@AngleToCha
	DD	$LN7@AngleToCha
	DD	$LN6@AngleToCha
	DD	$LN1@AngleToCha
$LN15@AngleToCha:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?AngleToChar@DeviceHandler@@QAEPADH@Z ENDP		; DeviceHandler::AngleToChar
_TEXT	ENDS
PUBLIC	?GetCurrentDevice$@DeviceHandler@@QAEPADXZ	; DeviceHandler::GetCurrentDevice$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCurrentDevice$@DeviceHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentDevice$@DeviceHandler@@QAEPADXZ PROC		; DeviceHandler::GetCurrentDevice$, COMDAT
; _this$ = ecx

; 2034 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2035 : 	return this->CurrentDevice$;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+3204]

; 2036 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentDevice$@DeviceHandler@@QAEPADXZ ENDP		; DeviceHandler::GetCurrentDevice$
_TEXT	ENDS
PUBLIC	?GetHatAngle$@DeviceHandler@@QAEPADH@Z		; DeviceHandler::GetHatAngle$
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetHatAngle$@DeviceHandler@@QAEPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Hat$ = 8						; size = 4
?GetHatAngle$@DeviceHandler@@QAEPADH@Z PROC		; DeviceHandler::GetHatAngle$, COMDAT
; _this$ = ecx

; 2038 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2039 : 	return this->AngleToChar(this->GetHatAngle(Hat));

	mov	eax, DWORD PTR _Hat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHatAngle@DeviceHandler@@QAEHH@Z	; DeviceHandler::GetHatAngle
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AngleToChar@DeviceHandler@@QAEPADH@Z	; DeviceHandler::AngleToChar

; 2040 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetHatAngle$@DeviceHandler@@QAEPADH@Z ENDP		; DeviceHandler::GetHatAngle$
_TEXT	ENDS
PUBLIC	??_C@_0BE@PIIAIIKG@JoyStickSliderD?5Max?$AA@	; `string'
PUBLIC	??_C@_0BE@OKALGMMJ@JoyStickSliderD?5Min?$AA@	; `string'
PUBLIC	??_C@_0BE@OFIFLIBO@JoyStickSliderC?5Max?$AA@	; `string'
PUBLIC	??_C@_0BE@PHAOFMHB@JoyStickSliderC?5Min?$AA@	; `string'
PUBLIC	??_C@_0BE@CONJGLLL@JoyStickSliderB?5Max?$AA@	; `string'
PUBLIC	??_C@_0BE@DMFCIPNE@JoyStickSliderB?5Min?$AA@	; `string'
PUBLIC	??_C@_0BE@KIENBJBF@JoyStickSliderA?5Max?$AA@	; `string'
PUBLIC	??_C@_0BE@LKMGPNHK@JoyStickSliderA?5Min?$AA@	; `string'
PUBLIC	??_C@_0BD@BJAMJJJD@JoyStickTwistZ?5Max?$AA@	; `string'
PUBLIC	??_C@_0BD@LIHHNPM@JoyStickTwistZ?5Min?$AA@	; `string'
PUBLIC	??_C@_0BD@JPJIOLDN@JoyStickTwistY?5Max?$AA@	; `string'
PUBLIC	??_C@_0BD@INBDAPFC@JoyStickTwistY?5Min?$AA@	; `string'
PUBLIC	??_C@_0BD@FEMEDIJI@JoyStickTwistX?5Max?$AA@	; `string'
PUBLIC	??_C@_0BD@EGEPNMPH@JoyStickTwistX?5Min?$AA@	; `string'
PUBLIC	??_C@_0O@LPBINPLP@JoyStickZ?5Max?$AA@		; `string'
PUBLIC	??_C@_0O@KNJDDLNA@JoyStickZ?5Min?$AA@		; `string'
PUBLIC	??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@		; `string'
PUBLIC	??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@		; `string'
PUBLIC	??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@		; `string'
PUBLIC	??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@		; `string'
PUBLIC	??_C@_0BB@EOADNADO@Hat?54?5North?9West?$AA@	; `string'
PUBLIC	??_C@_0L@FCEANDBO@Hat?54?5West?$AA@		; `string'
PUBLIC	??_C@_0BB@EPAADEDL@Hat?54?5South?9West?$AA@	; `string'
PUBLIC	??_C@_0M@KDDDJJHE@Hat?54?5South?$AA@		; `string'
PUBLIC	??_C@_0BB@NKECGHIO@Hat?54?5South?9East?$AA@	; `string'
PUBLIC	??_C@_0L@MHACIAKL@Hat?54?5East?$AA@		; `string'
PUBLIC	??_C@_0BB@NLEBIDIL@Hat?54?5North?9East?$AA@	; `string'
PUBLIC	??_C@_0M@IBKMLAII@Hat?54?5North?$AA@		; `string'
PUBLIC	??_C@_0BB@DDHANGGG@Hat?53?5North?9West?$AA@	; `string'
PUBLIC	??_C@_0L@JHOHONJA@Hat?53?5West?$AA@		; `string'
PUBLIC	??_C@_0BB@DCHDDCGD@Hat?53?5South?9West?$AA@	; `string'
PUBLIC	??_C@_0M@KJPGJAGN@Hat?53?5South?$AA@		; `string'
PUBLIC	??_C@_0BB@KHDBGBNG@Hat?53?5South?9East?$AA@	; `string'
PUBLIC	??_C@_0L@CKFLOCF@Hat?53?5East?$AA@		; `string'
PUBLIC	??_C@_0BB@KGDCIFND@Hat?53?5North?9East?$AA@	; `string'
PUBLIC	??_C@_0M@ILGJLJJB@Hat?53?5North?$AA@		; `string'
PUBLIC	??_C@_0BB@OOOGAPOD@Hat?52?5North?9West?$AA@	; `string'
PUBLIC	??_C@_0L@DBJAOGCE@Hat?52?5West?$AA@		; `string'
PUBLIC	??_C@_0BB@OPOFOLOG@Hat?52?5South?9West?$AA@	; `string'
PUBLIC	??_C@_0M@GFFMJAPD@Hat?52?5South?$AA@		; `string'
PUBLIC	??_C@_0BB@HKKHLIFD@Hat?52?5South?9East?$AA@	; `string'
PUBLIC	??_C@_0L@KENCLFJB@Hat?52?5East?$AA@		; `string'
PUBLIC	??_C@_0BB@HLKEFMFG@Hat?52?5North?9East?$AA@	; `string'
PUBLIC	??_C@_0M@EHMDLJAP@Hat?52?5North?$AA@		; `string'
PUBLIC	??_C@_0BB@FDCMGDCN@Hat?51?5North?9West?$AA@	; `string'
PUBLIC	??_C@_0L@HIPMLJ@Hat?51?5West?$AA@		; `string'
PUBLIC	??_C@_0BB@FCCPIHCI@Hat?51?5South?9West?$AA@	; `string'
PUBLIC	??_C@_0M@OLNDJHBA@Hat?51?5South?$AA@		; `string'
PUBLIC	??_C@_0BB@MHGNNEJN@Hat?51?5South?9East?$AA@	; `string'
PUBLIC	??_C@_0L@JFDKKPAM@Hat?51?5East?$AA@		; `string'
PUBLIC	??_C@_0BB@MGGODAJI@Hat?51?5North?9East?$AA@	; `string'
PUBLIC	??_C@_0M@MJEMLOOM@Hat?51?5North?$AA@		; `string'
PUBLIC	??_C@_09JDNBCKDK@Button?531?$AA@		; `string'
PUBLIC	??_C@_09IKMKBLHL@Button?530?$AA@		; `string'
PUBLIC	??_C@_09FKMKMKAF@Button?529?$AA@		; `string'
PUBLIC	??_C@_09EDNBPLEE@Button?528?$AA@		; `string'
PUBLIC	??_C@_09MEEJOHIL@Button?527?$AA@		; `string'
PUBLIC	??_C@_09NNFCNGMK@Button?526?$AA@		; `string'
PUBLIC	??_C@_09PGHPIFAJ@Button?525?$AA@		; `string'
PUBLIC	??_C@_09OPGELEEI@Button?524?$AA@		; `string'
PUBLIC	??_C@_09KACFCCIP@Button?523?$AA@		; `string'
PUBLIC	??_C@_09LJDOBDMO@Button?522?$AA@		; `string'
PUBLIC	??_C@_09JCBDEAAN@Button?521?$AA@		; `string'
PUBLIC	??_C@_09ILAIHBEM@Button?520?$AA@		; `string'
PUBLIC	??_C@_09FIIMHEFM@Button?519?$AA@		; `string'
PUBLIC	??_C@_09EBJHEFBN@Button?518?$AA@		; `string'
PUBLIC	??_C@_09MGAPFJNC@Button?517?$AA@		; `string'
PUBLIC	??_C@_09NPBEGIJD@Button?516?$AA@		; `string'
PUBLIC	??_C@_09PEDJDLFA@Button?515?$AA@		; `string'
PUBLIC	??_C@_09ONCCAKBB@Button?514?$AA@		; `string'
PUBLIC	??_C@_09KCGDJMNG@Button?513?$AA@		; `string'
PUBLIC	??_C@_09LLHIKNJH@Button?512?$AA@		; `string'
PUBLIC	??_C@_09JAFFPOFE@Button?511?$AA@		; `string'
PUBLIC	??_C@_09IJEOMPBF@Button?510?$AA@		; `string'
PUBLIC	??_C@_08HDOEEPDN@Button?59?$AA@			; `string'
PUBLIC	??_C@_08GKPPHOHM@Button?58?$AA@			; `string'
PUBLIC	??_C@_08ONGHGCLD@Button?57?$AA@			; `string'
PUBLIC	??_C@_08PEHMFDPC@Button?56?$AA@			; `string'
PUBLIC	??_C@_08NPFBAADB@Button?55?$AA@			; `string'
PUBLIC	??_C@_08MGEKDBHA@Button?54?$AA@			; `string'
PUBLIC	??_C@_08IJALKHLH@Button?53?$AA@			; `string'
PUBLIC	??_C@_08JABAJGPG@Button?52?$AA@			; `string'
PUBLIC	??_C@_08LLDNMFDF@Button?51?$AA@			; `string'
PUBLIC	??_C@_08KCCGPEHE@Button?50?$AA@			; `string'
PUBLIC	?IntToInputName@DeviceHandler@@QAEPADH@Z	; DeviceHandler::IntToInputName
;	COMDAT ??_C@_0BE@PIIAIIKG@JoyStickSliderD?5Max?$AA@
CONST	SEGMENT
??_C@_0BE@PIIAIIKG@JoyStickSliderD?5Max?$AA@ DB 'JoyStickSliderD Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OKALGMMJ@JoyStickSliderD?5Min?$AA@
CONST	SEGMENT
??_C@_0BE@OKALGMMJ@JoyStickSliderD?5Min?$AA@ DB 'JoyStickSliderD Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OFIFLIBO@JoyStickSliderC?5Max?$AA@
CONST	SEGMENT
??_C@_0BE@OFIFLIBO@JoyStickSliderC?5Max?$AA@ DB 'JoyStickSliderC Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PHAOFMHB@JoyStickSliderC?5Min?$AA@
CONST	SEGMENT
??_C@_0BE@PHAOFMHB@JoyStickSliderC?5Min?$AA@ DB 'JoyStickSliderC Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CONJGLLL@JoyStickSliderB?5Max?$AA@
CONST	SEGMENT
??_C@_0BE@CONJGLLL@JoyStickSliderB?5Max?$AA@ DB 'JoyStickSliderB Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DMFCIPNE@JoyStickSliderB?5Min?$AA@
CONST	SEGMENT
??_C@_0BE@DMFCIPNE@JoyStickSliderB?5Min?$AA@ DB 'JoyStickSliderB Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KIENBJBF@JoyStickSliderA?5Max?$AA@
CONST	SEGMENT
??_C@_0BE@KIENBJBF@JoyStickSliderA?5Max?$AA@ DB 'JoyStickSliderA Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LKMGPNHK@JoyStickSliderA?5Min?$AA@
CONST	SEGMENT
??_C@_0BE@LKMGPNHK@JoyStickSliderA?5Min?$AA@ DB 'JoyStickSliderA Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BJAMJJJD@JoyStickTwistZ?5Max?$AA@
CONST	SEGMENT
??_C@_0BD@BJAMJJJD@JoyStickTwistZ?5Max?$AA@ DB 'JoyStickTwistZ Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LIHHNPM@JoyStickTwistZ?5Min?$AA@
CONST	SEGMENT
??_C@_0BD@LIHHNPM@JoyStickTwistZ?5Min?$AA@ DB 'JoyStickTwistZ Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JPJIOLDN@JoyStickTwistY?5Max?$AA@
CONST	SEGMENT
??_C@_0BD@JPJIOLDN@JoyStickTwistY?5Max?$AA@ DB 'JoyStickTwistY Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@INBDAPFC@JoyStickTwistY?5Min?$AA@
CONST	SEGMENT
??_C@_0BD@INBDAPFC@JoyStickTwistY?5Min?$AA@ DB 'JoyStickTwistY Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEMEDIJI@JoyStickTwistX?5Max?$AA@
CONST	SEGMENT
??_C@_0BD@FEMEDIJI@JoyStickTwistX?5Max?$AA@ DB 'JoyStickTwistX Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EGEPNMPH@JoyStickTwistX?5Min?$AA@
CONST	SEGMENT
??_C@_0BD@EGEPNMPH@JoyStickTwistX?5Min?$AA@ DB 'JoyStickTwistX Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LPBINPLP@JoyStickZ?5Max?$AA@
CONST	SEGMENT
??_C@_0O@LPBINPLP@JoyStickZ?5Max?$AA@ DB 'JoyStickZ Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KNJDDLNA@JoyStickZ?5Min?$AA@
CONST	SEGMENT
??_C@_0O@KNJDDLNA@JoyStickZ?5Min?$AA@ DB 'JoyStickZ Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@
CONST	SEGMENT
??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@ DB 'JoyStickY Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@
CONST	SEGMENT
??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@ DB 'JoyStickY Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@
CONST	SEGMENT
??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@ DB 'JoyStickX Max', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@
CONST	SEGMENT
??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@ DB 'JoyStickX Min', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EOADNADO@Hat?54?5North?9West?$AA@
CONST	SEGMENT
??_C@_0BB@EOADNADO@Hat?54?5North?9West?$AA@ DB 'Hat 4 North-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FCEANDBO@Hat?54?5West?$AA@
CONST	SEGMENT
??_C@_0L@FCEANDBO@Hat?54?5West?$AA@ DB 'Hat 4 West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EPAADEDL@Hat?54?5South?9West?$AA@
CONST	SEGMENT
??_C@_0BB@EPAADEDL@Hat?54?5South?9West?$AA@ DB 'Hat 4 South-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KDDDJJHE@Hat?54?5South?$AA@
CONST	SEGMENT
??_C@_0M@KDDDJJHE@Hat?54?5South?$AA@ DB 'Hat 4 South', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NKECGHIO@Hat?54?5South?9East?$AA@
CONST	SEGMENT
??_C@_0BB@NKECGHIO@Hat?54?5South?9East?$AA@ DB 'Hat 4 South-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MHACIAKL@Hat?54?5East?$AA@
CONST	SEGMENT
??_C@_0L@MHACIAKL@Hat?54?5East?$AA@ DB 'Hat 4 East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NLEBIDIL@Hat?54?5North?9East?$AA@
CONST	SEGMENT
??_C@_0BB@NLEBIDIL@Hat?54?5North?9East?$AA@ DB 'Hat 4 North-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IBKMLAII@Hat?54?5North?$AA@
CONST	SEGMENT
??_C@_0M@IBKMLAII@Hat?54?5North?$AA@ DB 'Hat 4 North', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DDHANGGG@Hat?53?5North?9West?$AA@
CONST	SEGMENT
??_C@_0BB@DDHANGGG@Hat?53?5North?9West?$AA@ DB 'Hat 3 North-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JHOHONJA@Hat?53?5West?$AA@
CONST	SEGMENT
??_C@_0L@JHOHONJA@Hat?53?5West?$AA@ DB 'Hat 3 West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DCHDDCGD@Hat?53?5South?9West?$AA@
CONST	SEGMENT
??_C@_0BB@DCHDDCGD@Hat?53?5South?9West?$AA@ DB 'Hat 3 South-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KJPGJAGN@Hat?53?5South?$AA@
CONST	SEGMENT
??_C@_0M@KJPGJAGN@Hat?53?5South?$AA@ DB 'Hat 3 South', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KHDBGBNG@Hat?53?5South?9East?$AA@
CONST	SEGMENT
??_C@_0BB@KHDBGBNG@Hat?53?5South?9East?$AA@ DB 'Hat 3 South-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CKFLOCF@Hat?53?5East?$AA@
CONST	SEGMENT
??_C@_0L@CKFLOCF@Hat?53?5East?$AA@ DB 'Hat 3 East', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KGDCIFND@Hat?53?5North?9East?$AA@
CONST	SEGMENT
??_C@_0BB@KGDCIFND@Hat?53?5North?9East?$AA@ DB 'Hat 3 North-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ILGJLJJB@Hat?53?5North?$AA@
CONST	SEGMENT
??_C@_0M@ILGJLJJB@Hat?53?5North?$AA@ DB 'Hat 3 North', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OOOGAPOD@Hat?52?5North?9West?$AA@
CONST	SEGMENT
??_C@_0BB@OOOGAPOD@Hat?52?5North?9West?$AA@ DB 'Hat 2 North-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DBJAOGCE@Hat?52?5West?$AA@
CONST	SEGMENT
??_C@_0L@DBJAOGCE@Hat?52?5West?$AA@ DB 'Hat 2 West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OPOFOLOG@Hat?52?5South?9West?$AA@
CONST	SEGMENT
??_C@_0BB@OPOFOLOG@Hat?52?5South?9West?$AA@ DB 'Hat 2 South-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GFFMJAPD@Hat?52?5South?$AA@
CONST	SEGMENT
??_C@_0M@GFFMJAPD@Hat?52?5South?$AA@ DB 'Hat 2 South', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HKKHLIFD@Hat?52?5South?9East?$AA@
CONST	SEGMENT
??_C@_0BB@HKKHLIFD@Hat?52?5South?9East?$AA@ DB 'Hat 2 South-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KENCLFJB@Hat?52?5East?$AA@
CONST	SEGMENT
??_C@_0L@KENCLFJB@Hat?52?5East?$AA@ DB 'Hat 2 East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HLKEFMFG@Hat?52?5North?9East?$AA@
CONST	SEGMENT
??_C@_0BB@HLKEFMFG@Hat?52?5North?9East?$AA@ DB 'Hat 2 North-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EHMDLJAP@Hat?52?5North?$AA@
CONST	SEGMENT
??_C@_0M@EHMDLJAP@Hat?52?5North?$AA@ DB 'Hat 2 North', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FDCMGDCN@Hat?51?5North?9West?$AA@
CONST	SEGMENT
??_C@_0BB@FDCMGDCN@Hat?51?5North?9West?$AA@ DB 'Hat 1 North-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HIPMLJ@Hat?51?5West?$AA@
CONST	SEGMENT
??_C@_0L@HIPMLJ@Hat?51?5West?$AA@ DB 'Hat 1 West', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCCPIHCI@Hat?51?5South?9West?$AA@
CONST	SEGMENT
??_C@_0BB@FCCPIHCI@Hat?51?5South?9West?$AA@ DB 'Hat 1 South-West', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OLNDJHBA@Hat?51?5South?$AA@
CONST	SEGMENT
??_C@_0M@OLNDJHBA@Hat?51?5South?$AA@ DB 'Hat 1 South', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MHGNNEJN@Hat?51?5South?9East?$AA@
CONST	SEGMENT
??_C@_0BB@MHGNNEJN@Hat?51?5South?9East?$AA@ DB 'Hat 1 South-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JFDKKPAM@Hat?51?5East?$AA@
CONST	SEGMENT
??_C@_0L@JFDKKPAM@Hat?51?5East?$AA@ DB 'Hat 1 East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MGGODAJI@Hat?51?5North?9East?$AA@
CONST	SEGMENT
??_C@_0BB@MGGODAJI@Hat?51?5North?9East?$AA@ DB 'Hat 1 North-East', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MJEMLOOM@Hat?51?5North?$AA@
CONST	SEGMENT
??_C@_0M@MJEMLOOM@Hat?51?5North?$AA@ DB 'Hat 1 North', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JDNBCKDK@Button?531?$AA@
CONST	SEGMENT
??_C@_09JDNBCKDK@Button?531?$AA@ DB 'Button 31', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IKMKBLHL@Button?530?$AA@
CONST	SEGMENT
??_C@_09IKMKBLHL@Button?530?$AA@ DB 'Button 30', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FKMKMKAF@Button?529?$AA@
CONST	SEGMENT
??_C@_09FKMKMKAF@Button?529?$AA@ DB 'Button 29', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EDNBPLEE@Button?528?$AA@
CONST	SEGMENT
??_C@_09EDNBPLEE@Button?528?$AA@ DB 'Button 28', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MEEJOHIL@Button?527?$AA@
CONST	SEGMENT
??_C@_09MEEJOHIL@Button?527?$AA@ DB 'Button 27', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NNFCNGMK@Button?526?$AA@
CONST	SEGMENT
??_C@_09NNFCNGMK@Button?526?$AA@ DB 'Button 26', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PGHPIFAJ@Button?525?$AA@
CONST	SEGMENT
??_C@_09PGHPIFAJ@Button?525?$AA@ DB 'Button 25', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPGELEEI@Button?524?$AA@
CONST	SEGMENT
??_C@_09OPGELEEI@Button?524?$AA@ DB 'Button 24', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KACFCCIP@Button?523?$AA@
CONST	SEGMENT
??_C@_09KACFCCIP@Button?523?$AA@ DB 'Button 23', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LJDOBDMO@Button?522?$AA@
CONST	SEGMENT
??_C@_09LJDOBDMO@Button?522?$AA@ DB 'Button 22', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JCBDEAAN@Button?521?$AA@
CONST	SEGMENT
??_C@_09JCBDEAAN@Button?521?$AA@ DB 'Button 21', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ILAIHBEM@Button?520?$AA@
CONST	SEGMENT
??_C@_09ILAIHBEM@Button?520?$AA@ DB 'Button 20', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FIIMHEFM@Button?519?$AA@
CONST	SEGMENT
??_C@_09FIIMHEFM@Button?519?$AA@ DB 'Button 19', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EBJHEFBN@Button?518?$AA@
CONST	SEGMENT
??_C@_09EBJHEFBN@Button?518?$AA@ DB 'Button 18', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MGAPFJNC@Button?517?$AA@
CONST	SEGMENT
??_C@_09MGAPFJNC@Button?517?$AA@ DB 'Button 17', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NPBEGIJD@Button?516?$AA@
CONST	SEGMENT
??_C@_09NPBEGIJD@Button?516?$AA@ DB 'Button 16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PEDJDLFA@Button?515?$AA@
CONST	SEGMENT
??_C@_09PEDJDLFA@Button?515?$AA@ DB 'Button 15', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ONCCAKBB@Button?514?$AA@
CONST	SEGMENT
??_C@_09ONCCAKBB@Button?514?$AA@ DB 'Button 14', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KCGDJMNG@Button?513?$AA@
CONST	SEGMENT
??_C@_09KCGDJMNG@Button?513?$AA@ DB 'Button 13', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LLHIKNJH@Button?512?$AA@
CONST	SEGMENT
??_C@_09LLHIKNJH@Button?512?$AA@ DB 'Button 12', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JAFFPOFE@Button?511?$AA@
CONST	SEGMENT
??_C@_09JAFFPOFE@Button?511?$AA@ DB 'Button 11', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IJEOMPBF@Button?510?$AA@
CONST	SEGMENT
??_C@_09IJEOMPBF@Button?510?$AA@ DB 'Button 10', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HDOEEPDN@Button?59?$AA@
CONST	SEGMENT
??_C@_08HDOEEPDN@Button?59?$AA@ DB 'Button 9', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GKPPHOHM@Button?58?$AA@
CONST	SEGMENT
??_C@_08GKPPHOHM@Button?58?$AA@ DB 'Button 8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08ONGHGCLD@Button?57?$AA@
CONST	SEGMENT
??_C@_08ONGHGCLD@Button?57?$AA@ DB 'Button 7', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PEHMFDPC@Button?56?$AA@
CONST	SEGMENT
??_C@_08PEHMFDPC@Button?56?$AA@ DB 'Button 6', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NPFBAADB@Button?55?$AA@
CONST	SEGMENT
??_C@_08NPFBAADB@Button?55?$AA@ DB 'Button 5', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MGEKDBHA@Button?54?$AA@
CONST	SEGMENT
??_C@_08MGEKDBHA@Button?54?$AA@ DB 'Button 4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IJALKHLH@Button?53?$AA@
CONST	SEGMENT
??_C@_08IJALKHLH@Button?53?$AA@ DB 'Button 3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JABAJGPG@Button?52?$AA@
CONST	SEGMENT
??_C@_08JABAJGPG@Button?52?$AA@ DB 'Button 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLDNMFDF@Button?51?$AA@
CONST	SEGMENT
??_C@_08LLDNMFDF@Button?51?$AA@ DB 'Button 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KCCGPEHE@Button?50?$AA@
CONST	SEGMENT
??_C@_08KCCGPEHE@Button?50?$AA@ DB 'Button 0', 00H	; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?IntToInputName@DeviceHandler@@QAEPADH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?IntToInputName@DeviceHandler@@QAEPADH@Z PROC		; DeviceHandler::IntToInputName, COMDAT
; _this$ = ecx

; 2042 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2043 : 	switch(InputType)

	mov	eax, DWORD PTR _InputType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 83			; 00000053H
	ja	$LN1@IntToInput
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN90@IntToInput[ecx*4]
$LN85@IntToInput:

; 2044 : 	{
; 2045 : 	case 0:
; 2046 : 		return "Button 0";

	mov	eax, OFFSET ??_C@_08KCCGPEHE@Button?50?$AA@
	jmp	$LN88@IntToInput

; 2047 : 		break;

	jmp	$LN86@IntToInput
$LN84@IntToInput:

; 2048 : 	case 1:
; 2049 : 		return "Button 1";

	mov	eax, OFFSET ??_C@_08LLDNMFDF@Button?51?$AA@
	jmp	$LN88@IntToInput

; 2050 : 		break;

	jmp	$LN86@IntToInput
$LN83@IntToInput:

; 2051 : 	case 2:
; 2052 : 		return "Button 2";

	mov	eax, OFFSET ??_C@_08JABAJGPG@Button?52?$AA@
	jmp	$LN88@IntToInput

; 2053 : 		break;

	jmp	$LN86@IntToInput
$LN82@IntToInput:

; 2054 : 	case 3:
; 2055 : 		return "Button 3";

	mov	eax, OFFSET ??_C@_08IJALKHLH@Button?53?$AA@
	jmp	$LN88@IntToInput

; 2056 : 		break;

	jmp	$LN86@IntToInput
$LN81@IntToInput:

; 2057 : 	case 4:
; 2058 : 		return "Button 4";

	mov	eax, OFFSET ??_C@_08MGEKDBHA@Button?54?$AA@
	jmp	$LN88@IntToInput

; 2059 : 		break;

	jmp	$LN86@IntToInput
$LN80@IntToInput:

; 2060 : 	case 5:
; 2061 : 		return "Button 5";

	mov	eax, OFFSET ??_C@_08NPFBAADB@Button?55?$AA@
	jmp	$LN88@IntToInput

; 2062 : 		break;

	jmp	$LN86@IntToInput
$LN79@IntToInput:

; 2063 : 	case 6:
; 2064 : 		return "Button 6";

	mov	eax, OFFSET ??_C@_08PEHMFDPC@Button?56?$AA@
	jmp	$LN88@IntToInput

; 2065 : 		break;

	jmp	$LN86@IntToInput
$LN78@IntToInput:

; 2066 : 	case 7:
; 2067 : 		return "Button 7";

	mov	eax, OFFSET ??_C@_08ONGHGCLD@Button?57?$AA@
	jmp	$LN88@IntToInput

; 2068 : 		break;

	jmp	$LN86@IntToInput
$LN77@IntToInput:

; 2069 : 	case 8:
; 2070 : 		return "Button 8";

	mov	eax, OFFSET ??_C@_08GKPPHOHM@Button?58?$AA@
	jmp	$LN88@IntToInput

; 2071 : 		break;

	jmp	$LN86@IntToInput
$LN76@IntToInput:

; 2072 : 	case 9:
; 2073 : 		return "Button 9";

	mov	eax, OFFSET ??_C@_08HDOEEPDN@Button?59?$AA@
	jmp	$LN88@IntToInput

; 2074 : 		break;

	jmp	$LN86@IntToInput
$LN75@IntToInput:

; 2075 : 	case 10:
; 2076 : 		return "Button 10";

	mov	eax, OFFSET ??_C@_09IJEOMPBF@Button?510?$AA@
	jmp	$LN88@IntToInput

; 2077 : 		break;

	jmp	$LN86@IntToInput
$LN74@IntToInput:

; 2078 : 	case 11:
; 2079 : 		return "Button 11";

	mov	eax, OFFSET ??_C@_09JAFFPOFE@Button?511?$AA@
	jmp	$LN88@IntToInput

; 2080 : 		break;

	jmp	$LN86@IntToInput
$LN73@IntToInput:

; 2081 : 	case 12:
; 2082 : 		return "Button 12";

	mov	eax, OFFSET ??_C@_09LLHIKNJH@Button?512?$AA@
	jmp	$LN88@IntToInput

; 2083 : 		break;

	jmp	$LN86@IntToInput
$LN72@IntToInput:

; 2084 : 	case 13:
; 2085 : 		return "Button 13";

	mov	eax, OFFSET ??_C@_09KCGDJMNG@Button?513?$AA@
	jmp	$LN88@IntToInput

; 2086 : 		break;

	jmp	$LN86@IntToInput
$LN71@IntToInput:

; 2087 : 	case 14:
; 2088 : 		return "Button 14";

	mov	eax, OFFSET ??_C@_09ONCCAKBB@Button?514?$AA@
	jmp	$LN88@IntToInput

; 2089 : 		break;

	jmp	$LN86@IntToInput
$LN70@IntToInput:

; 2090 : 	case 15:
; 2091 : 		return "Button 15";

	mov	eax, OFFSET ??_C@_09PEDJDLFA@Button?515?$AA@
	jmp	$LN88@IntToInput

; 2092 : 		break;

	jmp	$LN86@IntToInput
$LN69@IntToInput:

; 2093 : 	case 16:
; 2094 : 		return "Button 16";

	mov	eax, OFFSET ??_C@_09NPBEGIJD@Button?516?$AA@
	jmp	$LN88@IntToInput

; 2095 : 		break;

	jmp	$LN86@IntToInput
$LN68@IntToInput:

; 2096 : 	case 17:
; 2097 : 		return "Button 17";

	mov	eax, OFFSET ??_C@_09MGAPFJNC@Button?517?$AA@
	jmp	$LN88@IntToInput

; 2098 : 		break;

	jmp	$LN86@IntToInput
$LN67@IntToInput:

; 2099 : 	case 18:
; 2100 : 		return "Button 18";

	mov	eax, OFFSET ??_C@_09EBJHEFBN@Button?518?$AA@
	jmp	$LN88@IntToInput

; 2101 : 		break;

	jmp	$LN86@IntToInput
$LN66@IntToInput:

; 2102 : 	case 19:
; 2103 : 		return "Button 19";

	mov	eax, OFFSET ??_C@_09FIIMHEFM@Button?519?$AA@
	jmp	$LN88@IntToInput

; 2104 : 		break;

	jmp	$LN86@IntToInput
$LN65@IntToInput:

; 2105 : 	case 20:
; 2106 : 		return "Button 20";

	mov	eax, OFFSET ??_C@_09ILAIHBEM@Button?520?$AA@
	jmp	$LN88@IntToInput

; 2107 : 		break;

	jmp	$LN86@IntToInput
$LN64@IntToInput:

; 2108 : 	case 21:
; 2109 : 		return "Button 21";

	mov	eax, OFFSET ??_C@_09JCBDEAAN@Button?521?$AA@
	jmp	$LN88@IntToInput

; 2110 : 		break;

	jmp	$LN86@IntToInput
$LN63@IntToInput:

; 2111 : 	case 22:
; 2112 : 		return "Button 22";

	mov	eax, OFFSET ??_C@_09LJDOBDMO@Button?522?$AA@
	jmp	$LN88@IntToInput

; 2113 : 		break;

	jmp	$LN86@IntToInput
$LN62@IntToInput:

; 2114 : 	case 23:
; 2115 : 		return "Button 23";

	mov	eax, OFFSET ??_C@_09KACFCCIP@Button?523?$AA@
	jmp	$LN88@IntToInput

; 2116 : 		break;

	jmp	$LN86@IntToInput
$LN61@IntToInput:

; 2117 : 	case 24:
; 2118 : 		return "Button 24";

	mov	eax, OFFSET ??_C@_09OPGELEEI@Button?524?$AA@
	jmp	$LN88@IntToInput

; 2119 : 		break;

	jmp	$LN86@IntToInput
$LN60@IntToInput:

; 2120 : 	case 25:
; 2121 : 		return "Button 25";

	mov	eax, OFFSET ??_C@_09PGHPIFAJ@Button?525?$AA@
	jmp	$LN88@IntToInput

; 2122 : 		break;

	jmp	$LN86@IntToInput
$LN59@IntToInput:

; 2123 : 	case 26:
; 2124 : 		return "Button 26";

	mov	eax, OFFSET ??_C@_09NNFCNGMK@Button?526?$AA@
	jmp	$LN88@IntToInput

; 2125 : 		break;

	jmp	$LN86@IntToInput
$LN58@IntToInput:

; 2126 : 	case 27:
; 2127 : 		return "Button 27";

	mov	eax, OFFSET ??_C@_09MEEJOHIL@Button?527?$AA@
	jmp	$LN88@IntToInput

; 2128 : 		break;

	jmp	$LN86@IntToInput
$LN57@IntToInput:

; 2129 : 	case 28:
; 2130 : 		return "Button 28";

	mov	eax, OFFSET ??_C@_09EDNBPLEE@Button?528?$AA@
	jmp	$LN88@IntToInput

; 2131 : 		break;

	jmp	$LN86@IntToInput
$LN56@IntToInput:

; 2132 : 	case 29:
; 2133 : 		return "Button 29";

	mov	eax, OFFSET ??_C@_09FKMKMKAF@Button?529?$AA@
	jmp	$LN88@IntToInput

; 2134 : 		break;

	jmp	$LN86@IntToInput
$LN55@IntToInput:

; 2135 : 	case 30:
; 2136 : 		return "Button 30";

	mov	eax, OFFSET ??_C@_09IKMKBLHL@Button?530?$AA@
	jmp	$LN88@IntToInput

; 2137 : 		break;

	jmp	$LN86@IntToInput
$LN54@IntToInput:

; 2138 : 	case 31:
; 2139 : 		return "Button 31";

	mov	eax, OFFSET ??_C@_09JDNBCKDK@Button?531?$AA@
	jmp	$LN88@IntToInput

; 2140 : 		break;

	jmp	$LN86@IntToInput
$LN53@IntToInput:

; 2141 : 	case 32:
; 2142 : 		return "Hat 1 North";

	mov	eax, OFFSET ??_C@_0M@MJEMLOOM@Hat?51?5North?$AA@
	jmp	$LN88@IntToInput

; 2143 : 		break;

	jmp	$LN86@IntToInput
$LN52@IntToInput:

; 2144 : 	case 33:
; 2145 : 		return "Hat 1 North-East";

	mov	eax, OFFSET ??_C@_0BB@MGGODAJI@Hat?51?5North?9East?$AA@
	jmp	$LN88@IntToInput

; 2146 : 		break;

	jmp	$LN86@IntToInput
$LN51@IntToInput:

; 2147 : 	case 34:
; 2148 : 		return "Hat 1 East";

	mov	eax, OFFSET ??_C@_0L@JFDKKPAM@Hat?51?5East?$AA@
	jmp	$LN88@IntToInput

; 2149 : 		break;

	jmp	$LN86@IntToInput
$LN50@IntToInput:

; 2150 : 	case 35:
; 2151 : 		return "Hat 1 South-East";

	mov	eax, OFFSET ??_C@_0BB@MHGNNEJN@Hat?51?5South?9East?$AA@
	jmp	$LN88@IntToInput

; 2152 : 		break;

	jmp	$LN86@IntToInput
$LN49@IntToInput:

; 2153 : 	case 36:
; 2154 : 		return "Hat 1 South";

	mov	eax, OFFSET ??_C@_0M@OLNDJHBA@Hat?51?5South?$AA@
	jmp	$LN88@IntToInput

; 2155 : 		break;

	jmp	$LN86@IntToInput
$LN48@IntToInput:

; 2156 : 	case 37:
; 2157 : 		return "Hat 1 South-West";

	mov	eax, OFFSET ??_C@_0BB@FCCPIHCI@Hat?51?5South?9West?$AA@
	jmp	$LN88@IntToInput

; 2158 : 		break;

	jmp	$LN86@IntToInput
$LN47@IntToInput:

; 2159 : 	case 38:
; 2160 : 		return "Hat 1 West";

	mov	eax, OFFSET ??_C@_0L@HIPMLJ@Hat?51?5West?$AA@
	jmp	$LN88@IntToInput

; 2161 : 		break;

	jmp	$LN86@IntToInput
$LN46@IntToInput:

; 2162 : 	case 39:
; 2163 : 		return "Hat 1 North-West";

	mov	eax, OFFSET ??_C@_0BB@FDCMGDCN@Hat?51?5North?9West?$AA@
	jmp	$LN88@IntToInput

; 2164 : 		break;

	jmp	$LN86@IntToInput
$LN45@IntToInput:

; 2165 : 	case 40:
; 2166 : 		return "Hat 2 North";

	mov	eax, OFFSET ??_C@_0M@EHMDLJAP@Hat?52?5North?$AA@
	jmp	$LN88@IntToInput

; 2167 : 		break;

	jmp	$LN86@IntToInput
$LN44@IntToInput:

; 2168 : 	case 41:
; 2169 : 		return "Hat 2 North-East";

	mov	eax, OFFSET ??_C@_0BB@HLKEFMFG@Hat?52?5North?9East?$AA@
	jmp	$LN88@IntToInput

; 2170 : 		break;

	jmp	$LN86@IntToInput
$LN43@IntToInput:

; 2171 : 	case 42:
; 2172 : 		return "Hat 2 East";

	mov	eax, OFFSET ??_C@_0L@KENCLFJB@Hat?52?5East?$AA@
	jmp	$LN88@IntToInput

; 2173 : 		break;

	jmp	$LN86@IntToInput
$LN42@IntToInput:

; 2174 : 	case 43:
; 2175 : 		return "Hat 2 South-East";

	mov	eax, OFFSET ??_C@_0BB@HKKHLIFD@Hat?52?5South?9East?$AA@
	jmp	$LN88@IntToInput

; 2176 : 		break;

	jmp	$LN86@IntToInput
$LN41@IntToInput:

; 2177 : 	case 44:
; 2178 : 		return "Hat 2 South";

	mov	eax, OFFSET ??_C@_0M@GFFMJAPD@Hat?52?5South?$AA@
	jmp	$LN88@IntToInput

; 2179 : 		break;

	jmp	$LN86@IntToInput
$LN40@IntToInput:

; 2180 : 	case 45:
; 2181 : 		return "Hat 2 South-West";

	mov	eax, OFFSET ??_C@_0BB@OPOFOLOG@Hat?52?5South?9West?$AA@
	jmp	$LN88@IntToInput

; 2182 : 		break;

	jmp	$LN86@IntToInput
$LN39@IntToInput:

; 2183 : 	case 46:
; 2184 : 		return "Hat 2 West";

	mov	eax, OFFSET ??_C@_0L@DBJAOGCE@Hat?52?5West?$AA@
	jmp	$LN88@IntToInput

; 2185 : 		break;

	jmp	$LN86@IntToInput
$LN38@IntToInput:

; 2186 : 	case 47:
; 2187 : 		return "Hat 2 North-West";

	mov	eax, OFFSET ??_C@_0BB@OOOGAPOD@Hat?52?5North?9West?$AA@
	jmp	$LN88@IntToInput

; 2188 : 		break;

	jmp	$LN86@IntToInput
$LN37@IntToInput:

; 2189 : 	case 48:
; 2190 : 		return "Hat 3 North";

	mov	eax, OFFSET ??_C@_0M@ILGJLJJB@Hat?53?5North?$AA@
	jmp	$LN88@IntToInput

; 2191 : 		break;

	jmp	$LN86@IntToInput
$LN36@IntToInput:

; 2192 : 	case 49:
; 2193 : 		return "Hat 3 North-East";

	mov	eax, OFFSET ??_C@_0BB@KGDCIFND@Hat?53?5North?9East?$AA@
	jmp	$LN88@IntToInput

; 2194 : 		break;

	jmp	$LN86@IntToInput
$LN35@IntToInput:

; 2195 : 	case 50:
; 2196 : 		return "Hat 3 East";

	mov	eax, OFFSET ??_C@_0L@CKFLOCF@Hat?53?5East?$AA@
	jmp	$LN88@IntToInput

; 2197 : 		break;

	jmp	$LN86@IntToInput
$LN34@IntToInput:

; 2198 : 	case 51:
; 2199 : 		return "Hat 3 South-East";

	mov	eax, OFFSET ??_C@_0BB@KHDBGBNG@Hat?53?5South?9East?$AA@
	jmp	$LN88@IntToInput

; 2200 : 		break;

	jmp	$LN86@IntToInput
$LN33@IntToInput:

; 2201 : 	case 52:
; 2202 : 		return "Hat 3 South";

	mov	eax, OFFSET ??_C@_0M@KJPGJAGN@Hat?53?5South?$AA@
	jmp	$LN88@IntToInput

; 2203 : 		break;

	jmp	$LN86@IntToInput
$LN32@IntToInput:

; 2204 : 	case 53:
; 2205 : 		return "Hat 3 South-West";

	mov	eax, OFFSET ??_C@_0BB@DCHDDCGD@Hat?53?5South?9West?$AA@
	jmp	$LN88@IntToInput

; 2206 : 		break;

	jmp	$LN86@IntToInput
$LN31@IntToInput:

; 2207 : 	case 54:
; 2208 : 		return "Hat 3 West";

	mov	eax, OFFSET ??_C@_0L@JHOHONJA@Hat?53?5West?$AA@
	jmp	$LN88@IntToInput

; 2209 : 		break;

	jmp	$LN86@IntToInput
$LN30@IntToInput:

; 2210 : 	case 55:
; 2211 : 		return "Hat 3 North-West";

	mov	eax, OFFSET ??_C@_0BB@DDHANGGG@Hat?53?5North?9West?$AA@
	jmp	$LN88@IntToInput

; 2212 : 		break;

	jmp	$LN86@IntToInput
$LN29@IntToInput:

; 2213 : 	case 56:
; 2214 : 		return "Hat 4 North";

	mov	eax, OFFSET ??_C@_0M@IBKMLAII@Hat?54?5North?$AA@
	jmp	$LN88@IntToInput

; 2215 : 		break;

	jmp	$LN86@IntToInput
$LN28@IntToInput:

; 2216 : 	case 57:
; 2217 : 		return "Hat 4 North-East";

	mov	eax, OFFSET ??_C@_0BB@NLEBIDIL@Hat?54?5North?9East?$AA@
	jmp	$LN88@IntToInput

; 2218 : 		break;

	jmp	$LN86@IntToInput
$LN27@IntToInput:

; 2219 : 	case 58:
; 2220 : 		return "Hat 4 East";

	mov	eax, OFFSET ??_C@_0L@MHACIAKL@Hat?54?5East?$AA@
	jmp	$LN88@IntToInput

; 2221 : 		break;

	jmp	$LN86@IntToInput
$LN26@IntToInput:

; 2222 : 	case 59:
; 2223 : 		return "Hat 4 South-East";

	mov	eax, OFFSET ??_C@_0BB@NKECGHIO@Hat?54?5South?9East?$AA@
	jmp	$LN88@IntToInput

; 2224 : 		break;

	jmp	$LN86@IntToInput
$LN25@IntToInput:

; 2225 : 	case 60:
; 2226 : 		return "Hat 4 South";

	mov	eax, OFFSET ??_C@_0M@KDDDJJHE@Hat?54?5South?$AA@
	jmp	$LN88@IntToInput

; 2227 : 		break;

	jmp	$LN86@IntToInput
$LN24@IntToInput:

; 2228 : 	case 61:
; 2229 : 		return "Hat 4 South-West";

	mov	eax, OFFSET ??_C@_0BB@EPAADEDL@Hat?54?5South?9West?$AA@
	jmp	$LN88@IntToInput

; 2230 : 		break;

	jmp	$LN86@IntToInput
$LN23@IntToInput:

; 2231 : 	case 62:
; 2232 : 		return "Hat 4 West";

	mov	eax, OFFSET ??_C@_0L@FCEANDBO@Hat?54?5West?$AA@
	jmp	$LN88@IntToInput

; 2233 : 		break;

	jmp	$LN86@IntToInput
$LN22@IntToInput:

; 2234 : 	case 63:
; 2235 : 		return "Hat 4 North-West";

	mov	eax, OFFSET ??_C@_0BB@EOADNADO@Hat?54?5North?9West?$AA@
	jmp	$LN88@IntToInput

; 2236 : 		break;

	jmp	$LN86@IntToInput
$LN21@IntToInput:

; 2237 : 	case 64:
; 2238 : 		return "JoyStickX Min";

	mov	eax, OFFSET ??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@
	jmp	$LN88@IntToInput

; 2239 : 		break;

	jmp	$LN86@IntToInput
$LN20@IntToInput:

; 2240 : 	case 65:
; 2241 : 		return "JoyStickX Max";

	mov	eax, OFFSET ??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@
	jmp	$LN88@IntToInput

; 2242 : 		break;

	jmp	$LN86@IntToInput
$LN19@IntToInput:

; 2243 : 	case 66:
; 2244 : 		return "JoyStickY Min";

	mov	eax, OFFSET ??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@
	jmp	$LN88@IntToInput

; 2245 : 		break;

	jmp	$LN86@IntToInput
$LN18@IntToInput:

; 2246 : 	case 67:
; 2247 : 		return "JoyStickY Max";

	mov	eax, OFFSET ??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@
	jmp	$LN88@IntToInput

; 2248 : 		break;

	jmp	$LN86@IntToInput
$LN17@IntToInput:

; 2249 : 	case 68:
; 2250 : 		return "JoyStickZ Min";

	mov	eax, OFFSET ??_C@_0O@KNJDDLNA@JoyStickZ?5Min?$AA@
	jmp	$LN88@IntToInput

; 2251 : 		break;

	jmp	$LN86@IntToInput
$LN16@IntToInput:

; 2252 : 	case 69:
; 2253 : 		return "JoyStickZ Max";

	mov	eax, OFFSET ??_C@_0O@LPBINPLP@JoyStickZ?5Max?$AA@
	jmp	$LN88@IntToInput

; 2254 : 		break;

	jmp	$LN86@IntToInput
$LN15@IntToInput:

; 2255 : 	case 70:
; 2256 : 		return "JoyStickTwistX Min";

	mov	eax, OFFSET ??_C@_0BD@EGEPNMPH@JoyStickTwistX?5Min?$AA@
	jmp	$LN88@IntToInput

; 2257 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN14@IntToInput:

; 2258 : 	case 71:
; 2259 : 		return "JoyStickTwistX Max";

	mov	eax, OFFSET ??_C@_0BD@FEMEDIJI@JoyStickTwistX?5Max?$AA@
	jmp	SHORT $LN88@IntToInput

; 2260 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN13@IntToInput:

; 2261 : 	case 72:
; 2262 : 		return "JoyStickTwistY Min";

	mov	eax, OFFSET ??_C@_0BD@INBDAPFC@JoyStickTwistY?5Min?$AA@
	jmp	SHORT $LN88@IntToInput

; 2263 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN12@IntToInput:

; 2264 : 	case 73:
; 2265 : 		return "JoyStickTwistY Max";

	mov	eax, OFFSET ??_C@_0BD@JPJIOLDN@JoyStickTwistY?5Max?$AA@
	jmp	SHORT $LN88@IntToInput

; 2266 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN11@IntToInput:

; 2267 : 	case 74:
; 2268 : 		return "JoyStickTwistZ Min";

	mov	eax, OFFSET ??_C@_0BD@LIHHNPM@JoyStickTwistZ?5Min?$AA@
	jmp	SHORT $LN88@IntToInput

; 2269 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN10@IntToInput:

; 2270 : 	case 75:
; 2271 : 		return "JoyStickTwistZ Max";

	mov	eax, OFFSET ??_C@_0BD@BJAMJJJD@JoyStickTwistZ?5Max?$AA@
	jmp	SHORT $LN88@IntToInput

; 2272 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN9@IntToInput:

; 2273 : 	case 76:
; 2274 : 		return "JoyStickSliderA Min";

	mov	eax, OFFSET ??_C@_0BE@LKMGPNHK@JoyStickSliderA?5Min?$AA@
	jmp	SHORT $LN88@IntToInput

; 2275 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN8@IntToInput:

; 2276 : 	case 77:
; 2277 : 		return "JoyStickSliderA Max";

	mov	eax, OFFSET ??_C@_0BE@KIENBJBF@JoyStickSliderA?5Max?$AA@
	jmp	SHORT $LN88@IntToInput

; 2278 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN7@IntToInput:

; 2279 : 	case 78:
; 2280 : 		return "JoyStickSliderB Min";

	mov	eax, OFFSET ??_C@_0BE@DMFCIPNE@JoyStickSliderB?5Min?$AA@
	jmp	SHORT $LN88@IntToInput

; 2281 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN6@IntToInput:

; 2282 : 	case 79:
; 2283 : 		return "JoyStickSliderB Max";

	mov	eax, OFFSET ??_C@_0BE@CONJGLLL@JoyStickSliderB?5Max?$AA@
	jmp	SHORT $LN88@IntToInput

; 2284 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN5@IntToInput:

; 2285 : 	case 80:
; 2286 : 		return "JoyStickSliderC Min";

	mov	eax, OFFSET ??_C@_0BE@PHAOFMHB@JoyStickSliderC?5Min?$AA@
	jmp	SHORT $LN88@IntToInput

; 2287 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN4@IntToInput:

; 2288 : 	case 81:
; 2289 : 		return "JoyStickSliderC Max";

	mov	eax, OFFSET ??_C@_0BE@OFIFLIBO@JoyStickSliderC?5Max?$AA@
	jmp	SHORT $LN88@IntToInput

; 2290 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN3@IntToInput:

; 2291 : 	case 82:
; 2292 : 		return "JoyStickSliderD Min";

	mov	eax, OFFSET ??_C@_0BE@OKALGMMJ@JoyStickSliderD?5Min?$AA@
	jmp	SHORT $LN88@IntToInput

; 2293 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN2@IntToInput:

; 2294 : 	case 83:
; 2295 : 		return "JoyStickSliderD Max";

	mov	eax, OFFSET ??_C@_0BE@PIIAIIKG@JoyStickSliderD?5Max?$AA@
	jmp	SHORT $LN88@IntToInput

; 2296 : 		break;

	jmp	SHORT $LN86@IntToInput
$LN1@IntToInput:

; 2297 : 	default:
; 2298 : 		return "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN88@IntToInput
$LN86@IntToInput:

; 2299 : 		break;
; 2300 : 	}
; 2301 : 
; 2302 : 	return "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN88@IntToInput:

; 2303 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN90@IntToInput:
	DD	$LN85@IntToInput
	DD	$LN84@IntToInput
	DD	$LN83@IntToInput
	DD	$LN82@IntToInput
	DD	$LN81@IntToInput
	DD	$LN80@IntToInput
	DD	$LN79@IntToInput
	DD	$LN78@IntToInput
	DD	$LN77@IntToInput
	DD	$LN76@IntToInput
	DD	$LN75@IntToInput
	DD	$LN74@IntToInput
	DD	$LN73@IntToInput
	DD	$LN72@IntToInput
	DD	$LN71@IntToInput
	DD	$LN70@IntToInput
	DD	$LN69@IntToInput
	DD	$LN68@IntToInput
	DD	$LN67@IntToInput
	DD	$LN66@IntToInput
	DD	$LN65@IntToInput
	DD	$LN64@IntToInput
	DD	$LN63@IntToInput
	DD	$LN62@IntToInput
	DD	$LN61@IntToInput
	DD	$LN60@IntToInput
	DD	$LN59@IntToInput
	DD	$LN58@IntToInput
	DD	$LN57@IntToInput
	DD	$LN56@IntToInput
	DD	$LN55@IntToInput
	DD	$LN54@IntToInput
	DD	$LN53@IntToInput
	DD	$LN52@IntToInput
	DD	$LN51@IntToInput
	DD	$LN50@IntToInput
	DD	$LN49@IntToInput
	DD	$LN48@IntToInput
	DD	$LN47@IntToInput
	DD	$LN46@IntToInput
	DD	$LN45@IntToInput
	DD	$LN44@IntToInput
	DD	$LN43@IntToInput
	DD	$LN42@IntToInput
	DD	$LN41@IntToInput
	DD	$LN40@IntToInput
	DD	$LN39@IntToInput
	DD	$LN38@IntToInput
	DD	$LN37@IntToInput
	DD	$LN36@IntToInput
	DD	$LN35@IntToInput
	DD	$LN34@IntToInput
	DD	$LN33@IntToInput
	DD	$LN32@IntToInput
	DD	$LN31@IntToInput
	DD	$LN30@IntToInput
	DD	$LN29@IntToInput
	DD	$LN28@IntToInput
	DD	$LN27@IntToInput
	DD	$LN26@IntToInput
	DD	$LN25@IntToInput
	DD	$LN24@IntToInput
	DD	$LN23@IntToInput
	DD	$LN22@IntToInput
	DD	$LN21@IntToInput
	DD	$LN20@IntToInput
	DD	$LN19@IntToInput
	DD	$LN18@IntToInput
	DD	$LN17@IntToInput
	DD	$LN16@IntToInput
	DD	$LN15@IntToInput
	DD	$LN14@IntToInput
	DD	$LN13@IntToInput
	DD	$LN12@IntToInput
	DD	$LN11@IntToInput
	DD	$LN10@IntToInput
	DD	$LN9@IntToInput
	DD	$LN8@IntToInput
	DD	$LN7@IntToInput
	DD	$LN6@IntToInput
	DD	$LN5@IntToInput
	DD	$LN4@IntToInput
	DD	$LN3@IntToInput
	DD	$LN2@IntToInput
?IntToInputName@DeviceHandler@@QAEPADH@Z ENDP		; DeviceHandler::IntToInputName
_TEXT	ENDS
PUBLIC	?MouseBindDown$@DeviceHandler@@QAEPADXZ		; DeviceHandler::MouseBindDown$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindDown$@DeviceHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindDown$@DeviceHandler@@QAEPADXZ PROC		; DeviceHandler::MouseBindDown$, COMDAT
; _this$ = ecx

; 2305 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2306 : 	return this->IntToInputName(this->MouseDown);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3220]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntToInputName@DeviceHandler@@QAEPADH@Z ; DeviceHandler::IntToInputName

; 2307 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindDown$@DeviceHandler@@QAEPADXZ ENDP		; DeviceHandler::MouseBindDown$
_TEXT	ENDS
PUBLIC	?MouseBindLeft$@DeviceHandler@@QAEPADXZ		; DeviceHandler::MouseBindLeft$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindLeft$@DeviceHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindLeft$@DeviceHandler@@QAEPADXZ PROC		; DeviceHandler::MouseBindLeft$, COMDAT
; _this$ = ecx

; 2309 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2310 : 	return this->IntToInputName(this->MouseLeft);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3224]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntToInputName@DeviceHandler@@QAEPADH@Z ; DeviceHandler::IntToInputName

; 2311 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindLeft$@DeviceHandler@@QAEPADXZ ENDP		; DeviceHandler::MouseBindLeft$
_TEXT	ENDS
PUBLIC	?MouseBindRight$@DeviceHandler@@QAEPADXZ	; DeviceHandler::MouseBindRight$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindRight$@DeviceHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindRight$@DeviceHandler@@QAEPADXZ PROC		; DeviceHandler::MouseBindRight$, COMDAT
; _this$ = ecx

; 2313 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2314 : 	return this->IntToInputName(this->MouseRight);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3228]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntToInputName@DeviceHandler@@QAEPADH@Z ; DeviceHandler::IntToInputName

; 2315 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindRight$@DeviceHandler@@QAEPADXZ ENDP		; DeviceHandler::MouseBindRight$
_TEXT	ENDS
PUBLIC	?MouseBindUp$@DeviceHandler@@QAEPADXZ		; DeviceHandler::MouseBindUp$
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindUp$@DeviceHandler@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindUp$@DeviceHandler@@QAEPADXZ PROC		; DeviceHandler::MouseBindUp$, COMDAT
; _this$ = ecx

; 2317 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2318 : 	return this->IntToInputName(this->MouseUp);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3240]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntToInputName@DeviceHandler@@QAEPADH@Z ; DeviceHandler::IntToInputName

; 2319 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindUp$@DeviceHandler@@QAEPADXZ ENDP		; DeviceHandler::MouseBindUp$
_TEXT	ENDS
PUBLIC	?GetJoyPosition@DeviceHandler@@QAEMH@Z		; DeviceHandler::GetJoyPosition
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetJoyPosition@DeviceHandler@@QAEMH@Z
_TEXT	SEGMENT
tv64 = -72						; size = 4
_this$ = -4						; size = 4
_Joystick$ = 8						; size = 4
?GetJoyPosition@DeviceHandler@@QAEMH@Z PROC		; DeviceHandler::GetJoyPosition, COMDAT
; _this$ = ecx

; 2321 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2322 : 	switch(Joystick)

	mov	eax, DWORD PTR _Joystick$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 9
	ja	$LN1@GetJoyPosi
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN16@GetJoyPosi[edx*4]
$LN11@GetJoyPosi:

; 2323 : 	{
; 2324 : 	case 1:
; 2325 : 		return this->JoyStickXPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXPosition
	jmp	SHORT $LN12@GetJoyPosi

; 2326 : 		break;

	jmp	SHORT $LN12@GetJoyPosi
$LN10@GetJoyPosi:

; 2327 : 	case 2:
; 2328 : 		return this->JoyStickYPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYPosition
	jmp	SHORT $LN12@GetJoyPosi

; 2329 : 		break;

	jmp	SHORT $LN12@GetJoyPosi
$LN9@GetJoyPosi:

; 2330 : 	case 3:
; 2331 : 		return this->JoyStickZPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZPosition
	jmp	SHORT $LN12@GetJoyPosi

; 2332 : 		break;

	jmp	SHORT $LN12@GetJoyPosi
$LN8@GetJoyPosi:

; 2333 : 	case 4:
; 2334 : 		return this->JoyStickXTwistPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickXTwistPosition
	jmp	SHORT $LN12@GetJoyPosi

; 2335 : 		break;

	jmp	SHORT $LN12@GetJoyPosi
$LN7@GetJoyPosi:

; 2336 : 	case 5:
; 2337 : 		return this->JoyStickYTwistPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickYTwistPosition
	jmp	SHORT $LN12@GetJoyPosi

; 2338 : 		break;

	jmp	SHORT $LN12@GetJoyPosi
$LN6@GetJoyPosi:

; 2339 : 	case 6:
; 2340 : 		return this->JoyStickZTwistPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickZTwistPosition
	jmp	SHORT $LN12@GetJoyPosi

; 2341 : 		break;

	jmp	SHORT $LN12@GetJoyPosi
$LN5@GetJoyPosi:

; 2342 : 	case 7:
; 2343 : 		return this->JoyStickASliderPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickASliderPosition
	jmp	SHORT $LN12@GetJoyPosi

; 2344 : 		break;

	jmp	SHORT $LN12@GetJoyPosi
$LN4@GetJoyPosi:

; 2345 : 	case 8:
; 2346 : 		return this->JoyStickBSliderPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickBSliderPosition
	jmp	SHORT $LN12@GetJoyPosi

; 2347 : 		break;

	jmp	SHORT $LN12@GetJoyPosi
$LN3@GetJoyPosi:

; 2348 : 	case 9:
; 2349 : 		return this->JoyStickCSliderPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickCSliderPosition
	jmp	SHORT $LN12@GetJoyPosi

; 2350 : 		break;

	jmp	SHORT $LN12@GetJoyPosi
$LN2@GetJoyPosi:

; 2351 : 	case 10:
; 2352 : 		return this->JoyStickDSliderPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ; DeviceHandler::JoyStickDSliderPosition
	jmp	SHORT $LN12@GetJoyPosi

; 2353 : 		break;

	jmp	SHORT $LN12@GetJoyPosi
$LN1@GetJoyPosi:

; 2354 : 	default:
; 2355 : 		return NULL;

	fldz
$LN12@GetJoyPosi:

; 2356 : 		break;
; 2357 : 	}
; 2358 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN16@GetJoyPosi:
	DD	$LN11@GetJoyPosi
	DD	$LN10@GetJoyPosi
	DD	$LN9@GetJoyPosi
	DD	$LN8@GetJoyPosi
	DD	$LN7@GetJoyPosi
	DD	$LN6@GetJoyPosi
	DD	$LN5@GetJoyPosi
	DD	$LN4@GetJoyPosi
	DD	$LN3@GetJoyPosi
	DD	$LN2@GetJoyPosi
?GetJoyPosition@DeviceHandler@@QAEMH@Z ENDP		; DeviceHandler::GetJoyPosition
_TEXT	ENDS
PUBLIC	?GetPercentBindX@DeviceHandler@@QAEMXZ		; DeviceHandler::GetPercentBindX
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetPercentBindX@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPercentBindX@DeviceHandler@@QAEMXZ PROC		; DeviceHandler::GetPercentBindX, COMDAT
; _this$ = ecx

; 2360 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2361 : 	return this->PercentBindX;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+3208]

; 2362 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPercentBindX@DeviceHandler@@QAEMXZ ENDP		; DeviceHandler::GetPercentBindX
_TEXT	ENDS
PUBLIC	?GetPercentBindY@DeviceHandler@@QAEMXZ		; DeviceHandler::GetPercentBindY
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetPercentBindY@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPercentBindY@DeviceHandler@@QAEMXZ PROC		; DeviceHandler::GetPercentBindY, COMDAT
; _this$ = ecx

; 2364 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2365 : 	return this->PercentBindY;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+3212]

; 2366 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPercentBindY@DeviceHandler@@QAEMXZ ENDP		; DeviceHandler::GetPercentBindY
_TEXT	ENDS
PUBLIC	__real@40dfffc000000000
;	COMDAT __real@40dfffc000000000
CONST	SEGMENT
__real@40dfffc000000000 DQ 040dfffc000000000r	; 32767
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?JoyStickASliderPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickASliderPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickASliderPosition, COMDAT
; _this$ = ecx

; 2368 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2369 : 	return ((float)(this->JoyStickSliderA[0]-32767))/32767;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+6044]
	sub	ecx, 32767				; 00007fffH
	mov	DWORD PTR tv74[ebp], ecx
	mov	DWORD PTR tv74[ebp+4], 0
	fild	QWORD PTR tv74[ebp]
	fdiv	QWORD PTR __real@40dfffc000000000
	fstp	DWORD PTR tv79[ebp]
	fld	DWORD PTR tv79[ebp]

; 2370 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoyStickASliderPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickASliderPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickBSliderPosition, COMDAT
; _this$ = ecx

; 2372 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2373 : 	return ((float)(this->JoyStickSliderB[0]-32767))/32767;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+6444]
	sub	ecx, 32767				; 00007fffH
	mov	DWORD PTR tv74[ebp], ecx
	mov	DWORD PTR tv74[ebp+4], 0
	fild	QWORD PTR tv74[ebp]
	fdiv	QWORD PTR __real@40dfffc000000000
	fstp	DWORD PTR tv79[ebp]
	fld	DWORD PTR tv79[ebp]

; 2374 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoyStickBSliderPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickBSliderPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickCSliderPosition, COMDAT
; _this$ = ecx

; 2376 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2377 : 	return ((float)(this->JoyStickSliderC[0]-32767))/32767;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+6844]
	sub	ecx, 32767				; 00007fffH
	mov	DWORD PTR tv74[ebp], ecx
	mov	DWORD PTR tv74[ebp+4], 0
	fild	QWORD PTR tv74[ebp]
	fdiv	QWORD PTR __real@40dfffc000000000
	fstp	DWORD PTR tv79[ebp]
	fld	DWORD PTR tv79[ebp]

; 2378 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoyStickCSliderPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickCSliderPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickDSliderPosition, COMDAT
; _this$ = ecx

; 2380 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2381 : 	return ((float)(this->JoyStickSliderD[0]-32767))/32767;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+7244]
	sub	ecx, 32767				; 00007fffH
	mov	DWORD PTR tv74[ebp], ecx
	mov	DWORD PTR tv74[ebp+4], 0
	fild	QWORD PTR tv74[ebp]
	fdiv	QWORD PTR __real@40dfffc000000000
	fstp	DWORD PTR tv79[ebp]
	fld	DWORD PTR tv79[ebp]

; 2382 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoyStickDSliderPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickDSliderPosition
_TEXT	ENDS
PUBLIC	__real@408f400000000000
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?JoyStickXPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
?JoyStickXPosition@DeviceHandler@@QAEMXZ PROC		; DeviceHandler::JoyStickXPosition, COMDAT
; _this$ = ecx

; 2384 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2385 : 	return ((float)this->JoyStickX[0])/1000;

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+3244]
	fdiv	QWORD PTR __real@408f400000000000
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]

; 2386 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoyStickXPosition@DeviceHandler@@QAEMXZ ENDP		; DeviceHandler::JoyStickXPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickYPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
?JoyStickYPosition@DeviceHandler@@QAEMXZ PROC		; DeviceHandler::JoyStickYPosition, COMDAT
; _this$ = ecx

; 2388 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2389 : 	return ((float)this->JoyStickY[0])/1000;

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+3644]
	fdiv	QWORD PTR __real@408f400000000000
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]

; 2390 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoyStickYPosition@DeviceHandler@@QAEMXZ ENDP		; DeviceHandler::JoyStickYPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickZPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv74 = -72						; size = 4
_this$ = -4						; size = 4
?JoyStickZPosition@DeviceHandler@@QAEMXZ PROC		; DeviceHandler::JoyStickZPosition, COMDAT
; _this$ = ecx

; 2392 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2393 : 	return ((float)this->JoyStickZ[0])/1000;

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+4044]
	fdiv	QWORD PTR __real@408f400000000000
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]

; 2394 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoyStickZPosition@DeviceHandler@@QAEMXZ ENDP		; DeviceHandler::JoyStickZPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickXTwistPosition, COMDAT
; _this$ = ecx

; 2396 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2397 : 	return ((float)(this->JoyStickTwistX[0]-32767))/32767;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+7644]
	sub	ecx, 32767				; 00007fffH
	mov	DWORD PTR tv74[ebp], ecx
	mov	DWORD PTR tv74[ebp+4], 0
	fild	QWORD PTR tv74[ebp]
	fdiv	QWORD PTR __real@40dfffc000000000
	fstp	DWORD PTR tv79[ebp]
	fld	DWORD PTR tv79[ebp]

; 2398 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoyStickXTwistPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickXTwistPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickYTwistPosition, COMDAT
; _this$ = ecx

; 2400 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2401 : 	return ((float)(this->JoyStickTwistY[0]-32767))/32767;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8044]
	sub	ecx, 32767				; 00007fffH
	mov	DWORD PTR tv74[ebp], ecx
	mov	DWORD PTR tv74[ebp+4], 0
	fild	QWORD PTR tv74[ebp]
	fdiv	QWORD PTR __real@40dfffc000000000
	fstp	DWORD PTR tv79[ebp]
	fld	DWORD PTR tv79[ebp]

; 2402 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoyStickYTwistPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickYTwistPosition
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ
_TEXT	SEGMENT
tv79 = -80						; size = 4
tv74 = -76						; size = 8
_this$ = -4						; size = 4
?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ PROC	; DeviceHandler::JoyStickZTwistPosition, COMDAT
; _this$ = ecx

; 2404 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2405 : 	return ((float)(this->JoyStickTwistZ[0]-32767))/32767;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8444]
	sub	ecx, 32767				; 00007fffH
	mov	DWORD PTR tv74[ebp], ecx
	mov	DWORD PTR tv74[ebp+4], 0
	fild	QWORD PTR tv74[ebp]
	fdiv	QWORD PTR __real@40dfffc000000000
	fstp	DWORD PTR tv79[ebp]
	fld	DWORD PTR tv79[ebp]

; 2406 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?JoyStickZTwistPosition@DeviceHandler@@QAEMXZ ENDP	; DeviceHandler::JoyStickZTwistPosition
_TEXT	ENDS
PUBLIC	?CharToAngle@DeviceHandler@@QAEHPAD@Z		; DeviceHandler::CharToAngle
; Function compile flags: /Odtp /ZI
;	COMDAT ?CharToAngle@DeviceHandler@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Angle$ = 8						; size = 4
?CharToAngle@DeviceHandler@@QAEHPAD@Z PROC		; DeviceHandler::CharToAngle, COMDAT
; _this$ = ecx

; 2408 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2409 : 	if(Angle=="North")

	cmp	DWORD PTR _Angle$[ebp], OFFSET ??_C@_05FPOHJMOI@North?$AA@
	jne	SHORT $LN18@CharToAngl

; 2410 : 		return 0;

	xor	eax, eax
	jmp	$LN19@CharToAngl
	jmp	$LN17@CharToAngl
$LN18@CharToAngl:

; 2411 : 	else if(Angle=="North-East")

	cmp	DWORD PTR _Angle$[ebp], OFFSET ??_C@_0L@MLODGOPA@North?9East?$AA@
	jne	SHORT $LN16@CharToAngl

; 2412 : 		return 45;

	mov	eax, 45					; 0000002dH
	jmp	$LN19@CharToAngl
	jmp	$LN17@CharToAngl
$LN16@CharToAngl:

; 2413 : 	else if(Angle=="East")

	cmp	DWORD PTR _Angle$[ebp], OFFSET ??_C@_04DHLACFEG@East?$AA@
	jne	SHORT $LN14@CharToAngl

; 2414 : 		return 90;

	mov	eax, 90					; 0000005aH
	jmp	SHORT $LN19@CharToAngl
	jmp	SHORT $LN17@CharToAngl
$LN14@CharToAngl:

; 2415 : 	else if(Angle=="South-East")

	cmp	DWORD PTR _Angle$[ebp], OFFSET ??_C@_0L@MKOAIKPF@South?9East?$AA@
	jne	SHORT $LN12@CharToAngl

; 2416 : 		return 135;

	mov	eax, 135				; 00000087H
	jmp	SHORT $LN19@CharToAngl
	jmp	SHORT $LN17@CharToAngl
$LN12@CharToAngl:

; 2417 : 	else if(Angle=="South")

	cmp	DWORD PTR _Angle$[ebp], OFFSET ??_C@_05HNHILFBE@South?$AA@
	jne	SHORT $LN10@CharToAngl

; 2418 : 		return 180;

	mov	eax, 180				; 000000b4H
	jmp	SHORT $LN19@CharToAngl
	jmp	SHORT $LN17@CharToAngl
$LN10@CharToAngl:

; 2419 : 	else if(Angle=="South-West")

	cmp	DWORD PTR _Angle$[ebp], OFFSET ??_C@_0L@FPKCNJEA@South?9West?$AA@
	jne	SHORT $LN8@CharToAngl

; 2420 : 		return 225;

	mov	eax, 225				; 000000e1H
	jmp	SHORT $LN19@CharToAngl
	jmp	SHORT $LN17@CharToAngl
$LN8@CharToAngl:

; 2421 : 	else if(Angle=="West")

	cmp	DWORD PTR _Angle$[ebp], OFFSET ??_C@_04KCPCHGPD@West?$AA@
	jne	SHORT $LN6@CharToAngl

; 2422 : 		return 270;

	mov	eax, 270				; 0000010eH
	jmp	SHORT $LN19@CharToAngl
	jmp	SHORT $LN17@CharToAngl
$LN6@CharToAngl:

; 2423 : 	else if(Angle=="North-West")

	cmp	DWORD PTR _Angle$[ebp], OFFSET ??_C@_0L@FOKBDNEF@North?9West?$AA@
	jne	SHORT $LN4@CharToAngl

; 2424 : 		return 315;

	mov	eax, 315				; 0000013bH
	jmp	SHORT $LN19@CharToAngl
	jmp	SHORT $LN17@CharToAngl
$LN4@CharToAngl:

; 2425 : 	else if(Angle=="Center")

	cmp	DWORD PTR _Angle$[ebp], OFFSET ??_C@_06NOADDNNE@Center?$AA@
	jne	SHORT $LN2@CharToAngl

; 2426 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN19@CharToAngl

; 2427 : 	else

	jmp	SHORT $LN17@CharToAngl
$LN2@CharToAngl:

; 2428 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN19@CharToAngl
$LN17@CharToAngl:

; 2429 : 
; 2430 : 	return -1;

	or	eax, -1
$LN19@CharToAngl:

; 2431 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?CharToAngle@DeviceHandler@@QAEHPAD@Z ENDP		; DeviceHandler::CharToAngle
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?CharToInputInt@DeviceHandler@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputName$ = 8						; size = 4
?CharToInputInt@DeviceHandler@@QAEHPAD@Z PROC		; DeviceHandler::CharToInputInt, COMDAT
; _this$ = ecx

; 2433 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2434 : 	if(InputName=="Button 0")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_08KCCGPEHE@Button?50?$AA@
	jne	SHORT $LN170@CharToInpu

; 2435 : 		return 0;

	xor	eax, eax
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN170@CharToInpu:

; 2436 : 	else if(InputName=="Button 1")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_08LLDNMFDF@Button?51?$AA@
	jne	SHORT $LN168@CharToInpu

; 2437 : 		return 1;

	mov	eax, 1
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN168@CharToInpu:

; 2438 : 	else if(InputName=="Button 2")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_08JABAJGPG@Button?52?$AA@
	jne	SHORT $LN166@CharToInpu

; 2439 : 		return 2;

	mov	eax, 2
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN166@CharToInpu:

; 2440 : 	else if(InputName=="Button 3")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_08IJALKHLH@Button?53?$AA@
	jne	SHORT $LN164@CharToInpu

; 2441 : 		return 3;

	mov	eax, 3
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN164@CharToInpu:

; 2442 : 	else if(InputName=="Button 4")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_08MGEKDBHA@Button?54?$AA@
	jne	SHORT $LN162@CharToInpu

; 2443 : 		return 4;

	mov	eax, 4
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN162@CharToInpu:

; 2444 : 	else if(InputName=="Button 5")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_08NPFBAADB@Button?55?$AA@
	jne	SHORT $LN160@CharToInpu

; 2445 : 		return 5;

	mov	eax, 5
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN160@CharToInpu:

; 2446 : 	else if(InputName=="Button 6")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_08PEHMFDPC@Button?56?$AA@
	jne	SHORT $LN158@CharToInpu

; 2447 : 		return 6;

	mov	eax, 6
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN158@CharToInpu:

; 2448 : 	else if(InputName=="Button 7")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_08ONGHGCLD@Button?57?$AA@
	jne	SHORT $LN156@CharToInpu

; 2449 : 		return 7;

	mov	eax, 7
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN156@CharToInpu:

; 2450 : 	else if(InputName=="Button 8")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_08GKPPHOHM@Button?58?$AA@
	jne	SHORT $LN154@CharToInpu

; 2451 : 		return 8;

	mov	eax, 8
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN154@CharToInpu:

; 2452 : 	else if(InputName=="Button 9")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_08HDOEEPDN@Button?59?$AA@
	jne	SHORT $LN152@CharToInpu

; 2453 : 		return 9;

	mov	eax, 9
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN152@CharToInpu:

; 2454 : 	else if(InputName=="Button 10")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09IJEOMPBF@Button?510?$AA@
	jne	SHORT $LN150@CharToInpu

; 2455 : 		return 10;

	mov	eax, 10					; 0000000aH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN150@CharToInpu:

; 2456 : 	else if(InputName=="Button 11")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09JAFFPOFE@Button?511?$AA@
	jne	SHORT $LN148@CharToInpu

; 2457 : 		return 11;

	mov	eax, 11					; 0000000bH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN148@CharToInpu:

; 2458 : 	else if(InputName=="Button 12")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09LLHIKNJH@Button?512?$AA@
	jne	SHORT $LN146@CharToInpu

; 2459 : 		return 12;

	mov	eax, 12					; 0000000cH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN146@CharToInpu:

; 2460 : 	else if(InputName=="Button 13")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09KCGDJMNG@Button?513?$AA@
	jne	SHORT $LN144@CharToInpu

; 2461 : 		return 13;

	mov	eax, 13					; 0000000dH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN144@CharToInpu:

; 2462 : 	else if(InputName=="Button 14")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09ONCCAKBB@Button?514?$AA@
	jne	SHORT $LN142@CharToInpu

; 2463 : 		return 14;

	mov	eax, 14					; 0000000eH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN142@CharToInpu:

; 2464 : 	else if(InputName=="Button 15")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09PEDJDLFA@Button?515?$AA@
	jne	SHORT $LN140@CharToInpu

; 2465 : 		return 15;

	mov	eax, 15					; 0000000fH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN140@CharToInpu:

; 2466 : 	else if(InputName=="Button 16")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09NPBEGIJD@Button?516?$AA@
	jne	SHORT $LN138@CharToInpu

; 2467 : 		return 16;

	mov	eax, 16					; 00000010H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN138@CharToInpu:

; 2468 : 	else if(InputName=="Button 17")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09MGAPFJNC@Button?517?$AA@
	jne	SHORT $LN136@CharToInpu

; 2469 : 		return 17;

	mov	eax, 17					; 00000011H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN136@CharToInpu:

; 2470 : 	else if(InputName=="Button 18")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09EBJHEFBN@Button?518?$AA@
	jne	SHORT $LN134@CharToInpu

; 2471 : 		return 18;

	mov	eax, 18					; 00000012H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN134@CharToInpu:

; 2472 : 	else if(InputName=="Button 19")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09FIIMHEFM@Button?519?$AA@
	jne	SHORT $LN132@CharToInpu

; 2473 : 		return 19;

	mov	eax, 19					; 00000013H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN132@CharToInpu:

; 2474 : 	else if(InputName=="Button 20")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09ILAIHBEM@Button?520?$AA@
	jne	SHORT $LN130@CharToInpu

; 2475 : 		return 20;

	mov	eax, 20					; 00000014H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN130@CharToInpu:

; 2476 : 	else if(InputName=="Button 21")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09JCBDEAAN@Button?521?$AA@
	jne	SHORT $LN128@CharToInpu

; 2477 : 		return 21;

	mov	eax, 21					; 00000015H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN128@CharToInpu:

; 2478 : 	else if(InputName=="Button 22")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09LJDOBDMO@Button?522?$AA@
	jne	SHORT $LN126@CharToInpu

; 2479 : 		return 22;

	mov	eax, 22					; 00000016H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN126@CharToInpu:

; 2480 : 	else if(InputName=="Button 23")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09KACFCCIP@Button?523?$AA@
	jne	SHORT $LN124@CharToInpu

; 2481 : 		return 23;

	mov	eax, 23					; 00000017H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN124@CharToInpu:

; 2482 : 	else if(InputName=="Button 24")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09OPGELEEI@Button?524?$AA@
	jne	SHORT $LN122@CharToInpu

; 2483 : 		return 24;

	mov	eax, 24					; 00000018H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN122@CharToInpu:

; 2484 : 	else if(InputName=="Button 25")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09PGHPIFAJ@Button?525?$AA@
	jne	SHORT $LN120@CharToInpu

; 2485 : 		return 25;

	mov	eax, 25					; 00000019H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN120@CharToInpu:

; 2486 : 	else if(InputName=="Button 26")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09NNFCNGMK@Button?526?$AA@
	jne	SHORT $LN118@CharToInpu

; 2487 : 		return 26;

	mov	eax, 26					; 0000001aH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN118@CharToInpu:

; 2488 : 	else if(InputName=="Button 27")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09MEEJOHIL@Button?527?$AA@
	jne	SHORT $LN116@CharToInpu

; 2489 : 		return 27;

	mov	eax, 27					; 0000001bH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN116@CharToInpu:

; 2490 : 	else if(InputName=="Button 28")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09EDNBPLEE@Button?528?$AA@
	jne	SHORT $LN114@CharToInpu

; 2491 : 		return 28;

	mov	eax, 28					; 0000001cH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN114@CharToInpu:

; 2492 : 	else if(InputName=="Button 29")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09FKMKMKAF@Button?529?$AA@
	jne	SHORT $LN112@CharToInpu

; 2493 : 		return 29;

	mov	eax, 29					; 0000001dH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN112@CharToInpu:

; 2494 : 	else if(InputName=="Button 30")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09IKMKBLHL@Button?530?$AA@
	jne	SHORT $LN110@CharToInpu

; 2495 : 		return 30;

	mov	eax, 30					; 0000001eH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN110@CharToInpu:

; 2496 : 	else if(InputName=="Button 31")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_09JDNBCKDK@Button?531?$AA@
	jne	SHORT $LN108@CharToInpu

; 2497 : 		return 31;

	mov	eax, 31					; 0000001fH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN108@CharToInpu:

; 2498 : 	else if(InputName=="Hat 1 North")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@MJEMLOOM@Hat?51?5North?$AA@
	jne	SHORT $LN106@CharToInpu

; 2499 : 		return 32;

	mov	eax, 32					; 00000020H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN106@CharToInpu:

; 2500 : 	else if(InputName=="Hat 1 North-East")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@MGGODAJI@Hat?51?5North?9East?$AA@
	jne	SHORT $LN104@CharToInpu

; 2501 : 		return 33;

	mov	eax, 33					; 00000021H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN104@CharToInpu:

; 2502 : 	else if(InputName=="Hat 1 East")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@JFDKKPAM@Hat?51?5East?$AA@
	jne	SHORT $LN102@CharToInpu

; 2503 : 		return 34;

	mov	eax, 34					; 00000022H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN102@CharToInpu:

; 2504 : 	else if(InputName=="Hat 1 South-East")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@MHGNNEJN@Hat?51?5South?9East?$AA@
	jne	SHORT $LN100@CharToInpu

; 2505 : 		return 35;

	mov	eax, 35					; 00000023H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN100@CharToInpu:

; 2506 : 	else if(InputName=="Hat 1 South")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@OLNDJHBA@Hat?51?5South?$AA@
	jne	SHORT $LN98@CharToInpu

; 2507 : 		return 36;

	mov	eax, 36					; 00000024H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN98@CharToInpu:

; 2508 : 	else if(InputName=="Hat 1 South-West")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@FCCPIHCI@Hat?51?5South?9West?$AA@
	jne	SHORT $LN96@CharToInpu

; 2509 : 		return 37;

	mov	eax, 37					; 00000025H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN96@CharToInpu:

; 2510 : 	else if(InputName=="Hat 1 West")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@HIPMLJ@Hat?51?5West?$AA@
	jne	SHORT $LN94@CharToInpu

; 2511 : 		return 38;

	mov	eax, 38					; 00000026H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN94@CharToInpu:

; 2512 : 	else if(InputName=="Hat 1 North-West")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@FDCMGDCN@Hat?51?5North?9West?$AA@
	jne	SHORT $LN92@CharToInpu

; 2513 : 		return 39;

	mov	eax, 39					; 00000027H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN92@CharToInpu:

; 2514 : 	else if(InputName=="Hat 2 North")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@EHMDLJAP@Hat?52?5North?$AA@
	jne	SHORT $LN90@CharToInpu

; 2515 : 		return 40;

	mov	eax, 40					; 00000028H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN90@CharToInpu:

; 2516 : 	else if(InputName=="Hat 2 North-East")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@HLKEFMFG@Hat?52?5North?9East?$AA@
	jne	SHORT $LN88@CharToInpu

; 2517 : 		return 41;

	mov	eax, 41					; 00000029H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN88@CharToInpu:

; 2518 : 	else if(InputName=="Hat 2 East")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@KENCLFJB@Hat?52?5East?$AA@
	jne	SHORT $LN86@CharToInpu

; 2519 : 		return 42;

	mov	eax, 42					; 0000002aH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN86@CharToInpu:

; 2520 : 	else if(InputName=="Hat 2 South-East")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@HKKHLIFD@Hat?52?5South?9East?$AA@
	jne	SHORT $LN84@CharToInpu

; 2521 : 		return 43;

	mov	eax, 43					; 0000002bH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN84@CharToInpu:

; 2522 : 	else if(InputName=="Hat 2 South")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@GFFMJAPD@Hat?52?5South?$AA@
	jne	SHORT $LN82@CharToInpu

; 2523 : 		return 44;

	mov	eax, 44					; 0000002cH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN82@CharToInpu:

; 2524 : 	else if(InputName=="Hat 2 South-West")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@OPOFOLOG@Hat?52?5South?9West?$AA@
	jne	SHORT $LN80@CharToInpu

; 2525 : 		return 45;

	mov	eax, 45					; 0000002dH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN80@CharToInpu:

; 2526 : 	else if(InputName=="Hat 2 West")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@DBJAOGCE@Hat?52?5West?$AA@
	jne	SHORT $LN78@CharToInpu

; 2527 : 		return 46;

	mov	eax, 46					; 0000002eH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN78@CharToInpu:

; 2528 : 	else if(InputName=="Hat 2 North-West")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@OOOGAPOD@Hat?52?5North?9West?$AA@
	jne	SHORT $LN76@CharToInpu

; 2529 : 		return 47;

	mov	eax, 47					; 0000002fH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN76@CharToInpu:

; 2530 : 	else if(InputName=="Hat 3 North")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@ILGJLJJB@Hat?53?5North?$AA@
	jne	SHORT $LN74@CharToInpu

; 2531 : 		return 48;

	mov	eax, 48					; 00000030H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN74@CharToInpu:

; 2532 : 	else if(InputName=="Hat 3 North-East")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@KGDCIFND@Hat?53?5North?9East?$AA@
	jne	SHORT $LN72@CharToInpu

; 2533 : 		return 49;

	mov	eax, 49					; 00000031H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN72@CharToInpu:

; 2534 : 	else if(InputName=="Hat 3 East")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@CKFLOCF@Hat?53?5East?$AA@
	jne	SHORT $LN70@CharToInpu

; 2535 : 		return 50;

	mov	eax, 50					; 00000032H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN70@CharToInpu:

; 2536 : 	else if(InputName=="Hat 3 South-East")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@KHDBGBNG@Hat?53?5South?9East?$AA@
	jne	SHORT $LN68@CharToInpu

; 2537 : 		return 51;

	mov	eax, 51					; 00000033H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN68@CharToInpu:

; 2538 : 	else if(InputName=="Hat 3 South")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@KJPGJAGN@Hat?53?5South?$AA@
	jne	SHORT $LN66@CharToInpu

; 2539 : 		return 52;

	mov	eax, 52					; 00000034H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN66@CharToInpu:

; 2540 : 	else if(InputName=="Hat 3 South-West")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@DCHDDCGD@Hat?53?5South?9West?$AA@
	jne	SHORT $LN64@CharToInpu

; 2541 : 		return 53;

	mov	eax, 53					; 00000035H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN64@CharToInpu:

; 2542 : 	else if(InputName=="Hat 3 West")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@JHOHONJA@Hat?53?5West?$AA@
	jne	SHORT $LN62@CharToInpu

; 2543 : 		return 54;

	mov	eax, 54					; 00000036H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN62@CharToInpu:

; 2544 : 	else if(InputName=="Hat 3 North-West")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@DDHANGGG@Hat?53?5North?9West?$AA@
	jne	SHORT $LN60@CharToInpu

; 2545 : 		return 55;

	mov	eax, 55					; 00000037H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN60@CharToInpu:

; 2546 : 	else if(InputName=="Hat 4 North")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@IBKMLAII@Hat?54?5North?$AA@
	jne	SHORT $LN58@CharToInpu

; 2547 : 		return 56;

	mov	eax, 56					; 00000038H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN58@CharToInpu:

; 2548 : 	else if(InputName=="Hat 4 North-East")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@NLEBIDIL@Hat?54?5North?9East?$AA@
	jne	SHORT $LN56@CharToInpu

; 2549 : 		return 57;

	mov	eax, 57					; 00000039H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN56@CharToInpu:

; 2550 : 	else if(InputName=="Hat 4 East")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@MHACIAKL@Hat?54?5East?$AA@
	jne	SHORT $LN54@CharToInpu

; 2551 : 		return 58;

	mov	eax, 58					; 0000003aH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN54@CharToInpu:

; 2552 : 	else if(InputName=="Hat 4 South-East")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@NKECGHIO@Hat?54?5South?9East?$AA@
	jne	SHORT $LN52@CharToInpu

; 2553 : 		return 59;

	mov	eax, 59					; 0000003bH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN52@CharToInpu:

; 2554 : 	else if(InputName=="Hat 4 South")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0M@KDDDJJHE@Hat?54?5South?$AA@
	jne	SHORT $LN50@CharToInpu

; 2555 : 		return 60;

	mov	eax, 60					; 0000003cH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN50@CharToInpu:

; 2556 : 	else if(InputName=="Hat 4 South-West")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@EPAADEDL@Hat?54?5South?9West?$AA@
	jne	SHORT $LN48@CharToInpu

; 2557 : 		return 61;

	mov	eax, 61					; 0000003dH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN48@CharToInpu:

; 2558 : 	else if(InputName=="Hat 4 West")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0L@FCEANDBO@Hat?54?5West?$AA@
	jne	SHORT $LN46@CharToInpu

; 2559 : 		return 62;

	mov	eax, 62					; 0000003eH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN46@CharToInpu:

; 2560 : 	else if(InputName=="Hat 4 North-West")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BB@EOADNADO@Hat?54?5North?9West?$AA@
	jne	SHORT $LN44@CharToInpu

; 2561 : 		return 63;

	mov	eax, 63					; 0000003fH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN44@CharToInpu:

; 2562 : 	else if(InputName=="JoyStickX Min")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0O@OAFLJKNL@JoyStickX?5Min?$AA@
	jne	SHORT $LN42@CharToInpu

; 2563 : 		return 64;

	mov	eax, 64					; 00000040H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN42@CharToInpu:

; 2564 : 	else if(InputName=="JoyStickX Max")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0O@PCNAHOLE@JoyStickX?5Max?$AA@
	jne	SHORT $LN40@CharToInpu

; 2565 : 		return 65;

	mov	eax, 65					; 00000041H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN40@CharToInpu:

; 2566 : 	else if(InputName=="JoyStickY Min")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0O@CLAHEJHO@JoyStickY?5Min?$AA@
	jne	SHORT $LN38@CharToInpu

; 2567 : 		return 66;

	mov	eax, 66					; 00000042H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN38@CharToInpu:

; 2568 : 	else if(InputName=="JoyStickY Max")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0O@DJIMKNBB@JoyStickY?5Max?$AA@
	jne	SHORT $LN36@CharToInpu

; 2569 : 		return 67;

	mov	eax, 67					; 00000043H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN36@CharToInpu:

; 2570 : 	else if(InputName=="JoyStickZ Min")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0O@KNJDDLNA@JoyStickZ?5Min?$AA@
	jne	SHORT $LN34@CharToInpu

; 2571 : 		return 68;

	mov	eax, 68					; 00000044H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN34@CharToInpu:

; 2572 : 	else if(InputName=="JoyStickZ Max")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0O@LPBINPLP@JoyStickZ?5Max?$AA@
	jne	SHORT $LN32@CharToInpu

; 2573 : 		return 69;

	mov	eax, 69					; 00000045H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN32@CharToInpu:

; 2574 : 	else if(InputName=="JoyStickTwistX Min")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BD@EGEPNMPH@JoyStickTwistX?5Min?$AA@
	jne	SHORT $LN30@CharToInpu

; 2575 : 		return 70;

	mov	eax, 70					; 00000046H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN30@CharToInpu:

; 2576 : 	else if(InputName=="JoyStickTwistX Max")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BD@FEMEDIJI@JoyStickTwistX?5Max?$AA@
	jne	SHORT $LN28@CharToInpu

; 2577 : 		return 71;

	mov	eax, 71					; 00000047H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN28@CharToInpu:

; 2578 : 	else if(InputName=="JoyStickTwistY Min")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BD@INBDAPFC@JoyStickTwistY?5Min?$AA@
	jne	SHORT $LN26@CharToInpu

; 2579 : 		return 72;

	mov	eax, 72					; 00000048H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN26@CharToInpu:

; 2580 : 	else if(InputName=="JoyStickTwistY Max")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BD@JPJIOLDN@JoyStickTwistY?5Max?$AA@
	jne	SHORT $LN24@CharToInpu

; 2581 : 		return 73;

	mov	eax, 73					; 00000049H
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN24@CharToInpu:

; 2582 : 	else if(InputName=="JoyStickTwistZ Min")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BD@LIHHNPM@JoyStickTwistZ?5Min?$AA@
	jne	SHORT $LN22@CharToInpu

; 2583 : 		return 74;

	mov	eax, 74					; 0000004aH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN22@CharToInpu:

; 2584 : 	else if(InputName=="JoyStickTwistZ Max")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BD@BJAMJJJD@JoyStickTwistZ?5Max?$AA@
	jne	SHORT $LN20@CharToInpu

; 2585 : 		return 75;

	mov	eax, 75					; 0000004bH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN20@CharToInpu:

; 2586 : 	else if(InputName=="JoyStickSliderA Min")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@LKMGPNHK@JoyStickSliderA?5Min?$AA@
	jne	SHORT $LN18@CharToInpu

; 2587 : 		return 76;

	mov	eax, 76					; 0000004cH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN18@CharToInpu:

; 2588 : 	else if(InputName=="JoyStickSliderA Max")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@KIENBJBF@JoyStickSliderA?5Max?$AA@
	jne	SHORT $LN16@CharToInpu

; 2589 : 		return 77;

	mov	eax, 77					; 0000004dH
	jmp	$LN171@CharToInpu
	jmp	$LN169@CharToInpu
$LN16@CharToInpu:

; 2590 : 	else if(InputName=="JoyStickSliderB Min")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@DMFCIPNE@JoyStickSliderB?5Min?$AA@
	jne	SHORT $LN14@CharToInpu

; 2591 : 		return 78;

	mov	eax, 78					; 0000004eH
	jmp	SHORT $LN171@CharToInpu
	jmp	SHORT $LN169@CharToInpu
$LN14@CharToInpu:

; 2592 : 	else if(InputName=="JoyStickSliderB Max")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@CONJGLLL@JoyStickSliderB?5Max?$AA@
	jne	SHORT $LN12@CharToInpu

; 2593 : 		return 79;

	mov	eax, 79					; 0000004fH
	jmp	SHORT $LN171@CharToInpu
	jmp	SHORT $LN169@CharToInpu
$LN12@CharToInpu:

; 2594 : 	else if(InputName=="JoyStickSliderC Min")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@PHAOFMHB@JoyStickSliderC?5Min?$AA@
	jne	SHORT $LN10@CharToInpu

; 2595 : 		return 80;

	mov	eax, 80					; 00000050H
	jmp	SHORT $LN171@CharToInpu
	jmp	SHORT $LN169@CharToInpu
$LN10@CharToInpu:

; 2596 : 	else if(InputName=="JoyStickSliderC Max")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@OFIFLIBO@JoyStickSliderC?5Max?$AA@
	jne	SHORT $LN8@CharToInpu

; 2597 : 		return 81;

	mov	eax, 81					; 00000051H
	jmp	SHORT $LN171@CharToInpu
	jmp	SHORT $LN169@CharToInpu
$LN8@CharToInpu:

; 2598 : 	else if(InputName=="JoyStickSliderD Min")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@OKALGMMJ@JoyStickSliderD?5Min?$AA@
	jne	SHORT $LN6@CharToInpu

; 2599 : 		return 82;

	mov	eax, 82					; 00000052H
	jmp	SHORT $LN171@CharToInpu
	jmp	SHORT $LN169@CharToInpu
$LN6@CharToInpu:

; 2600 : 	else if(InputName=="JoyStickSliderD Max")

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_0BE@PIIAIIKG@JoyStickSliderD?5Max?$AA@
	jne	SHORT $LN4@CharToInpu

; 2601 : 		return 83;

	mov	eax, 83					; 00000053H
	jmp	SHORT $LN171@CharToInpu
	jmp	SHORT $LN169@CharToInpu
$LN4@CharToInpu:

; 2602 : 	else if(InputName==""||InputName==NULL)

	cmp	DWORD PTR _InputName$[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	SHORT $LN1@CharToInpu
	cmp	DWORD PTR _InputName$[ebp], 0
	jne	SHORT $LN169@CharToInpu
$LN1@CharToInpu:

; 2603 : 		return -1;

	or	eax, -1
	jmp	SHORT $LN171@CharToInpu
$LN169@CharToInpu:

; 2604 : 
; 2605 : 	return -1;

	or	eax, -1
$LN171@CharToInpu:

; 2606 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?CharToInputInt@DeviceHandler@@QAEHPAD@Z ENDP		; DeviceHandler::CharToInputInt
_TEXT	ENDS
PUBLIC	?GetCurrentDevice@DeviceHandler@@QAEHXZ		; DeviceHandler::GetCurrentDevice
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCurrentDevice@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentDevice@DeviceHandler@@QAEHXZ PROC		; DeviceHandler::GetCurrentDevice, COMDAT
; _this$ = ecx

; 2608 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2609 : 	return this->CurrentDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+3216]

; 2610 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentDevice@DeviceHandler@@QAEHXZ ENDP		; DeviceHandler::GetCurrentDevice
_TEXT	ENDS
PUBLIC	?GetFirstInput@DeviceHandler@@QAEHM@Z		; DeviceHandler::GetFirstInput
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetFirstInput@DeviceHandler@@QAEHM@Z
_TEXT	SEGMENT
_i$92888 = -16						; size = 4
_i$92883 = -12						; size = 4
_i$92878 = -8						; size = 4
_this$ = -4						; size = 4
_MinimumPercent$ = 8					; size = 4
?GetFirstInput@DeviceHandler@@QAEHM@Z PROC		; DeviceHandler::GetFirstInput, COMDAT
; _this$ = ecx

; 2612 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2613 : 	for(int i=0;i<32;i++)

	mov	DWORD PTR _i$92878[ebp], 0
	jmp	SHORT $LN12@GetFirstIn
$LN11@GetFirstIn:
	mov	eax, DWORD PTR _i$92878[ebp]
	add	eax, 1
	mov	DWORD PTR _i$92878[ebp], eax
$LN12@GetFirstIn:
	cmp	DWORD PTR _i$92878[ebp], 32		; 00000020H
	jge	SHORT $LN10@GetFirstIn

; 2614 : 		if(this->IsPressed(i))

	mov	eax, DWORD PTR _i$92878[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPressed@DeviceHandler@@QAE_NH@Z	; DeviceHandler::IsPressed
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@GetFirstIn

; 2615 : 			return i;

	mov	eax, DWORD PTR _i$92878[ebp]
	jmp	$LN13@GetFirstIn
$LN9@GetFirstIn:

; 2616 : 
; 2617 : 	for(int i=0;i<4;i++)

	jmp	SHORT $LN11@GetFirstIn
$LN10@GetFirstIn:
	mov	DWORD PTR _i$92883[ebp], 0
	jmp	SHORT $LN8@GetFirstIn
$LN7@GetFirstIn:
	mov	eax, DWORD PTR _i$92883[ebp]
	add	eax, 1
	mov	DWORD PTR _i$92883[ebp], eax
$LN8@GetFirstIn:
	cmp	DWORD PTR _i$92883[ebp], 4
	jge	SHORT $LN6@GetFirstIn

; 2618 : 		if(this->GetHatAngle(i)!=-1)

	mov	eax, DWORD PTR _i$92883[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHatAngle@DeviceHandler@@QAEHH@Z	; DeviceHandler::GetHatAngle
	cmp	eax, -1
	je	SHORT $LN5@GetFirstIn

; 2619 : 			return (((this->GetHatAngle(i)/45)+32)+(i*8));

	mov	eax, DWORD PTR _i$92883[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHatAngle@DeviceHandler@@QAEHH@Z	; DeviceHandler::GetHatAngle
	cdq
	mov	ecx, 45					; 0000002dH
	idiv	ecx
	mov	edx, DWORD PTR _i$92883[ebp]
	lea	eax, DWORD PTR [eax+edx*8+32]
	jmp	SHORT $LN13@GetFirstIn
$LN5@GetFirstIn:

; 2620 : 
; 2621 : 	for(int i=1;i<21;i++)

	jmp	SHORT $LN7@GetFirstIn
$LN6@GetFirstIn:
	mov	DWORD PTR _i$92888[ebp], 1
	jmp	SHORT $LN4@GetFirstIn
$LN3@GetFirstIn:
	mov	eax, DWORD PTR _i$92888[ebp]
	add	eax, 1
	mov	DWORD PTR _i$92888[ebp], eax
$LN4@GetFirstIn:
	cmp	DWORD PTR _i$92888[ebp], 21		; 00000015H
	jge	SHORT $LN2@GetFirstIn

; 2622 : 		if(this->GetIsJoy(i,MinimumPercent))

	push	ecx
	fld	DWORD PTR _MinimumPercent$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _i$92888[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIsJoy@DeviceHandler@@QAE_NHM@Z	; DeviceHandler::GetIsJoy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@GetFirstIn

; 2623 : 			return i+63;

	mov	eax, DWORD PTR _i$92888[ebp]
	add	eax, 63					; 0000003fH
	jmp	SHORT $LN13@GetFirstIn
$LN1@GetFirstIn:

; 2624 : 
; 2625 : 	return -1;

	jmp	SHORT $LN3@GetFirstIn
$LN2@GetFirstIn:
	or	eax, -1
$LN13@GetFirstIn:

; 2626 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetFirstInput@DeviceHandler@@QAEHM@Z ENDP		; DeviceHandler::GetFirstInput
; Function compile flags: /Odtp /ZI
_TEXT	ENDS
;	COMDAT ?GetHatAngle@DeviceHandler@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Hat$ = 8						; size = 4
?GetHatAngle@DeviceHandler@@QAEHH@Z PROC		; DeviceHandler::GetHatAngle, COMDAT
; _this$ = ecx

; 2628 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2629 : 	return this->HatAngles[Hat][0];

	mov	eax, DWORD PTR _Hat$[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax+4444]

; 2630 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetHatAngle@DeviceHandler@@QAEHH@Z ENDP		; DeviceHandler::GetHatAngle
_TEXT	ENDS
PUBLIC	?GetMouseSpeedX@DeviceHandler@@QAEHXZ		; DeviceHandler::GetMouseSpeedX
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMouseSpeedX@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseSpeedX@DeviceHandler@@QAEHXZ PROC		; DeviceHandler::GetMouseSpeedX, COMDAT
; _this$ = ecx

; 2632 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2633 : 	return this->MouseSyncX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+3232]

; 2634 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseSpeedX@DeviceHandler@@QAEHXZ ENDP		; DeviceHandler::GetMouseSpeedX
_TEXT	ENDS
PUBLIC	?GetMouseSpeedY@DeviceHandler@@QAEHXZ		; DeviceHandler::GetMouseSpeedY
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetMouseSpeedY@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMouseSpeedY@DeviceHandler@@QAEHXZ PROC		; DeviceHandler::GetMouseSpeedY, COMDAT
; _this$ = ecx

; 2636 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2637 : 	return this->MouseSyncY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+3236]

; 2638 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseSpeedY@DeviceHandler@@QAEHXZ ENDP		; DeviceHandler::GetMouseSpeedY
_TEXT	ENDS
PUBLIC	?InputBound@DeviceHandler@@QAEHH@Z		; DeviceHandler::InputBound
; Function compile flags: /Odtp /ZI
;	COMDAT ?InputBound@DeviceHandler@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?InputBound@DeviceHandler@@QAEHH@Z PROC			; DeviceHandler::InputBound, COMDAT
; _this$ = ecx

; 2640 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2641 : 	if(this->GetIsGenericInput(InputType))

	mov	eax, DWORD PTR _InputType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIsGenericInput@DeviceHandler@@QAE_NH@Z ; DeviceHandler::GetIsGenericInput
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@InputBound

; 2642 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN3@InputBound

; 2643 : 	else

	jmp	SHORT $LN3@InputBound
$LN2@InputBound:

; 2644 : 		return 0;

	xor	eax, eax
$LN3@InputBound:

; 2645 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?InputBound@DeviceHandler@@QAEHH@Z ENDP			; DeviceHandler::InputBound
_TEXT	ENDS
PUBLIC	?InputBound@DeviceHandler@@QAEHHM@Z		; DeviceHandler::InputBound
; Function compile flags: /Odtp /ZI
;	COMDAT ?InputBound@DeviceHandler@@QAEHHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
_Percent$ = 12						; size = 4
?InputBound@DeviceHandler@@QAEHHM@Z PROC		; DeviceHandler::InputBound, COMDAT
; _this$ = ecx

; 2647 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2648 : 	if(this->GetIsGenericInput(InputType,Percent))

	push	ecx
	fld	DWORD PTR _Percent$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _InputType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIsGenericInput@DeviceHandler@@QAE_NHM@Z ; DeviceHandler::GetIsGenericInput
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@InputBound@2

; 2649 : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN1@InputBound@2

; 2650 : 	else

	jmp	SHORT $LN1@InputBound@2
$LN2@InputBound@2:

; 2651 : 		return 0;

	xor	eax, eax
$LN1@InputBound@2:

; 2652 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?InputBound@DeviceHandler@@QAEHHM@Z ENDP		; DeviceHandler::InputBound
_TEXT	ENDS
PUBLIC	?MouseBindDown@DeviceHandler@@QAEHXZ		; DeviceHandler::MouseBindDown
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindDown@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindDown@DeviceHandler@@QAEHXZ PROC		; DeviceHandler::MouseBindDown, COMDAT
; _this$ = ecx

; 2654 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2655 : 	return this->MouseDown;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+3220]

; 2656 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindDown@DeviceHandler@@QAEHXZ ENDP		; DeviceHandler::MouseBindDown
_TEXT	ENDS
PUBLIC	?MouseBindLeft@DeviceHandler@@QAEHXZ		; DeviceHandler::MouseBindLeft
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindLeft@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindLeft@DeviceHandler@@QAEHXZ PROC		; DeviceHandler::MouseBindLeft, COMDAT
; _this$ = ecx

; 2658 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2659 : 	return this->MouseLeft;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+3224]

; 2660 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindLeft@DeviceHandler@@QAEHXZ ENDP		; DeviceHandler::MouseBindLeft
_TEXT	ENDS
PUBLIC	?MouseBindRight@DeviceHandler@@QAEHXZ		; DeviceHandler::MouseBindRight
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindRight@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindRight@DeviceHandler@@QAEHXZ PROC		; DeviceHandler::MouseBindRight, COMDAT
; _this$ = ecx

; 2662 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2663 : 	return this->MouseRight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+3228]

; 2664 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindRight@DeviceHandler@@QAEHXZ ENDP		; DeviceHandler::MouseBindRight
_TEXT	ENDS
PUBLIC	?MouseBindUp@DeviceHandler@@QAEHXZ		; DeviceHandler::MouseBindUp
; Function compile flags: /Odtp /ZI
;	COMDAT ?MouseBindUp@DeviceHandler@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MouseBindUp@DeviceHandler@@QAEHXZ PROC			; DeviceHandler::MouseBindUp, COMDAT
; _this$ = ecx

; 2666 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2667 : 	return this->MouseUp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+3240]

; 2668 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MouseBindUp@DeviceHandler@@QAEHXZ ENDP			; DeviceHandler::MouseBindUp
_TEXT	ENDS
PUBLIC	?BindMouseXLeft@DeviceHandler@@QAEXPAD@Z	; DeviceHandler::BindMouseXLeft
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXLeft@DeviceHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseXLeft@DeviceHandler@@QAEXPAD@Z PROC		; DeviceHandler::BindMouseXLeft, COMDAT
; _this$ = ecx

; 2670 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2671 : 	this->MouseLeft=this->CharToInputInt(InputType);

	mov	eax, DWORD PTR _InputType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3224], eax

; 2672 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseXLeft@DeviceHandler@@QAEXPAD@Z ENDP		; DeviceHandler::BindMouseXLeft
_TEXT	ENDS
PUBLIC	?BindMouseXLeft@DeviceHandler@@QAEXH@Z		; DeviceHandler::BindMouseXLeft
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXLeft@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseXLeft@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::BindMouseXLeft, COMDAT
; _this$ = ecx

; 2674 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2675 : 	this->MouseLeft=InputType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _InputType$[ebp]
	mov	DWORD PTR [eax+3224], ecx

; 2676 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseXLeft@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::BindMouseXLeft
_TEXT	ENDS
PUBLIC	?BindMouseXRight@DeviceHandler@@QAEXPAD@Z	; DeviceHandler::BindMouseXRight
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXRight@DeviceHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseXRight@DeviceHandler@@QAEXPAD@Z PROC		; DeviceHandler::BindMouseXRight, COMDAT
; _this$ = ecx

; 2678 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2679 : 	this->MouseRight=this->CharToInputInt(InputType);

	mov	eax, DWORD PTR _InputType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3228], eax

; 2680 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseXRight@DeviceHandler@@QAEXPAD@Z ENDP		; DeviceHandler::BindMouseXRight
_TEXT	ENDS
PUBLIC	?BindMouseXRight@DeviceHandler@@QAEXH@Z		; DeviceHandler::BindMouseXRight
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseXRight@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseXRight@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::BindMouseXRight, COMDAT
; _this$ = ecx

; 2682 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2683 : 	this->MouseRight=InputType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _InputType$[ebp]
	mov	DWORD PTR [eax+3228], ecx

; 2684 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseXRight@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::BindMouseXRight
_TEXT	ENDS
PUBLIC	?BindMouseYDown@DeviceHandler@@QAEXPAD@Z	; DeviceHandler::BindMouseYDown
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYDown@DeviceHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseYDown@DeviceHandler@@QAEXPAD@Z PROC		; DeviceHandler::BindMouseYDown, COMDAT
; _this$ = ecx

; 2686 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2687 : 	this->MouseDown=this->CharToInputInt(InputType);

	mov	eax, DWORD PTR _InputType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3220], eax

; 2688 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseYDown@DeviceHandler@@QAEXPAD@Z ENDP		; DeviceHandler::BindMouseYDown
_TEXT	ENDS
PUBLIC	?BindMouseYDown@DeviceHandler@@QAEXH@Z		; DeviceHandler::BindMouseYDown
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYDown@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseYDown@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::BindMouseYDown, COMDAT
; _this$ = ecx

; 2690 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2691 : 	this->MouseDown=InputType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _InputType$[ebp]
	mov	DWORD PTR [eax+3220], ecx

; 2692 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseYDown@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::BindMouseYDown
_TEXT	ENDS
PUBLIC	?BindMouseYUp@DeviceHandler@@QAEXPAD@Z		; DeviceHandler::BindMouseYUp
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYUp@DeviceHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseYUp@DeviceHandler@@QAEXPAD@Z PROC		; DeviceHandler::BindMouseYUp, COMDAT
; _this$ = ecx

; 2694 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2695 : 	this->MouseUp=this->CharToInputInt(InputType);

	mov	eax, DWORD PTR _InputType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CharToInputInt@DeviceHandler@@QAEHPAD@Z ; DeviceHandler::CharToInputInt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3240], eax

; 2696 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseYUp@DeviceHandler@@QAEXPAD@Z ENDP		; DeviceHandler::BindMouseYUp
_TEXT	ENDS
PUBLIC	?BindMouseYUp@DeviceHandler@@QAEXH@Z		; DeviceHandler::BindMouseYUp
; Function compile flags: /Odtp /ZI
;	COMDAT ?BindMouseYUp@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_InputType$ = 8						; size = 4
?BindMouseYUp@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::BindMouseYUp, COMDAT
; _this$ = ecx

; 2698 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2699 : 	this->MouseUp=InputType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _InputType$[ebp]
	mov	DWORD PTR [eax+3240], ecx

; 2700 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?BindMouseYUp@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::BindMouseYUp
_TEXT	ENDS
PUBLIC	?SetCurrentDevice@DeviceHandler@@QAEXPAD@Z	; DeviceHandler::SetCurrentDevice
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetCurrentDevice@DeviceHandler@@QAEXPAD@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_test$ = -8						; size = 4
_this$ = -4						; size = 4
_Device$ = 8						; size = 4
?SetCurrentDevice@DeviceHandler@@QAEXPAD@Z PROC		; DeviceHandler::SetCurrentDevice, COMDAT
; _this$ = ecx

; 2702 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2703 : 	char* test;
; 2704 : 	int i;
; 2705 : 	
; 2706 : 	dbPerformChecklistControlDevices();

	call	?dbPerformChecklistControlDevices@@YAXXZ ; dbPerformChecklistControlDevices

; 2707 : 	for(i=1;(test=dbChecklistString(i))!=Device&&test!=NULL&&test!="";i++);

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN6@SetCurrent
$LN5@SetCurrent:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@SetCurrent:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	mov	DWORD PTR _test$[ebp], eax
	mov	ecx, DWORD PTR _test$[ebp]
	cmp	ecx, DWORD PTR _Device$[ebp]
	je	SHORT $LN4@SetCurrent
	cmp	DWORD PTR _test$[ebp], 0
	je	SHORT $LN4@SetCurrent
	cmp	DWORD PTR _test$[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	SHORT $LN4@SetCurrent
	jmp	SHORT $LN5@SetCurrent
$LN4@SetCurrent:

; 2708 : 	if(test!=NULL&&test!="")

	cmp	DWORD PTR _test$[ebp], 0
	je	SHORT $LN3@SetCurrent
	cmp	DWORD PTR _test$[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	SHORT $LN3@SetCurrent

; 2709 : 	{
; 2710 : 		this->CurrentDevice=i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+3216], ecx

; 2711 : 		this->CurrentDevice$=Device;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Device$[ebp]
	mov	DWORD PTR [eax+3204], ecx

; 2712 : 		dbSetControlDevice(this->CurrentDevice$);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3204]
	push	ecx
	call	?dbSetControlDevice@@YAXPAD@Z		; dbSetControlDevice
	add	esp, 4

; 2713 : 
; 2714 : 		if(dbChecklistValueA(this->CurrentDevice)==1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3216]
	push	ecx
	call	?dbChecklistValueA@@YAHH@Z		; dbChecklistValueA
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN2@SetCurrent

; 2715 : 			this->ForceFeedback=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 2716 : 		else

	jmp	SHORT $LN3@SetCurrent
$LN2@SetCurrent:

; 2717 : 			this->ForceFeedback=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0
$LN3@SetCurrent:

; 2718 : 	}
; 2719 : 	dbEmptyChecklist();

	call	?dbEmptyChecklist@@YAXXZ		; dbEmptyChecklist

; 2720 : 
; 2721 : 	return;
; 2722 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCurrentDevice@DeviceHandler@@QAEXPAD@Z ENDP		; DeviceHandler::SetCurrentDevice
_TEXT	ENDS
PUBLIC	?SetCurrentDevice@DeviceHandler@@QAEXH@Z	; DeviceHandler::SetCurrentDevice
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetCurrentDevice@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_test$ = -8						; size = 4
_this$ = -4						; size = 4
_Device$ = 8						; size = 4
?SetCurrentDevice@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::SetCurrentDevice, COMDAT
; _this$ = ecx

; 2724 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2725 : 	char* test;
; 2726 : 	
; 2727 : 	dbPerformChecklistControlDevices();

	call	?dbPerformChecklistControlDevices@@YAXXZ ; dbPerformChecklistControlDevices

; 2728 : 	test=dbChecklistString(Device);

	mov	eax, DWORD PTR _Device$[ebp]
	push	eax
	call	?dbChecklistString@@YAPADH@Z		; dbChecklistString
	add	esp, 4
	mov	DWORD PTR _test$[ebp], eax

; 2729 : 	if(test!=NULL&&test!="")

	cmp	DWORD PTR _test$[ebp], 0
	je	SHORT $LN3@SetCurrent@2
	cmp	DWORD PTR _test$[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	SHORT $LN3@SetCurrent@2

; 2730 : 	{
; 2731 : 		this->CurrentDevice=Device;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Device$[ebp]
	mov	DWORD PTR [eax+3216], ecx

; 2732 : 		this->CurrentDevice$=test;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _test$[ebp]
	mov	DWORD PTR [eax+3204], ecx

; 2733 : 		dbSetControlDevice(this->CurrentDevice$);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3204]
	push	ecx
	call	?dbSetControlDevice@@YAXPAD@Z		; dbSetControlDevice
	add	esp, 4

; 2734 : 
; 2735 : 		if(dbChecklistValueA(this->CurrentDevice)==1)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3216]
	push	ecx
	call	?dbChecklistValueA@@YAHH@Z		; dbChecklistValueA
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN2@SetCurrent@2

; 2736 : 			this->ForceFeedback=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 2737 : 		else

	jmp	SHORT $LN3@SetCurrent@2
$LN2@SetCurrent@2:

; 2738 : 			this->ForceFeedback=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0
$LN3@SetCurrent@2:

; 2739 : 	}
; 2740 : 	dbEmptyChecklist();

	call	?dbEmptyChecklist@@YAXXZ		; dbEmptyChecklist

; 2741 : 
; 2742 : 	return;
; 2743 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCurrentDevice@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::SetCurrentDevice
_TEXT	ENDS
PUBLIC	?SetForceFeedback@DeviceHandler@@QAEX_N@Z	; DeviceHandler::SetForceFeedback
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetForceFeedback@DeviceHandler@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_OnOff$ = 8						; size = 1
?SetForceFeedback@DeviceHandler@@QAEX_N@Z PROC		; DeviceHandler::SetForceFeedback, COMDAT
; _this$ = ecx

; 2745 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2746 : 	if(this->ForceFeedback)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN2@SetForceFe

; 2747 : 		this->ForceFeedbackOn=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2], 1

; 2748 : 	else

	jmp	SHORT $LN3@SetForceFe
$LN2@SetForceFe:

; 2749 : 		this->ForceFeedbackOn=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2], 0
$LN3@SetForceFe:

; 2750 : 
; 2751 : 	return;
; 2752 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetForceFeedback@DeviceHandler@@QAEX_N@Z ENDP		; DeviceHandler::SetForceFeedback
_TEXT	ENDS
PUBLIC	?SetMouse@DeviceHandler@@QAEXPAVMouseHandler@@@Z ; DeviceHandler::SetMouse
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouse@DeviceHandler@@QAEXPAVMouseHandler@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Mouse$ = 8						; size = 4
?SetMouse@DeviceHandler@@QAEXPAVMouseHandler@@@Z PROC	; DeviceHandler::SetMouse, COMDAT
; _this$ = ecx

; 2754 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2755 : 	this->CurrentMouse=Mouse;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Mouse$[ebp]
	mov	DWORD PTR [eax+8844], ecx

; 2756 : 
; 2757 : 	if(Mouse!=NULL)

	cmp	DWORD PTR _Mouse$[ebp], 0
	je	SHORT $LN2@SetMouse@2

; 2758 : 		this->Bound=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1

; 2759 : 	else

	jmp	SHORT $LN3@SetMouse@2
$LN2@SetMouse@2:

; 2760 : 		this->Bound=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
$LN3@SetMouse@2:

; 2761 : 
; 2762 : 	return;
; 2763 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouse@DeviceHandler@@QAEXPAVMouseHandler@@@Z ENDP	; DeviceHandler::SetMouse
_TEXT	ENDS
PUBLIC	?SetMouseSpeedX@DeviceHandler@@QAEXH@Z		; DeviceHandler::SetMouseSpeedX
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouseSpeedX@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_X$ = 8							; size = 4
?SetMouseSpeedX@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::SetMouseSpeedX, COMDAT
; _this$ = ecx

; 2765 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2766 : 	if(X<0)

	cmp	DWORD PTR _X$[ebp], 0
	jge	SHORT $LN1@SetMouseSp@3

; 2767 : 		return;

	jmp	SHORT $LN2@SetMouseSp@3
$LN1@SetMouseSp@3:

; 2768 : 
; 2769 : 	this->MouseSyncX=X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _X$[ebp]
	mov	DWORD PTR [eax+3232], ecx
$LN2@SetMouseSp@3:

; 2770 : 
; 2771 : 	return;
; 2772 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseSpeedX@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::SetMouseSpeedX
_TEXT	ENDS
PUBLIC	?SetMouseSpeedY@DeviceHandler@@QAEXH@Z		; DeviceHandler::SetMouseSpeedY
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetMouseSpeedY@DeviceHandler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Y$ = 8							; size = 4
?SetMouseSpeedY@DeviceHandler@@QAEXH@Z PROC		; DeviceHandler::SetMouseSpeedY, COMDAT
; _this$ = ecx

; 2774 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2775 : 	if(Y<0)

	cmp	DWORD PTR _Y$[ebp], 0
	jge	SHORT $LN1@SetMouseSp@4

; 2776 : 		return;

	jmp	SHORT $LN2@SetMouseSp@4
$LN1@SetMouseSp@4:

; 2777 : 
; 2778 : 	this->MouseSyncY=Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Y$[ebp]
	mov	DWORD PTR [eax+3236], ecx
$LN2@SetMouseSp@4:

; 2779 : 
; 2780 : 	return;
; 2781 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMouseSpeedY@DeviceHandler@@QAEXH@Z ENDP		; DeviceHandler::SetMouseSpeedY
_TEXT	ENDS
PUBLIC	?SetPercentBindX@DeviceHandler@@QAEXM@Z		; DeviceHandler::SetPercentBindX
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetPercentBindX@DeviceHandler@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?SetPercentBindX@DeviceHandler@@QAEXM@Z PROC		; DeviceHandler::SetPercentBindX, COMDAT
; _this$ = ecx

; 2783 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2784 : 	this->PercentBindX=Percent;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _Percent$[ebp]
	fstp	DWORD PTR [eax+3208]

; 2785 : 
; 2786 : 	return;
; 2787 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPercentBindX@DeviceHandler@@QAEXM@Z ENDP		; DeviceHandler::SetPercentBindX
_TEXT	ENDS
PUBLIC	?SetPercentBindY@DeviceHandler@@QAEXM@Z		; DeviceHandler::SetPercentBindY
; Function compile flags: /Odtp /ZI
;	COMDAT ?SetPercentBindY@DeviceHandler@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Percent$ = 8						; size = 4
?SetPercentBindY@DeviceHandler@@QAEXM@Z PROC		; DeviceHandler::SetPercentBindY, COMDAT
; _this$ = ecx

; 2789 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2790 : 	this->PercentBindY=Percent;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _Percent$[ebp]
	fstp	DWORD PTR [eax+3212]

; 2791 : 
; 2792 : 	return;
; 2793 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPercentBindY@DeviceHandler@@QAEXM@Z ENDP		; DeviceHandler::SetPercentBindY
_TEXT	ENDS
PUBLIC	?Update@DeviceHandler@@QAEXXZ			; DeviceHandler::Update
EXTRN	?dbJoystickSliderD@@YAHXZ:PROC			; dbJoystickSliderD
EXTRN	?dbJoystickSliderC@@YAHXZ:PROC			; dbJoystickSliderC
EXTRN	?dbJoystickSliderB@@YAHXZ:PROC			; dbJoystickSliderB
EXTRN	?dbJoystickSliderA@@YAHXZ:PROC			; dbJoystickSliderA
EXTRN	?dbJoystickTwistZ@@YAHXZ:PROC			; dbJoystickTwistZ
EXTRN	?dbJoystickTwistY@@YAHXZ:PROC			; dbJoystickTwistY
EXTRN	?dbJoystickTwistX@@YAHXZ:PROC			; dbJoystickTwistX
EXTRN	?dbJoystickZ@@YAHXZ:PROC			; dbJoystickZ
EXTRN	?dbJoystickY@@YAHXZ:PROC			; dbJoystickY
EXTRN	?dbJoystickX@@YAHXZ:PROC			; dbJoystickX
EXTRN	?dbJoystickHatAngle@@YAHH@Z:PROC		; dbJoystickHatAngle
EXTRN	?dbJoystickFireX@@YAHH@Z:PROC			; dbJoystickFireX
; Function compile flags: /Odtp /ZI
;	COMDAT ?Update@DeviceHandler@@QAEXXZ
_TEXT	SEGMENT
_i$93030 = -24						; size = 4
_i$93026 = -20						; size = 4
_j$93022 = -16						; size = 4
_j$93018 = -12						; size = 4
_i$93014 = -8						; size = 4
_this$ = -4						; size = 4
?Update@DeviceHandler@@QAEXXZ PROC			; DeviceHandler::Update, COMDAT
; _this$ = ecx

; 2795 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2796 : 	if(this->CurrentDevice$!=NULL&&this->CurrentDevice$!="")

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+3204], 0
	je	$LN21@Update@3
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+3204], OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	$LN21@Update@3

; 2797 : 	{
; 2798 : 		for(int i=99;i>0;i--)

	mov	DWORD PTR _i$93014[ebp], 99		; 00000063H
	jmp	SHORT $LN20@Update@3
$LN19@Update@3:
	mov	eax, DWORD PTR _i$93014[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$93014[ebp], eax
$LN20@Update@3:
	cmp	DWORD PTR _i$93014[ebp], 0
	jle	$LN18@Update@3

; 2799 : 		{
; 2800 : 			for(int j=31;j>=0;j--)

	mov	DWORD PTR _j$93018[ebp], 31		; 0000001fH
	jmp	SHORT $LN17@Update@3
$LN16@Update@3:
	mov	eax, DWORD PTR _j$93018[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$93018[ebp], eax
$LN17@Update@3:
	cmp	DWORD PTR _j$93018[ebp], 0
	jl	SHORT $LN15@Update@3

; 2801 : 				this->Buttons[j][i]=this->Buttons[j][i-1];

	mov	eax, DWORD PTR _j$93018[ebp]
	imul	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+3]
	mov	eax, DWORD PTR _j$93018[ebp]
	imul	eax, 100				; 00000064H
	add	eax, DWORD PTR _i$93014[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _i$93014[ebp]
	mov	dl, BYTE PTR [edx+esi-1]
	mov	BYTE PTR [ecx+eax+3], dl
	jmp	SHORT $LN16@Update@3
$LN15@Update@3:

; 2802 : 
; 2803 : 			for(int j=0;j<4;j++)

	mov	DWORD PTR _j$93022[ebp], 0
	jmp	SHORT $LN14@Update@3
$LN13@Update@3:
	mov	eax, DWORD PTR _j$93022[ebp]
	add	eax, 1
	mov	DWORD PTR _j$93022[ebp], eax
$LN14@Update@3:
	cmp	DWORD PTR _j$93022[ebp], 4
	jge	SHORT $LN12@Update@3

; 2804 : 				this->HatAngles[j][i]=this->HatAngles[j][i-1];

	mov	eax, DWORD PTR _j$93022[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4444]
	mov	eax, DWORD PTR _j$93022[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax+4444]
	mov	ecx, DWORD PTR _i$93014[ebp]
	mov	esi, DWORD PTR _i$93014[ebp]
	mov	edx, DWORD PTR [edx+esi*4-4]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN13@Update@3
$LN12@Update@3:

; 2805 : 
; 2806 : 			this->JoyStickX[i]=this->JoyStickX[i-1];

	mov	eax, DWORD PTR _i$93014[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$93014[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+3240]
	mov	DWORD PTR [ecx+eax*4+3244], edx

; 2807 : 			this->JoyStickY[i]=this->JoyStickY[i-1];

	mov	eax, DWORD PTR _i$93014[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$93014[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+3640]
	mov	DWORD PTR [ecx+eax*4+3644], edx

; 2808 : 			this->JoyStickZ[i]=this->JoyStickZ[i-1];

	mov	eax, DWORD PTR _i$93014[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$93014[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+4040]
	mov	DWORD PTR [ecx+eax*4+4044], edx

; 2809 : 			this->JoyStickSliderA[i]=this->JoyStickSliderA[i-1];

	mov	eax, DWORD PTR _i$93014[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$93014[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+6040]
	mov	DWORD PTR [ecx+eax*4+6044], edx

; 2810 : 			this->JoyStickSliderB[i]=this->JoyStickSliderB[i-1];

	mov	eax, DWORD PTR _i$93014[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$93014[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+6440]
	mov	DWORD PTR [ecx+eax*4+6444], edx

; 2811 : 			this->JoyStickSliderC[i]=this->JoyStickSliderC[i-1];

	mov	eax, DWORD PTR _i$93014[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$93014[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+6840]
	mov	DWORD PTR [ecx+eax*4+6844], edx

; 2812 : 			this->JoyStickSliderD[i]=this->JoyStickSliderD[i-1];

	mov	eax, DWORD PTR _i$93014[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$93014[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+7240]
	mov	DWORD PTR [ecx+eax*4+7244], edx

; 2813 : 			this->JoyStickTwistX[i]=this->JoyStickTwistX[i-1];

	mov	eax, DWORD PTR _i$93014[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$93014[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+7640]
	mov	DWORD PTR [ecx+eax*4+7644], edx

; 2814 : 			this->JoyStickTwistY[i]=this->JoyStickTwistY[i-1];

	mov	eax, DWORD PTR _i$93014[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$93014[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+8040]
	mov	DWORD PTR [ecx+eax*4+8044], edx

; 2815 : 			this->JoyStickTwistZ[i]=this->JoyStickTwistZ[i-1];

	mov	eax, DWORD PTR _i$93014[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$93014[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+8440]
	mov	DWORD PTR [ecx+eax*4+8444], edx

; 2816 : 		}

	jmp	$LN19@Update@3
$LN18@Update@3:

; 2817 : 
; 2818 : 		for(int i=0;i<32;i++)

	mov	DWORD PTR _i$93026[ebp], 0
	jmp	SHORT $LN11@Update@3
$LN10@Update@3:
	mov	eax, DWORD PTR _i$93026[ebp]
	add	eax, 1
	mov	DWORD PTR _i$93026[ebp], eax
$LN11@Update@3:
	cmp	DWORD PTR _i$93026[ebp], 32		; 00000020H
	jge	SHORT $LN9@Update@3

; 2819 : 			this->Buttons[i][0]=dbJoystickFireX(i);

	mov	eax, DWORD PTR _i$93026[ebp]
	push	eax
	call	?dbJoystickFireX@@YAHH@Z		; dbJoystickFireX
	add	esp, 4
	test	eax, eax
	setne	cl
	mov	edx, DWORD PTR _i$93026[ebp]
	imul	edx, 100				; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+3], cl
	jmp	SHORT $LN10@Update@3
$LN9@Update@3:

; 2820 : 
; 2821 : 		for(int i=0;i<4;i++)

	mov	DWORD PTR _i$93030[ebp], 0
	jmp	SHORT $LN8@Update@3
$LN7@Update@3:
	mov	eax, DWORD PTR _i$93030[ebp]
	add	eax, 1
	mov	DWORD PTR _i$93030[ebp], eax
$LN8@Update@3:
	cmp	DWORD PTR _i$93030[ebp], 4
	jge	SHORT $LN6@Update@3

; 2822 : 			if(dbJoystickHatAngle(i)!=-1)

	mov	eax, DWORD PTR _i$93030[ebp]
	push	eax
	call	?dbJoystickHatAngle@@YAHH@Z		; dbJoystickHatAngle
	add	esp, 4
	cmp	eax, -1
	je	SHORT $LN5@Update@3

; 2823 : 				this->HatAngles[i][0]=dbJoystickHatAngle(i)/100;

	mov	eax, DWORD PTR _i$93030[ebp]
	push	eax
	call	?dbJoystickHatAngle@@YAHH@Z		; dbJoystickHatAngle
	add	esp, 4
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	edx, DWORD PTR _i$93030[ebp]
	imul	edx, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx+4444], eax

; 2824 : 			else

	jmp	SHORT $LN4@Update@3
$LN5@Update@3:

; 2825 : 				this->HatAngles[i][0]=-1;

	mov	eax, DWORD PTR _i$93030[ebp]
	imul	eax, 400				; 00000190H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+4444], -1
$LN4@Update@3:
	jmp	SHORT $LN7@Update@3
$LN6@Update@3:

; 2826 : 
; 2827 : 		this->JoyStickX[0]=dbJoystickX();

	call	?dbJoystickX@@YAHXZ			; dbJoystickX
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3244], eax

; 2828 : 		this->JoyStickY[0]=dbJoystickY();

	call	?dbJoystickY@@YAHXZ			; dbJoystickY
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+3644], eax

; 2829 : 		this->JoyStickZ[0]=dbJoystickZ();

	call	?dbJoystickZ@@YAHXZ			; dbJoystickZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4044], eax

; 2830 : 		this->JoyStickTwistX[0]=dbJoystickTwistX();

	call	?dbJoystickTwistX@@YAHXZ		; dbJoystickTwistX
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7644], eax

; 2831 : 		this->JoyStickTwistY[0]=dbJoystickTwistY();

	call	?dbJoystickTwistY@@YAHXZ		; dbJoystickTwistY
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8044], eax

; 2832 : 		this->JoyStickTwistZ[0]=dbJoystickTwistZ();

	call	?dbJoystickTwistZ@@YAHXZ		; dbJoystickTwistZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8444], eax

; 2833 : 		this->JoyStickSliderA[0]=dbJoystickSliderA();

	call	?dbJoystickSliderA@@YAHXZ		; dbJoystickSliderA
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6044], eax

; 2834 : 		this->JoyStickSliderB[0]=dbJoystickSliderB();

	call	?dbJoystickSliderB@@YAHXZ		; dbJoystickSliderB
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6444], eax

; 2835 : 		this->JoyStickSliderC[0]=dbJoystickSliderC();

	call	?dbJoystickSliderC@@YAHXZ		; dbJoystickSliderC
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+6844], eax

; 2836 : 		this->JoyStickSliderD[0]=dbJoystickSliderD();

	call	?dbJoystickSliderD@@YAHXZ		; dbJoystickSliderD
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+7244], eax
$LN21@Update@3:

; 2837 : 	}
; 2838 : 
; 2839 : 	if(this->CurrentMouse!=NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8844], 0
	je	$LN2@Update@3

; 2840 : 		if(this->Bound||this->CurrentMouse->GetCursorName()!="")

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN1@Update@3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8844]
	call	?GetCursorName@MouseHandler@@QAEPADXZ	; MouseHandler::GetCursorName
	cmp	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	$LN2@Update@3
$LN1@Update@3:

; 2841 : 			this->CurrentMouse->MoveMouse(this->MouseSyncX*this->InputBound(this->MouseRight,this->PercentBindX)-this->MouseSyncX*this->InputBound(this->MouseLeft,this->PercentBindX),this->MouseSyncY*this->InputBound(this->MouseDown,this->PercentBindY)-this->MouseSyncY*this->InputBound(this->MouseUp,this->PercentBindY),0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+3212]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+3220]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InputBound@DeviceHandler@@QAEHHM@Z	; DeviceHandler::InputBound
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, eax
	imul	esi, DWORD PTR [ecx+3236]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+3212]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3240]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InputBound@DeviceHandler@@QAEHHM@Z	; DeviceHandler::InputBound
	mov	edx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [edx+3236]
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+3208]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+3228]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InputBound@DeviceHandler@@QAEHHM@Z	; DeviceHandler::InputBound
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, eax
	imul	esi, DWORD PTR [ecx+3232]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+3208]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+3224]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InputBound@DeviceHandler@@QAEHHM@Z	; DeviceHandler::InputBound
	mov	edx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [edx+3232]
	sub	esi, eax
	push	esi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8844]
	call	?MoveMouse@MouseHandler@@QAEXHHH@Z	; MouseHandler::MoveMouse
$LN2@Update@3:

; 2842 : 
; 2843 : 	return;
; 2844 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Update@DeviceHandler@@QAEXXZ ENDP			; DeviceHandler::Update
_TEXT	ENDS
END
