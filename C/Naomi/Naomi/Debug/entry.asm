; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\Users\The Science Guy\Documents\Visual Studio 2008\Projects\Naomi\Naomi\entry.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?setup@@YAXXZ					; setup
EXTRN	?fsysFatInitialize@@YAXXZ:PROC			; fsysFatInitialize
EXTRN	?flpydsk_install@@YAXH@Z:PROC			; flpydsk_install
EXTRN	?flpydsk_set_working_drive@@YAXE@Z:PROC		; flpydsk_set_working_drive
EXTRN	?enable_interrupts@@YAXXZ:PROC			; enable_interrupts
EXTRN	?vmmngr_initialize@@YAXXZ:PROC			; vmmngr_initialize
EXTRN	?install_interrupts@@YAXXZ:PROC			; install_interrupts
EXTRN	?kybrd_init@@YAXH@Z:PROC			; kybrd_init
EXTRN	?hal_initialize@@YAHXZ:PROC			; hal_initialize
EXTRN	?mmngr_stack_init@@YAXII@Z:PROC			; mmngr_stack_init
EXTRN	?pmmngr_deinit_region@@YAXII@Z:PROC		; pmmngr_deinit_region
EXTRN	?pmmngr_get_block_count@@YAIXZ:PROC		; pmmngr_get_block_count
EXTRN	?pmmngr_init_region@@YAXII@Z:PROC		; pmmngr_init_region
EXTRN	?pmmngr_init@@YAXII@Z:PROC			; pmmngr_init
EXTRN	?bootinfo@@3PAUmultiboot_info@@A:DWORD		; bootinfo
EXTRN	?kernelSize@@3IA:DWORD				; kernelSize
; Function compile flags: /Ogtpy
; File c:\users\the science guy\documents\visual studio 2008\projects\naomi\naomi\entry.cpp
;	COMDAT ?setup@@YAXXZ
_TEXT	SEGMENT
?setup@@YAXXZ PROC					; setup, COMDAT

; 57   : 	uint32_t memSize = 1024 + bootinfo->m_memoryLo + bootinfo->m_memoryHi*64;
; 58   : 
; 59   : 	// All data past the kernel is free to use
; 60   : 	pmmngr_init(memSize,0x100000 + kernelSize * 512);

	mov	eax, DWORD PTR ?kernelSize@@3IA		; kernelSize
	add	eax, 2048				; 00000800H
	shl	eax, 9
	push	esi
	push	eax
	mov	eax, DWORD PTR ?bootinfo@@3PAUmultiboot_info@@A ; bootinfo
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	shl	ecx, 6
	add	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?pmmngr_init@@YAXII@Z			; pmmngr_init
	add	esp, 8

; 61   : 
; 62   : 	memory_region* region = (memory_region*)0x1000;
; 63   : 
; 64   : 	for(int i = 0;region[i].startLo != 0 || i == 0;i++)

	mov	esi, 4112				; 00001010H
	npad	2
$LL6@setup:
	mov	ecx, DWORD PTR [esi-16]
	test	ecx, ecx
	jne	SHORT $LN3@setup
	cmp	esi, 4112				; 00001010H
	jne	SHORT $LN4@setup
$LN3@setup:

; 65   : 	{
; 66   : 		if(region[i].type > 4)

	mov	eax, DWORD PTR [esi]
	cmp	eax, 4
	jbe	SHORT $LN2@setup

; 67   : 			region[i].type = 1;

	mov	DWORD PTR [esi], 1

; 68   : 
; 69   : 		if(region[i].type == 1)

	jmp	SHORT $LN11@setup
$LN2@setup:
	cmp	eax, 1
	jne	SHORT $LN5@setup
$LN11@setup:

; 70   : 			pmmngr_init_region(region[i].startLo,region[i].sizeLo);

	mov	edx, DWORD PTR [esi-8]
	push	edx
	push	ecx
	call	?pmmngr_init_region@@YAXII@Z		; pmmngr_init_region
	add	esp, 8
$LN5@setup:

; 61   : 
; 62   : 	memory_region* region = (memory_region*)0x1000;
; 63   : 
; 64   : 	for(int i = 0;region[i].startLo != 0 || i == 0;i++)

	add	esi, 24					; 00000018H
	jmp	SHORT $LL6@setup
$LN4@setup:

; 71   : 	}
; 72   : 
; 73   : 	// Kernal location
; 74   : 	pmmngr_deinit_region(0x100000,kernelSize * 512 + pmmngr_get_block_count() / PMMNGR_BLOCKS_PER_BYTE);

	call	?pmmngr_get_block_count@@YAIXZ		; pmmngr_get_block_count
	mov	ecx, DWORD PTR ?kernelSize@@3IA		; kernelSize
	shr	eax, 3
	shl	ecx, 9
	add	eax, ecx
	push	eax
	push	1048576					; 00100000H
	call	?pmmngr_deinit_region@@YAXII@Z		; pmmngr_deinit_region

; 75   : 
; 76   : 	// c++ at exit runtime function pointers
; 77   : 	pmmngr_deinit_region(0x50000,sizeof(unsigned) * 32);

	push	128					; 00000080H
	push	327680					; 00050000H
	call	?pmmngr_deinit_region@@YAXII@Z		; pmmngr_deinit_region

; 78   : 	
; 79   : 	// Boot data retained in bootinfo
; 80   : 	pmmngr_deinit_region((physical_addr)bootinfo,sizeof(multiboot_info));

	mov	edx, DWORD PTR ?bootinfo@@3PAUmultiboot_info@@A ; bootinfo
	push	84					; 00000054H
	push	edx
	call	?pmmngr_deinit_region@@YAXII@Z		; pmmngr_deinit_region

; 81   : 	
; 82   : 	// Initialize DMA buffer here using deinit, not pmalloc()
; 83   : 	pmmngr_deinit_region((physical_addr)DMA_BUFFER,0x200);

	push	512					; 00000200H
	push	4096					; 00001000H
	call	?pmmngr_deinit_region@@YAXII@Z		; pmmngr_deinit_region

; 84   : 
; 85   : 	// Don't corrupt the stack
; 86   : 	mmngr_stack_init(0x90000,0x16000);

	push	90112					; 00016000H
	push	589824					; 00090000H
	call	?mmngr_stack_init@@YAXII@Z		; mmngr_stack_init

; 87   : 
; 88   : 	hal_initialize();

	call	?hal_initialize@@YAHXZ			; hal_initialize

; 89   : 	kybrd_init(0x21);

	push	33					; 00000021H
	call	?kybrd_init@@YAXH@Z			; kybrd_init

; 90   : 	install_interrupts();

	call	?install_interrupts@@YAXXZ		; install_interrupts

; 91   : 	vmmngr_initialize();

	call	?vmmngr_initialize@@YAXXZ		; vmmngr_initialize

; 92   : 	enable_interrupts();

	call	?enable_interrupts@@YAXXZ		; enable_interrupts

; 93   : 
; 94   : 	flpydsk_set_working_drive(0);

	push	0
	call	?flpydsk_set_working_drive@@YAXE@Z	; flpydsk_set_working_drive

; 95   : 	flpydsk_install(0x26);

	push	38					; 00000026H
	call	?flpydsk_install@@YAXH@Z		; flpydsk_install
	add	esp, 52					; 00000034H
	pop	esi

; 96   : 
; 97   : 	fsysFatInitialize();

	jmp	?fsysFatInitialize@@YAXXZ		; fsysFatInitialize
?setup@@YAXXZ ENDP					; setup
_TEXT	ENDS
PUBLIC	?kernel_entry@@YAXPAUmultiboot_info@@@Z		; kernel_entry
EXTRN	?Exit@@YAXXZ:PROC				; Exit
EXTRN	_main:PROC
EXTRN	?InitializeConstructors@@YAXXZ:PROC		; InitializeConstructors
; Function compile flags: /Ogtpy
;	COMDAT ?kernel_entry@@YAXPAUmultiboot_info@@@Z
_TEXT	SEGMENT
_mBootInfo$ = 8						; size = 4
?kernel_entry@@YAXPAUmultiboot_info@@@Z PROC		; kernel_entry, COMDAT

; 22   : #ifdef _MSC_VER
; 23   : 	_asm mov kernelSize,edx

	mov	DWORD PTR ?kernelSize@@3IA, edx		; kernelSize

; 24   : #endif
; 25   : 
; 26   : #ifdef ARCH_X86
; 27   : 	_asm
; 28   : 	{
; 29   : 		cli

	cli

; 30   : 		mov ax,10h

	mov	ax, 16					; 00000010H

; 31   : 		mov ds,ax

	mov	ds, ax

; 32   : 		mov es,ax

	mov	es, ax

; 33   : 		mov fs,ax

	mov	fs, ax

; 34   : 		mov gs,ax

	mov	gs, ax

; 35   : 	}
; 36   : #endif
; 37   : 
; 38   : 	bootinfo = mBootInfo;

	mov	eax, DWORD PTR _mBootInfo$[esp-4]
	mov	DWORD PTR ?bootinfo@@3PAUmultiboot_info@@A, eax ; bootinfo

; 39   : 
; 40   : 	setup();

	call	?setup@@YAXXZ				; setup

; 41   : 	InitializeConstructors();

	call	?InitializeConstructors@@YAXXZ		; InitializeConstructors

; 42   : 	main();

	call	_main

; 43   : 	Exit();

	call	?Exit@@YAXXZ				; Exit

; 44   : 
; 45   : 	// Add code here to turn the computer off.
; 46   : 
; 47   : #ifdef ARCH_X86
; 48   : 	_asm cli

	cli

; 49   : 	_asm hlt

	hlt

; 44   : 
; 45   : 	// Add code here to turn the computer off.
; 46   : 
; 47   : #ifdef ARCH_X86
; 48   : 	_asm cli

$LL2@kernel_ent:

; 50   : #endif
; 51   : 
; 52   : 	for(;;);

	jmp	SHORT $LL2@kernel_ent
?kernel_entry@@YAXPAUmultiboot_info@@@Z ENDP		; kernel_entry
_TEXT	ENDS
END
