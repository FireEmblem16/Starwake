; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	c:\Users\The Science Guy\Documents\Visual Studio 2008\Projects\Naomi\Naomi\exceptions.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0EG@MFHJDFFG@Divide?5by?50?5at?5physical?5address?5@ ; `string'
PUBLIC	?divide_by_zero_fault@@YAXIIII@Z		; divide_by_zero_fault
EXTRN	?kernel_panic@@YAXPBDZZ:PROC			; kernel_panic
;	COMDAT ??_C@_0EG@MFHJDFFG@Divide?5by?50?5at?5physical?5address?5@
; File c:\users\the science guy\documents\visual studio 2008\projects\naomi\naomi\exceptions.cpp
CONST	SEGMENT
??_C@_0EG@MFHJDFFG@Divide?5by?50?5at?5physical?5address?5@ DB 'Divide by '
	DB	'0 at physical address [0x%X:0x%X] EFLAGS [0x%X] other: 0x%X', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?divide_by_zero_fault@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
_other$ = 20						; size = 4
?divide_by_zero_fault@@YAXIIII@Z PROC			; divide_by_zero_fault, COMDAT

; 41   : {

	push	ebp
	mov	ebp, esp

; 42   : #ifdef _MSC_VER
; 43   : 	_asm
; 44   : 	{
; 45   : 		cli

	cli

; 46   : 		add esp,12

	add	esp, 12					; 0000000cH

; 47   : 		pushad

	pushad

; 48   : 	}
; 49   : #endif
; 50   : 
; 51   : 	kernel_panic("Divide by 0 at physical address [0x%X:0x%X] EFLAGS [0x%X] other: 0x%X",cs,eip,eflags,other);

	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR _eflags$[ebp]
	mov	edx, DWORD PTR _eip$[ebp]
	push	eax
	mov	eax, DWORD PTR _cs$[ebp]
	push	ecx
	push	edx
	push	eax
	push	OFFSET ??_C@_0EG@MFHJDFFG@Divide?5by?50?5at?5physical?5address?5@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 20					; 00000014H
$LL2@divide_by_:

; 52   : 	for(;;);

	jmp	SHORT $LL2@divide_by_
?divide_by_zero_fault@@YAXIIII@Z ENDP			; divide_by_zero_fault
_TEXT	ENDS
PUBLIC	??_C@_0DK@NNLOPLAA@Single?5step?5at?5physical?5address?5@ ; `string'
PUBLIC	?single_step_trap@@YAXIII@Z			; single_step_trap
;	COMDAT ??_C@_0DK@NNLOPLAA@Single?5step?5at?5physical?5address?5@
CONST	SEGMENT
??_C@_0DK@NNLOPLAA@Single?5step?5at?5physical?5address?5@ DB 'Single step'
	DB	' at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?single_step_trap@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?single_step_trap@@YAXIII@Z PROC			; single_step_trap, COMDAT

; 57   : {

	push	ebp
	mov	ebp, esp

; 58   : 	intstart();

	cli
	sub	ebp, 4

; 59   : 	kernel_panic("Single step at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DK@NNLOPLAA@Single?5step?5at?5physical?5address?5@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
$LL2@single_ste:

; 60   : 	for(;;);

	jmp	SHORT $LL2@single_ste
?single_step_trap@@YAXIII@Z ENDP			; single_step_trap
_TEXT	ENDS
PUBLIC	??_C@_0DH@PCFFHGLO@NMI?5trap?5at?5physical?5address?5?$FL0x@ ; `string'
PUBLIC	?nmi_trap@@YAXIII@Z				; nmi_trap
;	COMDAT ??_C@_0DH@PCFFHGLO@NMI?5trap?5at?5physical?5address?5?$FL0x@
CONST	SEGMENT
??_C@_0DH@PCFFHGLO@NMI?5trap?5at?5physical?5address?5?$FL0x@ DB 'NMI trap'
	DB	' at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?nmi_trap@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?nmi_trap@@YAXIII@Z PROC				; nmi_trap, COMDAT

; 65   : {

	push	ebp
	mov	ebp, esp

; 66   : 	intstart();

	cli
	sub	ebp, 4

; 67   : 	kernel_panic("NMI trap at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DH@PCFFHGLO@NMI?5trap?5at?5physical?5address?5?$FL0x@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
$LL2@nmi_trap:

; 68   : 	for(;;);

	jmp	SHORT $LL2@nmi_trap
?nmi_trap@@YAXIII@Z ENDP				; nmi_trap
_TEXT	ENDS
PUBLIC	??_C@_0DO@OKFLJCCN@Breakpoint?5trap?5at?5physical?5addr@ ; `string'
PUBLIC	?breakpoint_trap@@YAXIII@Z			; breakpoint_trap
;	COMDAT ??_C@_0DO@OKFLJCCN@Breakpoint?5trap?5at?5physical?5addr@
CONST	SEGMENT
??_C@_0DO@OKFLJCCN@Breakpoint?5trap?5at?5physical?5addr@ DB 'Breakpoint t'
	DB	'rap at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?breakpoint_trap@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?breakpoint_trap@@YAXIII@Z PROC				; breakpoint_trap, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp

; 74   : 	intstart();

	cli
	sub	ebp, 4

; 75   : 	kernel_panic("Breakpoint trap at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DO@OKFLJCCN@Breakpoint?5trap?5at?5physical?5addr@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
$LL2@breakpoint:

; 76   : 	for(;;);

	jmp	SHORT $LL2@breakpoint
?breakpoint_trap@@YAXIII@Z ENDP				; breakpoint_trap
_TEXT	ENDS
PUBLIC	??_C@_0DM@FDMPPIAP@Overflow?5trap?5at?5physical?5addres@ ; `string'
PUBLIC	?overflow_trap@@YAXIII@Z			; overflow_trap
;	COMDAT ??_C@_0DM@FDMPPIAP@Overflow?5trap?5at?5physical?5addres@
CONST	SEGMENT
??_C@_0DM@FDMPPIAP@Overflow?5trap?5at?5physical?5addres@ DB 'Overflow tra'
	DB	'p at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?overflow_trap@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?overflow_trap@@YAXIII@Z PROC				; overflow_trap, COMDAT

; 81   : {

	push	ebp
	mov	ebp, esp

; 82   : 	intstart();

	cli
	sub	ebp, 4

; 83   : 	kernel_panic("Overflow trap at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DM@FDMPPIAP@Overflow?5trap?5at?5physical?5addres@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
$LL2@overflow_t:

; 84   : 	for(;;);

	jmp	SHORT $LL2@overflow_t
?overflow_trap@@YAXIII@Z ENDP				; overflow_trap
_TEXT	ENDS
PUBLIC	??_C@_0EB@OLNFDFPI@Bounds?5check?5fault?5at?5physical?5a@ ; `string'
PUBLIC	?bounds_check_fault@@YAXIII@Z			; bounds_check_fault
;	COMDAT ??_C@_0EB@OLNFDFPI@Bounds?5check?5fault?5at?5physical?5a@
CONST	SEGMENT
??_C@_0EB@OLNFDFPI@Bounds?5check?5fault?5at?5physical?5a@ DB 'Bounds chec'
	DB	'k fault at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?bounds_check_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?bounds_check_fault@@YAXIII@Z PROC			; bounds_check_fault, COMDAT

; 89   : {

	push	ebp
	mov	ebp, esp

; 90   : 	intstart();

	cli
	sub	ebp, 4

; 91   : 	kernel_panic("Bounds check fault at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0EB@OLNFDFPI@Bounds?5check?5fault?5at?5physical?5a@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
$LL2@bounds_che:

; 92   : 	for(;;);

	jmp	SHORT $LL2@bounds_che
?bounds_check_fault@@YAXIII@Z ENDP			; bounds_check_fault
_TEXT	ENDS
PUBLIC	??_C@_0DN@MCOLLKMN@Invalid?5opcode?5at?5physical?5addre@ ; `string'
PUBLIC	?invalid_opcode_fault@@YAXIII@Z			; invalid_opcode_fault
;	COMDAT ??_C@_0DN@MCOLLKMN@Invalid?5opcode?5at?5physical?5addre@
CONST	SEGMENT
??_C@_0DN@MCOLLKMN@Invalid?5opcode?5at?5physical?5addre@ DB 'Invalid opco'
	DB	'de at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?invalid_opcode_fault@@YAXIII@Z
_TEXT	SEGMENT
_eflags$ = 8						; size = 4
_cs$ = 12						; size = 4
_eip$ = 16						; size = 4
?invalid_opcode_fault@@YAXIII@Z PROC			; invalid_opcode_fault, COMDAT

; 97   : {

	push	ebp
	mov	ebp, esp

; 98   : 	intstart();

	cli
	sub	ebp, 4

; 99   : 	kernel_panic("Invalid opcode at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DN@MCOLLKMN@Invalid?5opcode?5at?5physical?5addre@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
$LL2@invalid_op:

; 100  : 	for(;;);

	jmp	SHORT $LL2@invalid_op
?invalid_opcode_fault@@YAXIII@Z ENDP			; invalid_opcode_fault
_TEXT	ENDS
PUBLIC	??_C@_0EF@DMLFLGBN@Device?5not?5found?5fault?5at?5physic@ ; `string'
PUBLIC	?no_device_fault@@YAXIII@Z			; no_device_fault
;	COMDAT ??_C@_0EF@DMLFLGBN@Device?5not?5found?5fault?5at?5physic@
CONST	SEGMENT
??_C@_0EF@DMLFLGBN@Device?5not?5found?5fault?5at?5physic@ DB 'Device not '
	DB	'found fault at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?no_device_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?no_device_fault@@YAXIII@Z PROC				; no_device_fault, COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp

; 106  : 	intstart();

	cli
	sub	ebp, 4

; 107  : 	kernel_panic("Device not found fault at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0EF@DMLFLGBN@Device?5not?5found?5fault?5at?5physic@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
$LL2@no_device_:

; 108  : 	for(;;);

	jmp	SHORT $LL2@no_device_
?no_device_fault@@YAXIII@Z ENDP				; no_device_fault
_TEXT	ENDS
PUBLIC	??_C@_0DL@IHNEGKPP@Double?5fault?5at?5physical?5address@ ; `string'
PUBLIC	?double_fault_abort@@YAXIIII@Z			; double_fault_abort
;	COMDAT ??_C@_0DL@IHNEGKPP@Double?5fault?5at?5physical?5address@
CONST	SEGMENT
??_C@_0DL@IHNEGKPP@Double?5fault?5at?5physical?5address@ DB 'Double fault'
	DB	' at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?double_fault_abort@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
_err$ = 20						; size = 4
?double_fault_abort@@YAXIIII@Z PROC			; double_fault_abort, COMDAT

; 113  : {

	push	ebp
	mov	ebp, esp

; 114  : 	intstart();

	cli
	sub	ebp, 4

; 115  : 	kernel_panic("Double fault at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DL@IHNEGKPP@Double?5fault?5at?5physical?5address@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
$LL2@double_fau:

; 116  : 	for(;;);

	jmp	SHORT $LL2@double_fau
?double_fault_abort@@YAXIIII@Z ENDP			; double_fault_abort
_TEXT	ENDS
PUBLIC	??_C@_0DK@DJGCMEGH@Invalid?5TSS?5at?5physical?5address?5@ ; `string'
PUBLIC	?invalid_tss_fault@@YAXIIII@Z			; invalid_tss_fault
;	COMDAT ??_C@_0DK@DJGCMEGH@Invalid?5TSS?5at?5physical?5address?5@
CONST	SEGMENT
??_C@_0DK@DJGCMEGH@Invalid?5TSS?5at?5physical?5address?5@ DB 'Invalid TSS'
	DB	' at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?invalid_tss_fault@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
_err$ = 20						; size = 4
?invalid_tss_fault@@YAXIIII@Z PROC			; invalid_tss_fault, COMDAT

; 121  : {

	push	ebp
	mov	ebp, esp

; 122  : 	intstart();

	cli
	sub	ebp, 4

; 123  : 	kernel_panic("Invalid TSS at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DK@DJGCMEGH@Invalid?5TSS?5at?5physical?5address?5@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
$LL2@invalid_ts:

; 124  : 	for(;;);

	jmp	SHORT $LL2@invalid_ts
?invalid_tss_fault@@YAXIIII@Z ENDP			; invalid_tss_fault
_TEXT	ENDS
PUBLIC	??_C@_0DO@JMGNDODG@Invalid?5segment?5at?5physical?5addr@ ; `string'
PUBLIC	?no_segment_fault@@YAXIIII@Z			; no_segment_fault
;	COMDAT ??_C@_0DO@JMGNDODG@Invalid?5segment?5at?5physical?5addr@
CONST	SEGMENT
??_C@_0DO@JMGNDODG@Invalid?5segment?5at?5physical?5addr@ DB 'Invalid segm'
	DB	'ent at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?no_segment_fault@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
_err$ = 20						; size = 4
?no_segment_fault@@YAXIIII@Z PROC			; no_segment_fault, COMDAT

; 129  : {

	push	ebp
	mov	ebp, esp

; 130  : 	intstart();

	cli
	sub	ebp, 4

; 131  : 	kernel_panic("Invalid segment at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DO@JMGNDODG@Invalid?5segment?5at?5physical?5addr@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
$LL2@no_segment:

; 132  : 	for(;;);

	jmp	SHORT $LL2@no_segment
?no_segment_fault@@YAXIIII@Z ENDP			; no_segment_fault
_TEXT	ENDS
PUBLIC	??_C@_0DK@DBOFNHLG@Stack?5fault?5at?5physical?5address?5@ ; `string'
PUBLIC	?stack_fault@@YAXIIII@Z				; stack_fault
;	COMDAT ??_C@_0DK@DBOFNHLG@Stack?5fault?5at?5physical?5address?5@
CONST	SEGMENT
??_C@_0DK@DBOFNHLG@Stack?5fault?5at?5physical?5address?5@ DB 'Stack fault'
	DB	' at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?stack_fault@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
_err$ = 20						; size = 4
?stack_fault@@YAXIIII@Z PROC				; stack_fault, COMDAT

; 137  : {

	push	ebp
	mov	ebp, esp

; 138  : 	intstart();

	cli
	sub	ebp, 4

; 139  : 	kernel_panic("Stack fault at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DK@DBOFNHLG@Stack?5fault?5at?5physical?5address?5@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
$LL2@stack_faul:

; 140  : 	for(;;);

	jmp	SHORT $LL2@stack_faul
?stack_fault@@YAXIIII@Z ENDP				; stack_fault
_TEXT	ENDS
PUBLIC	??_C@_0EH@PDMMFNLO@General?5Protection?5Fault?5at?5phys@ ; `string'
PUBLIC	?general_protection_fault@@YAXIIII@Z		; general_protection_fault
;	COMDAT ??_C@_0EH@PDMMFNLO@General?5Protection?5Fault?5at?5phys@
CONST	SEGMENT
??_C@_0EH@PDMMFNLO@General?5Protection?5Fault?5at?5phys@ DB 'General Prot'
	DB	'ection Fault at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?general_protection_fault@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
_err$ = 20						; size = 4
?general_protection_fault@@YAXIIII@Z PROC		; general_protection_fault, COMDAT

; 145  : {

	push	ebp
	mov	ebp, esp

; 146  : 	intstart();

	cli
	sub	ebp, 4

; 147  : 	kernel_panic("General Protection Fault at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0EH@PDMMFNLO@General?5Protection?5Fault?5at?5phys@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
$LL2@general_pr:

; 148  : 	for(;;);

	jmp	SHORT $LL2@general_pr
?general_protection_fault@@YAXIIII@Z ENDP		; general_protection_fault
_TEXT	ENDS
PUBLIC	??_C@_0DB@PONJOGOC@Page?5Fault?5at?50x?$CFX?30x?$CFX?5refrence@ ; `string'
PUBLIC	?page_fault@@YAXIIII@Z				; page_fault
;	COMDAT ??_C@_0DB@PONJOGOC@Page?5Fault?5at?50x?$CFX?30x?$CFX?5refrence@
CONST	SEGMENT
??_C@_0DB@PONJOGOC@Page?5Fault?5at?50x?$CFX?30x?$CFX?5refrence@ DB 'Page '
	DB	'Fault at 0x%X:0x%X refrenced memory at 0x%X', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?page_fault@@YAXIIII@Z
_TEXT	SEGMENT
_faultAddr$ = -4					; size = 4
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
_err$ = 20						; size = 4
?page_fault@@YAXIIII@Z PROC				; page_fault, COMDAT

; 153  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 154  : 	intstart();

	cli
	sub	ebp, 4

; 155  : 
; 156  : 	int faultAddr = 0;

	mov	DWORD PTR _faultAddr$[ebp], 0

; 157  : 
; 158  : 	_asm
; 159  : 	{
; 160  : 		mov eax,cr2

	mov	eax, cr2

; 161  : 		mov [faultAddr],eax

	mov	DWORD PTR _faultAddr$[ebp], eax

; 162  : 	}
; 163  : 	kernel_panic("Page Fault at 0x%X:0x%X refrenced memory at 0x%X",cs,eip,faultAddr);

	mov	eax, DWORD PTR _faultAddr$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DB@PONJOGOC@Page?5Fault?5at?50x?$CFX?30x?$CFX?5refrence@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
	npad	2
$LL2@page_fault:

; 164  : 	
; 165  : 	for(;;);

	jmp	SHORT $LL2@page_fault
?page_fault@@YAXIIII@Z ENDP				; page_fault
_TEXT	ENDS
PUBLIC	??_C@_0DI@BALFMJBD@FPU?5Fault?5at?5physical?5address?5?$FL0@ ; `string'
PUBLIC	?fpu_fault@@YAXIII@Z				; fpu_fault
;	COMDAT ??_C@_0DI@BALFMJBD@FPU?5Fault?5at?5physical?5address?5?$FL0@
CONST	SEGMENT
??_C@_0DI@BALFMJBD@FPU?5Fault?5at?5physical?5address?5?$FL0@ DB 'FPU Faul'
	DB	't at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?fpu_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?fpu_fault@@YAXIII@Z PROC				; fpu_fault, COMDAT

; 171  : 	intstart();

	cli
	sub	ebp, 4

; 172  : 	kernel_panic("FPU Fault at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DI@BALFMJBD@FPU?5Fault?5at?5physical?5address?5?$FL0@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
	npad	3
$LL2@fpu_fault:

; 173  : 	for(;;);

	jmp	SHORT $LL2@fpu_fault
?fpu_fault@@YAXIII@Z ENDP				; fpu_fault
_TEXT	ENDS
PUBLIC	??_C@_0DO@EGNGNAGP@Alignment?5Check?5at?5physical?5addr@ ; `string'
PUBLIC	?alignment_check_fault@@YAXIIII@Z		; alignment_check_fault
;	COMDAT ??_C@_0DO@EGNGNAGP@Alignment?5Check?5at?5physical?5addr@
CONST	SEGMENT
??_C@_0DO@EGNGNAGP@Alignment?5Check?5at?5physical?5addr@ DB 'Alignment Ch'
	DB	'eck at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?alignment_check_fault@@YAXIIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
_err$ = 20						; size = 4
?alignment_check_fault@@YAXIIII@Z PROC			; alignment_check_fault, COMDAT

; 179  : 	intstart();

	cli
	sub	ebp, 4

; 180  : 	kernel_panic("Alignment Check at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DO@EGNGNAGP@Alignment?5Check?5at?5physical?5addr@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
	npad	3
$LL2@alignment_:

; 181  : 	for(;;);

	jmp	SHORT $LL2@alignment_
?alignment_check_fault@@YAXIIII@Z ENDP			; alignment_check_fault
_TEXT	ENDS
PUBLIC	??_C@_0DM@HENBNPFI@Machine?5Check?5at?5physical?5addres@ ; `string'
PUBLIC	?machine_check_abort@@YAXIII@Z			; machine_check_abort
;	COMDAT ??_C@_0DM@HENBNPFI@Machine?5Check?5at?5physical?5addres@
CONST	SEGMENT
??_C@_0DM@HENBNPFI@Machine?5Check?5at?5physical?5addres@ DB 'Machine Chec'
	DB	'k at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?machine_check_abort@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?machine_check_abort@@YAXIII@Z PROC			; machine_check_abort, COMDAT

; 187  : 	intstart();

	cli
	sub	ebp, 4

; 188  : 	kernel_panic("Machine Check at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DM@HENBNPFI@Machine?5Check?5at?5physical?5addres@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
	npad	3
$LL2@machine_ch:

; 189  : 	for(;;);

	jmp	SHORT $LL2@machine_ch
?machine_check_abort@@YAXIII@Z ENDP			; machine_check_abort
_TEXT	ENDS
PUBLIC	??_C@_0DN@HPKAOOKJ@FPU?5SIMD?5fault?5at?5physical?5addre@ ; `string'
PUBLIC	?simd_fpu_fault@@YAXIII@Z			; simd_fpu_fault
;	COMDAT ??_C@_0DN@HPKAOOKJ@FPU?5SIMD?5fault?5at?5physical?5addre@
CONST	SEGMENT
??_C@_0DN@HPKAOOKJ@FPU?5SIMD?5fault?5at?5physical?5addre@ DB 'FPU SIMD fa'
	DB	'ult at physical address [0x%X:0x%X] EFLAGS [0x%X]', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?simd_fpu_fault@@YAXIII@Z
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?simd_fpu_fault@@YAXIII@Z PROC				; simd_fpu_fault, COMDAT

; 195  : 	intstart();

	cli
	sub	ebp, 4

; 196  : 	kernel_panic("FPU SIMD fault at physical address [0x%X:0x%X] EFLAGS [0x%X]",cs,eip,eflags);

	mov	eax, DWORD PTR _eflags$[ebp]
	mov	ecx, DWORD PTR _eip$[ebp]
	mov	edx, DWORD PTR _cs$[ebp]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0DN@HPKAOOKJ@FPU?5SIMD?5fault?5at?5physical?5addre@
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 16					; 00000010H
	npad	3
$LL2@simd_fpu_f:

; 197  : 	for(;;);

	jmp	SHORT $LL2@simd_fpu_f
?simd_fpu_fault@@YAXIII@Z ENDP				; simd_fpu_fault
_TEXT	ENDS
PUBLIC	?install_interrupts@@YAXXZ			; install_interrupts
EXTRN	?setvect@@YAXHA6AXXZ@Z:PROC			; setvect
; Function compile flags: /Ogtpy
;	COMDAT ?install_interrupts@@YAXXZ
_TEXT	SEGMENT
?install_interrupts@@YAXXZ PROC				; install_interrupts, COMDAT

; 18   : 	setvect(0,(void(__cdecl&)(void))divide_by_zero_fault);

	push	OFFSET ?divide_by_zero_fault@@YAXIIII@Z	; divide_by_zero_fault
	push	0
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 19   : 	setvect(1,(void(__cdecl&)(void))single_step_trap);

	push	OFFSET ?single_step_trap@@YAXIII@Z	; single_step_trap
	push	1
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 20   : 	setvect(2,(void(__cdecl&)(void))nmi_trap);

	push	OFFSET ?nmi_trap@@YAXIII@Z		; nmi_trap
	push	2
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 21   : 	setvect(3,(void(__cdecl&)(void))breakpoint_trap);

	push	OFFSET ?breakpoint_trap@@YAXIII@Z	; breakpoint_trap
	push	3
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 22   : 	setvect(4,(void(__cdecl&)(void))overflow_trap);

	push	OFFSET ?overflow_trap@@YAXIII@Z		; overflow_trap
	push	4
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 23   : 	setvect(5,(void(__cdecl&)(void))bounds_check_fault);

	push	OFFSET ?bounds_check_fault@@YAXIII@Z	; bounds_check_fault
	push	5
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 24   : 	setvect(6,(void(__cdecl&)(void))invalid_opcode_fault);

	push	OFFSET ?invalid_opcode_fault@@YAXIII@Z	; invalid_opcode_fault
	push	6
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 25   : 	setvect(7,(void(__cdecl&)(void))no_device_fault);

	push	OFFSET ?no_device_fault@@YAXIII@Z	; no_device_fault
	push	7
	call	?setvect@@YAXHA6AXXZ@Z			; setvect
	add	esp, 64					; 00000040H

; 26   : 	setvect(8,(void(__cdecl&)(void))double_fault_abort);

	push	OFFSET ?double_fault_abort@@YAXIIII@Z	; double_fault_abort
	push	8
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 27   : 	setvect(10,(void(__cdecl&)(void))invalid_tss_fault);

	push	OFFSET ?invalid_tss_fault@@YAXIIII@Z	; invalid_tss_fault
	push	10					; 0000000aH
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 28   : 	setvect(11,(void(__cdecl&)(void))no_segment_fault);

	push	OFFSET ?no_segment_fault@@YAXIIII@Z	; no_segment_fault
	push	11					; 0000000bH
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 29   : 	setvect(12,(void(__cdecl&)(void))stack_fault);

	push	OFFSET ?stack_fault@@YAXIIII@Z		; stack_fault
	push	12					; 0000000cH
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 30   : 	setvect(13,(void(__cdecl&)(void))general_protection_fault);

	push	OFFSET ?general_protection_fault@@YAXIIII@Z ; general_protection_fault
	push	13					; 0000000dH
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 31   : 	setvect(14,(void(__cdecl&)(void))page_fault);

	push	OFFSET ?page_fault@@YAXIIII@Z		; page_fault
	push	14					; 0000000eH
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 32   : 	setvect(16,(void(__cdecl&)(void))fpu_fault);

	push	OFFSET ?fpu_fault@@YAXIII@Z		; fpu_fault
	push	16					; 00000010H
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 33   : 	setvect(17,(void(__cdecl&)(void))alignment_check_fault);

	push	OFFSET ?alignment_check_fault@@YAXIIII@Z ; alignment_check_fault
	push	17					; 00000011H
	call	?setvect@@YAXHA6AXXZ@Z			; setvect
	add	esp, 64					; 00000040H

; 34   : 	setvect(18,(void(__cdecl&)(void))machine_check_abort);

	push	OFFSET ?machine_check_abort@@YAXIII@Z	; machine_check_abort
	push	18					; 00000012H
	call	?setvect@@YAXHA6AXXZ@Z			; setvect

; 35   : 	setvect(19,(void(__cdecl&)(void))simd_fpu_fault);

	push	OFFSET ?simd_fpu_fault@@YAXIII@Z	; simd_fpu_fault
	push	19					; 00000013H
	call	?setvect@@YAXHA6AXXZ@Z			; setvect
	add	esp, 16					; 00000010H

; 36   : 
; 37   : 	return;
; 38   : }

	ret	0
?install_interrupts@@YAXXZ ENDP				; install_interrupts
_TEXT	ENDS
END
